{"version":3,"file":"index.js","mappings":"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","sources":["webpack://cornerstoneStreamingImageVolumeLoader/webpack/universalModuleDefinition","webpack://cornerstoneStreamingImageVolumeLoader/external umd {\"root\":\"cornerstone3D\",\"commonjs\":\"@cornerstonejs/core\",\"commonjs2\":\"@cornerstonejs/core\",\"amd\":\"@cornerstonejs/core\"}","webpack://cornerstoneStreamingImageVolumeLoader/external umd {\"root\":\"window\",\"commonjs\":\"gl-matrix\",\"commonjs2\":\"gl-matrix\",\"amd\":\"gl-matrix\"}","webpack://cornerstoneStreamingImageVolumeLoader/webpack/bootstrap","webpack://cornerstoneStreamingImageVolumeLoader/webpack/runtime/define property getters","webpack://cornerstoneStreamingImageVolumeLoader/webpack/runtime/hasOwnProperty shorthand","webpack://cornerstoneStreamingImageVolumeLoader/webpack/runtime/make namespace object","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/makeVolumeMetadata.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/sortImageIdsAndGetSpacing.ts","webpack://cornerstoneStreamingImageVolumeLoader/../../node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://cornerstoneStreamingImageVolumeLoader/../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://cornerstoneStreamingImageVolumeLoader/../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://cornerstoneStreamingImageVolumeLoader/../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/autoLoad.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/scaleArray.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/BaseStreamingImageVolume.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/StreamingImageVolume.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/cornerstoneStreamingImageVolumeLoader.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/splitImageIdsBy4DTags.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/getVolumeInfo.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/enums/Events.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/StreamingDynamicImageVolume.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/cornerstoneStreamingDynamicImageVolumeLoader.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/index.ts","webpack://cornerstoneStreamingImageVolumeLoader/./src/helpers/getDynamicVolumeInfo.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"@cornerstonejs/core\"), require(\"gl-matrix\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"@cornerstonejs/core\", \"gl-matrix\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cornerstoneStreamingImageVolumeLoader\"] = factory(require(\"@cornerstonejs/core\"), require(\"gl-matrix\"));\n\telse\n\t\troot[\"cornerstoneStreamingImageVolumeLoader\"] = factory(root[\"cornerstone3D\"], root[\"window\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__953__, __WEBPACK_EXTERNAL_MODULE__976__) => {\nreturn ","module.exports = __WEBPACK_EXTERNAL_MODULE__953__;","module.exports = __WEBPACK_EXTERNAL_MODULE__976__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { metaData } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * It creates a metadata object for a volume given the imageIds that compose it.\n * It uses the first imageId to get the metadata.\n *\n * @param imageIds - array of imageIds\n * @returns The volume metadata\n */\nexport default function makeVolumeMetadata(\n  imageIds: Array<string>\n): Types.Metadata {\n  const imageId0 = imageIds[0];\n\n  const {\n    pixelRepresentation,\n    bitsAllocated,\n    bitsStored,\n    highBit,\n    photometricInterpretation,\n    samplesPerPixel,\n  } = metaData.get('imagePixelModule', imageId0);\n\n  // Add list of VOIs stored on the DICOM.\n  const voiLut = [];\n\n  const voiLutModule = metaData.get('voiLutModule', imageId0);\n\n  // voiLutModule is not always present\n  let voiLUTFunction;\n  if (voiLutModule) {\n    const { windowWidth, windowCenter } = voiLutModule;\n    voiLUTFunction = voiLutModule?.voiLUTFunction;\n\n    if (Array.isArray(windowWidth)) {\n      for (let i = 0; i < windowWidth.length; i++) {\n        voiLut.push({\n          windowWidth: windowWidth[i],\n          windowCenter: windowCenter[i],\n        });\n      }\n    } else {\n      voiLut.push({\n        windowWidth: windowWidth,\n        windowCenter: windowCenter,\n      });\n    }\n  } else {\n    voiLut.push({\n      windowWidth: undefined,\n      windowCenter: undefined,\n    });\n  }\n\n  const { modality, seriesInstanceUID } = metaData.get(\n    'generalSeriesModule',\n    imageId0\n  );\n\n  const {\n    imageOrientationPatient,\n    pixelSpacing,\n    frameOfReferenceUID,\n    columns,\n    rows,\n  } = metaData.get('imagePlaneModule', imageId0);\n\n  // Map to dcmjs-style keywords. This is becoming the standard and makes it\n  // Easier to swap out cornerstoneDICOMImageLoader at a later date.\n  return {\n    BitsAllocated: bitsAllocated,\n    BitsStored: bitsStored,\n    SamplesPerPixel: samplesPerPixel,\n    HighBit: highBit,\n    PhotometricInterpretation: photometricInterpretation,\n    PixelRepresentation: pixelRepresentation,\n    Modality: modality,\n    ImageOrientationPatient: imageOrientationPatient,\n    PixelSpacing: pixelSpacing,\n    FrameOfReferenceUID: frameOfReferenceUID,\n    Columns: columns,\n    Rows: rows,\n    // This is a reshaped object and not a dicom tag:\n    voiLut,\n    VOILUTFunction: voiLUTFunction,\n    SeriesInstanceUID: seriesInstanceUID,\n  };\n}\n","import { vec3 } from 'gl-matrix';\nimport { metaData, getConfiguration } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\ntype SortedImageIdsItem = {\n  zSpacing: number;\n  origin: Types.Point3;\n  sortedImageIds: Array<string>;\n};\n/**\n * Given an array of imageIds, sort them based on their imagePositionPatient, and\n * also returns the spacing between images and the origin of the reference image\n *\n * @param imageIds - array of imageIds\n * @param scanAxisNormal - [x, y, z] array or gl-matrix vec3\n *\n * @returns The sortedImageIds, zSpacing, and origin of the first image in the series.\n */\nexport default function sortImageIdsAndGetSpacing(\n  imageIds: Array<string>,\n  scanAxisNormal: vec3 // Get gl matrix types?\n): SortedImageIdsItem {\n  const { imagePositionPatient: referenceImagePositionPatient } = metaData.get(\n    'imagePlaneModule',\n    imageIds[0]\n  );\n\n  const refIppVec = vec3.create();\n\n  // Check if we are using wadouri scheme\n  const usingWadoUri = imageIds[0].split(':')[0] === 'wadouri';\n\n  vec3.set(\n    refIppVec,\n    referenceImagePositionPatient[0],\n    referenceImagePositionPatient[1],\n    referenceImagePositionPatient[2]\n  );\n\n  let sortedImageIds: string[];\n  let zSpacing: number;\n\n  function getDistance(imageId: string) {\n    const { imagePositionPatient } = metaData.get('imagePlaneModule', imageId);\n\n    const positionVector = vec3.create();\n\n    vec3.sub(\n      positionVector,\n      referenceImagePositionPatient,\n      imagePositionPatient\n    );\n\n    return vec3.dot(positionVector, scanAxisNormal);\n  }\n\n  /**\n   * If we are using wadors and so have all image metadata cached ahead of time,\n   * then sort by image position in 3D space, and calculate average slice\n   * spacing from the entire volume. If not, then use the sampled images (1st\n   * and middle) to calculate slice spacing, and use the provided imageId order.\n   * Correct sorting must be done ahead of time.\n   */\n  if (!usingWadoUri) {\n    const distanceImagePairs = imageIds.map((imageId) => {\n      const distance = getDistance(imageId);\n\n      return {\n        distance,\n        imageId,\n      };\n    });\n\n    distanceImagePairs.sort((a, b) => b.distance - a.distance);\n\n    sortedImageIds = distanceImagePairs.map((a) => a.imageId);\n    const numImages = distanceImagePairs.length;\n\n    // Calculated average spacing.\n    // We would need to resample if these are not similar.\n    // It should be up to the host app to do this if it needed to.\n    zSpacing =\n      Math.abs(\n        distanceImagePairs[numImages - 1].distance -\n          distanceImagePairs[0].distance\n      ) /\n      (numImages - 1);\n  } else {\n    // Using wadouri, so we have only prefetched the first, middle, and last\n    // images for metadata. Assume initial imageId array order is pre-sorted,\n    // but check orientation.\n    const prefetchedImageIds = [\n      imageIds[0],\n      imageIds[Math.floor(imageIds.length / 2)],\n    ];\n    sortedImageIds = imageIds;\n    const firstImageDistance = getDistance(prefetchedImageIds[0]);\n    const middleImageDistance = getDistance(prefetchedImageIds[1]);\n    if (firstImageDistance - middleImageDistance < 0) {\n      sortedImageIds.reverse();\n    }\n\n    // Calculate average spacing between the first and middle prefetched images,\n    // otherwise fall back to DICOM `spacingBetweenSlices`\n    const metadataForMiddleImage = metaData.get(\n      'imagePlaneModule',\n      prefetchedImageIds[1]\n    );\n    if (!metadataForMiddleImage) {\n      throw new Error('Incomplete metadata required for volume construction.');\n    }\n\n    const positionVector = vec3.create();\n\n    vec3.sub(\n      positionVector,\n      referenceImagePositionPatient,\n      metadataForMiddleImage.imagePositionPatient\n    );\n    const distanceBetweenFirstAndMiddleImages = vec3.dot(\n      positionVector,\n      scanAxisNormal\n    );\n    zSpacing =\n      Math.abs(distanceBetweenFirstAndMiddleImages) /\n      Math.floor(imageIds.length / 2);\n  }\n\n  const { imagePositionPatient: origin, sliceThickness } = metaData.get(\n    'imagePlaneModule',\n    sortedImageIds[0]\n  );\n\n  const { strictZSpacingForVolumeViewport } = getConfiguration().rendering;\n\n  // We implemented these lines for multiframe dicom files that does not have\n  // position for each frame, leading to incorrect calculation of zSpacing = 0\n  // If possible, we use the sliceThickness, but we warn about this dicom file\n  // weirdness. If sliceThickness is not available, we set to 1 just to render\n  if (zSpacing === 0 && !strictZSpacingForVolumeViewport) {\n    if (sliceThickness) {\n      console.log('Could not calculate zSpacing. Using sliceThickness');\n      zSpacing = sliceThickness;\n    } else {\n      console.log(\n        'Could not calculate zSpacing. The VolumeViewport visualization is compromised. Setting zSpacing to 1 to render'\n      );\n      zSpacing = 1;\n    }\n  }\n  const result: SortedImageIdsItem = {\n    zSpacing,\n    origin,\n    sortedImageIds,\n  };\n\n  return result;\n}\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import { getRenderingEngines, utilities } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n//import type { Types } from '@cornerstonejs/core'\n\ntype RenderingEngineAndViewportIds = {\n  renderingEngine: Types.IRenderingEngine | undefined; //Types.IRenderingEngine | undefined\n  viewportIds: Array<string>;\n};\n\n/**\n * Given a volumeId, it finds the viewports and renderingEngines that\n * include that volume, and triggers a render if renderingEngine is available.\n *\n * @param volumeId - The Id of the volume\n */\nconst autoLoad = (volumeId: string): void => {\n  const renderingEngineAndViewportIds =\n    getRenderingEngineAndViewportsContainingVolume(volumeId);\n\n  if (!renderingEngineAndViewportIds || !renderingEngineAndViewportIds.length) {\n    return;\n  }\n\n  renderingEngineAndViewportIds.forEach(({ renderingEngine, viewportIds }) => {\n    if (!renderingEngine.hasBeenDestroyed) {\n      renderingEngine.renderViewports(viewportIds);\n    }\n  });\n};\n\nfunction getRenderingEngineAndViewportsContainingVolume(\n  volumeId: string\n): Array<RenderingEngineAndViewportIds> {\n  const renderingEnginesArray = getRenderingEngines();\n\n  const renderingEngineAndViewportIds = [];\n\n  for (let i = 0; i < renderingEnginesArray.length; i++) {\n    const renderingEngine = renderingEnginesArray[i];\n    const viewports = utilities.getViewportsWithVolumeId(\n      volumeId,\n      renderingEngine.id\n    );\n\n    if (viewports.length) {\n      renderingEngineAndViewportIds.push({\n        renderingEngine,\n        viewportIds: viewports.map((viewport) => viewport.id),\n      });\n    }\n  }\n\n  return renderingEngineAndViewportIds;\n}\n\nexport default autoLoad;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Given a pixel array, rescale the pixel values using the rescale slope and\n * intercept and if modality is PT it uses the suv values to scale the array\n * @param array - The array to be scaled.\n * @param scalingParameters - The scaling parameters\n * @returns The array is being scaled\n */\nexport default function scaleArray(\n  array: Float32Array | Uint8Array | Uint16Array | Int16Array,\n  scalingParameters: Types.ScalingParameters\n): Float32Array | Uint8Array | Uint16Array | Int16Array {\n  const arrayLength = array.length;\n  const { rescaleSlope, rescaleIntercept, suvbw } = scalingParameters;\n\n  if (scalingParameters.modality === 'PT' && typeof suvbw === 'number') {\n    for (let i = 0; i < arrayLength; i++) {\n      array[i] = suvbw * (array[i] * rescaleSlope + rescaleIntercept);\n    }\n  } else {\n    for (let i = 0; i < arrayLength; i++) {\n      array[i] = array[i] * rescaleSlope + rescaleIntercept;\n    }\n  }\n\n  return array;\n}\n","import {\n  Enums,\n  eventTarget,\n  metaData,\n  imageLoadPoolManager,\n  triggerEvent,\n  ImageVolume,\n  cache,\n  imageLoader,\n  utilities as csUtils,\n  utilities,\n  ProgressiveRetrieveImages,\n} from '@cornerstonejs/core';\nimport type {\n  Types,\n  IImagesLoader,\n  ImageLoadListener,\n} from '@cornerstonejs/core';\n\nimport { scaleArray, autoLoad } from './helpers';\n\nconst requestTypeDefault = Enums.RequestType.Prefetch;\nconst { getMinMax, ProgressiveIterator } = csUtils;\nconst { ImageQualityStatus } = Enums;\nconst { imageRetrieveMetadataProvider } = utilities;\n\n/**\n * Streaming Image Volume Class that extends ImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n *\n */\nexport default class BaseStreamingImageVolume\n  extends ImageVolume\n  implements IImagesLoader\n{\n  private framesLoaded = 0;\n  private framesProcessed = 0;\n  private framesUpdated = 0;\n  protected numFrames: number;\n  protected totalNumFrames: number;\n  protected cornerstoneImageMetaData = null;\n  protected autoRenderOnLoad = true;\n  protected cachedFrames = [];\n  protected reRenderTarget = 0;\n  protected reRenderFraction = 2;\n\n  loadStatus: {\n    loaded: boolean;\n    loading: boolean;\n    cancelled: boolean;\n    callbacks: Array<(...args: unknown[]) => void>;\n  };\n  imagesLoader: IImagesLoader = this;\n\n  constructor(\n    imageVolumeProperties: Types.IVolume,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    super(imageVolumeProperties);\n    this.imageIds = streamingProperties.imageIds;\n    this.loadStatus = streamingProperties.loadStatus;\n    this.numFrames = this._getNumFrames();\n    this._createCornerstoneImageMetaData();\n  }\n\n  /**\n   * Returns the number of frames stored in a scalarData object. The number of\n   * frames is equal to the number of images for 3D volumes or the number of\n   * frames per time poins for 4D volumes.\n   * @returns number of frames per volume\n   */\n  private _getNumFrames(): number {\n    const { imageIds, scalarData } = this;\n    const scalarDataCount = this.isDynamicVolume() ? scalarData.length : 1;\n\n    return imageIds.length / scalarDataCount;\n  }\n\n  private _getScalarDataLength(): number {\n    const { scalarData } = this;\n    return this.isDynamicVolume()\n      ? (<Types.VolumeScalarData[]>scalarData)[0].length\n      : (<Types.VolumeScalarData>scalarData).length;\n  }\n\n  /**\n   * Creates the metadata required for converting the volume to an cornerstoneImage\n   */\n  private _createCornerstoneImageMetaData() {\n    const { numFrames } = this;\n\n    if (numFrames === 0) {\n      return;\n    }\n\n    const bytesPerImage = this.sizeInBytes / numFrames;\n    const scalarDataLength = this._getScalarDataLength();\n    const numComponents = scalarDataLength / this.numVoxels;\n    const pixelsPerImage =\n      this.dimensions[0] * this.dimensions[1] * numComponents;\n\n    const { PhotometricInterpretation, voiLut, VOILUTFunction } = this.metadata;\n\n    let windowCenter = [];\n    let windowWidth = [];\n\n    if (voiLut && voiLut.length) {\n      windowCenter = voiLut.map((voi) => {\n        return voi.windowCenter;\n      });\n\n      windowWidth = voiLut.map((voi) => {\n        return voi.windowWidth;\n      });\n    }\n\n    const color = numComponents > 1 ? true : false; //todo: fix this\n\n    this.cornerstoneImageMetaData = {\n      bytesPerImage,\n      numComponents,\n      pixelsPerImage,\n      windowCenter,\n      windowWidth,\n      color,\n      // we use rgb (3 components) for the color volumes (and not rgba), and not rgba (which is used\n      // in some parts of the lib for stack viewing in CPU)\n      rgba: false,\n      spacing: this.spacing,\n      dimensions: this.dimensions,\n      photometricInterpretation: PhotometricInterpretation,\n      voiLUTFunction: VOILUTFunction,\n      invert: PhotometricInterpretation === 'MONOCHROME1',\n    };\n  }\n\n  /**\n   * Converts imageIdIndex into frameIndex which will be the same\n   * for 3D volumes but different for 4D volumes\n   */\n  private _imageIdIndexToFrameIndex(imageIdIndex: number): number {\n    return imageIdIndex % this.numFrames;\n  }\n\n  /**\n   * Return all scalar data objects (buffers) which will be only one for\n   * 3D volumes and one per time point for 4D volumes\n   * images of each 3D volume is stored\n   * @returns scalar data array\n   */\n  public getScalarDataArrays(): Types.VolumeScalarData[] {\n    return this.isDynamicVolume()\n      ? <Types.VolumeScalarData[]>this.scalarData\n      : [<Types.VolumeScalarData>this.scalarData];\n  }\n\n  private _getScalarDataByImageIdIndex(\n    imageIdIndex: number\n  ): Types.VolumeScalarData {\n    if (imageIdIndex < 0 || imageIdIndex >= this.imageIds.length) {\n      throw new Error('imageIdIndex out of range');\n    }\n\n    const scalarDataArrays = this.getScalarDataArrays();\n    const scalarDataIndex = Math.floor(imageIdIndex / this.numFrames);\n\n    return scalarDataArrays[scalarDataIndex];\n  }\n\n  protected invalidateVolume(immediate: boolean): void {\n    const { imageData, vtkOpenGLTexture } = this;\n    const { numFrames } = this;\n\n    for (let i = 0; i < numFrames; i++) {\n      vtkOpenGLTexture.setUpdatedFrame(i);\n    }\n\n    imageData.modified();\n\n    if (immediate) {\n      autoLoad(this.volumeId);\n    }\n  }\n\n  /**\n   * It cancels loading the images of the volume. It sets the loading status to false\n   * and filters any imageLoad request in the requestPoolManager that has the same\n   * volumeId\n   */\n  public cancelLoading = (): void => {\n    const { loadStatus } = this;\n\n    if (!loadStatus || !loadStatus.loading) {\n      return;\n    }\n\n    // Set to not loading.\n    loadStatus.loading = false;\n    loadStatus.cancelled = true;\n\n    // Remove all the callback listeners\n    this.clearLoadCallbacks();\n\n    // Create a filter function which only keeps requests\n    // which do not match this volume's Id\n    const filterFunction = ({ additionalDetails }) => {\n      return additionalDetails.volumeId !== this.volumeId;\n    };\n\n    // Instruct the request pool manager to filter queued\n    // requests to ensure requests we no longer need are\n    // no longer sent.\n    imageLoadPoolManager.filterRequests(filterFunction);\n  };\n\n  /**\n   * Clear the load callbacks\n   */\n  public clearLoadCallbacks(): void {\n    this.loadStatus.callbacks = [];\n  }\n\n  protected callLoadStatusCallback(evt) {\n    const { framesUpdated, framesProcessed, totalNumFrames } = evt;\n    const { volumeId, reRenderFraction, loadStatus, metadata } = this;\n    const { FrameOfReferenceUID } = metadata;\n\n    // TODO: probably don't want this here\n    if (this.autoRenderOnLoad) {\n      if (\n        framesUpdated > this.reRenderTarget ||\n        framesProcessed === totalNumFrames\n      ) {\n        this.reRenderTarget += reRenderFraction;\n        autoLoad(volumeId);\n      }\n    }\n    if (framesProcessed === totalNumFrames) {\n      loadStatus.callbacks.forEach((callback) => callback(evt));\n\n      const eventDetail = {\n        FrameOfReferenceUID,\n        volumeId: volumeId,\n      };\n\n      triggerEvent(\n        eventTarget,\n        Enums.Events.IMAGE_VOLUME_LOADING_COMPLETED,\n        eventDetail\n      );\n    }\n  }\n\n  protected updateTextureAndTriggerEvents(\n    imageIdIndex,\n    imageId,\n    imageQualityStatus = ImageQualityStatus.FULL_RESOLUTION\n  ) {\n    const frameIndex = this._imageIdIndexToFrameIndex(imageIdIndex);\n    const { cachedFrames, numFrames, totalNumFrames } = this;\n    const { FrameOfReferenceUID } = this.metadata;\n    const currentStatus = cachedFrames[frameIndex];\n    if (currentStatus > imageQualityStatus) {\n      // This is common for initial versus decimated images.\n      return;\n    }\n\n    if (cachedFrames[frameIndex] === ImageQualityStatus.FULL_RESOLUTION) {\n      // Sometimes the frame can be delivered multiple times, so just return\n      // here if that happens\n      return;\n    }\n    const complete = imageQualityStatus === ImageQualityStatus.FULL_RESOLUTION;\n    cachedFrames[imageIdIndex] = imageQualityStatus;\n    this.framesUpdated++;\n    if (complete) {\n      this.framesLoaded++;\n      this.framesProcessed++;\n    }\n\n    this.vtkOpenGLTexture.setUpdatedFrame(frameIndex);\n    this.imageData.modified();\n\n    const eventDetail: Types.EventTypes.ImageVolumeModifiedEventDetail = {\n      FrameOfReferenceUID,\n      imageVolume: this,\n    };\n\n    triggerEvent(eventTarget, Enums.Events.IMAGE_VOLUME_MODIFIED, eventDetail);\n\n    if (complete && this.framesProcessed === this.totalNumFrames) {\n      this.loadStatus.loaded = true;\n      this.loadStatus.loading = false;\n    }\n\n    this.callLoadStatusCallback({\n      success: true,\n      imageIdIndex,\n      imageId,\n      framesLoaded: this.framesLoaded,\n      framesProcessed: this.framesProcessed,\n      framesUpdated: this.framesUpdated,\n      numFrames,\n      totalNumFrames,\n      complete,\n      imageQualityStatus,\n    });\n    if (this.loadStatus.loaded) {\n      this.loadStatus.callbacks = [];\n    }\n  }\n\n  public successCallback(imageId: string, image) {\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    const options = this.getLoaderImageOptions(imageId);\n    const scalarData = this._getScalarDataByImageIdIndex(imageIdIndex);\n    handleArrayBufferLoad(scalarData, image, options);\n\n    const { scalingParameters } = image.preScale || {};\n    const { imageQualityStatus } = image;\n    const frameIndex = this._imageIdIndexToFrameIndex(imageIdIndex);\n\n    // Check if there is a cached image for the same imageURI (different\n    // data loader scheme)\n    const cachedImage = cache.getCachedImageBasedOnImageURI(imageId);\n\n    // Check if the image was already loaded by another volume and we are here\n    // since we got the imageLoadObject from the cache from the other already loaded\n    // volume\n    const cachedVolume = cache.getVolumeContainingImageId(imageId);\n\n    // check if the load was cancelled while we were waiting for the image\n    // if so we don't want to do anything\n    if (this.loadStatus.cancelled) {\n      console.warn(\n        'volume load cancelled, returning for imageIdIndex: ',\n        imageIdIndex\n      );\n      return;\n    }\n\n    // if it is not a cached image or volume\n    if (!cachedImage && !(cachedVolume && cachedVolume.volume !== this)) {\n      return this.updateTextureAndTriggerEvents(\n        imageIdIndex,\n        imageId,\n        imageQualityStatus\n      );\n    }\n\n    // it is either cachedImage or cachedVolume\n    const isFromImageCache = !!cachedImage;\n\n    const cachedImageOrVolume = cachedImage || cachedVolume.volume;\n\n    this.handleImageComingFromCache(\n      cachedImageOrVolume,\n      isFromImageCache,\n      scalingParameters,\n      scalarData,\n      frameIndex,\n      scalarData.buffer,\n      imageIdIndex,\n      imageId\n    );\n  }\n\n  public errorCallback(imageId, permanent, error) {\n    if (!permanent) {\n      return;\n    }\n    const { totalNumFrames, numFrames } = this;\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    this.framesProcessed++;\n\n    if (this.framesProcessed === totalNumFrames) {\n      this.loadStatus.loaded = true;\n      this.loadStatus.loading = false;\n    }\n\n    this.callLoadStatusCallback({\n      success: false,\n      imageId,\n      imageIdIndex,\n      error,\n      framesLoaded: this.framesLoaded,\n      framesProcessed: this.framesProcessed,\n      framesUpdated: this.framesUpdated,\n      numFrames,\n      totalNumFrames,\n    });\n\n    if (this.loadStatus.loaded) {\n      this.loadStatus.callbacks = [];\n    }\n\n    const eventDetail = {\n      error,\n      imageIdIndex,\n      imageId,\n    };\n\n    triggerEvent(eventTarget, Enums.Events.IMAGE_LOAD_ERROR, eventDetail);\n  }\n\n  /**\n   * It triggers a prefetch for images in the volume.\n   * @param callback - A callback function to be called when the volume is fully loaded\n   * @param priority - The priority for loading the volume images, lower number is higher priority\n   * @returns\n   */\n  public load = (callback: (...args: unknown[]) => void): void => {\n    const { imageIds, loadStatus, numFrames } = this;\n    const { transferSyntaxUID } =\n      metaData.get('transferSyntax', imageIds[0]) || {};\n    const imageRetrieveConfiguration = metaData.get(\n      imageRetrieveMetadataProvider.IMAGE_RETRIEVE_CONFIGURATION,\n      this.volumeId,\n      transferSyntaxUID,\n      'volume'\n    );\n\n    this.imagesLoader = imageRetrieveConfiguration\n      ? (\n          imageRetrieveConfiguration.create ||\n          ProgressiveRetrieveImages.createProgressive\n        )(imageRetrieveConfiguration)\n      : this;\n    if (loadStatus.loading === true) {\n      return; // Already loading, will get callbacks from main load.\n    }\n\n    const { loaded } = this.loadStatus;\n    const totalNumFrames = imageIds.length;\n\n    if (loaded) {\n      if (callback) {\n        callback({\n          success: true,\n          framesLoaded: totalNumFrames,\n          framesProcessed: totalNumFrames,\n          numFrames,\n          totalNumFrames,\n        });\n      }\n      return;\n    }\n\n    if (callback) {\n      this.loadStatus.callbacks.push(callback);\n    }\n\n    this._prefetchImageIds();\n  };\n\n  public getLoaderImageOptions(imageId: string) {\n    const { transferSyntaxUID: transferSyntaxUID } =\n      metaData.get('transferSyntax', imageId) || {};\n\n    const imagePlaneModule = metaData.get('imagePlaneModule', imageId) || {};\n    const { rows, columns } = imagePlaneModule;\n    const imageIdIndex = this.getImageIdIndex(imageId);\n    const scalarData = this._getScalarDataByImageIdIndex(imageIdIndex);\n    if (!scalarData) {\n      return null;\n    }\n    const arrayBuffer = scalarData.buffer;\n    // Length of one frame in voxels: length\n    // Length of one frame in bytes: lengthInBytes\n    const { type, length, lengthInBytes } = getScalarDataType(\n      scalarData,\n      this.numFrames\n    );\n\n    const modalityLutModule = metaData.get('modalityLutModule', imageId) || {};\n\n    const generalSeriesModule =\n      metaData.get('generalSeriesModule', imageId) || {};\n\n    const scalingParameters: Types.ScalingParameters = {\n      rescaleSlope: modalityLutModule.rescaleSlope,\n      rescaleIntercept: modalityLutModule.rescaleIntercept,\n      modality: generalSeriesModule.modality,\n    };\n\n    if (scalingParameters.modality === 'PT') {\n      const suvFactor = metaData.get('scalingModule', imageId);\n\n      if (suvFactor) {\n        this._addScalingToVolume(suvFactor);\n        scalingParameters.suvbw = suvFactor.suvbw;\n      }\n    }\n\n    const isSlopeAndInterceptNumbers =\n      typeof scalingParameters.rescaleSlope === 'number' &&\n      typeof scalingParameters.rescaleIntercept === 'number';\n\n    /**\n     * So this is has limitation right now, but we need to somehow indicate\n     * whether the volume has been scaled with the scaling parameters or not.\n     * However, each slice can have different scaling parameters but it is rare\n     * that rescale slope and intercept be unknown for one slice and known for\n     * another. So we can just check the first slice and assume that the rest\n     * of the slices have the same scaling parameters. Basically it is important\n     * that these two are numbers and that means the volume has been scaled (\n     * we do that automatically in the loader). For the suvbw, we need to\n     * somehow indicate whether the PT image has been corrected with suvbw or\n     * not, which we store it in the this.scaling.PT.suvbw.\n     */\n    this.isPreScaled = isSlopeAndInterceptNumbers;\n    const frameIndex = this._imageIdIndexToFrameIndex(imageIdIndex);\n\n    return {\n      // WADO Image Loader\n      targetBuffer: {\n        // keeping this in the options means a large empty volume array buffer\n        // will be transferred to the worker. This is undesirable for streaming\n        // volume without shared array buffer because the target is now an empty\n        // 300-500MB volume array buffer. Instead the volume should be progressively\n        // set in the main thread.\n        arrayBuffer:\n          arrayBuffer instanceof ArrayBuffer ? undefined : arrayBuffer,\n        offset: frameIndex * lengthInBytes,\n        length,\n        type,\n        rows,\n        columns,\n      },\n      skipCreateImage: true,\n      preScale: {\n        enabled: true,\n        // we need to pass in the scalingParameters here, since the streaming\n        // volume loader doesn't go through the createImage phase in the loader,\n        // and therefore doesn't have the scalingParameters\n        scalingParameters,\n      },\n      transferPixelData: true,\n      transferSyntaxUID,\n      loader: imageLoader.loadImage,\n      additionalDetails: {\n        imageId,\n        imageIdIndex,\n        volumeId: this.volumeId,\n      },\n    };\n  }\n\n  // Use loadImage because we are skipping the Cornerstone Image cache\n  // when we load directly into the Volume cache\n  callLoadImage(imageId, imageIdIndex, options) {\n    const { cachedFrames } = this;\n\n    if (cachedFrames[imageIdIndex] === ImageQualityStatus.FULL_RESOLUTION) {\n      return;\n    }\n\n    const uncompressedIterator = ProgressiveIterator.as(\n      imageLoader.loadImage(imageId, options)\n    );\n    return uncompressedIterator.forEach((image) => {\n      // scalarData is the volume container we are progressively loading into\n      // image is the pixelData decoded from workers in cornerstoneDICOMImageLoader\n      this.successCallback(imageId, image);\n    }, this.errorCallback.bind(this, imageIdIndex, imageId));\n  }\n\n  protected getImageIdsRequests(imageIds: string[], priorityDefault: number) {\n    // SharedArrayBuffer\n    this.totalNumFrames = this.imageIds.length;\n    const autoRenderPercentage = 2;\n\n    if (this.autoRenderOnLoad) {\n      this.reRenderFraction =\n        this.totalNumFrames * (autoRenderPercentage / 100);\n      this.reRenderTarget = this.reRenderFraction;\n    }\n\n    // 4D datasets load one time point at a time and the frameIndex is\n    // the position of the imageId in the current time point while the\n    // imageIdIndex is its absolute position in the array that contains\n    // all other imageIds. In a 4D dataset the frameIndex can also be\n    // calculated as `imageIdIndex % numFrames` where numFrames is the\n    // number of frames per time point. The frameIndex and imageIdIndex\n    // will be the same when working with 3D datasets.\n    const requests = imageIds.map((imageId) => {\n      const imageIdIndex = this.getImageIdIndex(imageId);\n\n      const requestType = requestTypeDefault;\n      const priority = priorityDefault;\n      const options = this.getLoaderImageOptions(imageId);\n\n      return {\n        callLoadImage: this.callLoadImage.bind(this),\n        imageId,\n        imageIdIndex,\n        options,\n        priority,\n        requestType,\n        additionalDetails: {\n          volumeId: this.volumeId,\n        },\n      };\n    });\n\n    return requests;\n  }\n\n  private handleImageComingFromCache(\n    cachedImageOrVolume,\n    isFromImageCache: boolean,\n    scalingParameters,\n    scalarData: Types.VolumeScalarData,\n    frameIndex: number,\n    arrayBuffer: ArrayBufferLike,\n    imageIdIndex: number,\n    imageId: string\n  ) {\n    const imageLoadObject = isFromImageCache\n      ? cachedImageOrVolume.imageLoadObject\n      : cachedImageOrVolume.convertToCornerstoneImage(imageId, imageIdIndex);\n\n    imageLoadObject.promise\n      .then((cachedImage) => {\n        const imageScalarData = this._scaleIfNecessary(\n          cachedImage,\n          scalingParameters\n        );\n        // todo add scaling and slope\n        const { pixelsPerImage, bytesPerImage } = this.cornerstoneImageMetaData;\n        const TypedArray = scalarData.constructor;\n        let byteOffset = bytesPerImage * frameIndex;\n\n        // create a view on the volume arraybuffer\n        const bytePerPixel = bytesPerImage / pixelsPerImage;\n\n        if (scalarData.BYTES_PER_ELEMENT !== bytePerPixel) {\n          byteOffset *= scalarData.BYTES_PER_ELEMENT / bytePerPixel;\n        }\n\n        // @ts-ignore\n        const volumeBufferView = new TypedArray(\n          arrayBuffer,\n          byteOffset,\n          pixelsPerImage\n        );\n        volumeBufferView.set(imageScalarData);\n        this.updateTextureAndTriggerEvents(\n          imageIdIndex,\n          imageId,\n          cachedImage.imageQualityStatus\n        );\n      })\n      .catch((err) => {\n        this.errorCallback(imageId, true, err);\n      });\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not executes the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests(_priority: number): any[] {\n    throw new Error('Abstract method');\n  }\n\n  public getImageIdsToLoad(): string[] {\n    throw new Error('Abstract method');\n  }\n\n  /**\n   * Retrieves images using the older getImageLoadRequests method\n   * to setup all the requests.  Ensures compatibility with the custom image\n   * loaders.\n   */\n  public loadImages(imageIds: string[], listener: ImageLoadListener) {\n    this.loadStatus.loading = true;\n\n    const requests = this.getImageLoadRequests(5);\n\n    requests.reverse().forEach((request) => {\n      if (!request) {\n        // there is a cached image for the imageId and no requests will fire\n        return;\n      }\n\n      const {\n        callLoadImage,\n        imageId,\n        imageIdIndex,\n        options,\n        priority,\n        requestType,\n        additionalDetails,\n      } = request;\n\n      imageLoadPoolManager.addRequest(\n        callLoadImage.bind(this, imageId, imageIdIndex, options),\n        requestType,\n        additionalDetails,\n        priority\n      );\n    });\n    return Promise.resolve(true);\n  }\n\n  private _prefetchImageIds() {\n    // Note: here is the correct location to set the loading flag\n    // since getImageIdsRequest is just grabbing and building requests\n    // and not actually executing them\n    this.loadStatus.loading = true;\n\n    const imageIds = [...this.getImageIdsToLoad()];\n    imageIds.reverse();\n\n    this.totalNumFrames = this.imageIds.length;\n    const autoRenderPercentage = 2;\n\n    if (this.autoRenderOnLoad) {\n      this.reRenderFraction =\n        this.totalNumFrames * (autoRenderPercentage / 100);\n      this.reRenderTarget = this.reRenderFraction;\n    }\n\n    return this.imagesLoader.loadImages(imageIds, this).catch((e) => {\n      console.debug('progressive loading failed to complete', e);\n    });\n  }\n\n  /**\n   * This function decides whether or not to scale the image based on the\n   * scalingParameters. If the image is already scaled, we should take that\n   * into account when scaling the image again, so if the rescaleSlope and/or\n   * rescaleIntercept are different from the ones that were used to scale the\n   * image, we should scale the image again according to the new parameters.\n   */\n  private _scaleIfNecessary(\n    image,\n    scalingParametersToUse: Types.ScalingParameters\n  ) {\n    const imageIsAlreadyScaled = image.preScale?.scaled;\n    const noScalingParametersToUse =\n      !scalingParametersToUse ||\n      !scalingParametersToUse.rescaleIntercept ||\n      !scalingParametersToUse.rescaleSlope;\n\n    if (!imageIsAlreadyScaled && noScalingParametersToUse) {\n      // no need to scale the image\n      return image.getPixelData().slice(0);\n    }\n\n    if (\n      !imageIsAlreadyScaled &&\n      scalingParametersToUse &&\n      scalingParametersToUse.rescaleIntercept !== undefined &&\n      scalingParametersToUse.rescaleSlope !== undefined\n    ) {\n      // if not already scaled, just scale the image.\n      // copy so that it doesn't get modified\n      const pixelDataCopy = image.getPixelData().slice(0);\n      const scaledArray = scaleArray(pixelDataCopy, scalingParametersToUse);\n      return scaledArray;\n    }\n\n    // if the image is already scaled,\n    const {\n      rescaleSlope: rescaleSlopeToUse,\n      rescaleIntercept: rescaleInterceptToUse,\n      suvbw: suvbwToUse,\n    } = scalingParametersToUse;\n\n    const {\n      rescaleSlope: rescaleSlopeUsed,\n      rescaleIntercept: rescaleInterceptUsed,\n      suvbw: suvbwUsed,\n    } = image.preScale.scalingParameters;\n\n    const rescaleSlopeIsSame = rescaleSlopeToUse === rescaleSlopeUsed;\n    const rescaleInterceptIsSame =\n      rescaleInterceptToUse === rescaleInterceptUsed;\n    const suvbwIsSame = suvbwToUse === suvbwUsed;\n\n    if (rescaleSlopeIsSame && rescaleInterceptIsSame && suvbwIsSame) {\n      // if the scaling parameters are the same, we don't need to scale the image again\n      return image.getPixelData();\n    }\n\n    const pixelDataCopy = image.getPixelData().slice(0);\n    // the general formula for scaling is  scaledPixelValue = suvbw * (pixelValue * rescaleSlope) + rescaleIntercept\n    const newSuvbw = suvbwToUse / suvbwUsed;\n    const newRescaleSlope = rescaleSlopeToUse / rescaleSlopeUsed;\n    const newRescaleIntercept =\n      rescaleInterceptToUse - rescaleInterceptUsed * newRescaleSlope;\n\n    const newScalingParameters = {\n      ...scalingParametersToUse,\n      rescaleSlope: newRescaleSlope,\n      rescaleIntercept: newRescaleIntercept,\n      suvbw: newSuvbw,\n    };\n\n    const scaledArray = scaleArray(pixelDataCopy, newScalingParameters);\n    return scaledArray;\n  }\n\n  private _addScalingToVolume(suvFactor) {\n    // Todo: handle case where suvFactors are not the same for all frames\n    if (this.scaling) {\n      return;\n    }\n\n    const { suvbw, suvlbm, suvbsa } = suvFactor;\n\n    const petScaling = <Types.PTScaling>{};\n\n    if (suvlbm) {\n      petScaling.suvbwToSuvlbm = suvlbm / suvbw;\n    }\n\n    if (suvbsa) {\n      petScaling.suvbwToSuvbsa = suvbsa / suvbw;\n    }\n\n    if (suvbw) {\n      petScaling.suvbw = suvbw;\n    }\n\n    this.scaling = { PT: petScaling };\n  }\n\n  private _removeFromCache() {\n    // TODO: not 100% sure this is the same Id as the volume loader's volumeId?\n    // so I have no idea if this will work\n    cache.removeVolumeLoadObject(this.volumeId);\n  }\n\n  /**\n   * Converts the requested imageId inside the volume to a cornerstoneImage\n   * object. It uses the typedArray set method to copy the pixelData from the\n   * correct offset in the scalarData to a new array for the image\n   *\n   * @param imageId - the imageId of the image to be converted\n   * @param imageIdIndex - the index of the imageId in the imageIds array\n   * @returns image object containing the pixel data, metadata, and other information\n   */\n  public getCornerstoneImage(\n    imageId: string,\n    imageIdIndex: number\n  ): Types.IImage {\n    const { imageIds } = this;\n    const frameIndex = this._imageIdIndexToFrameIndex(imageIdIndex);\n\n    const {\n      bytesPerImage,\n      pixelsPerImage,\n      windowCenter,\n      windowWidth,\n      numComponents,\n      color,\n      dimensions,\n      spacing,\n      invert,\n      voiLUTFunction,\n      photometricInterpretation,\n    } = this.cornerstoneImageMetaData;\n\n    // 1. Grab the buffer and it's type\n    const scalarData = this._getScalarDataByImageIdIndex(imageIdIndex);\n    const volumeBuffer = scalarData.buffer;\n    // (not sure if this actually works, TypeScript keeps complaining)\n    const TypedArray = scalarData.constructor;\n\n    // 2. Given the index of the image and frame length in bytes,\n    //    create a view on the volume arraybuffer\n    const bytePerPixel = bytesPerImage / pixelsPerImage;\n\n    let byteOffset = bytesPerImage * frameIndex;\n\n    // If there is a discrepancy between the volume typed array\n    // and the bitsAllocated for the image. The reason is that VTK uses Float32\n    // on the GPU and if the type is not Float32, it will convert it. So for not\n    // having a performance issue, we convert all types initially to Float32 even\n    // if they are not Float32.\n    if (scalarData.BYTES_PER_ELEMENT !== bytePerPixel) {\n      byteOffset *= scalarData.BYTES_PER_ELEMENT / bytePerPixel;\n    }\n\n    // 3. Create a new TypedArray of the same type for the new\n    //    Image that will be created\n    // @ts-ignore\n    const imageScalarData = new TypedArray(pixelsPerImage);\n    // @ts-ignore\n    const volumeBufferView = new TypedArray(\n      volumeBuffer,\n      byteOffset,\n      pixelsPerImage\n    );\n\n    // 4. Use e.g. TypedArray.set() to copy the data from the larger\n    //    buffer's view into the smaller one\n    imageScalarData.set(volumeBufferView);\n\n    // 5. Create an Image Object from imageScalarData and put it into the Image cache\n    const volumeImageId = imageIds[imageIdIndex];\n    const modalityLutModule =\n      metaData.get('modalityLutModule', volumeImageId) || {};\n    const minMax = getMinMax(imageScalarData);\n    const intercept = modalityLutModule.rescaleIntercept\n      ? modalityLutModule.rescaleIntercept\n      : 0;\n\n    return {\n      imageId,\n      intercept,\n      windowCenter,\n      windowWidth,\n      voiLUTFunction,\n      color,\n      rgba: false,\n      numComps: numComponents,\n      // Note the dimensions were defined as [Columns, Rows, Frames]\n      rows: dimensions[1],\n      columns: dimensions[0],\n      sizeInBytes: imageScalarData.byteLength,\n      getPixelData: () => imageScalarData,\n      minPixelValue: minMax.min,\n      maxPixelValue: minMax.max,\n      slope: modalityLutModule.rescaleSlope\n        ? modalityLutModule.rescaleSlope\n        : 1,\n      getCanvas: undefined, // todo: which canvas?\n      height: dimensions[0],\n      width: dimensions[1],\n      columnPixelSpacing: spacing[0],\n      rowPixelSpacing: spacing[1],\n      invert,\n      photometricInterpretation,\n    };\n  }\n\n  /**\n   * Converts the requested imageId inside the volume to a cornerstoneImage\n   * object. It uses the typedArray set method to copy the pixelData from the\n   * correct offset in the scalarData to a new array for the image\n   * Duplicate of getCornerstoneImageLoadObject for legacy reasons\n   *\n   * @param imageId - the imageId of the image to be converted\n   * @param imageIdIndex - the index of the imageId in the imageIds array\n   * @returns imageLoadObject containing the promise that resolves\n   * to the cornerstone image\n   */\n  public convertToCornerstoneImage(\n    imageId: string,\n    imageIdIndex: number\n  ): Types.IImageLoadObject {\n    return this.getCornerstoneImageLoadObject(imageId, imageIdIndex);\n  }\n\n  /**\n   * Converts the requested imageId inside the volume to a cornerstoneImage\n   * object. It uses the typedArray set method to copy the pixelData from the\n   * correct offset in the scalarData to a new array for the image\n   *\n   * @param imageId - the imageId of the image to be converted\n   * @param imageIdIndex - the index of the imageId in the imageIds array\n   * @returns imageLoadObject containing the promise that resolves\n   * to the cornerstone image\n   */\n  public getCornerstoneImageLoadObject(\n    imageId: string,\n    imageIdIndex: number\n  ): Types.IImageLoadObject {\n    const image = this.getCornerstoneImage(imageId, imageIdIndex);\n\n    const imageLoadObject = {\n      promise: Promise.resolve(image),\n    };\n\n    return imageLoadObject;\n  }\n\n  /**\n   * Returns an array of all the volume's images as Cornerstone images.\n   * It iterates over all the imageIds and converts them to Cornerstone images.\n   *\n   * @returns An array of Cornerstone images.\n   */\n  public getCornerstoneImages(): Types.IImage[] {\n    const { imageIds } = this;\n\n    return imageIds.map((imageId, imageIdIndex) => {\n      return this.getCornerstoneImage(imageId, imageIdIndex);\n    });\n  }\n\n  /**\n   * Converts all the volume images (imageIds) to cornerstoneImages and caches them.\n   * It iterates over all the imageIds and convert them until there is no\n   * enough space left inside the imageCache. Finally it will decache the Volume.\n   *\n   */\n  private _convertToImages() {\n    // 1. Try to decache images in the volatile Image Cache to provide\n    //    enough space to store another entire copy of the volume (as Images).\n    //    If we do not have enough, we will store as many images in the cache\n    //    as possible, and the rest of the volume will be decached.\n    const byteLength = this.sizeInBytes;\n    const numImages = this.imageIds.length;\n    const { bytesPerImage } = this.cornerstoneImageMetaData;\n\n    let bytesRemaining = cache.decacheIfNecessaryUntilBytesAvailable(\n      byteLength,\n      this.imageIds\n    );\n\n    for (let imageIdIndex = 0; imageIdIndex < numImages; imageIdIndex++) {\n      const imageId = this.imageIds[imageIdIndex];\n\n      bytesRemaining = bytesRemaining - bytesPerImage;\n\n      // 2. Convert each imageId to a cornerstone Image object which is\n      // resolved inside the promise of imageLoadObject\n      const imageLoadObject = this.convertToCornerstoneImage(\n        imageId,\n        imageIdIndex\n      );\n\n      // 3. Caching the image\n      if (!cache.getImageLoadObject(imageId)) {\n        cache.putImageLoadObject(imageId, imageLoadObject).catch((err) => {\n          console.error(err);\n        });\n      }\n\n      // 4. If we know we won't be able to add another Image to the cache\n      //    without breaching the limit, stop here.\n      if (bytesRemaining <= bytesPerImage) {\n        break;\n      }\n    }\n    // 5. When as much of the Volume is processed into Images as possible\n    //    without breaching the cache limit, remove the Volume\n    this._removeFromCache();\n  }\n\n  /**\n   * If completelyRemove is true, remove the volume completely from the cache. Otherwise,\n   * convert the volume to cornerstone images (stack images) and store it in the cache\n   * @param completelyRemove - If true, the image will be removed from the\n   * cache completely.\n   */\n  public decache(completelyRemove = false): void {\n    if (completelyRemove) {\n      this._removeFromCache();\n    } else {\n      this._convertToImages();\n    }\n  }\n}\n\nfunction getScalarDataType(scalarData, numFrames) {\n  let type, byteSize;\n  if (scalarData instanceof Uint8Array) {\n    type = 'Uint8Array';\n    byteSize = 1;\n  } else if (scalarData instanceof Float32Array) {\n    type = 'Float32Array';\n    byteSize = 4;\n  } else if (scalarData instanceof Uint16Array) {\n    type = 'Uint16Array';\n    byteSize = 2;\n  } else if (scalarData instanceof Int16Array) {\n    type = 'Int16Array';\n    byteSize = 2;\n  } else {\n    throw new Error('Unsupported array type');\n  }\n  const length = scalarData.length / numFrames;\n  const lengthInBytes = length * byteSize;\n  return { type, byteSize, length, lengthInBytes };\n}\n\n/**\n * Sets the scalar data at the appropriate offset to the\n * byte data from the image.\n */\nfunction handleArrayBufferLoad(scalarData, image, options) {\n  if (!(scalarData.buffer instanceof ArrayBuffer)) {\n    return;\n  }\n  const offset = options.targetBuffer.offset; // in bytes\n  const length = options.targetBuffer.length; // in frames\n  const pixelData = image.pixelData ? image.pixelData : image.getPixelData();\n\n  try {\n    if (scalarData instanceof Float32Array) {\n      const bytesInFloat = 4;\n      const floatView = new Float32Array(pixelData);\n      if (floatView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      // since set is based on the underlying type,\n      // we need to divide the offset bytes by the byte type\n      scalarData.set(floatView, offset / bytesInFloat);\n    }\n    if (scalarData instanceof Int16Array) {\n      const bytesInInt16 = 2;\n      const intView = new Int16Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInInt16);\n    }\n    if (scalarData instanceof Uint16Array) {\n      const bytesInUint16 = 2;\n      const intView = new Uint16Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInUint16);\n    }\n    if (scalarData instanceof Uint8Array) {\n      const bytesInUint8 = 1;\n      const intView = new Uint8Array(pixelData);\n      if (intView.length !== length) {\n        throw 'Error pixelData length does not match frame length';\n      }\n      scalarData.set(intView, offset / bytesInUint8);\n    }\n  } catch (e) {\n    console.error(e);\n  }\n}\n","import { Types } from '@cornerstonejs/core';\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\nimport ImageLoadRequests from './types/ImageLoadRequests';\n\n/**\n * Streaming Image Volume Class that extends ImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n */\nexport default class StreamingImageVolume extends BaseStreamingImageVolume {\n  constructor(\n    imageVolumeProperties: Types.IVolume,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    super(imageVolumeProperties, streamingProperties);\n  }\n\n  /**\n   * Return the scalar data (buffer)\n   * @returns volume scalar data\n   */\n  public getScalarData(): Types.VolumeScalarData {\n    return <Types.VolumeScalarData>this.scalarData;\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not executes the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests(priority: number): ImageLoadRequests[] {\n    const { imageIds } = this;\n\n    return this.getImageIdsRequests(imageIds, priority);\n  }\n\n  public getImageIdsToLoad = () => {\n    const { imageIds } = this;\n    this.numFrames = imageIds.length;\n    return imageIds;\n  };\n}\n","import {\n  cache,\n  utilities,\n  Enums,\n  imageLoader,\n  imageLoadPoolManager,\n  getShouldUseSharedArrayBuffer,\n  getConfiguration,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport { makeVolumeMetadata, sortImageIdsAndGetSpacing } from './helpers';\nimport StreamingImageVolume from './StreamingImageVolume';\n\nconst {\n  createUint8SharedArray,\n  createFloat32SharedArray,\n  createUint16SharedArray,\n  createInt16SharedArray,\n} = utilities;\n\ninterface IVolumeLoader {\n  promise: Promise<StreamingImageVolume>;\n  cancel: () => void;\n  decache: () => void;\n}\n\n/**\n * It handles loading of a image by streaming in its imageIds. It will be the\n * volume loader if the schema for the volumeID is `cornerstoneStreamingImageVolume`.\n * This function returns a promise that resolves to the StreamingImageVolume instance.\n *\n * In order to use the cornerstoneStreamingImageVolumeLoader you should use\n * createAndCacheVolume helper from the cornerstone-core volumeLoader module.\n *\n * @param volumeId - The ID of the volume\n * @param options - options for loading, imageIds\n * @returns a promise that resolves to a StreamingImageVolume\n */\nfunction cornerstoneStreamingImageVolumeLoader(\n  volumeId: string,\n  options: {\n    imageIds: string[];\n    progressiveRendering?: boolean | Types.IRetrieveConfiguration;\n  }\n): IVolumeLoader {\n  if (!options || !options.imageIds || !options.imageIds.length) {\n    throw new Error(\n      'ImageIds must be provided to create a streaming image volume'\n    );\n  }\n\n  const { useNorm16Texture, preferSizeOverAccuracy } =\n    getConfiguration().rendering;\n  const use16BitDataType = useNorm16Texture || preferSizeOverAccuracy;\n\n  async function getStreamingImageVolume() {\n    /**\n     * Check if we are using the `wadouri:` scheme, and if so, preload first,\n     * middle, and last image metadata as these are the images the current\n     * streaming image loader may explicitly request metadata from. The last image\n     * metadata would only be specifically requested if the imageId array order is\n     * reversed in the `sortImageIdsAndGetSpacing.ts` file.\n     */\n    if (options.imageIds[0].split(':')[0] === 'wadouri') {\n      const [middleImageIndex, lastImageIndex] = [\n        Math.floor(options.imageIds.length / 2),\n        options.imageIds.length - 1,\n      ];\n      const indexesToPrefetch = [0, middleImageIndex, lastImageIndex];\n      await Promise.all(\n        indexesToPrefetch.map((index) => {\n          return new Promise((resolve, reject) => {\n            const imageId = options.imageIds[index];\n            imageLoadPoolManager.addRequest(\n              async () => {\n                imageLoader\n                  .loadImage(imageId)\n                  .then(() => {\n                    console.log(`Prefetched imageId: ${imageId}`);\n                    resolve(true);\n                  })\n                  .catch((err) => {\n                    reject(err);\n                  });\n              },\n              Enums.RequestType.Prefetch,\n              { volumeId },\n              1 // priority\n            );\n          });\n        })\n      ).catch(console.error);\n    }\n\n    const { imageIds, progressiveRendering } = options;\n\n    const volumeMetadata = makeVolumeMetadata(imageIds);\n\n    // For a streaming volume, the data type cannot rely on cswil to load\n    // the proper array buffer type. This is because the target buffer container\n    // must be decided ahead of time.\n    // TODO: move this logic into CSWIL to avoid logic duplication.\n    // We check if scaling parameters are negative we choose Int16 instead of\n    // Uint16 for cases where BitsAllocated is 16.\n    const imageIdIndex = Math.floor(imageIds.length / 2);\n    const imageId = imageIds[imageIdIndex];\n    const scalingParameters = csUtils.getScalingParameters(imageId);\n    const hasNegativeRescale =\n      scalingParameters.rescaleIntercept < 0 ||\n      scalingParameters.rescaleSlope < 0;\n\n    // The prescale is ALWAYS used with modality LUT, so we can assume that\n    // if the rescale slope is not an integer, we need to use Float32\n    const hasFloatRescale =\n      scalingParameters.rescaleIntercept % 1 !== 0 ||\n      scalingParameters.rescaleSlope % 1 !== 0;\n\n    const {\n      BitsAllocated,\n      PixelRepresentation,\n      PhotometricInterpretation,\n      ImageOrientationPatient,\n      PixelSpacing,\n      Columns,\n      Rows,\n    } = volumeMetadata;\n\n    const rowCosineVec = vec3.fromValues(\n      ImageOrientationPatient[0],\n      ImageOrientationPatient[1],\n      ImageOrientationPatient[2]\n    );\n    const colCosineVec = vec3.fromValues(\n      ImageOrientationPatient[3],\n      ImageOrientationPatient[4],\n      ImageOrientationPatient[5]\n    );\n\n    const scanAxisNormal = vec3.create();\n\n    vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n\n    const { zSpacing, origin, sortedImageIds } = sortImageIdsAndGetSpacing(\n      imageIds,\n      scanAxisNormal\n    );\n\n    const numFrames = imageIds.length;\n\n    // Spacing goes [1] then [0], as [1] is column spacing (x) and [0] is row spacing (y)\n    const spacing = <Types.Point3>[PixelSpacing[1], PixelSpacing[0], zSpacing];\n    const dimensions = <Types.Point3>[Columns, Rows, numFrames];\n    const direction = [\n      ...rowCosineVec,\n      ...colCosineVec,\n      ...scanAxisNormal,\n    ] as Types.Mat3;\n    const signed = PixelRepresentation === 1;\n    const numComponents = PhotometricInterpretation === 'RGB' ? 3 : 1;\n    const useSharedArrayBuffer = getShouldUseSharedArrayBuffer();\n    const length = dimensions[0] * dimensions[1] * dimensions[2];\n    const handleCache = (sizeInBytes) => {\n      if (!cache.isCacheable(sizeInBytes)) {\n        throw new Error(Enums.Events.CACHE_SIZE_EXCEEDED);\n      }\n      cache.decacheIfNecessaryUntilBytesAvailable(sizeInBytes);\n    };\n\n    let scalarData, sizeInBytes;\n    switch (BitsAllocated) {\n      case 8:\n        if (signed) {\n          throw new Error(\n            '8 Bit signed images are not yet supported by this plugin.'\n          );\n        }\n        sizeInBytes = length * numComponents;\n        handleCache(sizeInBytes);\n        scalarData = useSharedArrayBuffer\n          ? createUint8SharedArray(length * numComponents)\n          : new Uint8Array(length * numComponents);\n        break;\n\n      case 16:\n        // Temporary fix for 16 bit images to use Float32\n        // until the new dicom image loader handler the conversion\n        // correctly\n        if (!use16BitDataType || hasFloatRescale) {\n          sizeInBytes = length * 4;\n          scalarData = useSharedArrayBuffer\n            ? createFloat32SharedArray(length)\n            : new Float32Array(length);\n\n          break;\n        }\n\n        sizeInBytes = length * 2;\n        if (signed || hasNegativeRescale) {\n          handleCache(sizeInBytes);\n          scalarData = useSharedArrayBuffer\n            ? createInt16SharedArray(length)\n            : new Int16Array(length);\n          break;\n        }\n\n        if (!signed && !hasNegativeRescale) {\n          handleCache(sizeInBytes);\n          scalarData = useSharedArrayBuffer\n            ? createUint16SharedArray(length)\n            : new Uint16Array(length);\n          break;\n        }\n\n        // Default to Float32 again\n        sizeInBytes = length * 4;\n        handleCache(sizeInBytes);\n        scalarData = useSharedArrayBuffer\n          ? createFloat32SharedArray(length)\n          : new Float32Array(length);\n        break;\n\n      case 24:\n        sizeInBytes = length * numComponents;\n        handleCache(sizeInBytes);\n\n        // hacky because we don't support alpha channel in dicom\n        scalarData = useSharedArrayBuffer\n          ? createUint8SharedArray(length * numComponents)\n          : new Uint8Array(length * numComponents);\n        break;\n    }\n\n    const streamingImageVolume = new StreamingImageVolume(\n      // ImageVolume properties\n      {\n        volumeId,\n        metadata: volumeMetadata,\n        dimensions,\n        spacing,\n        origin,\n        direction,\n        scalarData,\n        sizeInBytes,\n      },\n      // Streaming properties\n      {\n        imageIds: sortedImageIds,\n        loadStatus: {\n          // todo: loading and loaded should be on ImageVolume\n          loaded: false,\n          loading: false,\n          cancelled: false,\n          cachedFrames: [],\n          callbacks: [],\n        },\n      }\n    );\n\n    return streamingImageVolume;\n  }\n\n  const streamingImageVolumePromise = getStreamingImageVolume();\n\n  return {\n    promise: streamingImageVolumePromise,\n    decache: () => {\n      streamingImageVolumePromise.then((streamingImageVolume) => {\n        streamingImageVolume.destroy();\n        streamingImageVolume = null;\n      });\n    },\n    cancel: () => {\n      streamingImageVolumePromise.then((streamingImageVolume) => {\n        streamingImageVolume.cancelLoading();\n      });\n    },\n  };\n}\n\nexport default cornerstoneStreamingImageVolumeLoader;\n","import { metaData } from '@cornerstonejs/core';\n\n// TODO: add support for other 4D tags as listed below\n// Supported 4D Tags\n//   (0018,1060) Trigger Time                   [NOK]\n//   (0018,0081) Echo Time                      [NOK]\n//   (0018,0086) Echo Number                    [NOK]\n//   (0020,0100) Temporal Position Identifier   [NOK]\n//   (0054,1300) FrameReferenceTime             [OK]\n\ninterface MappedFrameReferenceTime {\n  imageId: string;\n  frameReferenceTime: number;\n}\n\nconst groupBy = (array, key) => {\n  return array.reduce((rv, x) => {\n    (rv[x[key]] = rv[x[key]] || []).push(x);\n    return rv;\n  }, {});\n};\n\nfunction splitFramesByFrameReferenceTime(imageIds: string[]): string[][] {\n  const framesMetadata: Array<MappedFrameReferenceTime> = imageIds.map(\n    (imageId: string): MappedFrameReferenceTime => {\n      const petImageModule = metaData.get('petImageModule', imageId);\n      const { frameReferenceTime = 0 } = petImageModule ?? {};\n      return { imageId, frameReferenceTime };\n    }\n  );\n\n  const framesGroups = groupBy(framesMetadata, 'frameReferenceTime');\n  const sortedFrameReferenceTimes = Object.keys(framesGroups)\n    .map(Number.parseFloat)\n    .sort((a, b) => a - b);\n\n  const imageIdsGroups = sortedFrameReferenceTimes.map((key) =>\n    framesGroups[key].map((item) => item.imageId)\n  );\n\n  return imageIdsGroups;\n}\n\n/**\n * Split the imageIds array by 4D tags into groups. Each group must have the\n * same number of imageIds or the same imageIds array passed in is returned.\n * @param imageIds - array of imageIds\n * @returns imageIds grouped by 4D tags\n */\nfunction splitImageIdsBy4DTags(imageIds: string[]): string[][] {\n  const fncList = [splitFramesByFrameReferenceTime];\n\n  for (let i = 0; i < fncList.length; i++) {\n    const framesGroups = fncList[i](imageIds);\n\n    if (!framesGroups || framesGroups.length <= 1) {\n      // imageIds could not be split into groups\n      continue;\n    }\n\n    const framesPerGroup = framesGroups[0].length;\n    const groupsHaveSameLength = framesGroups.every(\n      (g) => g.length === framesPerGroup\n    );\n\n    if (groupsHaveSameLength) {\n      return framesGroups;\n    }\n  }\n\n  // return the same imagesIds for non-4D volumes\n  return [imageIds];\n}\n\nexport default splitImageIdsBy4DTags;\n","import { cache, utilities, Enums } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\nimport makeVolumeMetadata from './makeVolumeMetadata';\nimport sortImageIdsAndGetSpacing from './sortImageIdsAndGetSpacing';\n\nconst { createUint8SharedArray, createFloat32SharedArray } = utilities;\n\nfunction getVolumeInfo(imageIds: string[]) {\n  const volumeMetadata = makeVolumeMetadata(imageIds);\n\n  const {\n    BitsAllocated,\n    PixelRepresentation,\n    PhotometricInterpretation,\n    ImageOrientationPatient,\n    PixelSpacing,\n    Columns,\n    Rows,\n  } = volumeMetadata;\n\n  const rowCosineVec = vec3.fromValues(\n    ImageOrientationPatient[0],\n    ImageOrientationPatient[1],\n    ImageOrientationPatient[2]\n  );\n\n  const colCosineVec = vec3.fromValues(\n    ImageOrientationPatient[3],\n    ImageOrientationPatient[4],\n    ImageOrientationPatient[5]\n  );\n\n  const scanAxisNormal = vec3.create();\n\n  vec3.cross(scanAxisNormal, rowCosineVec, colCosineVec);\n\n  const { zSpacing, origin, sortedImageIds } = sortImageIdsAndGetSpacing(\n    imageIds,\n    scanAxisNormal\n  );\n\n  const numFrames = imageIds.length;\n\n  // Spacing goes [1] then [0], as [1] is column spacing (x) and [0] is row spacing (y)\n  const spacing = <Types.Point3>[PixelSpacing[1], PixelSpacing[0], zSpacing];\n  const dimensions = <Types.Point3>[Columns, Rows, numFrames];\n  const direction = [\n    ...rowCosineVec,\n    ...colCosineVec,\n    ...scanAxisNormal,\n  ] as Types.Mat3;\n  const signed = PixelRepresentation === 1;\n\n  // Check if it fits in the cache before we allocate data\n  // TODO Improve this when we have support for more types\n  // NOTE: We use 4 bytes per voxel as we are using Float32.\n  const bytesPerVoxel = BitsAllocated === 16 ? 4 : 1;\n  const sizeInBytesPerComponent =\n    bytesPerVoxel * dimensions[0] * dimensions[1] * dimensions[2];\n\n  let numComponents = 1;\n  if (PhotometricInterpretation === 'RGB') {\n    numComponents = 3;\n  }\n\n  const sizeInBytes = sizeInBytesPerComponent * numComponents;\n\n  // check if there is enough space in unallocated + image Cache\n  const isCacheable = cache.isCacheable(sizeInBytes);\n  if (!isCacheable) {\n    throw new Error(Enums.Events.CACHE_SIZE_EXCEEDED);\n  }\n\n  cache.decacheIfNecessaryUntilBytesAvailable(sizeInBytes);\n\n  let scalarData;\n\n  switch (BitsAllocated) {\n    case 8:\n      if (signed) {\n        throw new Error(\n          '8 Bit signed images are not yet supported by this plugin.'\n        );\n      } else {\n        scalarData = createUint8SharedArray(\n          dimensions[0] * dimensions[1] * dimensions[2]\n        );\n      }\n\n      break;\n\n    case 16:\n      scalarData = createFloat32SharedArray(\n        dimensions[0] * dimensions[1] * dimensions[2]\n      );\n\n      break;\n\n    case 24:\n      // hacky because we don't support alpha channel in dicom\n      scalarData = createUint8SharedArray(\n        dimensions[0] * dimensions[1] * dimensions[2] * numComponents\n      );\n\n      break;\n  }\n\n  return {\n    metadata: volumeMetadata,\n    sortedImageIds,\n    dimensions,\n    spacing,\n    origin,\n    direction,\n    scalarData,\n    sizeInBytes,\n  };\n}\n\nexport { getVolumeInfo, getVolumeInfo as default };\n","/**\n *  The events for cornerstone streaming image volume\n *\n */\nenum Events {\n  ///////////////////////////////////////\n  //            Loading Events\n  ///////////////////////////////////////\n\n  /**\n   * Dynamic image volume time point index changed\n   */\n  DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED = 'DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED',\n}\n\nexport default Events;\n","import { eventTarget, triggerEvent, type Types } from '@cornerstonejs/core';\nimport BaseStreamingImageVolume from './BaseStreamingImageVolume';\nimport { Events as StreamingEvents } from './enums';\n\ntype TimePoint = {\n  /** imageIds of each timepoint  */\n  imageIds: Array<string>;\n  /** volume scalar data  */\n  scalarData: Float32Array | Uint8Array | Uint16Array | Int16Array;\n};\n\n/**\n * Streaming Image Volume Class that extends StreamingImageVolume base class.\n * It implements load method to load the imageIds and insert them into the volume.\n */\nexport default class StreamingDynamicImageVolume\n  extends BaseStreamingImageVolume\n  implements Types.IDynamicImageVolume\n{\n  private _numTimePoints: number;\n  private _timePoints: TimePoint[];\n  private _timePointIndex = 0;\n\n  constructor(\n    imageVolumeProperties: Types.IVolume,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ) {\n    StreamingDynamicImageVolume._ensureValidData(\n      imageVolumeProperties,\n      streamingProperties\n    );\n\n    super(imageVolumeProperties, streamingProperties);\n    this._numTimePoints = (<Types.VolumeScalarData[]>this.scalarData).length;\n    this._timePoints = this._getTimePointsData();\n  }\n\n  private static _ensureValidData(\n    imageVolumeProperties: Types.IVolume,\n    streamingProperties: Types.IStreamingVolumeProperties\n  ): void {\n    const imageIds = streamingProperties.imageIds;\n    const scalarDataArrays = <Types.VolumeScalarData[]>(\n      imageVolumeProperties.scalarData\n    );\n\n    if (imageIds.length % scalarDataArrays.length !== 0) {\n      throw new Error(\n        `Number of imageIds is not a multiple of ${scalarDataArrays.length}`\n      );\n    }\n  }\n\n  /**\n   * Use the image ids and scalar data array to create TimePoint objects\n   * and make it a bit easier to work with when loading requests\n   */\n  private _getTimePointsData(): TimePoint[] {\n    const { imageIds } = this;\n    const scalarData = <Types.VolumeScalarData[]>this.scalarData;\n\n    const { numFrames } = this;\n    const numTimePoints = scalarData.length;\n    const timePoints: TimePoint[] = [];\n\n    for (let i = 0; i < numTimePoints; i++) {\n      const start = i * numFrames;\n      const end = start + numFrames;\n\n      timePoints.push({\n        imageIds: imageIds.slice(start, end),\n        scalarData: scalarData[i],\n      });\n    }\n\n    return timePoints;\n  }\n\n  private _getTimePointsToLoad() {\n    const timePoints = this._timePoints;\n    const initialTimePointIndex = this._timePointIndex;\n    const timePointsToLoad = [timePoints[initialTimePointIndex]];\n\n    let leftIndex = initialTimePointIndex - 1;\n    let rightIndex = initialTimePointIndex + 1;\n\n    while (leftIndex >= 0 || rightIndex < timePoints.length) {\n      if (leftIndex >= 0) {\n        timePointsToLoad.push(timePoints[leftIndex--]);\n      }\n\n      if (rightIndex < timePoints.length) {\n        timePointsToLoad.push(timePoints[rightIndex++]);\n      }\n    }\n\n    return timePointsToLoad;\n  }\n\n  private _getTimePointRequests = (timePoint, priority: number) => {\n    const { imageIds } = timePoint;\n\n    return this.getImageIdsRequests(imageIds, priority);\n  };\n\n  private _getTimePointsRequests = (priority: number) => {\n    const timePoints = this._getTimePointsToLoad();\n    let timePointsRequests = [];\n\n    timePoints.forEach((timePoint) => {\n      const timePointRequests = this._getTimePointRequests(timePoint, priority);\n      timePointsRequests = timePointsRequests.concat(timePointRequests);\n    });\n\n    return timePointsRequests;\n  };\n\n  public getImageIdsToLoad(): string[] {\n    const timePoints = this._getTimePointsToLoad();\n    let imageIds = [];\n\n    timePoints.forEach((timePoint) => {\n      const { imageIds: timePointIds } = timePoint;\n      imageIds = imageIds.concat(timePointIds);\n    });\n\n    return imageIds;\n  }\n\n  /** return true if it is a 4D volume or false if it is 3D volume */\n  public isDynamicVolume(): boolean {\n    return true;\n  }\n\n  /**\n   * Returns the active time point index\n   * @returns active time point index\n   */\n  public get timePointIndex(): number {\n    return this._timePointIndex;\n  }\n\n  /**\n   * Set the active time point index which also updates the active scalar data\n   * @returns current time point index\n   */\n  public set timePointIndex(newTimePointIndex: number) {\n    if (newTimePointIndex < 0 || newTimePointIndex >= this.numTimePoints) {\n      throw new Error(`Invalid timePointIndex (${newTimePointIndex})`);\n    }\n\n    // Nothing to do when time point index does not change\n    if (this._timePointIndex === newTimePointIndex) {\n      return;\n    }\n\n    const { imageData } = this;\n\n    this._timePointIndex = newTimePointIndex;\n    imageData.getPointData().setActiveScalars(`timePoint-${newTimePointIndex}`);\n    this.invalidateVolume(true);\n\n    triggerEvent(\n      eventTarget,\n      StreamingEvents.DYNAMIC_VOLUME_TIME_POINT_INDEX_CHANGED,\n      {\n        volumeId: this.volumeId,\n        timePointIndex: newTimePointIndex,\n      }\n    );\n  }\n\n  /**\n   * Returns the number of time points\n   * @returns number of time points\n   */\n  public get numTimePoints(): number {\n    return this._numTimePoints;\n  }\n\n  /**\n   * Return the active scalar data (buffer)\n   * @returns volume scalar data\n   */\n  public getScalarData(): Types.VolumeScalarData {\n    return (<Types.VolumeScalarData[]>this.scalarData)[this._timePointIndex];\n  }\n\n  /**\n   * It returns the imageLoad requests for the streaming image volume instance.\n   * It involves getting all the imageIds of the volume and creating a success callback\n   * which would update the texture (when the image has loaded) and the failure callback.\n   * Note that this method does not execute the requests but only returns the requests.\n   * It can be used for sorting requests outside of the volume loader itself\n   * e.g. loading a single slice of CT, followed by a single slice of PET (interleaved), before\n   * moving to the next slice.\n   *\n   * @returns Array of requests including imageId of the request, its imageIdIndex,\n   * options (targetBuffer and scaling parameters), and additionalDetails (volumeId)\n   */\n  public getImageLoadRequests = (priority: number) => {\n    return this._getTimePointsRequests(priority);\n  };\n}\n","import { getVolumeInfo, splitImageIdsBy4DTags } from './helpers';\nimport StreamingDynamicImageVolume from './StreamingDynamicImageVolume';\n\ninterface IVolumeLoader {\n  promise: Promise<StreamingDynamicImageVolume>;\n  cancel: () => void;\n  decache: () => void;\n}\n\nfunction get4DVolumeInfo(imageIds: string[]) {\n  const imageIdsGroups = splitImageIdsBy4DTags(imageIds);\n  return imageIdsGroups.map((imageIds) => getVolumeInfo(imageIds));\n}\n\n/**\n * It handles loading of a image by streaming in its imageIds. It will be the\n * volume loader if the schema for the volumeID is `cornerstoneStreamingImageVolume`.\n * This function returns a promise that resolves to the StreamingDynamicImageVolume instance.\n *\n * In order to use the cornerstoneStreamingDynamicImageVolumeLoader you should use\n * createAndCacheVolume helper from the cornerstone-core volumeLoader module.\n *\n * @param volumeId - The ID of the volume\n * @param options - options for loading, imageIds\n * @returns a promise that resolves to a StreamingDynamicImageVolume\n */\nfunction cornerstoneStreamingDynamicImageVolumeLoader(\n  volumeId: string,\n  options: {\n    imageIds: string[];\n  }\n): IVolumeLoader {\n  if (!options || !options.imageIds || !options.imageIds.length) {\n    throw new Error(\n      'ImageIds must be provided to create a 4D streaming image volume'\n    );\n  }\n\n  const { imageIds } = options;\n  const volumesInfo = get4DVolumeInfo(imageIds);\n\n  const {\n    metadata: volumeMetadata,\n    dimensions,\n    spacing,\n    origin,\n    direction,\n    sizeInBytes,\n  } = volumesInfo[0];\n\n  const sortedImageIdsArrays = [];\n  const scalarDataArrays = [];\n\n  volumesInfo.forEach((volumeInfo) => {\n    sortedImageIdsArrays.push(volumeInfo.sortedImageIds);\n    scalarDataArrays.push(volumeInfo.scalarData);\n  });\n\n  let streamingImageVolume = new StreamingDynamicImageVolume(\n    // ImageVolume properties\n    {\n      volumeId,\n      metadata: volumeMetadata,\n      dimensions,\n      spacing,\n      origin,\n      direction,\n      scalarData: scalarDataArrays,\n      sizeInBytes,\n    },\n    // Streaming properties\n    {\n      imageIds: sortedImageIdsArrays.flat(),\n      loadStatus: {\n        // todo: loading and loaded should be on ImageVolume\n        loaded: false,\n        loading: false,\n        cancelled: false,\n        cachedFrames: [],\n        callbacks: [],\n      },\n    }\n  );\n\n  return {\n    promise: Promise.resolve(streamingImageVolume),\n    decache: () => {\n      streamingImageVolume.destroy();\n      streamingImageVolume = null;\n    },\n    cancel: () => {\n      streamingImageVolume.cancelLoading();\n    },\n  };\n}\n\nexport default cornerstoneStreamingDynamicImageVolumeLoader;\n","import cornerstoneStreamingImageVolumeLoader from './cornerstoneStreamingImageVolumeLoader';\nimport cornerstoneStreamingDynamicImageVolumeLoader from './cornerstoneStreamingDynamicImageVolumeLoader';\nimport StreamingImageVolume from './StreamingImageVolume';\nimport StreamingDynamicImageVolume from './StreamingDynamicImageVolume';\nimport getDynamicVolumeInfo from './helpers/getDynamicVolumeInfo';\nimport { sortImageIdsAndGetSpacing } from './helpers';\nimport * as Enums from './enums';\n\nconst helpers = {\n  getDynamicVolumeInfo,\n  sortImageIdsAndGetSpacing,\n};\n\nexport {\n  cornerstoneStreamingImageVolumeLoader,\n  cornerstoneStreamingDynamicImageVolumeLoader,\n  StreamingImageVolume,\n  StreamingDynamicImageVolume,\n  helpers,\n  Enums,\n};\n","import splitImageIdsBy4DTags from './splitImageIdsBy4DTags';\n\n/**\n * Get some info about 4D image sets. Time points (groups of imageIds) are\n * returned when the imageIds represents a 4D volume.\n * @param imageIds - Array of Cornerstone Image Object's imageIds\n * @returns 4D series infos\n */\nfunction getDynamicVolumeInfo(imageIds) {\n  const timePoints = splitImageIdsBy4DTags(imageIds);\n  const isDynamicVolume = timePoints.length > 1;\n\n  return { isDynamicVolume, timePoints };\n}\n\nexport default getDynamicVolumeInfo;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__953__","__WEBPACK_EXTERNAL_MODULE__976__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","makeVolumeMetadata","imageIds","imageId0","pixelRepresentation","bitsAllocated","bitsStored","highBit","photometricInterpretation","samplesPerPixel","metaData","voiLut","voiLutModule","voiLUTFunction","windowWidth","windowCenter","Array","isArray","i","length","push","modality","seriesInstanceUID","imageOrientationPatient","pixelSpacing","frameOfReferenceUID","columns","rows","BitsAllocated","BitsStored","SamplesPerPixel","HighBit","PhotometricInterpretation","PixelRepresentation","Modality","ImageOrientationPatient","PixelSpacing","FrameOfReferenceUID","Columns","Rows","VOILUTFunction","SeriesInstanceUID","sortImageIdsAndGetSpacing","scanAxisNormal","imagePositionPatient","referenceImagePositionPatient","refIppVec","vec3","usingWadoUri","split","sortedImageIds","zSpacing","getDistance","imageId","positionVector","prefetchedImageIds","Math","floor","reverse","metadataForMiddleImage","Error","distanceBetweenFirstAndMiddleImages","abs","distanceImagePairs","map","distance","sort","a","b","numImages","origin","sliceThickness","strictZSpacingForVolumeViewport","getConfiguration","rendering","console","log","_typeof","iterator","constructor","_defineProperty","arg","input","hint","prim","toPrimitive","res","TypeError","String","configurable","writable","volumeId","renderingEngineAndViewportIds","renderingEnginesArray","getRenderingEngines","renderingEngine","viewports","utilities","id","viewportIds","viewport","getRenderingEngineAndViewportsContainingVolume","forEach","_ref","hasBeenDestroyed","renderViewports","scaleArray","array","scalingParameters","arrayLength","rescaleSlope","rescaleIntercept","suvbw","requestTypeDefault","Enums","getMinMax","ProgressiveIterator","csUtils","ImageQualityStatus","imageRetrieveMetadataProvider","BaseStreamingImageVolume","ImageVolume","imageVolumeProperties","streamingProperties","super","this","loadStatus","loading","cancelled","clearLoadCallbacks","imageLoadPoolManager","additionalDetails","callback","numFrames","transferSyntaxUID","imageRetrieveConfiguration","IMAGE_RETRIEVE_CONFIGURATION","imagesLoader","create","ProgressiveRetrieveImages","loaded","totalNumFrames","success","framesLoaded","framesProcessed","callbacks","_prefetchImageIds","_getNumFrames","_createCornerstoneImageMetaData","scalarData","scalarDataCount","isDynamicVolume","_getScalarDataLength","bytesPerImage","sizeInBytes","numComponents","numVoxels","pixelsPerImage","dimensions","metadata","voi","color","cornerstoneImageMetaData","rgba","spacing","invert","_imageIdIndexToFrameIndex","imageIdIndex","getScalarDataArrays","_getScalarDataByImageIdIndex","invalidateVolume","immediate","imageData","vtkOpenGLTexture","setUpdatedFrame","modified","autoLoad","callLoadStatusCallback","evt","framesUpdated","reRenderFraction","autoRenderOnLoad","reRenderTarget","eventDetail","triggerEvent","eventTarget","updateTextureAndTriggerEvents","imageQualityStatus","arguments","FULL_RESOLUTION","frameIndex","cachedFrames","complete","imageVolume","successCallback","image","getImageIdIndex","options","getLoaderImageOptions","buffer","ArrayBuffer","offset","targetBuffer","pixelData","getPixelData","Float32Array","bytesInFloat","floatView","set","Int16Array","bytesInInt16","intView","Uint16Array","bytesInUint16","Uint8Array","bytesInUint8","e","error","handleArrayBufferLoad","preScale","cachedImage","cache","cachedVolume","warn","volume","isFromImageCache","cachedImageOrVolume","handleImageComingFromCache","errorCallback","permanent","imagePlaneModule","arrayBuffer","type","lengthInBytes","byteSize","getScalarDataType","modalityLutModule","generalSeriesModule","suvFactor","_addScalingToVolume","isSlopeAndInterceptNumbers","isPreScaled","skipCreateImage","enabled","transferPixelData","loader","imageLoader","callLoadImage","as","bind","getImageIdsRequests","priorityDefault","requestType","priority","imageLoadObject","convertToCornerstoneImage","promise","then","imageScalarData","_scaleIfNecessary","TypedArray","byteOffset","bytePerPixel","BYTES_PER_ELEMENT","catch","err","getImageLoadRequests","_priority","getImageIdsToLoad","loadImages","listener","request","Promise","resolve","debug","scalingParametersToUse","_image$preScale","imageIsAlreadyScaled","scaled","noScalingParametersToUse","slice","rescaleSlopeToUse","rescaleInterceptToUse","suvbwToUse","rescaleSlopeUsed","rescaleInterceptUsed","suvbwUsed","newSuvbw","newRescaleSlope","newRescaleIntercept","scaling","suvlbm","suvbsa","petScaling","suvbwToSuvlbm","suvbwToSuvbsa","PT","_removeFromCache","getCornerstoneImage","volumeBuffer","volumeBufferView","volumeImageId","minMax","intercept","numComps","byteLength","minPixelValue","min","maxPixelValue","max","slope","getCanvas","height","width","columnPixelSpacing","rowPixelSpacing","getCornerstoneImageLoadObject","getCornerstoneImages","_convertToImages","bytesRemaining","decache","StreamingImageVolume","getScalarData","createUint8SharedArray","createFloat32SharedArray","createUint16SharedArray","createInt16SharedArray","useNorm16Texture","preferSizeOverAccuracy","use16BitDataType","streamingImageVolumePromise","async","middleImageIndex","lastImageIndex","indexesToPrefetch","all","index","reject","concat","progressiveRendering","volumeMetadata","hasNegativeRescale","hasFloatRescale","rowCosineVec","colCosineVec","direction","signed","useSharedArrayBuffer","getShouldUseSharedArrayBuffer","handleCache","getStreamingImageVolume","streamingImageVolume","destroy","cancel","cancelLoading","splitFramesByFrameReferenceTime","framesMetadata","petImageModule","frameReferenceTime","framesGroups","reduce","rv","x","groupBy","keys","Number","parseFloat","item","fncList","framesPerGroup","every","g","Events","StreamingDynamicImageVolume","_ensureValidData","timePoint","timePoints","_getTimePointsToLoad","timePointsRequests","timePointRequests","_getTimePointRequests","_getTimePointsRequests","_numTimePoints","_timePoints","_getTimePointsData","scalarDataArrays","numTimePoints","start","end","initialTimePointIndex","_timePointIndex","timePointsToLoad","leftIndex","rightIndex","timePointIds","timePointIndex","newTimePointIndex","getPointData","setActiveScalars","StreamingEvents","volumesInfo","splitImageIdsBy4DTags","getVolumeInfo","get4DVolumeInfo","sortedImageIdsArrays","volumeInfo","flat","helpers","getDynamicVolumeInfo"],"sourceRoot":""}