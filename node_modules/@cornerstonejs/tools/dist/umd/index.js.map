{"version":3,"file":"index.js","mappings":"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,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,GAAI,KACd,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,GAAI,IAAK,KACd,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,GAAI,IAAK,GAAI,KACd,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,IAAK,KACf,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,IAAK,IAAK,KAChB,CAAC,IAAK,GAAI,IAAK,KACf,CAAC,IAAK,IAAK,GAAI,KACf,CAAC,GAAI,IAAK,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","sources":["webpack://cornerstoneTools3D/webpack/universalModuleDefinition","webpack://cornerstoneTools3D/../../node_modules/lodash.clonedeep/index.js","webpack://cornerstoneTools3D/../../node_modules/lodash.get/index.js","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Common/Core/CellArray\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Common/Core/DataArray\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Common/Core/Math\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Common/Core/MatrixBuilder\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Common/Core/Points\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Common/DataModel/PiecewiseFunction\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Common/DataModel/PolyData\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Filters/General/AppendPolyData\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Filters/General/ClipClosedSurface\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/IO/XML/XMLPolyDataReader\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Rendering/Core/Actor\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Rendering/Core/AxesActor\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Rendering/Core/ColorTransferFunction\"","webpack://cornerstoneTools3D/external umd \"@kitware/vtk.js/Rendering/Core/Mapper\"","webpack://cornerstoneTools3D/external umd {\"root\":\"cornerstone3D\",\"commonjs\":\"@cornerstonejs/core\",\"commonjs2\":\"@cornerstonejs/core\",\"amd\":\"@cornerstonejs/core\"}","webpack://cornerstoneTools3D/external umd {\"root\":\"window\",\"commonjs\":\"gl-matrix\",\"commonjs2\":\"gl-matrix\",\"amd\":\"gl-matrix\"}","webpack://cornerstoneTools3D/webpack/bootstrap","webpack://cornerstoneTools3D/webpack/runtime/compat get default export","webpack://cornerstoneTools3D/webpack/runtime/define property getters","webpack://cornerstoneTools3D/webpack/runtime/global","webpack://cornerstoneTools3D/webpack/runtime/hasOwnProperty shorthand","webpack://cornerstoneTools3D/webpack/runtime/make namespace object","webpack://cornerstoneTools3D/webpack/runtime/node module decorator","webpack://cornerstoneTools3D/./src/enums/Events.ts","webpack://cornerstoneTools3D/../../node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://cornerstoneTools3D/../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://cornerstoneTools3D/../../node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://cornerstoneTools3D/../../node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://cornerstoneTools3D/./src/stateManagement/annotation/annotationLocking.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/annotationSelection.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/annotationVisibility.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/FrameOfReferenceSpecificAnnotationManager.ts","webpack://cornerstoneTools3D/./src/store/svgNodeCache.ts","webpack://cornerstoneTools3D/./src/store/state.ts","webpack://cornerstoneTools3D/./src/enums/ToolModes.ts","webpack://cornerstoneTools3D/./src/store/ToolGroupManager/getToolGroupsWithToolName.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/annotationState.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/helpers/state.ts","webpack://cornerstoneTools3D/./src/constants/COLOR_LUT.ts","webpack://cornerstoneTools3D/./src/enums/SegmentationRepresentations.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Contour/contourConfig.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Labelmap/labelmapConfig.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/SegmentationStateManager.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/triggerSegmentationEvents.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/helpers/normalizeSegmentationInput.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/segmentationState.ts","webpack://cornerstoneTools3D/./src/eventListeners/mouse/getMouseEventPoints.ts","webpack://cornerstoneTools3D/./src/eventListeners/mouse/mouseDoubleClickListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/mouse/mouseMoveListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/mouse/mouseDownListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/mouse/index.ts","webpack://cornerstoneTools3D/./src/eventListeners/wheel/wheelListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/wheel/normalizeWheel.ts","webpack://cornerstoneTools3D/./src/eventListeners/wheel/index.ts","webpack://cornerstoneTools3D/./src/eventListeners/touch/preventGhostClick.js","webpack://cornerstoneTools3D/./src/enums/Touch.ts","webpack://cornerstoneTools3D/./src/eventListeners/touch/getTouchEventPoints.ts","webpack://cornerstoneTools3D/./src/utilities/touch/index.ts","webpack://cornerstoneTools3D/./src/eventListeners/touch/touchStartListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/touch/index.ts","webpack://cornerstoneTools3D/./src/eventListeners/keyboard/keyDownListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/keyboard/index.ts","webpack://cornerstoneTools3D/./src/drawingSvg/getSvgDrawingHelper.ts","webpack://cornerstoneTools3D/./src/drawingSvg/draw.ts","webpack://cornerstoneTools3D/./src/store/ToolGroupManager/getToolGroupForViewport.ts","webpack://cornerstoneTools3D/./src/utilities/getToolsWithModesForElement.ts","webpack://cornerstoneTools3D/./src/utilities/triggerAnnotationRender.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/imageRenderedEventDispatcher.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/shared/getToolsWithModesForMouseEvent.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/cameraModifiedEventDispatcher.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/imageSpacingCalibratedEventDispatcher.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/shared/customCallbackHandler.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseClick.ts","webpack://cornerstoneTools3D/./src/store/filterToolsWithMoveableHandles.ts","webpack://cornerstoneTools3D/./src/store/filterToolsWithAnnotationsForElement.ts","webpack://cornerstoneTools3D/./src/store/filterMoveableAnnotationTools.ts","webpack://cornerstoneTools3D/./src/enums/ToolBindings.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/shared/getMouseModifier.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/shared/getActiveToolForMouseEvent.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseDownAnnotationAction.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseDown.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/shared/getToolsWithActionsForMouseEvent.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseDownActivate.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseDoubleClick.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseDrag.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseMove.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseUp.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseEventHandlers/mouseWheel.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/mouseToolEventDispatcher.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/shared/getActiveToolForKeyboardEvent.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/keyboardEventHandlers/keyDown.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/keyboardEventHandlers/keyUp.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/keyboardToolEventDispatcher.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/shared/getActiveToolForTouchEvent.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/shared/getToolsWithModesForTouchEvent.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/touchEventHandlers/touchStart.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/touchEventHandlers/touchStartActivate.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/touchEventHandlers/touchDrag.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/touchEventHandlers/touchEnd.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/touchEventHandlers/touchTap.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/touchEventHandlers/touchPress.ts","webpack://cornerstoneTools3D/./src/eventDispatchers/touchToolEventDispatcher.ts","webpack://cornerstoneTools3D/./src/store/addEnabledElement.ts","webpack://cornerstoneTools3D/./src/store/SynchronizerManager/getSynchronizersForViewport.ts","webpack://cornerstoneTools3D/./src/store/removeEnabledElement.ts","webpack://cornerstoneTools3D/./src/utilities/triggerAnnotationRenderForViewportIds.ts","webpack://cornerstoneTools3D/./src/eventListeners/annotations/annotationModifiedListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/annotations/annotationSelectionListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/segmentation/segmentationModifiedEventListener.ts","webpack://cornerstoneTools3D/./src/store/ToolGroupManager/getToolGroup.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/config/segmentationConfig.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/config/segmentationVisibility.ts","webpack://cornerstoneTools3D/./src/tools/base/BaseTool.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Surface/removeSurfaceFromElement.ts","webpack://cornerstoneTools3D/./src/utilities/pointToString.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Surface/addSurfaceToElement.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Surface/surfaceDisplay.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Contour/utils.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Contour/contourConfigCache.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Contour/addContourSetsToElement.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Contour/updateContourSets.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Contour/removeContourFromElement.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Contour/contourDisplay.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Contour/addOrUpdateContourSets.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Labelmap/addLabelmapToElement.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Labelmap/removeLabelmapFromElement.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Labelmap/labelmapDisplay.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/SegmentationDisplayTool.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/triggerSegmentationRender.ts","webpack://cornerstoneTools3D/./src/eventListeners/segmentation/segmentationDataModifiedEventListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/segmentation/segmentationRepresentationModifiedEventListener.ts","webpack://cornerstoneTools3D/./src/eventListeners/segmentation/segmentationRepresentationRemovedEventListener.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/removeSegmentationsFromToolGroup.ts","webpack://cornerstoneTools3D/./src/store/ToolGroupManager/destroyToolGroup.ts","webpack://cornerstoneTools3D/./src/store/ToolGroupManager/destroy.ts","webpack://cornerstoneTools3D/./src/init.ts","webpack://cornerstoneTools3D/./src/store/addTool.ts","webpack://cornerstoneTools3D/./src/store/cancelActiveManipulations.ts","webpack://cornerstoneTools3D/./src/store/SynchronizerManager/Synchronizer.ts","webpack://cornerstoneTools3D/./src/store/SynchronizerManager/createSynchronizer.ts","webpack://cornerstoneTools3D/./src/store/SynchronizerManager/destroy.ts","webpack://cornerstoneTools3D/./src/store/SynchronizerManager/getSynchronizer.ts","webpack://cornerstoneTools3D/./src/store/SynchronizerManager/getAllSynchronizers.ts","webpack://cornerstoneTools3D/./src/store/SynchronizerManager/destroySynchronizer.ts","webpack://cornerstoneTools3D/./src/cursors/MouseCursor.ts","webpack://cornerstoneTools3D/./src/enums/AnnotationStyleStates.ts","webpack://cornerstoneTools3D/./src/cursors/ImageMouseCursor.ts","webpack://cornerstoneTools3D/./src/cursors/SVGCursorDescriptor.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/config/ToolStyle.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/config/helpers.ts","webpack://cornerstoneTools3D/./src/cursors/SVGMouseCursor.ts","webpack://cornerstoneTools3D/./src/cursors/elementCursor.ts","webpack://cornerstoneTools3D/./src/store/ToolGroupManager/ToolGroup.ts","webpack://cornerstoneTools3D/./src/store/ToolGroupManager/createToolGroup.ts","webpack://cornerstoneTools3D/./src/store/ToolGroupManager/getAllToolGroups.ts","webpack://cornerstoneTools3D/./src/synchronizers/callbacks/cameraSyncCallback.ts","webpack://cornerstoneTools3D/./src/synchronizers/synchronizers/createCameraPositionSynchronizer.ts","webpack://cornerstoneTools3D/./src/synchronizers/callbacks/voiSyncCallback.ts","webpack://cornerstoneTools3D/./src/synchronizers/synchronizers/createVOISynchronizer.ts","webpack://cornerstoneTools3D/./src/synchronizers/callbacks/zoomPanSyncCallback.ts","webpack://cornerstoneTools3D/./src/synchronizers/synchronizers/createZoomPanSynchronizer.ts","webpack://cornerstoneTools3D/./src/utilities/clip.js","webpack://cornerstoneTools3D/./src/utilities/scroll.ts","webpack://cornerstoneTools3D/./src/utilities/viewport/jumpToSlice.ts","webpack://cornerstoneTools3D/./src/synchronizers/callbacks/stackImageSyncCallback.ts","webpack://cornerstoneTools3D/./src/synchronizers/callbacks/areViewportsCoplanar .ts","webpack://cornerstoneTools3D/./src/synchronizers/synchronizers/createStackImageSynchronizer.ts","webpack://cornerstoneTools3D/./src/drawingSvg/_getHash.ts","webpack://cornerstoneTools3D/./src/drawingSvg/setAttributesIfNecessary.ts","webpack://cornerstoneTools3D/./src/drawingSvg/setNewAttributesIfValid.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawCircle.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawEllipse.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawHandles.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawLine.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawPolyline.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawTextBox.ts","webpack://cornerstoneTools3D/./src/utilities/math/vec2/findClosestPoint.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawLink.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawLinkedTextBox.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawRect.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawArrow.ts","webpack://cornerstoneTools3D/./src/drawingSvg/drawRedactionRect.ts","webpack://cornerstoneTools3D/./src/utilities/getAnnotationNearPoint.ts","webpack://cornerstoneTools3D/./src/utilities/isObject.js","webpack://cornerstoneTools3D/./src/utilities/debounce.js","webpack://cornerstoneTools3D/./src/utilities/throttle.js","webpack://cornerstoneTools3D/./src/utilities/calibrateImageSpacing.ts","webpack://cornerstoneTools3D/./src/utilities/getCalibratedUnits.ts","webpack://cornerstoneTools3D/./src/utilities/pointInShapeCallback.ts","webpack://cornerstoneTools3D/./src/utilities/boundingBox/getBoundingBoxAroundShape.ts","webpack://cornerstoneTools3D/./src/utilities/pointInSurroundingSphereCallback.ts","webpack://cornerstoneTools3D/./src/utilities/math/sphere/pointInSphere.ts","webpack://cornerstoneTools3D/./src/utilities/roundNumber.ts","webpack://cornerstoneTools3D/./src/utilities/annotationFrameRange.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/strategies/utils/isWithinThreshold.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/strategies/fillSphere.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/strategies/eraseSphere.ts","webpack://cornerstoneTools3D/./src/utilities/math/ellipse/getCanvasEllipseCorners.ts","webpack://cornerstoneTools3D/./src/utilities/math/ellipse/pointInEllipse.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/strategies/fillCircle.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/strategies/eraseCircle.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/activeSegmentation.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/segmentLocking.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/segmentIndex.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/config/segmentationColor.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/BrushTool.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/utilities.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/thresholdVolumeByRange.ts","webpack://cornerstoneTools3D/./src/utilities/viewportFilters/filterViewportsWithFrameOfReferenceUID.ts","webpack://cornerstoneTools3D/./src/utilities/viewportFilters/filterViewportsWithToolEnabled.ts","webpack://cornerstoneTools3D/./src/utilities/viewportFilters/filterViewportsWithParallelNormals.ts","webpack://cornerstoneTools3D/./src/utilities/viewportFilters/getViewportIdsWithToolToRender.ts","webpack://cornerstoneTools3D/./src/utilities/planar/filterAnnotationsWithinSlice.ts","webpack://cornerstoneTools3D/./src/utilities/planar/filterAnnotationsForDisplay.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/config/getState.ts","webpack://cornerstoneTools3D/./src/tools/base/AnnotationDisplayTool.ts","webpack://cornerstoneTools3D/./src/tools/base/AnnotationTool.ts","webpack://cornerstoneTools3D/./src/utilities/math/line/distanceToPointSquared.ts","webpack://cornerstoneTools3D/./src/utilities/math/line/distanceToPoint.ts","webpack://cornerstoneTools3D/./src/utilities/math/rectangle/distanceToPoint.ts","webpack://cornerstoneTools3D/./src/utilities/drawing/getTextBoxCoordsCanvas.ts","webpack://cornerstoneTools3D/./src/utilities/planar/getWorldWidthAndHeightFromCorners.ts","webpack://cornerstoneTools3D/./src/utilities/getModalityUnit.ts","webpack://cornerstoneTools3D/./src/utilities/viewport/isViewportPreScaled.ts","webpack://cornerstoneTools3D/./src/utilities/math/basic/Calculator.ts","webpack://cornerstoneTools3D/./src/utilities/math/basic/BasicStatsCalculator.ts","webpack://cornerstoneTools3D/./src/tools/annotation/RectangleROITool.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/RectangleROIThresholdTool.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/RectangleROIStartEndThresholdTool.ts","webpack://cornerstoneTools3D/./src/utilities/boundingBox/extend2DBoundingBoxInViewAxis.ts","webpack://cornerstoneTools3D/./src/utilities/rectangleROITool/getBoundsIJKFromRectangleAnnotations.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/rectangleROIThresholdVolumeByRange.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/createMergedLabelmapForIndex.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/isValidRepresentationConfig.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/getDefaultRepresentationConfig.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/createLabelmapVolumeForViewport.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/floodFill.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/brushSizeForToolGroup.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/brushThresholdForToolGroup.ts","webpack://cornerstoneTools3D/./src/utilities/segmentation/thresholdSegmentationByRange.ts","webpack://cornerstoneTools3D/./src/utilities/math/vec2/liangBarksyClip.ts","webpack://cornerstoneTools3D/./src/utilities/math/line/intersectLine.ts","webpack://cornerstoneTools3D/./src/utilities/math/polyline/getIntersectionWithPolyline.ts","webpack://cornerstoneTools3D/./src/utilities/math/polyline/getSubPixelSpacingAndXYDirections.ts","webpack://cornerstoneTools3D/./src/utilities/math/polyline/pointsAreWithinCloseContourProximity.ts","webpack://cornerstoneTools3D/./src/utilities/math/polyline/addCanvasPointsToArray.ts","webpack://cornerstoneTools3D/./src/utilities/math/polyline/pointCanProjectOnLine.ts","webpack://cornerstoneTools3D/./src/utilities/math/polyline/calculateAreaOfPoints.ts","webpack://cornerstoneTools3D/./src/utilities/math/point/distanceToPoint.ts","webpack://cornerstoneTools3D/./src/utilities/planar/getPointInLineOfSightWithCriteria.ts","webpack://cornerstoneTools3D/./src/utilities/planar/index.ts","webpack://cornerstoneTools3D/./src/utilities/orientation/getOrientationStringLPS.ts","webpack://cornerstoneTools3D/./src/utilities/orientation/invertOrientationStringLPS.ts","webpack://cornerstoneTools3D/./src/utilities/cine/events.ts","webpack://cornerstoneTools3D/./src/utilities/cine/state.ts","webpack://cornerstoneTools3D/./src/utilities/cine/playClip.ts","webpack://cornerstoneTools3D/../../node_modules/d3-interpolate/src/basis.js","webpack://cornerstoneTools3D/../../node_modules/d3-interpolate/src/quantize.js","webpack://cornerstoneTools3D/../../node_modules/d3-array/src/transpose.js","webpack://cornerstoneTools3D/../../node_modules/d3-array/src/zip.js","webpack://cornerstoneTools3D/../../node_modules/d3-array/src/min.js","webpack://cornerstoneTools3D/./src/utilities/planarFreehandROITool/interpolation/interpolateSegmentPoints.ts","webpack://cornerstoneTools3D/./src/utilities/planarFreehandROITool/interpolation/algorithms/bspline.ts","webpack://cornerstoneTools3D/./src/utilities/planarFreehandROITool/interpolatePoints.ts","webpack://cornerstoneTools3D/./src/tools/annotation/planarFreehandROITool/findOpenUShapedContourVectorToPeak.ts","webpack://cornerstoneTools3D/./src/tools/annotation/planarFreehandROITool/drawLoop.ts","webpack://cornerstoneTools3D/./src/tools/annotation/planarFreehandROITool/editLoopCommon.ts","webpack://cornerstoneTools3D/./src/tools/annotation/planarFreehandROITool/closedContourEditLoop.ts","webpack://cornerstoneTools3D/./src/tools/annotation/planarFreehandROITool/openContourEditLoop.ts","webpack://cornerstoneTools3D/./src/tools/annotation/planarFreehandROITool/openContourEndEditLoop.ts","webpack://cornerstoneTools3D/./src/tools/annotation/planarFreehandROITool/renderMethods.ts","webpack://cornerstoneTools3D/./src/tools/annotation/PlanarFreehandROITool.ts","webpack://cornerstoneTools3D/./src/utilities/planarFreehandROITool/interpolateAnnotation.ts","webpack://cornerstoneTools3D/./src/utilities/planarFreehandROITool/index.ts","webpack://cornerstoneTools3D/./src/utilities/stackPrefetch/state.ts","webpack://cornerstoneTools3D/./src/utilities/stackPrefetch/stackPrefetchUtils.ts","webpack://cornerstoneTools3D/./src/utilities/stackPrefetch/stackPrefetch.ts","webpack://cornerstoneTools3D/./src/utilities/stackPrefetch/stackContextPrefetch.ts","webpack://cornerstoneTools3D/./src/utilities/viewport/jumpToWorld.ts","webpack://cornerstoneTools3D/./src/utilities/dynamicVolume/getDataInTime.ts","webpack://cornerstoneTools3D/./src/utilities/dynamicVolume/generateImageFromTimeData.ts","webpack://cornerstoneTools3D/./src/utilities/polyData/utils.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/enums/ColorbarRangeTextPosition.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/common/isRangeValid.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/common/areColorbarRangesEqual.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/common/isColorbarSizeValid.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/common/areColorbarSizesEqual.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/ColorbarCanvas.ts","webpack://cornerstoneTools3D/./src/utilities/math/vec3/interpolateVec3.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/ColorbarTicks.ts","webpack://cornerstoneTools3D/./src/widgets/Widget.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/Colorbar.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/common/isRangeTextPositionValid.ts","webpack://cornerstoneTools3D/./src/utilities/voi/colorbar/ViewportColorbar.ts","webpack://cornerstoneTools3D/./src/utilities/getVOIMultipliers.ts","webpack://cornerstoneTools3D/./src/cursors/setCursorForElement.ts","webpack://cornerstoneTools3D/./src/cursors/index.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/config/getFont.ts","webpack://cornerstoneTools3D/./src/stateManagement/annotation/AnnotationGroup.ts","webpack://cornerstoneTools3D/./src/tools/displayTools/Labelmap/validateRepresentationData.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/helpers/validateSegmentationInput.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/addSegmentations.ts","webpack://cornerstoneTools3D/./src/stateManagement/segmentation/addSegmentationRepresentations.ts","webpack://cornerstoneTools3D/./src/tools/PanTool.ts","webpack://cornerstoneTools3D/./src/tools/TrackballRotateTool.ts","webpack://cornerstoneTools3D/./src/tools/annotation/ProbeTool.ts","webpack://cornerstoneTools3D/./src/tools/annotation/DragProbeTool.ts","webpack://cornerstoneTools3D/./src/tools/WindowLevelTool.ts","webpack://cornerstoneTools3D/./src/tools/ZoomTool.ts","webpack://cornerstoneTools3D/./src/tools/StackScrollTool.ts","webpack://cornerstoneTools3D/./src/utilities/math/angle/angleBetweenLines.ts","webpack://cornerstoneTools3D/./src/tools/PlanarRotateTool.ts","webpack://cornerstoneTools3D/./src/tools/StackScrollToolMouseWheelTool.ts","webpack://cornerstoneTools3D/./src/tools/VolumeRotateMouseWheelTool.ts","webpack://cornerstoneTools3D/./src/tools/MIPJumpToClickTool.ts","webpack://cornerstoneTools3D/./src/tools/annotation/LengthTool.ts","webpack://cornerstoneTools3D/./src/tools/CrosshairsTool.ts","webpack://cornerstoneTools3D/./src/tools/ReferenceLinesTool.ts","webpack://cornerstoneTools3D/./src/tools/OverlayGridTool.ts","webpack://cornerstoneTools3D/./src/tools/SegmentationIntersectionTool.ts","webpack://cornerstoneTools3D/./src/utilities/planar/getWorldWidthAndHeightFromTwoPoints.ts","webpack://cornerstoneTools3D/./src/tools/annotation/EllipticalROITool.ts","webpack://cornerstoneTools3D/./src/utilities/math/circle/getCanvasCircleRadius.ts","webpack://cornerstoneTools3D/./src/utilities/math/circle/getCanvasCircleCorners.ts","webpack://cornerstoneTools3D/./src/tools/annotation/CircleROITool.ts","webpack://cornerstoneTools3D/./src/tools/annotation/BidirectionalTool.ts","webpack://cornerstoneTools3D/./src/tools/annotation/ArrowAnnotateTool.ts","webpack://cornerstoneTools3D/./src/tools/annotation/AngleTool.ts","webpack://cornerstoneTools3D/./src/utilities/math/midPoint.ts","webpack://cornerstoneTools3D/./src/tools/annotation/CobbAngleTool.ts","webpack://cornerstoneTools3D/./src/tools/annotation/KeyImageTool.ts","webpack://cornerstoneTools3D/./src/tools/MagnifyTool.ts","webpack://cornerstoneTools3D/./src/tools/AdvancedMagnifyViewport.ts","webpack://cornerstoneTools3D/./src/tools/AdvancedMagnifyViewportManager.ts","webpack://cornerstoneTools3D/./src/tools/AdvancedMagnifyTool.ts","webpack://cornerstoneTools3D/./src/tools/ReferenceCursors.ts","webpack://cornerstoneTools3D/./src/tools/ScaleOverlayTool.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/strategies/fillRectangle.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/strategies/eraseRectangle.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/RectangleScissorsTool.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/CircleScissorsTool.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/SphereScissorsTool.ts","webpack://cornerstoneTools3D/./src/tools/OrientationMarkerTool.ts","webpack://cornerstoneTools3D/./src/tools/segmentation/PaintFillTool.ts","webpack://cornerstoneTools3D/./src/tools/annotation/VideoRedactionTool.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"gl-matrix\"), require(\"@cornerstonejs/core\"), require(\"@kitware/vtk.js/Common/DataModel/PiecewiseFunction\"), require(\"@kitware/vtk.js/Rendering/Core/ColorTransferFunction\"), require(\"@kitware/vtk.js/Common/Core/CellArray\"), require(\"@kitware/vtk.js/Common/Core/Points\"), require(\"@kitware/vtk.js/Common/DataModel/PolyData\"), require(\"@kitware/vtk.js/Common/Core/DataArray\"), require(\"@kitware/vtk.js/Filters/General/AppendPolyData\"), require(\"@kitware/vtk.js/Rendering/Core/Actor\"), require(\"@kitware/vtk.js/Rendering/Core/Mapper\"), require(\"@kitware/vtk.js/Filters/General/ClipClosedSurface\"), require(\"@kitware/vtk.js/Common/Core/Math\"), require(\"@kitware/vtk.js/Common/Core/MatrixBuilder\"), require(\"@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget\"), require(\"@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor\"), require(\"@kitware/vtk.js/Rendering/Core/AxesActor\"), require(\"@kitware/vtk.js/IO/XML/XMLPolyDataReader\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"gl-matrix\", \"@cornerstonejs/core\", \"@kitware/vtk.js/Common/DataModel/PiecewiseFunction\", \"@kitware/vtk.js/Rendering/Core/ColorTransferFunction\", \"@kitware/vtk.js/Common/Core/CellArray\", \"@kitware/vtk.js/Common/Core/Points\", \"@kitware/vtk.js/Common/DataModel/PolyData\", \"@kitware/vtk.js/Common/Core/DataArray\", \"@kitware/vtk.js/Filters/General/AppendPolyData\", \"@kitware/vtk.js/Rendering/Core/Actor\", \"@kitware/vtk.js/Rendering/Core/Mapper\", \"@kitware/vtk.js/Filters/General/ClipClosedSurface\", \"@kitware/vtk.js/Common/Core/Math\", \"@kitware/vtk.js/Common/Core/MatrixBuilder\", \"@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget\", \"@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor\", \"@kitware/vtk.js/Rendering/Core/AxesActor\", \"@kitware/vtk.js/IO/XML/XMLPolyDataReader\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"cornerstoneTools3D\"] = factory(require(\"gl-matrix\"), require(\"@cornerstonejs/core\"), require(\"@kitware/vtk.js/Common/DataModel/PiecewiseFunction\"), require(\"@kitware/vtk.js/Rendering/Core/ColorTransferFunction\"), require(\"@kitware/vtk.js/Common/Core/CellArray\"), require(\"@kitware/vtk.js/Common/Core/Points\"), require(\"@kitware/vtk.js/Common/DataModel/PolyData\"), require(\"@kitware/vtk.js/Common/Core/DataArray\"), require(\"@kitware/vtk.js/Filters/General/AppendPolyData\"), require(\"@kitware/vtk.js/Rendering/Core/Actor\"), require(\"@kitware/vtk.js/Rendering/Core/Mapper\"), require(\"@kitware/vtk.js/Filters/General/ClipClosedSurface\"), require(\"@kitware/vtk.js/Common/Core/Math\"), require(\"@kitware/vtk.js/Common/Core/MatrixBuilder\"), require(\"@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget\"), require(\"@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor\"), require(\"@kitware/vtk.js/Rendering/Core/AxesActor\"), require(\"@kitware/vtk.js/IO/XML/XMLPolyDataReader\"));\n\telse\n\t\troot[\"cornerstoneTools3D\"] = factory(root[\"window\"], root[\"cornerstone3D\"], root[\"@kitware/vtk.js/Common/DataModel/PiecewiseFunction\"], root[\"@kitware/vtk.js/Rendering/Core/ColorTransferFunction\"], root[\"@kitware/vtk.js/Common/Core/CellArray\"], root[\"@kitware/vtk.js/Common/Core/Points\"], root[\"@kitware/vtk.js/Common/DataModel/PolyData\"], root[\"@kitware/vtk.js/Common/Core/DataArray\"], root[\"@kitware/vtk.js/Filters/General/AppendPolyData\"], root[\"@kitware/vtk.js/Rendering/Core/Actor\"], root[\"@kitware/vtk.js/Rendering/Core/Mapper\"], root[\"@kitware/vtk.js/Filters/General/ClipClosedSurface\"], root[\"@kitware/vtk.js/Common/Core/Math\"], root[\"@kitware/vtk.js/Common/Core/MatrixBuilder\"], root[\"@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget\"], root[\"@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor\"], root[\"@kitware/vtk.js/Rendering/Core/AxesActor\"], root[\"@kitware/vtk.js/IO/XML/XMLPolyDataReader\"]);\n})(self, (__WEBPACK_EXTERNAL_MODULE__976__, __WEBPACK_EXTERNAL_MODULE__953__, __WEBPACK_EXTERNAL_MODULE__441__, __WEBPACK_EXTERNAL_MODULE__795__, __WEBPACK_EXTERNAL_MODULE__396__, __WEBPACK_EXTERNAL_MODULE__348__, __WEBPACK_EXTERNAL_MODULE__70__, __WEBPACK_EXTERNAL_MODULE__785__, __WEBPACK_EXTERNAL_MODULE__127__, __WEBPACK_EXTERNAL_MODULE__474__, __WEBPACK_EXTERNAL_MODULE__610__, __WEBPACK_EXTERNAL_MODULE__448__, __WEBPACK_EXTERNAL_MODULE__807__, __WEBPACK_EXTERNAL_MODULE__847__, __WEBPACK_EXTERNAL_MODULE__518__, __WEBPACK_EXTERNAL_MODULE__744__, __WEBPACK_EXTERNAL_MODULE__424__, __WEBPACK_EXTERNAL_MODULE__614__) => {\nreturn ","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    symbolTag = '[object Symbol]';\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/,\n    reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol,\n    splice = arrayProto.splice;\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value) {\n  return isArray(value) ? value : stringToPath(value);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoize(function(string) {\n  string = toString(string);\n\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result);\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Assign cache to `_.memoize`.\nmemoize.Cache = MapCache;\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Gets the value at `path` of `object`. If the resolved value is\n * `undefined`, the `defaultValue` is returned in its place.\n *\n * @static\n * @memberOf _\n * @since 3.7.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n * @returns {*} Returns the resolved value.\n * @example\n *\n * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n *\n * _.get(object, 'a[0].b.c');\n * // => 3\n *\n * _.get(object, ['a', '0', 'b', 'c']);\n * // => 3\n *\n * _.get(object, 'a.b.c', 'default');\n * // => 'default'\n */\nfunction get(object, path, defaultValue) {\n  var result = object == null ? undefined : baseGet(object, path);\n  return result === undefined ? defaultValue : result;\n}\n\nmodule.exports = get;\n","module.exports = __WEBPACK_EXTERNAL_MODULE__396__;","module.exports = __WEBPACK_EXTERNAL_MODULE__785__;","module.exports = __WEBPACK_EXTERNAL_MODULE__807__;","module.exports = __WEBPACK_EXTERNAL_MODULE__847__;","module.exports = __WEBPACK_EXTERNAL_MODULE__348__;","module.exports = __WEBPACK_EXTERNAL_MODULE__441__;","module.exports = __WEBPACK_EXTERNAL_MODULE__70__;","module.exports = __WEBPACK_EXTERNAL_MODULE__127__;","module.exports = __WEBPACK_EXTERNAL_MODULE__448__;","module.exports = __WEBPACK_EXTERNAL_MODULE__614__;","module.exports = __WEBPACK_EXTERNAL_MODULE__518__;","module.exports = __WEBPACK_EXTERNAL_MODULE__474__;","module.exports = __WEBPACK_EXTERNAL_MODULE__744__;","module.exports = __WEBPACK_EXTERNAL_MODULE__424__;","module.exports = __WEBPACK_EXTERNAL_MODULE__795__;","module.exports = __WEBPACK_EXTERNAL_MODULE__610__;","module.exports = __WEBPACK_EXTERNAL_MODULE__953__;","module.exports = __WEBPACK_EXTERNAL_MODULE__976__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","/**\n *  The events for cornerstoneTools3D Tools. Native Mouse and Keyboard events are\n *  captured, normalized, and re-triggered with a `CORNERSTONE_TOOLS` prefix. This\n *  allows us to handle events consistently across different browsers.\n *\n */\nenum Events {\n  ///////////////////////////////////////\n  //            Tools\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new tools is activated.\n   *\n   * Make use of {@link EventTypes.ToolActivatedEventType | Tool Activated Event Type  }\n   * for typing your event listeners for this tool activated event, and see what event\n   * detail is included in {@link EventTypes.ToolActivatedEventDetail | Tool Activated Event Detail}.\n   */\n  TOOL_ACTIVATED = 'CORNERSTONE_TOOLS_TOOL_ACTIVATED',\n\n  /**\n   * Triggers on the eventTarget when a mode of a tool is changed (active, passive, enabled and disabled).\n   *\n   * Make use of {@link EventTypes.ToolModeChangedEventType | Tool Mode Changed Event Type  }\n   * for typing your event listeners for this tool activated event, and see what event\n   * detail is included in {@link EventTypes.ToolModeChangedEventDetail | Tool Mode Changed Event Detail}.\n   */\n  TOOL_MODE_CHANGED = 'CORNERSTONE_TOOLS_TOOL_MODE_CHANGED',\n\n  ///////////////////////////////////////\n  //            Annotations\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a new annotation is added to the state.\n   *\n   * Make use of {@link EventTypes.AnnotationAddedEventType | Annotation Added Event Type  }\n   * for typing your event listeners for this annotation added event, and see what event\n   * detail is included in {@link EventTypes.AnnotationAddedEventDetail | Annotation Added Event Detail}.\n   */\n  ANNOTATION_ADDED = 'CORNERSTONE_TOOLS_ANNOTATION_ADDED',\n\n  /**\n   * Triggers on the eventTarget when a new annotation is completed its drawing\n   * Make use of {@link EventTypes.AnnotationCompletedEventType | Annotation Completed Event Type }\n   * for typing your event listeners for this annotation completed event, and see what event\n   * detail is included in {@link EventTypes.AnnotationCompletedEventDetail | Annotation Completed Event Detail}.\n   */\n  ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is modified (e.g. a handle is modified).\n   * Make use of {@link EventTypes.AnnotationModifiedEventType | Annotation Modified Event Type}\n   * for typing your event listeners for this annotation modified event, and see what\n   * event detail is included in {@link EventTypes.AnnotationModifiedEventDetail | Annotation Modified Event Detail}.\n   */\n  ANNOTATION_MODIFIED = 'CORNERSTONE_TOOLS_ANNOTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when an annotation is removed from the annotations manager.\n   * Make use of {@link EventTypes.AnnotationRemovedEventType | Annotation Removed Event Type}\n   * for typing your event listeners for this annotation removed event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRemovedEventDetail | Annotation Removed Event Detail}.\n   */\n  ANNOTATION_REMOVED = 'CORNERSTONE_TOOLS_ANNOTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when an annotation selection status is changed.\n   * Make use of {@link EventTypes.AnnotationSelectionChangeEventType | Annotation Selection Change Event Type}\n   * for typing your event listeners for this annotation selection change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationSelectionChangeEventDetail | Annotation Selection Change Event Detail}.\n   */\n  ANNOTATION_SELECTION_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_SELECTION_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation locked status is changed.\n   * Make use of {@link EventTypes.AnnotationLockChangeEventType | Annotation Lock Change Event Type}\n   * for typing your event listeners for this annotation lock change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationLockChangeEventDetail | Annotation Lock Change Event Detail}.\n   */\n  ANNOTATION_LOCK_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_LOCK_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation visible status is changed.\n   * Make use of {@link EventTypes.AnnotationVisibilityChangeEventType | Annotation Visible Change Event Type}\n   * for typing your event listeners for this annotation Hide change event, and see what\n   * event detail is included in {@link EventTypes.AnnotationVisibilityChangeEventDetail | Annotation Visible Change Event Detail}.\n   */\n  ANNOTATION_VISIBILITY_CHANGE = 'CORNERSTONE_TOOLS_ANNOTATION_VISIBILITY_CHANGE',\n\n  /**\n   * Triggers on the eventTarget when an annotation is rendered.\n   * Make use of {@link EventTypes.AnnotationRenderedEventType | Annotation Rendered Event Type}\n   * for typing your event listeners for this annotation rendered event, and see what\n   * event detail is included in {@link EventTypes.AnnotationRenderedEventDetail | Annotation Rendered Event Detail}.\n   */\n  ANNOTATION_RENDERED = 'CORNERSTONE_TOOLS_ANNOTATION_RENDERED',\n\n  ///////////////////////////////////////\n  //        Segmentations Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is updated in the state manager.\n   * Make use of {@link EventTypes.SegmentationModifiedEventType | Segmentation Modified Event Type}\n   * for typing your event listeners for this segmentation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationModifiedEventDetail | Segmentation Modified Event Detail}.\n   */\n  SEGMENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is rendered by the Segmentation Rendering Engine.\n   * Make use of {@link EventTypes.SegmentationRenderedEventType | Segmentation Rendered Event Type}\n   * for typing your event listeners for this segmentation rendered event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRenderedEventDetail | Segmentation Rendered Event Detail}.\n   */\n  SEGMENTATION_RENDERED = 'CORNERSTONE_TOOLS_SEGMENTATION_RENDERED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is modified in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationModifiedEventType | Segmentation Representation Modified Event Type}\n   * for typing your event listeners for this segmentation representation modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationModifiedEventDetail | Segmentation Representation Modified Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_MODIFIED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation is removed from the state manager.\n   * Make use of {@link EventTypes.SegmentationRemovedEventType | Segmentation Removed Event Type}\n   * for typing your event listeners for this segmentation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRemovedEventDetail | Segmentation Removed Event Detail}.\n   */\n  SEGMENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation representation of a toolGroup is removed in the state manager.\n   * Make use of {@link EventTypes.SegmentationRepresentationRemovedEventType | Segmentation Representation Removed Event Type}\n   * for typing your event listeners for this segmentation representation removed event, and see what\n   * event detail is included in {@link EventTypes.SegmentationRepresentationRemovedEventDetail | Segmentation Representation Removed Event Detail}.\n   */\n  SEGMENTATION_REPRESENTATION_REMOVED = 'CORNERSTONE_TOOLS_SEGMENTATION_REPRESENTATION_REMOVED',\n\n  /**\n   * Triggers on the eventTarget when a Segmentation data is modified (e.g., by brush tool).\n   * Make use of {@link EventTypes.SegmentationDataModifiedEventType | Segmentation Data Modified Event Type}\n   * for typing your event listeners for this segmentation data modified event, and see what\n   * event detail is included in {@link EventTypes.SegmentationDataModifiedEventDetail | Segmentation Data Modified Event Detail}.\n   */\n  SEGMENTATION_DATA_MODIFIED = 'CORNERSTONE_TOOLS_SEGMENTATION_DATA_MODIFIED',\n\n  ///////////////////////////////////////\n  //         Keyboard Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is pressed.\n   * Make use of {@link EventTypes.KeyDownEventType | Key Down Event Type}\n   * for typing your event listeners for this key down event, and see what\n   * event detail is included in {@link EventTypes.KeyDownEventDetail | Key Down Event Detail}.\n   */\n  KEY_DOWN = 'CORNERSTONE_TOOLS_KEY_DOWN',\n\n  /**\n   * Triggers on the eventTarget when a key on the keyboard is released.\n   * Make use of {@link EventTypes.KeyUpEventType | Key Up Event Type}\n   * for typing your event listeners for this key up event, and see what\n   * event detail is included in {@link EventTypes.KeyUpEventDetail | Key Up Event Detail}.\n   */\n  KEY_UP = 'CORNERSTONE_TOOLS_KEY_UP',\n\n  ///////////////////////////////////////\n  //      Mouse Events\n  ///////////////////////////////////////\n\n  /**\n   * Triggers on the eventTarget when the mouse is pressed down, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDownEventType | Mouse Down Event Type}\n   * for typing your event listeners for this mouse down event, and see what\n   * event detail is included in {@link EventTypes.MouseDownEventDetail | Mouse Down Event Detail}.\n   */\n  MOUSE_DOWN = 'CORNERSTONE_TOOLS_MOUSE_DOWN',\n\n  /**\n   * Triggers on the eventTarget when the mouse is released, it is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseUpEventType | Mouse Up Event Type}\n   * for typing your event listeners for this mouse up event, and see what\n   * event detail is included in {@link EventTypes.MouseUpEventDetail | Mouse Up Event Detail}.\n   */\n  MOUSE_UP = 'CORNERSTONE_TOOLS_MOUSE_UP',\n\n  /**\n   * Triggers on the eventTarget when a handled `MOUSE_DOWN` event does not `stopPropagation`. The hook\n   * we use to create new annotation for mouse events.\n   * Make use of {@link EventTypes.MouseDownActivateEventType | Mouse Down Activate Event Type}\n   * for typing your event listeners for this mouse down activate event, and see what\n   * event detail is included in {@link EventTypes.MouseDownActivateEventDetail | Mouse Down Activate Event Detail}.\n   */\n  MOUSE_DOWN_ACTIVATE = 'CORNERSTONE_TOOLS_MOUSE_DOWN_ACTIVATE',\n\n  /**\n   * Triggers on the event target when mouse is dragging an annotation or textBox.\n   * Make use of {@link EventTypes.MouseDragEventType | Mouse Drag Event Type}\n   * for typing your event listeners for this mouse drag event, and see what\n   * event detail is included in {@link EventTypes.MouseDragEventDetail | Mouse Drag Event Detail}.\n   */\n  MOUSE_DRAG = 'CORNERSTONE_TOOLS_MOUSE_DRAG',\n\n  /**\n   * Triggers on the eventTarget, when the mouse is moved, it is CornerstoneTools normalized event.\n   * It can be just a mouse move or when double click is performed and annotation\n   * drawing can be performed with just mouse move.\n   * Make use of {@link EventTypes.MouseMoveEventType | Mouse Move Event Type}\n   * for typing your event listeners for this mouse move event, and see what\n   * event detail is included in {@link EventTypes.MouseMoveEventDetail | Mouse Move Event Detail}.\n   */\n  MOUSE_MOVE = 'CORNERSTONE_TOOLS_MOUSE_MOVE',\n\n  /**\n   * Triggers on the eventTarget when a mouse click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseClickEventType | Mouse Click Event Type}\n   * for typing your event listeners for this mouse click event, and see what\n   * event detail is included in {@link EventTypes.MouseClickEventDetail | Mouse Click Event Detail}.\n   */\n  MOUSE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse double click is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseDoubleClickEventType | Mouse Double Click Event Type}\n   * for typing your event listeners for this mouse double click event, and see what\n   * event detail is included in {@link EventTypes.MouseDoubleClickEventDetail | Mouse Double Click Event Detail}.\n   */\n  MOUSE_DOUBLE_CLICK = 'CORNERSTONE_TOOLS_MOUSE_DOUBLE_CLICK',\n\n  /**\n   * Triggers on the eventTarget when a mouse wheel event is detected. It is CornerstoneTools normalized event.\n   * Make use of {@link EventTypes.MouseWheelEventType | Mouse Wheel Event Type}\n   * for typing your event listeners for this mouse wheel event, and see what\n   * event detail is included in {@link EventTypes.MouseWheelEventDetail | Mouse Wheel Event Detail}.\n   */\n  MOUSE_WHEEL = 'CORNERSTONE_TOOLS_MOUSE_WHEEL',\n\n  // Todo: not being fired as of now\n  // ANNOTATION_COMPLETED = 'CORNERSTONE_TOOLS_ANNOTATION_COMPLETED',\n  // Todo: not implemented yet\n  // KEY_PRESS = 'CORNERSTONE_TOOLS_KEY_PRESS',\n\n  //////////////////////\n  //   Touch Events   //\n  //////////////////////\n  // The event flow looks like the following\n  // Touch Start -> (optional) Touch Press -> Touch Drag -> (optional) Touch Swipe -> Touch End\n  // Touch Tap\n  // mousedown\n  // mousedown, Touch Start, and Tap are mutually exclusive events\n  TOUCH_START = 'CORNERSTONE_TOOLS_TOUCH_START',\n  TOUCH_START_ACTIVATE = 'CORNERSTONE_TOOLS_TOUCH_START_ACTIVATE',\n  TOUCH_PRESS = 'CORNERSTONE_TOOLS_TOUCH_PRESS',\n  TOUCH_DRAG = 'CORNERSTONE_TOOLS_TOUCH_DRAG',\n  TOUCH_END = 'CORNERSTONE_TOOLS_TOUCH_END',\n  TOUCH_TAP = 'CORNERSTONE_TOOLS_TAP',\n  TOUCH_SWIPE = 'CORNERSTONE_TOOLS_SWIPE',\n}\n\nexport default Events;\n","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationLockChangeEventDetail } from '../../types/EventTypes';\n\n/*\n * Constants\n */\nconst globalLockedAnnotationsSet: Set<Annotation> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"Locked\" state of a given annotation instance.\n *\n * @triggers ANNOTATION_LOCK_CHANGE\n *\n * @param annotation - The annotation instance which will have\n * its locked state changed. An event will only be triggered if the locked state\n * of the given annotation instance changed.\n * @param locked - A boolean value indicating if the instance should\n * be locked (true) or not (false)\n */\nfunction setAnnotationLocked(annotation: Annotation, locked = true): void {\n  const detail = makeEventDetail();\n  if (annotation) {\n    if (locked) {\n      lock(annotation, globalLockedAnnotationsSet, detail);\n    } else {\n      unlock(annotation, globalLockedAnnotationsSet, detail);\n    }\n  }\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Clears all the locked annotation\n *\n */\nfunction unlockAllAnnotations(): void {\n  const detail = makeEventDetail();\n  clearLockedAnnotationsSet(globalLockedAnnotationsSet, detail);\n  publish(detail, globalLockedAnnotationsSet);\n}\n\n/**\n * Returns an array of all the annotation that is currently locked\n * @returns An array of tool specific annotation objects.\n *\n */\nfunction getAnnotationsLocked(): Array<Annotation> {\n  return Array.from(globalLockedAnnotationsSet);\n}\n\n/**\n * Given a Annotation object, return true if it is locked.\n * @param annotation - Annotation\n * @returns A boolean value.\n */\nfunction isAnnotationLocked(annotation: Annotation): boolean {\n  return globalLockedAnnotationsSet.has(annotation);\n}\n\n/**\n * Get the number of locked annotation objects in the global set of locked annotation\n * objects.\n * @returns The number of locked annotation objects.\n *\n */\nfunction getAnnotationsLockedCount(): number {\n  return globalLockedAnnotationsSet.size;\n}\n\n/**\n * Properly initialize the isLocked on annotation, and set it as locked if\n * isLocked is true.\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsLockedProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isLocked = !!annotation.isLocked;\n    if (shouldDefineIsLockedProperty(annotation)) {\n      Object.defineProperty(annotation, 'isLocked', {\n        configurable: false,\n        enumerable: true,\n        set: setIsLocked,\n        get: getIsLocked,\n      });\n    }\n    setAnnotationLocked(annotation, isLocked);\n  }\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationLockChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    locked: [],\n  });\n}\n\nfunction lock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (!lockedAnnotationsSet.has(annotation)) {\n    lockedAnnotationsSet.add(annotation);\n    detail.added.push(annotation);\n  }\n}\n\nfunction unlock(\n  annotation: Annotation,\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  if (lockedAnnotationsSet.delete(annotation)) {\n    detail.removed.push(annotation);\n  }\n}\n\nfunction clearLockedAnnotationsSet(\n  lockedAnnotationsSet: Set<Annotation>,\n  detail: AnnotationLockChangeEventDetail\n): void {\n  lockedAnnotationsSet.forEach((annotation) => {\n    unlock(annotation, lockedAnnotationsSet, detail);\n  });\n}\n\nfunction publish(\n  detail: AnnotationLockChangeEventDetail,\n  lockedAnnotationsSet: Set<Annotation>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    lockedAnnotationsSet.forEach((item) => void detail.locked.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_LOCK_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsLockedProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isLocked');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsLocked || descriptor.get !== getIsLocked)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsLocked(locked: boolean) {\n  setAnnotationLocked(this as Annotation, locked);\n}\n\nfunction getIsLocked() {\n  return isAnnotationLocked(this as Annotation);\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationLocked,\n  getAnnotationsLocked,\n  getAnnotationsLockedCount,\n  unlockAllAnnotations,\n  isAnnotationLocked,\n  checkAndDefineIsLockedProperty,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { AnnotationSelectionChangeEventDetail } from '../../types/EventTypes';\nimport { getAnnotation } from './annotationState';\n\n/*\n * Constants\n */\n\nconst selectedAnnotationUIDs: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set a given annotationUID as selected or deselected based on the provided\n * selected value.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param selected - When true, the annotation is selected. When false, the annotation is deselected.\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction setAnnotationSelected(\n  annotationUID: string,\n  selected = true,\n  preserveSelected = false\n): void {\n  if (selected) {\n    selectAnnotation(annotationUID, preserveSelected);\n  } else {\n    deselectAnnotation(annotationUID);\n  }\n}\n\n/**\n * Set a given annotation as selected.\n *\n * @param annotationUID - The annotation UID to be selected\n * @param preserveSelected - When true, preserves existing\n *  selections (i.e., the given annotation is appended to the selection set).\n *  When false (the default behavior) the currently selected items are discarded\n *  (i.e., the given annotation instance replaces the currently selected ones).\n */\nfunction selectAnnotation(\n  annotationUID: string,\n  preserveSelected = false\n): void {\n  const detail = makeEventDetail();\n  if (!preserveSelected) {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  if (annotationUID && !selectedAnnotationUIDs.has(annotationUID)) {\n    selectedAnnotationUIDs.add(annotationUID);\n    detail.added.push(annotationUID);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Deselect one or all annotations.\n *\n * @param annotationUID - If an annotation is provided that instance will be removed from\n * the internal selection set. If none is given, ALL selections will be cleared.\n */\nfunction deselectAnnotation(annotationUID?: string): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (selectedAnnotationUIDs.delete(annotationUID)) {\n      detail.removed.push(annotationUID);\n    }\n  } else {\n    clearSelectionSet(selectedAnnotationUIDs, detail);\n  }\n  publish(detail, selectedAnnotationUIDs);\n}\n\n/**\n * Return an array of ALL the selected annotationUIDs\n * @returns An array of Annotation UIDs\n */\nfunction getAnnotationsSelected(): Array<string> {\n  return Array.from(selectedAnnotationUIDs);\n}\n\n/**\n * Given a tool name, return ALL the annotationUIDs for that tool that are selected\n * @param toolName - The name of the tool you want to get the selected annotation for\n * @returns An array of annotationUIDs\n */\nfunction getAnnotationsSelectedByToolName(toolName: string): Array<string> {\n  return getAnnotationsSelected().filter((annotationUID) => {\n    const annotation = getAnnotation(annotationUID);\n    return annotation.metadata.toolName === toolName;\n  });\n}\n\n/**\n * Given an annotationUID, return true if it is selected, false\n * otherwise.\n * @param annotationUID - Annotation UID\n * @returns A boolean value.\n */\nfunction isAnnotationSelected(annotationUID: string): boolean {\n  return selectedAnnotationUIDs.has(annotationUID);\n}\n\n/**\n * Return the number of the selected annotation\n * @returns The size of the selected annotation set\n */\nfunction getAnnotationsSelectedCount(): number {\n  return selectedAnnotationUIDs.size;\n}\n\n/*\n * Private Helpers\n */\n\nfunction makeEventDetail(): AnnotationSelectionChangeEventDetail {\n  return Object.freeze({\n    added: [],\n    removed: [],\n    selection: [],\n  });\n}\n\nfunction clearSelectionSet(\n  selectionSet: Set<string>,\n  detail: AnnotationSelectionChangeEventDetail\n): void {\n  selectionSet.forEach((value) => {\n    if (selectionSet.delete(value)) {\n      detail.removed.push(value);\n    }\n  });\n}\n\nfunction publish(\n  detail: AnnotationSelectionChangeEventDetail,\n  selectionSet: Set<string>\n) {\n  if (detail.added.length > 0 || detail.removed.length > 0) {\n    selectionSet.forEach((item) => void detail.selection.push(item));\n    triggerEvent(eventTarget, Events.ANNOTATION_SELECTION_CHANGE, detail);\n  }\n}\n\n/*\n * Exports\n */\n\nexport {\n  setAnnotationSelected,\n  getAnnotationsSelected,\n  getAnnotationsSelectedByToolName,\n  getAnnotationsSelectedCount,\n  deselectAnnotation,\n  isAnnotationSelected,\n};\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport { getAnnotation } from './annotationState';\nimport { Events } from '../../enums';\nimport { Annotation } from '../../types';\nimport { AnnotationVisibilityChangeEventDetail } from '../../types/EventTypes';\nimport {\n  isAnnotationSelected,\n  deselectAnnotation,\n} from './annotationSelection';\n\n/*\n * It stores all hidden annotation uids.\n */\nconst globalHiddenAnnotationUIDsSet: Set<string> = new Set();\n\n/*\n * Interface (Public API)\n */\n\n/**\n * Set the \"visible\" state of a given annotation instance.\n *\n * @event ANNOTATION_VISIBILITY_CHANGE\n *\n * @param annotationUID - The annotation uid which will have\n * its visible state changed. An event will only be triggered if the visible state\n * of the given annotation instance changed.\n * @param visible - A boolean value indicating if the instance should\n * be visible (true) or not (false)\n */\nfunction setAnnotationVisibility(annotationUID: string, visible = true): void {\n  const detail = makeEventDetail();\n  if (annotationUID) {\n    if (visible) {\n      show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    } else {\n      hide(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n    }\n  }\n  publish(detail);\n}\n\n/**\n * Clears all the hidden annotations.\n *\n */\nfunction showAllAnnotations(): void {\n  const detail = makeEventDetail();\n  globalHiddenAnnotationUIDsSet.forEach((annotationUID) => {\n    show(annotationUID, globalHiddenAnnotationUIDsSet, detail);\n  });\n  publish(detail);\n}\n\n/**\n * Given an annotation UID, return true if it is visible, false if hidden and undefined if does not exist.\n * @param annotationUID - The annotation uid to tell if is visible or not.\n * @returns A boolean value or value if does not exist.\n */\nfunction isAnnotationVisible(annotationUID: string): boolean | undefined {\n  const annotation = getAnnotation(annotationUID);\n\n  if (annotation) {\n    return !globalHiddenAnnotationUIDsSet.has(annotationUID);\n  }\n}\n/**\n * It decorates given annotation with isVisible property.\n * It properly initializes the isVisible on annotation(the property will be create if does not exist yet)\n *\n * @param annotation - The annotation object to be checked.\n */\nfunction checkAndDefineIsVisibleProperty(annotation: Annotation): void {\n  if (annotation) {\n    const isVisible = annotation.isVisible ?? true;\n    if (shouldDefineIsVisibleProperty(annotation)) {\n      Object.defineProperty(annotation, 'isVisible', {\n        configurable: false,\n        enumerable: true,\n        set: setIsVisible,\n        get: getIsVisible,\n      });\n    }\n    setAnnotationVisibility(annotation.annotationUID, isVisible);\n  }\n}\n\n/*\n * Private Helpers\n */\nfunction makeEventDetail(): AnnotationVisibilityChangeEventDetail {\n  return Object.freeze({\n    lastVisible: [],\n    lastHidden: [],\n    hidden: [],\n  });\n}\n\nfunction show(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (annotationUIDsSet.delete(annotationUID)) {\n    detail.lastVisible.push(annotationUID);\n  }\n}\n\nfunction hide(\n  annotationUID: string,\n  annotationUIDsSet: Set<string>,\n  detail: AnnotationVisibilityChangeEventDetail\n): void {\n  if (!annotationUIDsSet.has(annotationUID)) {\n    annotationUIDsSet.add(annotationUID);\n    if (isAnnotationSelected(annotationUID)) {\n      deselectAnnotation(annotationUID);\n    }\n    detail.lastHidden.push(annotationUID);\n  }\n}\n\nfunction publish(detail: AnnotationVisibilityChangeEventDetail) {\n  if (detail.lastHidden.length > 0 || detail.lastVisible.length > 0) {\n    globalHiddenAnnotationUIDsSet.forEach(\n      (item) => void detail.hidden.push(item)\n    );\n    triggerEvent(eventTarget, Events.ANNOTATION_VISIBILITY_CHANGE, detail);\n  }\n}\n\nfunction shouldDefineIsVisibleProperty(annotation: Annotation): boolean {\n  const descriptor = Object.getOwnPropertyDescriptor(annotation, 'isVisible');\n  if (descriptor) {\n    return (\n      descriptor.configurable &&\n      (descriptor.set !== setIsVisible || descriptor.get !== getIsVisible)\n    );\n  }\n  return Object.isExtensible(annotation);\n}\n\nfunction setIsVisible(hidden: boolean) {\n  setAnnotationVisibility((this as Annotation).annotationUID, hidden);\n}\n\nfunction getIsVisible() {\n  return isAnnotationVisible((this as Annotation).annotationUID);\n}\n\nexport {\n  setAnnotationVisibility,\n  showAllAnnotations,\n  isAnnotationVisible,\n  checkAndDefineIsVisibleProperty,\n};\n","import cloneDeep from 'lodash.clonedeep';\nimport {\n  Annotation,\n  Annotations,\n  AnnotationState,\n  GroupSpecificAnnotations,\n} from '../../types/AnnotationTypes';\n\nimport { AnnotationGroupSelector, IAnnotationManager } from '../../types';\n\nimport {\n  Enums,\n  eventTarget,\n  getEnabledElement,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport { checkAndDefineIsLockedProperty } from './annotationLocking';\nimport { checkAndDefineIsVisibleProperty } from './annotationVisibility';\n\n/**\n * This is the default annotation manager. It stores annotations by default\n * based on the FrameOfReferenceUID. However, it is possible to override the\n * getAnnotationStateKey function to store annotations based on any other\n * property of the element. When you write your custom annotation manager, you\n * can use the setAnnotationManager function to set your custom annotation.\n *\n * Note that this class is a singleton and should not be instantiated directly.\n * To get the stored annotations information you can use ToolState helpers.\n */\nclass FrameOfReferenceSpecificAnnotationManager implements IAnnotationManager {\n  private annotations: AnnotationState;\n  public readonly uid: string;\n\n  /**\n   * @param uid - The uid of the state manager. If omitted it is autogenerated.\n   */\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = utilities.uuidv4();\n    }\n    this.annotations = {};\n    this.uid = uid;\n\n    // Listen to the IMAGE_VOLUME_MODIFIED event to invalidate data.\n    eventTarget.addEventListener(\n      Enums.Events.IMAGE_VOLUME_MODIFIED,\n      this._imageVolumeModifiedHandler\n    );\n  }\n\n  /**\n   * Default annotation manager works with FrameOfReferenceUID as the key. The\n   * manager adds them under the FrameOfReferenceUID for the element being\n   * annotated.\n   *\n   * @param annotationGroupSelector - element or a string that is provided\n   * to the annotation manager to get the key.\n   * @returns - The annotation state key for the element.\n   */\n  getGroupKey = (annotationGroupSelector: AnnotationGroupSelector): string => {\n    if (typeof annotationGroupSelector === 'string') {\n      return annotationGroupSelector;\n    }\n\n    const element = annotationGroupSelector;\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      throw new Error(\n        'Element not enabled, you must have an enabled element if you are not providing a FrameOfReferenceUID'\n      );\n    }\n\n    return enabledElement.FrameOfReferenceUID;\n  };\n\n  /**\n   * When a volume is modified we invalidate all of the `annotations` on the\n   * volume's `FrameOfReferenceUID`. This is mainly to update statistics calculations\n   * when an annotation is drawn whilst data is still loading.\n   *\n   * @param evt - The IMAGE_VOLUME_MODIFIED rendering event.\n   */\n  _imageVolumeModifiedHandler = (\n    evt: Types.EventTypes.ImageVolumeModifiedEvent\n  ) => {\n    const eventDetail = evt.detail;\n    const { FrameOfReferenceUID } = eventDetail;\n\n    const annotations = this.annotations;\n    const frameOfReferenceSpecificAnnotations =\n      annotations[FrameOfReferenceUID];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      return;\n    }\n\n    Object.keys(frameOfReferenceSpecificAnnotations).forEach((toolName) => {\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      toolSpecificAnnotations.forEach((annotation) => {\n        const invalidated = annotation.invalidated;\n\n        if (invalidated !== undefined) {\n          annotation.invalidated = true;\n        }\n      });\n    });\n  };\n\n  /**\n   * Returns all the available frameOfReferences inside the state manager\n   * @returns - All the added frames of references inside the manager\n   */\n  getFramesOfReference = (): Array<string> => {\n    return Object.keys(this.annotations);\n  };\n\n  /**\n   * Returns the annotations associated with the specified frameOfReference and tool, or\n   * all annotations for the group if the tool name is not provided.\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns The annotations associated with the specified group (default FrameOfReferenceUID) and tool,\n   * or all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   */\n  getAnnotations = (\n    groupKey: string,\n    toolName?: string\n  ): GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (!annotations[groupKey]) {\n      return [];\n    }\n\n    if (toolName) {\n      return annotations[groupKey][toolName];\n    }\n\n    return annotations[groupKey];\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, returns the `annotation`\n   * from the `annotations`. Each `annotation` has a unique identifier.\n   *\n   * @param annotationUID - The unique identifier of the `annotation`.\n   * @returns The retrieved `annotation`.\n   */\n  getAnnotation = (annotationUID: string): Annotation | undefined => {\n    const annotations = this.annotations;\n\n    for (const frameOfReferenceUID in annotations) {\n      const frameOfReferenceAnnotations = annotations[frameOfReferenceUID];\n\n      for (const toolName in frameOfReferenceAnnotations) {\n        const toolSpecificAnnotations = frameOfReferenceAnnotations[toolName];\n\n        for (const annotation of toolSpecificAnnotations) {\n          if (annotationUID === annotation.annotationUID) {\n            return annotation;\n          }\n        }\n      }\n    }\n  };\n\n  /**\n   * A function that returns the number of annotations for a given tool in the\n   * specific group (default FrameOfReferenceUID) IF no groupKey (FrameOfReferenceUID) is provided,\n   * it will return the number of annotations for the tool in all groups (FrameOfReferenceUIDs)\n   *\n   * @param groupKey - The annotation group key to retrieve annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - The name of the tool to retrieve data for.\n   *\n   * @returns The number of annotations for a given tool in the state\n   */\n  getNumberOfAnnotations = (groupKey: string, toolName?: string): number => {\n    const annotations = this.getAnnotations(groupKey, toolName);\n\n    if (!annotations.length) {\n      return 0;\n    }\n\n    if (toolName) {\n      return (annotations as Annotations).length;\n    }\n\n    let total = 0;\n\n    for (const toolName in annotations) {\n      total += annotations[toolName].length;\n    }\n\n    return total;\n  };\n\n  /**\n   * Adds an instance of `Annotation` to the `annotations`.\n   *\n   * @param annotation - The annotation to add.\n   * @param groupKey - The annotation group key to add the annotation to (in default manager it is FrameOfReferenceUID).\n   */\n  addAnnotation = (annotation: Annotation, groupKey?: string): void => {\n    const { metadata } = annotation;\n    const { FrameOfReferenceUID, toolName } = metadata;\n\n    groupKey = groupKey || FrameOfReferenceUID;\n\n    const annotations = this.annotations;\n\n    let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n    if (!frameOfReferenceSpecificAnnotations) {\n      annotations[groupKey] = {};\n\n      frameOfReferenceSpecificAnnotations = annotations[groupKey];\n    }\n\n    let toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n\n    if (!toolSpecificAnnotations) {\n      frameOfReferenceSpecificAnnotations[toolName] = [];\n\n      toolSpecificAnnotations = frameOfReferenceSpecificAnnotations[toolName];\n    }\n\n    toolSpecificAnnotations.push(annotation);\n    checkAndDefineIsLockedProperty(annotation);\n    checkAndDefineIsVisibleProperty(annotation);\n  };\n\n  /**\n   * Given the unique identified for the some `annotation`, removes the `annotation`\n   * from the `annotations`.\n   *\n   * @param annotationUID - The unique identifier of the `annotation` to remove.\n   */\n  removeAnnotation = (annotationUID: string): void => {\n    const { annotations } = this;\n\n    for (const groupKey in annotations) {\n      const groupAnnotations = annotations[groupKey];\n\n      for (const toolName in groupAnnotations) {\n        const toolAnnotations = groupAnnotations[toolName];\n\n        const index = toolAnnotations.findIndex(\n          (annotation) => annotation.annotationUID === annotationUID\n        );\n\n        if (index !== -1) {\n          toolAnnotations.splice(index, 1);\n\n          if (toolAnnotations.length === 0) {\n            delete groupAnnotations[toolName];\n          }\n        }\n      }\n\n      if (Object.keys(groupAnnotations).length === 0) {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Removes all annotations associated with the specified group (FrameOfReferenceUID) and tool, or\n   * all annotations for the group (FrameOfReferenceUID) if the tool name is not provided.\n   *\n   * @param groupKey - The group key to remove annotations for (in default manager it is FrameOfReferenceUID).\n   * @param toolName - Optional. The name of the tool to remove annotations for.\n   */\n  removeAnnotations = (groupKey: string, toolName?: string): void => {\n    const annotations = this.annotations;\n    if (annotations[groupKey]) {\n      if (toolName) {\n        delete annotations[groupKey][toolName];\n      } else {\n        delete annotations[groupKey];\n      }\n    }\n  };\n\n  /**\n   * Returns a section of the annotations. Useful for serialization.\n   * If both groupKey (default manager is FrameOfReferenceUID) and toolName are provided, returns the corresponding Annotations instance\n   * for that groupKey (FrameOfReferenceUID) and toolName.\n   * If only groupKey is provided, returns the corresponding FrameOfReferenceSpecificAnnotations instance\n   * for that groupKey.\n   * If neither groupKey nor toolName is provided, returns the entire AnnotationState object.\n   * @param groupKey - Optional. The group key (e.g. FrameOfReferenceUID) to retrieve annotations for.\n   * @param toolName - Optional. The name of the tool to retrieve annotations for.\n   * @returns A section of the annotations.\n   */\n  saveAnnotations = (\n    groupKey?: string,\n    toolName?: string\n  ): AnnotationState | GroupSpecificAnnotations | Annotations => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        return;\n      }\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[toolName];\n\n      return cloneDeep(toolSpecificAnnotations);\n    } else if (groupKey) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      return cloneDeep(frameOfReferenceSpecificAnnotations);\n    }\n\n    return cloneDeep(annotations);\n  };\n\n  /**\n   * Restores a section of the `annotations`. Useful for loading in serialized data.\n   *\n   * - If no arguments are given, the entire `AnnotationState` instance is restored.\n   * - If the `FrameOfReferenceUID` is given, the corresponding\n   * `FrameOfReferenceSpecificAnnotations` instance is restored.\n   * - If both the `FrameOfReferenceUID` and the `toolName` are are given, the\n   * corresponding `Annotations` instance is restored.\n   *\n   * @param groupKey - A filter string for restoring only the `annotations` of a specific frame of reference.\n   * @param toolName - A filter string for restoring `annotation` for a specific tool on a specific frame of reference.\n   */\n  restoreAnnotations = (\n    state: AnnotationState | GroupSpecificAnnotations | Annotations,\n    groupKey?: string,\n    toolName?: string\n  ): void => {\n    const annotations = this.annotations;\n\n    if (groupKey && toolName) {\n      // Set Annotations for FrameOfReferenceUID and toolName.\n\n      let frameOfReferenceSpecificAnnotations = annotations[groupKey];\n\n      if (!frameOfReferenceSpecificAnnotations) {\n        annotations[groupKey] = {};\n\n        frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      }\n\n      frameOfReferenceSpecificAnnotations[toolName] = <Annotations>state;\n    } else if (groupKey) {\n      // Set FrameOfReferenceSpecificAnnotations for FrameOfReferenceUID.\n\n      annotations[groupKey] = <GroupSpecificAnnotations>state;\n    } else {\n      // Set entire annotations\n      this.annotations = <AnnotationState>cloneDeep(state);\n    }\n  };\n\n  /**\n   * A function that returns the number of all annotations in the annotation state\n   *\n   * @returns The number of all annotations in the state\n   */\n  getNumberOfAllAnnotations = (): number => {\n    let count = 0;\n    const annotations = this.annotations;\n    for (const groupKey in annotations) {\n      const frameOfReferenceSpecificAnnotations = annotations[groupKey];\n      for (const toolName in frameOfReferenceSpecificAnnotations) {\n        const toolSpecificAnnotations =\n          frameOfReferenceSpecificAnnotations[toolName];\n        count += toolSpecificAnnotations.length;\n      }\n    }\n    return count;\n  };\n\n  /**\n   * Removes all annotations in the annotation state.\n   */\n  removeAllAnnotations = (): void => {\n    this.annotations = {};\n  };\n}\n\nconst defaultFrameOfReferenceSpecificAnnotationManager =\n  new FrameOfReferenceSpecificAnnotationManager('DEFAULT');\n\nexport { defaultFrameOfReferenceSpecificAnnotationManager };\nexport default FrameOfReferenceSpecificAnnotationManager;\n","let svgNodeCache = {};\n\nexport function resetSvgNodeCache(): void {\n  svgNodeCache = {};\n}\n\nexport default svgNodeCache;\n","import _cloneDeep from 'lodash.clonedeep';\n\nimport { IToolGroup, IToolClassReference } from '../types';\nimport Synchronizer from './SynchronizerManager/Synchronizer';\nimport svgNodeCache, { resetSvgNodeCache } from './svgNodeCache';\n\ninterface ICornerstoneTools3dState {\n  isInteractingWithTool: boolean;\n  isMultiPartToolActive: boolean;\n  tools: Record<\n    string,\n    {\n      toolClass: IToolClassReference;\n    }\n  >;\n  toolGroups: Array<IToolGroup>;\n  synchronizers: Array<Synchronizer>;\n  svgNodeCache: Record<string, unknown>;\n  enabledElements: Array<unknown>;\n  handleRadius: number;\n}\n\nconst defaultState: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nlet state: ICornerstoneTools3dState = {\n  isInteractingWithTool: false,\n  isMultiPartToolActive: false,\n  tools: {},\n  toolGroups: [],\n  synchronizers: [],\n  svgNodeCache: svgNodeCache,\n  // Should this be named... canvases?\n  enabledElements: [], // switch to Uids?\n  handleRadius: 6,\n};\n\nfunction resetCornerstoneToolsState(): void {\n  resetSvgNodeCache();\n  state = _cloneDeep(defaultState);\n}\n\nexport {\n  ICornerstoneTools3dState,\n  resetCornerstoneToolsState,\n  state,\n  state as default,\n};\n","/**\n * ToolModes - This enum defines the 4 tool states which are available.\n */\nenum ToolModes {\n  /**\n   * Active:\n   * - Can be actively used by mouse/touch events mapped to its `ToolBinding`s.\n   * - Can add data if an annotation tool.\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Active = 'Active',\n  /**\n   * Passive:\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Passive = 'Passive',\n  /**\n   * Enabled:\n   * - Renders data if the tool has a `renderAnnotation` method.\n   */\n  Enabled = 'Enabled',\n  /**\n   * Disabled:\n   * - Annotation does not render.\n   */\n  Disabled = 'Disabled',\n}\n\nexport default ToolModes;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\nimport { ToolModes } from '../../enums';\n\nconst MODES = [ToolModes.Active, ToolModes.Passive, ToolModes.Enabled];\n\n/**\n * Returns the toolGroups that has the given toolName as active, passive\n * or enabled.\n * @param toolName - The name of the tool\n * @returns An array of tool groups.\n */\nfunction getToolGroupsWithToolName(toolName: string): IToolGroup[] | [] {\n  return state.toolGroups.filter(({ toolOptions }) => {\n    const toolGroupToolNames = Object.keys(toolOptions);\n\n    for (let i = 0; i < toolGroupToolNames.length; i++) {\n      if (toolName !== toolGroupToolNames[i]) {\n        continue;\n      }\n\n      /* filter out tools that don't have options */\n      if (!toolOptions[toolName]) {\n        continue;\n      }\n\n      if (MODES.includes(toolOptions[toolName].mode)) {\n        return true;\n      }\n    }\n    return false;\n  });\n}\n\nexport default getToolGroupsWithToolName;\n","import {\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport { defaultFrameOfReferenceSpecificAnnotationManager } from './FrameOfReferenceSpecificAnnotationManager';\nimport { Annotations, Annotation } from '../../types/AnnotationTypes';\nimport { AnnotationRemovedEventDetail } from '../../types/EventTypes';\nimport { AnnotationGroupSelector } from '../../types';\nimport {\n  triggerAnnotationAddedForElement,\n  triggerAnnotationAddedForFOR,\n} from './helpers/state';\n\n// our default annotation manager\nlet defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n\n/**\n * It returns the default annotations manager.\n * @returns the singleton default annotations manager.\n */\nfunction getAnnotationManager() {\n  return defaultManager;\n}\n\n/**\n * Set the annotation manager to be used for rendering, adding, removing, etc.\n * @param annotationManager - The annotation manager to be used\n */\nfunction setAnnotationManager(annotationManager) {\n  defaultManager = annotationManager;\n}\n\n// set back to default frameOfReferenceSpecificAnnotationManager\nfunction resetAnnotationManager() {\n  defaultManager = defaultFrameOfReferenceSpecificAnnotationManager;\n}\n\n/**\n * Returns the annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getAnnotations function will return the annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n * @returns The annotations corresponding to the Frame of Reference and the toolName.\n */\nfunction getAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): Annotations {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n  return manager.getAnnotations(groupKey, toolName) as Annotations;\n}\n\n/**\n * Add the annotation to the annotation manager along with the options that is\n * used to filter the annotation manager and the annotation group that\n * the annotation belongs to.\n *\n * As a result, our default implementation will add the annotation to the\n * default manager using the FrameOfReferenceUID as the group key.\n *\n * @param annotation - The annotation that is being added to the annotations manager.\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n */\nfunction addAnnotation(\n  annotation: Annotation,\n  annotationGroupSelector: AnnotationGroupSelector\n): string {\n  if (!annotation.annotationUID) {\n    annotation.annotationUID = csUtils.uuidv4() as string;\n  }\n\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  manager.addAnnotation(annotation, groupKey);\n\n  // if the annotation manager selector is an element, trigger the\n  // annotation added event for that element.\n  if (annotationGroupSelector instanceof HTMLDivElement) {\n    triggerAnnotationAddedForElement(annotation, annotationGroupSelector);\n  } else {\n    // if no element is provided, render all viewports that have the\n    // same frame of reference.\n    // Todo: we should do something else here for other types of annotation managers.\n    triggerAnnotationAddedForFOR(annotation);\n  }\n\n  return annotation.annotationUID;\n}\n\n/**\n * Get the number of annotations for a given tool with the provided options that is\n * used to filter annotations based on the annotation manager.\n *\n * In our default implementation, the options are the element and/or the FrameOfReferenceUID.\n * Hence, the getNumberOfAnnotations function will return the number of annotations for the given tool\n * that are associated with the FrameOfReferenceUID.\n *\n * @param toolName - The name of the tool\n * @param annotationGroupSelector - element or FrameOfReferenceUID that is used\n * to group annotations in the annotation manager.\n *\n */\nfunction getNumberOfAnnotations(\n  toolName: string,\n  annotationGroupSelector: AnnotationGroupSelector\n): number {\n  const manager = getAnnotationManager();\n  const groupKey = manager.getGroupKey(annotationGroupSelector);\n\n  return manager.getNumberOfAnnotations(groupKey, toolName);\n}\n\n/**\n * Remove the annotation by UID of the annotation.\n * @param annotationUID - The unique identifier for the annotation.\n */\nfunction removeAnnotation(annotationUID: string): void {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  // no need to continue in case there is no annotation.\n  if (!annotation) {\n    return;\n  }\n\n  manager.removeAnnotation(annotationUID);\n\n  // trigger annotation removed\n  const eventType = Events.ANNOTATION_REMOVED;\n\n  const eventDetail: AnnotationRemovedEventDetail = {\n    annotation,\n    annotationManagerUID: manager.uid,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * Get the Annotation object by its UID\n * @param annotationUID - The unique identifier of the annotation.\n */\nfunction getAnnotation(annotationUID: string): Annotation {\n  const manager = getAnnotationManager();\n  const annotation = manager.getAnnotation(annotationUID);\n\n  return annotation;\n}\n\n/**\n * It removes all annotations from the default annotation manager\n */\nfunction removeAllAnnotations(): void {\n  const manager = getAnnotationManager();\n  manager.removeAllAnnotations();\n}\n\nexport {\n  getAnnotations,\n  getNumberOfAnnotations,\n  addAnnotation,\n  getAnnotation,\n  removeAnnotation,\n  removeAllAnnotations,\n  // annotation manager\n  setAnnotationManager,\n  getAnnotationManager,\n  resetAnnotationManager,\n};\n","import {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport { Events } from '../../../enums';\nimport { Annotation } from '../../../types/AnnotationTypes';\nimport { getToolGroupsWithToolName } from '../../../store/ToolGroupManager';\nimport { AnnotationAddedEventDetail } from '../../../types/EventTypes';\n\n/**\n * It triggers an event for the element when an annotation is added\n * @param annotation - Annotation - The annotation that was added.\n * @param element - The element that the annotation was added to.\n */\nfunction triggerAnnotationAddedForElement(\n  annotation: Annotation,\n  element: HTMLDivElement\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewportId } = enabledElement;\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  const eventDetail: AnnotationAddedEventDetail = {\n    annotation,\n    viewportId,\n    renderingEngineId: renderingEngine.id,\n  };\n\n  triggerEvent(eventTarget, eventType, eventDetail);\n}\n\n/**\n * If the annotation has a FrameOfReferenceUID, it triggers the ANNOTATION_ADDED\n * event for all the viewports that has the same FrameOfReferenceUID.\n * @param annotation -  Annotation - The annotation that was added\n */\nfunction triggerAnnotationAddedForFOR(annotation: Annotation) {\n  const { toolName } = annotation.metadata;\n\n  const toolGroups = getToolGroupsWithToolName(toolName);\n\n  if (!toolGroups.length) {\n    return;\n  }\n\n  // Find the viewports in the toolGroups who has the same FrameOfReferenceUID\n  const viewportsToRender = [];\n\n  toolGroups.forEach((toolGroup) => {\n    toolGroup.viewportsInfo.forEach((viewportInfo) => {\n      const { renderingEngineId, viewportId } = viewportInfo;\n      const { FrameOfReferenceUID } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (annotation.metadata.FrameOfReferenceUID === FrameOfReferenceUID) {\n        viewportsToRender.push(viewportInfo);\n      }\n    });\n  });\n\n  if (!viewportsToRender.length) {\n    return;\n  }\n\n  const eventType = Events.ANNOTATION_ADDED;\n\n  viewportsToRender.forEach(({ renderingEngineId, viewportId }) => {\n    const eventDetail: AnnotationAddedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  });\n}\n\nexport { triggerAnnotationAddedForElement, triggerAnnotationAddedForFOR };\n","/**\n * Cornerstone Color LUT used for Segmentations\n */\nconst CORNERSTONE_COLOR_LUT = [\n  [0, 0, 0, 0],\n  [221, 84, 84, 255],\n  [77, 228, 121, 255],\n  [166, 70, 235, 255],\n  [189, 180, 116, 255],\n  [109, 182, 196, 255],\n  [204, 101, 157, 255],\n  [123, 211, 94, 255],\n  [93, 87, 218, 255],\n  [225, 128, 80, 255],\n  [73, 232, 172, 255],\n  [181, 119, 186, 255],\n  [176, 193, 112, 255],\n  [105, 153, 200, 255],\n  [208, 97, 120, 255],\n  [90, 215, 101, 255],\n  [135, 83, 222, 255],\n  [229, 178, 76, 255],\n  [122, 183, 181, 255],\n  [190, 115, 171, 255],\n  [149, 197, 108, 255],\n  [100, 118, 205, 255],\n  [212, 108, 93, 255],\n  [86, 219, 141, 255],\n  [183, 79, 226, 255],\n  [233, 233, 72, 255],\n  [118, 167, 187, 255],\n  [194, 111, 146, 255],\n  [116, 201, 104, 255],\n  [115, 96, 209, 255],\n  [216, 147, 89, 255],\n  [82, 223, 188, 255],\n  [230, 75, 224, 255],\n  [163, 184, 121, 255],\n  [114, 143, 191, 255],\n  [198, 107, 114, 255],\n  [99, 206, 122, 255],\n  [153, 92, 213, 255],\n  [220, 192, 85, 255],\n  [78, 215, 227, 255],\n  [234, 71, 173, 255],\n  [141, 188, 117, 255],\n  [110, 113, 195, 255],\n  [202, 128, 103, 255],\n  [95, 210, 157, 255],\n  [195, 88, 217, 255],\n  [206, 224, 81, 255],\n  [74, 166, 231, 255],\n  [185, 120, 139, 255],\n  [113, 192, 113, 255],\n  [133, 106, 199, 255],\n  [207, 162, 98, 255],\n  [91, 214, 198, 255],\n  [221, 84, 198, 255],\n  [159, 228, 77, 255],\n  [70, 111, 235, 255],\n  [189, 119, 116, 255],\n  [109, 196, 138, 255],\n  [165, 101, 204, 255],\n  [211, 201, 94, 255],\n  [87, 191, 218, 255],\n  [225, 80, 153, 255],\n  [106, 232, 73, 255],\n  [124, 119, 186, 255],\n  [193, 142, 112, 255],\n  [105, 200, 168, 255],\n  [203, 97, 208, 255],\n  [184, 215, 90, 255],\n  [83, 147, 222, 255],\n  [229, 76, 101, 255],\n  [122, 183, 130, 255],\n  [146, 115, 190, 255],\n  [197, 171, 108, 255],\n  [100, 205, 205, 255],\n  [212, 93, 177, 255],\n  [141, 219, 86, 255],\n  [79, 97, 226, 255],\n  [233, 99, 72, 255],\n  [118, 187, 150, 255],\n  [173, 111, 194, 255],\n  [197, 201, 104, 255],\n  [96, 171, 209, 255],\n  [216, 89, 137, 255],\n  [94, 223, 82, 255],\n  [107, 75, 230, 255],\n  [184, 153, 121, 255],\n  [114, 191, 175, 255],\n  [198, 107, 191, 255],\n  [166, 206, 99, 255],\n  [92, 132, 213, 255],\n  [220, 85, 91, 255],\n  [78, 227, 115, 255],\n  [159, 71, 234, 255],\n  [188, 176, 117, 255],\n  [110, 185, 195, 255],\n  [202, 103, 161, 255],\n  [129, 210, 95, 255],\n  [88, 88, 217, 255],\n  [224, 123, 81, 255],\n  [74, 231, 166, 255],\n  [177, 120, 185, 255],\n  [179, 192, 113, 255],\n  [106, 156, 199, 255],\n  [207, 98, 125, 255],\n  [91, 214, 96, 255],\n  [130, 84, 221, 255],\n  [228, 171, 77, 255],\n  [70, 235, 221, 255],\n  [189, 116, 174, 255],\n  [153, 196, 109, 255],\n  [101, 123, 204, 255],\n  [211, 104, 94, 255],\n  [87, 218, 136, 255],\n  [177, 80, 225, 255],\n  [232, 225, 73, 255],\n  [119, 169, 186, 255],\n  [193, 112, 149, 255],\n  [121, 200, 105, 255],\n  [111, 97, 208, 255],\n  [215, 142, 90, 255],\n  [83, 222, 181, 255],\n  [229, 76, 229, 255],\n  [165, 183, 122, 255],\n  [115, 146, 190, 255],\n  [197, 108, 119, 255],\n  [100, 205, 118, 255],\n  [148, 93, 212, 255],\n  [219, 186, 86, 255],\n  [79, 220, 226, 255],\n  [233, 72, 179, 255],\n  [144, 187, 118, 255],\n  [111, 118, 194, 255],\n  [201, 124, 104, 255],\n  [96, 209, 153, 255],\n  [189, 89, 216, 255],\n  [211, 223, 82, 255],\n  [75, 172, 230, 255],\n  [184, 121, 142, 255],\n  [117, 191, 114, 255],\n  [130, 107, 198, 255],\n  [206, 157, 99, 255],\n  [92, 213, 193, 255],\n  [220, 85, 203, 255],\n  [165, 227, 78, 255],\n  [71, 118, 234, 255],\n  [188, 117, 117, 255],\n  [110, 195, 135, 255],\n  [161, 103, 202, 255],\n  [210, 195, 95, 255],\n  [88, 195, 217, 255],\n  [224, 81, 158, 255],\n  [113, 231, 74, 255],\n  [123, 120, 185, 255],\n  [192, 139, 113, 255],\n  [106, 199, 164, 255],\n  [198, 98, 207, 255],\n  [188, 214, 91, 255],\n  [84, 153, 221, 255],\n  [228, 77, 108, 255],\n  [70, 235, 84, 255],\n  [143, 116, 189, 255],\n  [196, 167, 109, 255],\n  [101, 204, 199, 255],\n  [211, 94, 182, 255],\n  [147, 218, 87, 255],\n  [80, 104, 225, 255],\n  [232, 93, 73, 255],\n  [119, 186, 147, 255],\n  [170, 112, 193, 255],\n  [200, 200, 105, 255],\n  [97, 175, 208, 255],\n  [215, 90, 142, 255],\n  [100, 222, 83, 255],\n  [101, 76, 229, 255],\n  [183, 150, 122, 255],\n  [115, 190, 171, 255],\n  [197, 108, 194, 255],\n  [170, 205, 100, 255],\n  [93, 138, 212, 255],\n  [219, 86, 97, 255],\n  [79, 226, 110, 255],\n  [153, 72, 233, 255],\n  [187, 173, 118, 255],\n  [111, 187, 194, 255],\n  [201, 104, 165, 255],\n  [134, 209, 96, 255],\n  [89, 95, 216, 255],\n  [223, 117, 82, 255],\n  [75, 230, 159, 255],\n  [174, 121, 184, 255],\n  [182, 191, 114, 255],\n  [107, 160, 198, 255],\n  [206, 99, 130, 255],\n  [92, 213, 92, 255],\n  [124, 85, 220, 255],\n  [227, 165, 78, 255],\n  [71, 234, 214, 255],\n  [188, 117, 176, 255],\n  [156, 195, 110, 255],\n  [103, 128, 202, 255],\n  [210, 100, 95, 255],\n  [88, 217, 131, 255],\n  [170, 81, 224, 255],\n  [231, 218, 74, 255],\n  [120, 172, 185, 255],\n  [192, 113, 153, 255],\n  [125, 199, 106, 255],\n  [107, 98, 207, 255],\n  [214, 137, 91, 255],\n  [84, 221, 175, 255],\n  [222, 77, 228, 255],\n  [194, 235, 70, 255],\n  [116, 149, 189, 255],\n  [196, 109, 123, 255],\n  [101, 204, 114, 255],\n  [143, 94, 211, 255],\n  [218, 180, 87, 255],\n  [80, 225, 225, 255],\n  [232, 73, 186, 255],\n  [147, 186, 119, 255],\n  [112, 122, 193, 255],\n  [200, 121, 105, 255],\n  [97, 208, 148, 255],\n  [184, 90, 215, 255],\n  [216, 222, 83, 255],\n  [76, 178, 229, 255],\n  [183, 122, 145, 255],\n  [121, 190, 115, 255],\n  [126, 108, 197, 255],\n  [205, 153, 100, 255],\n  [93, 212, 187, 255],\n  [219, 86, 208, 255],\n  [171, 226, 79, 255],\n  [72, 126, 233, 255],\n  [187, 118, 121, 255],\n  [111, 194, 132, 255],\n  [157, 104, 201, 255],\n  [209, 190, 96, 255],\n  [89, 200, 216, 255],\n  [223, 82, 164, 255],\n  [120, 230, 75, 255],\n  [121, 121, 184, 255],\n  [191, 136, 114, 255],\n  [107, 198, 160, 255],\n  [192, 99, 206, 255],\n  [193, 213, 92, 255],\n  [85, 158, 220, 255],\n  [227, 78, 115, 255],\n  [71, 234, 78, 255],\n  [141, 117, 188, 255],\n  [195, 163, 110, 255],\n  [103, 202, 194, 255],\n  [210, 95, 186, 255],\n  [153, 217, 88, 255],\n  [81, 111, 224, 255],\n];\n\nexport default CORNERSTONE_COLOR_LUT;\n","/**\n * Segmentations on viewports can be visualized in different ways. This enum\n * defines the different ways of visualizing segmentations. Currently, only\n * labelmap is supported.\n */\nenum SegmentationRepresentations {\n  Labelmap = 'LABELMAP',\n  Contour = 'CONTOUR',\n  Surface = 'SURFACE',\n}\n\nexport default SegmentationRepresentations;\n","import { ContourConfig } from '../../../types/ContourTypes';\n\nconst defaultContourConfig: ContourConfig = {\n  renderOutline: true,\n  outlineWidthActive: 2,\n  outlineWidthInactive: 2,\n  outlineOpacity: 1,\n  outlineOpacityInactive: 0.85,\n  renderFill: true,\n  fillAlpha: 1,\n  fillAlphaInactive: 0,\n};\n\nfunction getDefaultContourConfig(): ContourConfig {\n  return defaultContourConfig;\n}\n\nexport default getDefaultContourConfig;\n","import { LabelmapConfig } from '../../../types/LabelmapTypes';\n\nconst defaultLabelmapConfig: LabelmapConfig = {\n  renderOutline: true,\n  outlineWidthActive: 3,\n  outlineWidthInactive: 2,\n  renderFill: true,\n  renderFillInactive: true,\n  fillAlpha: 0.7,\n  fillAlphaInactive: 0.65,\n  outlineOpacity: 1,\n  outlineOpacityInactive: 0.85,\n};\n\nfunction getDefaultLabelmapConfig(): LabelmapConfig {\n  return defaultLabelmapConfig;\n}\n\n// Checks if the labelmap config is valid, which means\n// if all the required fields are present and have the correct type\nfunction isValidLabelmapConfig(config): boolean {\n  return (\n    config &&\n    typeof config.renderOutline === 'boolean' &&\n    typeof config.outlineWidthActive === 'number' &&\n    typeof config.outlineWidthInactive === 'number' &&\n    typeof config.renderFill === 'boolean' &&\n    typeof config.renderFillInactive === 'boolean' &&\n    typeof config.fillAlpha === 'number' &&\n    typeof config.fillAlphaInactive === 'number' &&\n    typeof config.outlineOpacity === 'number' &&\n    typeof config.outlineOpacityInactive === 'number'\n  );\n}\n\nexport default getDefaultLabelmapConfig;\nexport { isValidLabelmapConfig };\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport cloneDeep from 'lodash.clonedeep';\n\nimport CORNERSTONE_COLOR_LUT from '../../constants/COLOR_LUT';\n\nimport { SegmentationRepresentations } from '../../enums';\nimport getDefaultContourConfig from '../../tools/displayTools/Contour/contourConfig';\nimport getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport type {\n  ColorLUT,\n  RepresentationConfig,\n  Segmentation,\n  SegmentationRepresentationConfig,\n  SegmentationState,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\n\n// Initialize the default configuration\n// Note: when we get other representations, we should set their default representations too.\nconst defaultLabelmapConfig = getDefaultLabelmapConfig();\nconst defaultContourConfig = getDefaultContourConfig();\n\nconst newGlobalConfig: SegmentationRepresentationConfig = {\n  renderInactiveSegmentations: true,\n  representations: {\n    [SegmentationRepresentations.Labelmap]: defaultLabelmapConfig,\n    [SegmentationRepresentations.Contour]: defaultContourConfig,\n  },\n};\n\n/* A default initial state for the segmentation manager. */\nconst initialDefaultState: SegmentationState = {\n  colorLUT: [],\n  segmentations: [],\n  globalConfig: newGlobalConfig,\n  toolGroups: {},\n};\n\n/**\n * The SegmentationStateManager Class is responsible for managing the state of the\n * segmentations. It stores the segmentations and toolGroup specific representations\n * of the segmentation. It also stores a global config and a toolGroup specific\n * config. Note that this is a singleton state manager.\n */\nexport default class SegmentationStateManager {\n  private state: SegmentationState;\n  public readonly uid: string;\n\n  constructor(uid?: string) {\n    if (!uid) {\n      uid = csUtils.uuidv4();\n    }\n    this.state = cloneDeep(initialDefaultState);\n    this.uid = uid;\n  }\n\n  /**\n   * It returns a copy of the current state of the segmentation\n   * @returns A deep copy of the state.\n   */\n  getState(): SegmentationState {\n    return this.state;\n  }\n\n  /**\n   * It returns an array of toolGroupIds currently in the segmentation state.\n   * @returns An array of strings.\n   */\n  getToolGroups(): string[] {\n    return Object.keys(this.state.toolGroups);\n  }\n\n  /**\n   * It returns the colorLUT at the specified index.\n   * @param lutIndex - The index of the color LUT to retrieve.\n   * @returns A ColorLUT object.\n   */\n  getColorLUT(lutIndex: number): ColorLUT | undefined {\n    return this.state.colorLUT[lutIndex];\n  }\n\n  /**\n   * Reset the state to the default state\n   */\n  resetState(): void {\n    this.state = cloneDeep(initialDefaultState);\n  }\n\n  /**\n   * Given a segmentation Id, return the segmentation state\n   * @param segmentationId - The id of the segmentation to get the data for.\n   * @returns - The segmentation data\n   */\n  getSegmentation(segmentationId: string): Segmentation | undefined {\n    return this.state.segmentations.find(\n      (segmentation) => segmentation.segmentationId === segmentationId\n    );\n  }\n\n  /**\n   * It adds a segmentation to the segmentations array.\n   * @param segmentation - Segmentation\n   */\n  addSegmentation(segmentation: Segmentation): void {\n    this._initDefaultColorLUTIfNecessary();\n\n    // Check if the segmentation already exists with the segmentationId\n    if (this.getSegmentation(segmentation.segmentationId)) {\n      throw new Error(\n        `Segmentation with id ${segmentation.segmentationId} already exists`\n      );\n    }\n\n    this.state.segmentations.push(segmentation);\n  }\n\n  /**\n   * Get the segmentation representations for a tool group\n   * @param toolGroupId - string\n   * @returns A list of segmentation representations.\n   */\n  getSegmentationRepresentations(\n    toolGroupId: string\n  ): ToolGroupSpecificRepresentations | undefined {\n    const toolGroupSegRepresentationsWithConfig =\n      this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupSegRepresentationsWithConfig) {\n      return;\n    }\n\n    return toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n  }\n\n  /**\n   * Returns an array of all segmentation representations for all tool groups.\n   * @returns An array of ToolGroupSpecificRepresentations.\n   */\n  getAllSegmentationRepresentations(): Record<\n    string,\n    ToolGroupSpecificRepresentation[]\n  > {\n    const toolGroupSegReps: Record<string, ToolGroupSpecificRepresentation[]> =\n      {};\n    Object.entries(this.state.toolGroups).forEach(\n      ([toolGroupId, toolGroupSegRepresentationsWithConfig]) => {\n        toolGroupSegReps[toolGroupId] =\n          toolGroupSegRepresentationsWithConfig.segmentationRepresentations;\n      }\n    );\n    return toolGroupSegReps;\n  }\n\n  /**\n   * Add a new segmentation representation to the toolGroup's segmentation representations.\n   * @param toolGroupId - The Id of the tool group .\n   * @param segmentationRepresentation - The segmentation representation to add.\n   */\n  addSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    // Initialize the default toolGroup state if not created yet\n    if (!this.state.toolGroups[toolGroupId]) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {} as SegmentationRepresentationConfig,\n      };\n    }\n\n    // local toolGroupSpecificSegmentationState\n    this.state.toolGroups[toolGroupId].segmentationRepresentations.push(\n      segmentationRepresentation\n    );\n\n    this._handleActiveSegmentation(toolGroupId, segmentationRepresentation);\n  }\n\n  /**\n   * Get the global config containing both representation config\n   * and render inactive segmentations config\n   * @returns The global config object.\n   */\n  getGlobalConfig(): SegmentationRepresentationConfig {\n    return this.state.globalConfig;\n  }\n\n  /**\n   * It sets the global segmentation config including both representation config\n   * and render inactive segmentations config\n   * @param config - The global configuration for the segmentations.\n   */\n  setGlobalConfig(config: SegmentationRepresentationConfig): void {\n    this.state.globalConfig = config;\n  }\n\n  /**\n   * Given a toolGroupId and a segmentationRepresentationUID, return the segmentation\n   * representation for that tool group.\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - string\n   * @returns The segmentation representation.\n   */\n  getSegmentationRepresentationByUID(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): ToolGroupSpecificRepresentation | undefined {\n    const toolGroupSegRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    const segmentationData = toolGroupSegRepresentations.find(\n      (representation) =>\n        representation.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    return segmentationData;\n  }\n\n  /**\n   * It removes the segmentation from the segmentation state.\n   * @param segmentationId - The id of the segmentation to remove.\n   */\n  removeSegmentation(segmentationId: string): void {\n    this.state.segmentations = this.state.segmentations.filter(\n      (segmentation) => segmentation.segmentationId !== segmentationId\n    );\n  }\n\n  /**\n   * Remove a segmentation representation from the toolGroup\n   * @param toolGroupId - The Id of the tool group\n   * @param segmentationRepresentationUID - the uid of the segmentation representation to remove\n   * @param immediate - If true, the viewport will be updated immediately.\n   */\n  removeSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      !toolGroupSegmentationRepresentations.length\n    ) {\n      throw new Error(\n        `No viewport specific segmentation state found for viewport ${toolGroupId}`\n      );\n    }\n\n    const state =\n      toolGroupSegmentationRepresentations as ToolGroupSpecificRepresentations;\n    const index = state.findIndex(\n      (segData) =>\n        segData.segmentationRepresentationUID === segmentationRepresentationUID\n    );\n\n    if (index === -1) {\n      console.warn(\n        `No viewport specific segmentation state data found for viewport ${toolGroupId} and segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    const removedSegmentationRepresentation =\n      toolGroupSegmentationRepresentations[index];\n\n    toolGroupSegmentationRepresentations.splice(index, 1);\n\n    this._handleActiveSegmentation(\n      toolGroupId,\n      removedSegmentationRepresentation\n    );\n  }\n\n  /**\n   * Set the active segmentation data for a tool group\n   * @param toolGroupId - The Id of the tool group that owns the\n   * segmentation data.\n   * @param segmentationRepresentationUID - string\n   */\n  setActiveSegmentationRepresentation(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): void {\n    const toolGroupSegmentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    if (!toolGroupSegmentations || !toolGroupSegmentations.length) {\n      throw new Error(\n        `No segmentation data found for toolGroupId: ${toolGroupId}`\n      );\n    }\n\n    const segmentationData = toolGroupSegmentations.find(\n      (segmentationData) =>\n        segmentationData.segmentationRepresentationUID ===\n        segmentationRepresentationUID\n    );\n\n    if (!segmentationData) {\n      throw new Error(\n        `No segmentation data found for segmentation data UID ${segmentationRepresentationUID}`\n      );\n    }\n\n    segmentationData.active = true;\n    this._handleActiveSegmentation(toolGroupId, segmentationData);\n  }\n\n  /**\n   * Given a tool group Id it returns the tool group specific representation config\n   *\n   * @param toolGroupId - The Id of the tool group\n   * @returns A SegmentationConfig object.\n   */\n  getToolGroupSpecificConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig | undefined {\n    const toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      return;\n    }\n\n    return toolGroupStateWithConfig.config;\n  }\n\n  getSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentationRepresentationSpecificConfig;\n  }\n\n  setSegmentationRepresentationSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: RepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentationRepresentationSpecificConfig =\n      config;\n  }\n\n  getSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    segmentIndex: number\n  ): RepresentationConfig {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    return segmentationRepresentation.segmentSpecificConfig[segmentIndex];\n  }\n\n  setSegmentSpecificConfig(\n    toolGroupId: string,\n    segmentationRepresentationUID: string,\n    config: SegmentSpecificRepresentationConfig\n  ): void {\n    const segmentationRepresentation = this.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n    if (!segmentationRepresentation) {\n      return;\n    }\n\n    segmentationRepresentation.segmentSpecificConfig = config;\n  }\n\n  /**\n   * Set the segmentation representations config for a given tool group. It will create a new\n   * tool group specific config if one does not exist.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation\n   * belongs to.\n   * @param config - SegmentationConfig\n   */\n  setSegmentationRepresentationConfig(\n    toolGroupId: string,\n    config: SegmentationRepresentationConfig\n  ): void {\n    let toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n\n    if (!toolGroupStateWithConfig) {\n      this.state.toolGroups[toolGroupId] = {\n        segmentationRepresentations: [],\n        config: {\n          renderInactiveSegmentations: true,\n          representations: {},\n        },\n      };\n\n      toolGroupStateWithConfig = this.state.toolGroups[toolGroupId];\n    }\n\n    toolGroupStateWithConfig.config = {\n      ...toolGroupStateWithConfig.config,\n      ...config,\n    };\n  }\n\n  /**\n   * It adds a color LUT to the state.\n   * @param colorLUT - ColorLUT\n   * @param lutIndex - The index of the color LUT table to add.\n   */\n  addColorLUT(colorLUT: ColorLUT, lutIndex: number): void {\n    if (this.state.colorLUT[lutIndex]) {\n      console.log('Color LUT table already exists, overwriting');\n    }\n\n    this.state.colorLUT[lutIndex] = colorLUT;\n  }\n\n  /**\n   * Removes a color LUT to the state.\n   * @param colorLUTIndex - The index of the color LUT table to remove.\n   */\n  removeColorLUT(colorLUTIndex: number): void {\n    delete this.state.colorLUT[colorLUTIndex];\n  }\n\n  /**\n   * It handles the active segmentation representation based on the active status of the\n   * segmentation representation that was added or removed.\n   *\n   * @param toolGroupId - The Id of the tool group that the segmentation representation belongs to.\n   * @param recentlyAddedOrRemovedSegmentationRepresentation - ToolGroupSpecificSegmentationData\n   */\n  _handleActiveSegmentation(\n    toolGroupId: string,\n    recentlyAddedOrRemovedSegmentationRepresentation: ToolGroupSpecificRepresentation\n  ): void {\n    const segmentationRepresentations =\n      this.getSegmentationRepresentations(toolGroupId);\n\n    // 1. If there is no segmentation representations, return early\n    if (segmentationRepresentations.length === 0) {\n      return;\n    }\n\n    // 2. If there is only one segmentation representation, make that one active\n    if (segmentationRepresentations.length === 1) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 3. If removed Segmentation representation was active, make the first one active\n    const activeSegmentationRepresentations =\n      segmentationRepresentations.filter(\n        (representation) => representation.active\n      );\n\n    if (activeSegmentationRepresentations.length === 0) {\n      segmentationRepresentations[0].active = true;\n      return;\n    }\n\n    // 4. If the added segmentation representation is active, make other segmentation\n    // representations inactive\n    if (recentlyAddedOrRemovedSegmentationRepresentation.active) {\n      segmentationRepresentations.forEach((representation) => {\n        if (\n          representation.segmentationRepresentationUID !==\n          recentlyAddedOrRemovedSegmentationRepresentation.segmentationRepresentationUID\n        ) {\n          representation.active = false;\n        }\n      });\n    }\n\n    // 5. if added/removed segmentation is is inactive, do nothing\n  }\n\n  _initDefaultColorLUTIfNecessary() {\n    // if colorLUTTable is not specified or the default one is not found\n    if (this.state.colorLUT.length === 0 || !this.state.colorLUT[0]) {\n      this.addColorLUT(CORNERSTONE_COLOR_LUT as ColorLUT, 0);\n    }\n  }\n}\n\nconst defaultSegmentationStateManager = new SegmentationStateManager('DEFAULT');\nexport { defaultSegmentationStateManager };\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\n\nimport { Events } from '../../enums';\nimport {\n  getSegmentationRepresentations,\n  getSegmentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport {\n  SegmentationRepresentationModifiedEventDetail,\n  SegmentationDataModifiedEventDetail,\n  SegmentationModifiedEventDetail,\n  SegmentationRepresentationRemovedEventDetail,\n  SegmentationRemovedEventDetail,\n} from '../../types/EventTypes';\n\n/**\n * Trigger an event that a segmentation is removed\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationRemoved(segmentationId: string): void {\n  const eventDetail: SegmentationRemovedEventDetail = {\n    segmentationId,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_REMOVED, eventDetail);\n}\n\n/**\n * Trigger an event that a segmentation representation was removed\n * @param toolGroupId - The id of the tool group that the segmentation\n * representation was removed from.\n * @param segmentationRepresentationUID - The UID of the segmentation\n * representation that was removed.\n */\nfunction triggerSegmentationRepresentationRemoved(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const eventDetail: SegmentationRepresentationRemovedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  triggerEvent(\n    eventTarget,\n    Events.SEGMENTATION_REPRESENTATION_REMOVED,\n    eventDetail\n  );\n}\n\n/**\n * Trigger an event on the eventTarget that the segmentation representation for\n * toolGroupId has been updated\n * @param toolGroupId - The Id of the toolGroup\n */\nfunction triggerSegmentationRepresentationModified(\n  toolGroupId: string,\n  segmentationRepresentationUID?: string\n): void {\n  const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n    toolGroupId,\n    segmentationRepresentationUID,\n  };\n\n  if (segmentationRepresentationUID) {\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n    return;\n  }\n\n  // If no segmentationRepresentationUID is provided, then we need to trigger\n  // the event for all segmentation representations in the toolGroup\n\n  // Get all segmentation representations in the toolGroup\n  const segmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId) || [];\n\n  segmentationRepresentations.forEach((segmentationRepresentation) => {\n    const { segmentationRepresentationUID } = segmentationRepresentation;\n    const eventDetail: SegmentationRepresentationModifiedEventDetail = {\n      toolGroupId,\n      segmentationRepresentationUID,\n    };\n\n    triggerEvent(\n      eventTarget,\n      Events.SEGMENTATION_REPRESENTATION_MODIFIED,\n      eventDetail\n    );\n  });\n}\n\n/**\n * Triggers segmentation global state updated event, notifying all toolGroups\n * that the global state has been updated, If a segmentationId is provided\n * the event will only be triggered for that segmentation, otherwise it will\n * be triggered for all segmentations.\n *\n * @param segmentationId - The id of the segmentation that has been updated\n */\nfunction triggerSegmentationModified(segmentationId?: string): void {\n  let segmentationIds;\n\n  if (segmentationId) {\n    segmentationIds = [segmentationId];\n  } else {\n    // get all toolGroups\n    segmentationIds = getSegmentations().map(\n      ({ segmentationId }) => segmentationId\n    );\n  }\n\n  // 1. Trigger an event notifying all listeners about the segmentationId\n  // that has been updated.\n  segmentationIds.forEach((segmentationId) => {\n    const eventDetail: SegmentationModifiedEventDetail = {\n      segmentationId,\n    };\n    triggerEvent(eventTarget, Events.SEGMENTATION_MODIFIED, eventDetail);\n  });\n\n  // Todo: I don't think we need the following lines of code\n  // // 2. Notify all viewports that render the segmentationId in order to update the\n  // // rendering based on the new global state.\n  // toolGroupIds.forEach((toolGroupId) => {\n  //   triggerSegmentationRepresentationModified(toolGroupId)\n  // })\n}\n\n/**\n * Trigger an event that a segmentation data has been modified\n * @param segmentationId - The Id of segmentation\n */\nfunction triggerSegmentationDataModified(\n  segmentationId: string,\n  modifiedSlicesToUse?: number[]\n): void {\n  const eventDetail: SegmentationDataModifiedEventDetail = {\n    segmentationId,\n    modifiedSlicesToUse,\n  };\n\n  triggerEvent(eventTarget, Events.SEGMENTATION_DATA_MODIFIED, eventDetail);\n}\n\nexport {\n  // ToolGroup Specific\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n  // Global\n  triggerSegmentationDataModified,\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n};\n","import {\n  SegmentationPublicInput,\n  Segmentation,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It takes in a segmentation input and returns a segmentation with default values\n * @param segmentationInput - The input to the segmentation.\n * @returns A Segmentation object.\n * @internal\n */\nfunction normalizeSegmentationInput(\n  segmentationInput: SegmentationPublicInput\n): Segmentation {\n  const { segmentationId, representation } = segmentationInput;\n\n  // Todo: we should be able to let the user pass in non-default values for\n  // cachedStats, label, activeSegmentIndex, etc.\n  return {\n    segmentationId,\n    cachedStats: {},\n    segmentLabels: {},\n    label: null,\n    segmentsLocked: new Set(),\n    type: representation.type,\n    activeSegmentIndex: 1,\n    representationData: {\n      [representation.type]: {\n        ...representation.data,\n      },\n    },\n  };\n}\n\nexport default normalizeSegmentationInput;\n","import type {\n  ColorLUT,\n  RepresentationConfig,\n  Segmentation,\n  SegmentationPublicInput,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n  ToolGroupSpecificRepresentations,\n} from '../../types/SegmentationStateTypes';\nimport { defaultSegmentationStateManager } from './SegmentationStateManager';\nimport {\n  triggerSegmentationModified,\n  triggerSegmentationRemoved,\n  triggerSegmentationRepresentationModified,\n  triggerSegmentationRepresentationRemoved,\n} from './triggerSegmentationEvents';\n\nimport normalizeSegmentationInput from './helpers/normalizeSegmentationInput';\n\n/**\n * It returns the defaultSegmentationStateManager.\n */\nfunction getDefaultSegmentationStateManager() {\n  return defaultSegmentationStateManager;\n}\n\n/*************************\n *\n * Segmentation State\n *\n **************************/\n\n/**\n * Get the segmentation for the given segmentationId\n * @param segmentationId - The Id of the segmentation\n * @returns A GlobalSegmentationData object\n */\nfunction getSegmentation(segmentationId: string): Segmentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentation(segmentationId);\n}\n\n/**\n * Get the segmentations inside the state\n * @returns Segmentation array\n */\nfunction getSegmentations(): Segmentation[] | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n\n  return state.segmentations;\n}\n\n/**\n * It takes a segmentation input and adds it to the segmentation state manager\n * @param segmentationInput - The segmentation to add.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction addSegmentation(\n  segmentationInput: SegmentationPublicInput,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const segmentation = normalizeSegmentationInput(segmentationInput);\n\n  segmentationStateManager.addSegmentation(segmentation);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified(segmentation.segmentationId);\n  }\n}\n\n/**\n * Get the segmentation state for a tool group. It will return an array of\n * segmentation representation objects.\n * @param toolGroupId - The unique identifier of the tool group.\n * @returns An array of segmentation representation objects.\n */\nfunction getSegmentationRepresentations(\n  toolGroupId: string\n): ToolGroupSpecificRepresentations | [] {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n}\n\n/**\n * Get all segmentation representations in the state\n * @returns An array of segmentation representation objects.\n */\nfunction getAllSegmentationRepresentations(): Record<\n  string,\n  ToolGroupSpecificRepresentation[]\n> {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getAllSegmentationRepresentations();\n}\n\n/**\n * Get the tool group IDs that have a segmentation representation with the given\n * segmentationId\n * @param segmentationId - The id of the segmentation\n * @returns An array of tool group IDs.\n */\nfunction getToolGroupIdsWithSegmentation(segmentationId: string): string[] {\n  if (!segmentationId) {\n    throw new Error('getToolGroupIdsWithSegmentation: segmentationId is empty');\n  }\n\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  const state = segmentationStateManager.getState();\n  const toolGroupIds = Object.keys(state.toolGroups);\n\n  const foundToolGroupIds = [];\n  toolGroupIds.forEach((toolGroupId) => {\n    const toolGroupSegmentationRepresentations =\n      segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n    toolGroupSegmentationRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        foundToolGroupIds.push(toolGroupId);\n      }\n    });\n  });\n\n  return foundToolGroupIds;\n}\n\n/**\n * Get the segmentation representations config for a given tool group\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config belongs to.\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Set the segmentation representation config for the provided toolGroup. ToolGroup specific\n * configuration overwrites the global configuration for each representation.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that the segmentation\n * config is being set for.\n * @param config - The new configuration for the tool group.\n * @param suppressEvents - If true, the event will not be triggered.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationConfig(\n    toolGroupId,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(toolGroupId);\n  }\n}\n\n/**\n * It sets the segmentation representation specific config for all the segments\n * inside the segmentation.\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @param config  - The new configuration for the segmentation representation it is an object with keys of\n * different representation types, and values of the configuration for each representation type.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the segmentation representation specific config which is the same for all the segments\n * @param segmentationRepresentationUID - The unique identifier of the segmentation representation.\n * @returns - The segmentation representation specific config.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction getSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\nfunction setSegmentSpecificRepresentationConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig,\n  suppressEvents = false\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setSegmentSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n\n  // Todo: this can be even more performant if we create a new event for\n  // triggering a specific segment config change.\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * Add the given segmentation representation data to the given tool group state. It fires\n * SEGMENTATION_REPRESENTATION_MODIFIED event if not suppressed.\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation representation is for.\n * @param segmentationData - The data to add to the segmentation state.\n * @param suppressEvents - boolean\n */\nfunction addSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentation\n  );\n\n  if (!suppressEvents) {\n    triggerSegmentationRepresentationModified(\n      toolGroupId,\n      segmentationRepresentation.segmentationRepresentationUID\n    );\n  }\n}\n\n/**\n * It returns the global segmentation config. Note that the toolGroup-specific\n * configuration has higher priority than the global configuration and overwrites\n * the global configuration for each representation.\n * @returns The global segmentation configuration for all segmentations.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation configuration. It fires SEGMENTATION_MODIFIED\n * event if not suppressed.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param config - The new global segmentation config.\n * @param suppressEvents - If true, the `segmentationGlobalStateModified` event will not be triggered.\n */\nfunction setGlobalConfig(\n  config: SegmentationRepresentationConfig,\n  suppressEvents?: boolean\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.setGlobalConfig(config);\n\n  if (!suppressEvents) {\n    triggerSegmentationModified();\n  }\n}\n\n/**\n * Get the segmentation data object for a given tool group and\n * segmentation data UID. It searches all the toolGroup specific segmentation\n * data objects and returns the first one that matches the UID.\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @returns Segmentation Data object.\n */\nfunction getSegmentationRepresentationByUID(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): ToolGroupSpecificRepresentation | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * It removes the segmentation from the segmentation state manager\n *\n * @triggers SEGMENTATION_REMOVED\n *\n * @param segmentationId - The id of the segmentation\n */\nfunction removeSegmentation(segmentationId: string): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentation(segmentationId);\n  triggerSegmentationRemoved(segmentationId);\n}\n\n/**\n * Remove a segmentation representation from the segmentation state manager for a toolGroup.\n * It fires SEGMENTATION_REPRESENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_REPRESENTATION_REMOVED\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation to remove.\n * remove.\n * @param - immediate - If true, the viewports will be updated immediately.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationRemoved(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction removeColorLUT(colorLUTIndex: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.removeColorLUT(colorLUTIndex);\n}\n\n/**\n * Get the color lut for a given index\n * @param index - The index of the color lut to retrieve.\n * @returns A ColorLUT array.\n */\nfunction getColorLUT(index: number): ColorLUT | undefined {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  return segmentationStateManager.getColorLUT(index);\n}\n\n/**\n * Add a color LUT to the segmentation state manager\n * @param colorLUT - The color LUT array to add.\n * @param index - The index of the color LUT to add.\n */\nfunction addColorLUT(colorLUT: ColorLUT, index: number): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n  segmentationStateManager.addColorLUT(colorLUT, index);\n  // Todo: trigger event color LUT added\n}\n\nexport {\n  getDefaultSegmentationStateManager,\n  // Segmentation\n  getSegmentation,\n  getSegmentations,\n  addSegmentation,\n  removeSegmentation,\n  // ToolGroup specific Segmentation Representation\n  getSegmentationRepresentations,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n  // config\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  getGlobalConfig,\n  setGlobalConfig,\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  getSegmentSpecificRepresentationConfig,\n  setSegmentSpecificRepresentationConfig,\n  // helpers s\n  getToolGroupIdsWithSegmentation,\n  getAllSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n  // color\n  addColorLUT,\n  getColorLUT,\n  removeColorLUT,\n};\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { IPoints } from '../../types';\n\n/**\n * Given a native mouse event, get the associated cornerstone3D enabled element\n * and derive a set of coordinates useful for tools.\n * @param evt - The Mouse event.\n * @param element - The DOM HTMLDivElement that the event was triggered on.\n * @returns The points related to the event in the form of a `IPoints` object containing\n * the following properties: `page`, `client`, `canvas`, and `world` details of the event.\n */\nexport default function getMouseEventPoints(\n  evt: MouseEvent,\n  element?: HTMLDivElement\n): IPoints {\n  const elementToUse = element || (evt.currentTarget as HTMLDivElement);\n  const { viewport } = getEnabledElement(elementToUse);\n  const clientPoint = _clientToPoint(evt);\n  const pagePoint = _pageToPoint(evt);\n  const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);\n  const worldPoint = viewport.canvasToWorld(canvasPoint);\n\n  return {\n    page: pagePoint,\n    client: clientPoint,\n    canvas: canvasPoint,\n    world: worldPoint,\n  };\n}\n\n/**\n * Converts point from page coordinates to canvas coordinates.\n * @param element - HTMLDivElement\n * @param pagePoint - Point in page coordinates pageX and pageY\n *\n * @returns The canvas coordinate points\n */\nfunction _pagePointsToCanvasPoints(\n  element: HTMLDivElement,\n  pagePoint: Types.Point2\n): Types.Point2 {\n  const rect = element.getBoundingClientRect();\n  return [\n    pagePoint[0] - rect.left - window.pageXOffset,\n    pagePoint[1] - rect.top - window.pageYOffset,\n  ];\n}\n\n/**\n * Converts the event's `pageX` and `pageY` properties to Types.Point2 format\n *\n * @param evt - The Mouse `Event`\n */\nfunction _pageToPoint(evt: MouseEvent): Types.Point2 {\n  return [evt.pageX, evt.pageY];\n}\n\n/**\n * Converts the event's `clientX` and `clientY` properties to Types.Point2 format\n * @param evt - The Mouse `Event`\n */\nfunction _clientToPoint(evt: MouseEvent): Types.Point2 {\n  return [evt.clientX, evt.clientY];\n}\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport getMouseEventPoints from './getMouseEventPoints';\nimport { EventTypes, IPoints } from '../../types';\n\n/**\n * Captures and normalizes the double click event. Emits as a cornerstoneTools3D\n * double click event.\n *\n * @param evt - The mouse event.\n */\nfunction mouseDoubleClickListener(evt: MouseEvent): void {\n  const element = <HTMLDivElement>evt.currentTarget;\n\n  const { viewportId, renderingEngineId } = getEnabledElement(element);\n\n  const startPoints = getMouseEventPoints(evt, element);\n  const deltaPoints: IPoints = {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  };\n\n  const eventDetail: EventTypes.MouseDoubleClickEventDetail = {\n    event: evt,\n    eventName: Events.MOUSE_DOUBLE_CLICK,\n    viewportId,\n    renderingEngineId,\n    camera: {},\n    element,\n    startPoints,\n    lastPoints: startPoints,\n    currentPoints: startPoints,\n    deltaPoints,\n  };\n\n  const consumed = !triggerEvent(\n    element,\n    Events.MOUSE_DOUBLE_CLICK,\n    eventDetail\n  );\n\n  if (consumed) {\n    // The Events.MOUSE_DOUBLE_CLICK was consumed, thus no other listener should handle this 'dblclick' event.\n\n    // Use stopImmediatePropagation to lessen the possibility that a third party 'dblclick'\n    // listener receives this event. However, there still is no guarantee\n    // that any third party listener has not already handled the event.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  }\n}\n\nexport default mouseDoubleClickListener;\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport getMouseEventPoints from './getMouseEventPoints';\nimport { MouseMoveEventDetail } from '../../types/EventTypes';\n\nconst eventName = Events.MOUSE_MOVE;\n\n/**\n * Captures and normalizes the mouse move event. Emits as a cornerstoneTools3D\n * mouse move event.\n *\n * @param evt - The mouse event.\n */\nfunction mouseMoveListener(evt: MouseEvent) {\n  const element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  const currentPoints = getMouseEventPoints(evt);\n  const eventDetail: MouseMoveEventDetail = {\n    renderingEngineId,\n    viewportId,\n    camera: {},\n    element,\n    currentPoints,\n    eventName,\n    event: evt,\n  };\n\n  const consumed = !triggerEvent(element, eventName, eventDetail);\n\n  // Events.MOUSE_MOVE was consumed, thus no other listener should handle this event.\n  if (consumed) {\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  }\n}\n\nexport default mouseMoveListener;\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport Events from '../../enums/Events';\nimport mouseMoveListener from './mouseMoveListener';\nimport { EventTypes, IPoints } from '../../types';\nimport getMouseEventPoints from './getMouseEventPoints';\n\nconst { MOUSE_DOWN, MOUSE_DOWN_ACTIVATE, MOUSE_CLICK, MOUSE_UP, MOUSE_DRAG } =\n  Events;\n\n// The amount of time in milliseconds within which a browser 'dblclick' event has to occur.\n// Any mouse down, up, down and up sequence taking longer than this time is considered to\n// NOT be a double click and any browser 'dblclick' event that subsequently occurs as a result\n// of such a sequence will be ignored. It is best to set this to a value that is less\n// than the system value for detecting a double click. Setting something too large\n// might detect a double click that does not constitute a browser 'dblclick' and thus\n// no mouse events for the sequence will get fired at all.\n//\n// TODO This module should detect and fire 'dblclick' events at its discretion and\n// ignore all those generated by the browser.\n//\nconst DOUBLE_CLICK_TOLERANCE_MS = 400;\n\n// This tolerance is how long to accept a secondary button down\nconst MULTI_BUTTON_TOLERANCE_MS = 150;\n\n// A drag (projected distance) during the double click timeout that is greater than this\n// value will cancel the timeout and suppress any double click that might occur.\n// This tolerance is particularly important on touch devices where some movement\n// might occur between the two clicks.\n//\n// TODO revisit this value for touch devices\n//\nconst DOUBLE_CLICK_DRAG_TOLERANCE = 3;\n\ninterface IMouseDownListenerState {\n  mouseButton: number;\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  isClickEvent: boolean;\n  clickDelay: number;\n  preventClickTimeout: ReturnType<typeof setTimeout>;\n  startPoints: IPoints;\n  lastPoints: IPoints;\n}\n\ninterface IDoubleClickState {\n  doubleClickTimeout: ReturnType<typeof setTimeout>;\n  mouseDownEvent: MouseEvent;\n  mouseUpEvent: MouseEvent;\n  ignoreDoubleClick: boolean;\n}\n\n// STATE\nconst defaultState: IMouseDownListenerState = {\n  mouseButton: undefined,\n  //\n  element: null,\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  isClickEvent: true,\n  clickDelay: 200,\n  preventClickTimeout: null,\n  startPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n  lastPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n};\n\nlet state: IMouseDownListenerState = {\n  mouseButton: undefined,\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  isClickEvent: true,\n  clickDelay: 200,\n  element: null,\n  preventClickTimeout: null,\n  startPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n  lastPoints: {\n    page: [0, 0],\n    client: [0, 0],\n    canvas: [0, 0],\n    world: [0, 0, 0],\n  },\n};\n\nconst doubleClickState: IDoubleClickState = {\n  doubleClickTimeout: null,\n  mouseDownEvent: null,\n  mouseUpEvent: null,\n  ignoreDoubleClick: false,\n};\n\n/**\n * Listens to mouse down events from the DOM and depending on interaction and further\n * interaction can emit the following mouse events:\n *\n * - MOUSE_DOWN\n * - MOUSE_DOWN_ACTIVATE\n * - MOUSE_DRAG (move while down)\n * - MOUSE_UP\n * - MOUSE_CLICK\n *\n * The mouse down is NOT handled immediately. Instead, a timeout is started to\n * determine if this mouse down is the first in a sequence that constitutes a\n * double click.\n *\n * @param evt - The Mouse event.\n * @private\n */\nfunction mouseDownListener(evt: MouseEvent) {\n  if (doubleClickState.doubleClickTimeout) {\n    // A second identical click will be a double click event, so ignore it\n    if (evt.buttons === doubleClickState.mouseDownEvent.buttons) {\n      return;\n    }\n\n    // Record the second button or the changed button event as the initial\n    // button down state so that the multi-button event can be detected\n    doubleClickState.mouseDownEvent = evt;\n\n    // If second button is added, then ensure double click timeout is terminated\n    // and do not handle three or more button gestures.\n    _doStateMouseDownAndUp();\n    return;\n  }\n\n  // Handle multi-button clicks by adding a delay before handling them.\n  // Double clicks (left button only) physically take the user longer, so\n  // use a longer timeout, and for multi-button at the same time, the clicks\n  // are done at the same time by the user, just the system perceives them\n  // separately, so have a short timeout to allow catching both buttons.\n  doubleClickState.doubleClickTimeout = setTimeout(\n    _doStateMouseDownAndUp,\n    evt.buttons === 1 ? DOUBLE_CLICK_TOLERANCE_MS : MULTI_BUTTON_TOLERANCE_MS\n  );\n\n  // First mouse down of a potential double click. So save it and start\n  // a timeout to determine a double click.\n  doubleClickState.mouseDownEvent = evt;\n  doubleClickState.ignoreDoubleClick = false;\n\n  state.element = <HTMLDivElement>evt.currentTarget;\n\n  state.mouseButton = evt.buttons;\n\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n\n  state.preventClickTimeout = setTimeout(\n    _preventClickHandler,\n    state.clickDelay\n  );\n\n  // Prevent CornerstoneToolsMouseMove while mouse is down\n  state.element.removeEventListener('mousemove', mouseMoveListener);\n\n  const startPoints = getMouseEventPoints(evt, state.element);\n  state.startPoints = _copyPoints(startPoints);\n  state.lastPoints = _copyPoints(startPoints);\n\n  document.addEventListener('mouseup', _onMouseUp);\n  document.addEventListener('mousemove', _onMouseDrag);\n}\n\n/**\n * Does the actual mouse down logic if the double click timer has expired or\n * a mouse drag has started.\n * @param evt the mouse down event\n * @private\n */\nfunction _doMouseDown(evt: MouseEvent) {\n  const deltaPoints = _getDeltaPoints(state.startPoints, state.startPoints);\n\n  const eventDetail: EventTypes.MouseDownEventDetail = {\n    event: evt,\n    eventName: MOUSE_DOWN,\n    element: state.element,\n    mouseButton: state.mouseButton,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPoints: state.startPoints,\n    lastPoints: state.startPoints,\n    currentPoints: state.startPoints,\n    deltaPoints,\n  };\n\n  state.lastPoints = _copyPoints(eventDetail.lastPoints);\n\n  // by triggering MOUSE_DOWN it checks if this is toolSelection, handle modification etc.\n  // of already existing tools\n  const notConsumed = triggerEvent(\n    eventDetail.element,\n    MOUSE_DOWN,\n    eventDetail\n  );\n\n  // if no tools responded to this event and prevented its default behavior,\n  // create a new tool\n  if (notConsumed) {\n    triggerEvent(eventDetail.element, MOUSE_DOWN_ACTIVATE, eventDetail);\n  }\n}\n\n/**\n *_onMouseDrag - Handle emission of drag events whilst the mouse is depressed.\n *\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseDrag(evt: MouseEvent) {\n  const currentPoints = getMouseEventPoints(evt, state.element);\n  const lastPoints = _updateMouseEventsLastPoints(\n    state.element,\n    state.lastPoints\n  );\n\n  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);\n\n  if (doubleClickState.doubleClickTimeout) {\n    if (_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {\n      // Dragging past the tolerance means no double click should occur.\n      _doStateMouseDownAndUp();\n    } else {\n      return;\n    }\n  }\n\n  const eventDetail: EventTypes.MouseDragEventDetail = {\n    event: evt,\n    eventName: MOUSE_DRAG,\n    mouseButton: state.mouseButton,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPoints: _copyPoints(state.startPoints),\n    lastPoints: _copyPoints(lastPoints),\n    currentPoints,\n    deltaPoints,\n  };\n\n  const consumed = !triggerEvent(state.element, MOUSE_DRAG, eventDetail);\n\n  // Events.MOUSE_DRAG was consumed, thus no other listener should handle this event.\n  if (consumed) {\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  }\n\n  // Update the last points\n  state.lastPoints = _copyPoints(currentPoints);\n}\n\n/**\n *_onMouseUp - Handle emission of mouse up events, and re-enabling mouse move events.\n *\n * If the mouse up event occurs during a double click timeout, it is either the first or\n * second mouse up of a potential double click sequence. If the first, then it\n * is saved in case the double click timeout expires and a simple mouse down and\n * up have to get executed. If the second, then the latest mouse down, up, down and\n * up constitute a double click and the mouseDoubleClickListener needs to execute.\n *\n * If the mouse up event comes after the double click timeout, then it is simply\n * handled as the up of a mouse down and up sequence.\n *\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseUp(evt: MouseEvent): void {\n  // Cancel the timeout preventing the click event from triggering\n  clearTimeout(state.preventClickTimeout);\n\n  if (doubleClickState.doubleClickTimeout) {\n    // received a mouse up while waiting for a double click (via a timeout)\n\n    if (!doubleClickState.mouseUpEvent) {\n      // this is the first mouse up during the double click timeout; we'll need it later if the timeout expires\n      doubleClickState.mouseUpEvent = evt;\n\n      state.element.addEventListener('mousemove', _onMouseMove);\n    } else {\n      // this is the second mouse up of a double click!\n      _cleanUp();\n    }\n  } else {\n    // Handle the actual mouse up. Note that it may have occurred during the double click timeout or\n    // after it expired. In either case this block is being executed after the time out has expired\n    // or after a drag started.\n\n    const eventName = state.isClickEvent ? MOUSE_CLICK : MOUSE_UP;\n\n    const currentPoints = getMouseEventPoints(evt, state.element);\n    const deltaPoints = _getDeltaPoints(currentPoints, state.lastPoints);\n    const eventDetail:\n      | EventTypes.MouseUpEventDetail\n      | EventTypes.MouseClickEventType = {\n      event: evt,\n      eventName,\n      mouseButton: state.mouseButton,\n      element: state.element,\n      renderingEngineId: state.renderingEngineId,\n      viewportId: state.viewportId,\n      camera: {},\n      startPoints: _copyPoints(state.startPoints),\n      lastPoints: _copyPoints(state.lastPoints),\n      currentPoints,\n      deltaPoints,\n    };\n\n    triggerEvent(eventDetail.element, eventName, eventDetail);\n\n    _cleanUp();\n  }\n\n  // Remove the drag as soon as we get the mouse up because either we have executed\n  // the mouse up logic, or we have not even handled the mouse down logic yet\n  // - either way no drag should/can occur.\n  document.removeEventListener('mousemove', _onMouseDrag);\n}\n\n/**\n * Handles a mouse move on the state element after a mouse down AND up AND\n * while the double click timeout is still running.\n * @private\n * @param evt - The mouse event.\n */\nfunction _onMouseMove(evt: MouseEvent) {\n  const currentPoints = getMouseEventPoints(evt, state.element);\n  const lastPoints = _updateMouseEventsLastPoints(\n    state.element,\n    state.lastPoints\n  );\n\n  const deltaPoints = _getDeltaPoints(currentPoints, lastPoints);\n\n  if (!_isDragPastDoubleClickTolerance(deltaPoints.canvas)) {\n    return;\n  }\n\n  _doStateMouseDownAndUp();\n\n  // Do the move again because during the timeout the global mouse move listener was removed.\n  // Now it is back.\n  mouseMoveListener(evt);\n}\n\n/**\n * Determines if the given delta is past the double click, (projected) drag distance\n * tolerance.\n * @param delta the delta\n * @returns true iff the delta is past the tolerance\n */\nfunction _isDragPastDoubleClickTolerance(delta: Types.Point2): boolean {\n  return Math.abs(delta[0]) + Math.abs(delta[1]) > DOUBLE_CLICK_DRAG_TOLERANCE;\n}\n\nfunction _preventClickHandler() {\n  state.isClickEvent = false;\n}\n\n/**\n * Do a mouse down and potential mouse up using each of the events in the double click state.\n * The events were stored in the state during the timeout to determine a double click.\n *\n * This function should be invoked whenever it is determined that the latest\n * sequence of mouse down(s) and up(s) is NOT a double click. Examples of this include\n * - the expiration of the double click timeout\n * - a mouse drag/move beyond the DOUBLE_CLICK_DRAG_TOLERANCE\n *\n * This function sets the doubleClickState.ignoreDoubleClick flag in case our timeout value\n * or mouse move/drag tolerance is inaccurate and we do indeed get a double click event from\n * the browser later. The flag will be cleared in the mouseDoubleClickIgnoreListener should a\n * double click event get fired. If there is no eventual double click for the latest sequence,\n * the flag spills into the next sequence where it will get cleared at the beginning of that next\n * sequence in mouseDownListener. It is perfectly safe for the flag to be\n * left true when no double click actually occurs because any future double click must start with\n * a mouse down that is handled in this module.\n *\n * @private\n */\nfunction _doStateMouseDownAndUp() {\n  doubleClickState.ignoreDoubleClick = true;\n\n  const mouseDownEvent = doubleClickState.mouseDownEvent;\n  const mouseUpEvent = doubleClickState.mouseUpEvent;\n\n  _clearDoubleClickTimeoutAndEvents();\n\n  _doMouseDown(mouseDownEvent);\n\n  if (mouseUpEvent) {\n    _onMouseUp(mouseUpEvent);\n  }\n}\n\n/**\n * Clears the mouse events and double click timeout id in the double click state object.\n * The timeout itself is also cleared so that no callback is invoked.\n */\nfunction _clearDoubleClickTimeoutAndEvents() {\n  if (doubleClickState.doubleClickTimeout) {\n    clearTimeout(doubleClickState.doubleClickTimeout);\n    doubleClickState.doubleClickTimeout = null;\n  }\n\n  doubleClickState.mouseDownEvent = null;\n  doubleClickState.mouseUpEvent = null;\n}\n\nfunction _cleanUp() {\n  document.removeEventListener('mouseup', _onMouseUp);\n  state.element?.removeEventListener('mousemove', _onMouseMove);\n\n  // Restore our global mousemove listener\n  state.element?.addEventListener('mousemove', mouseMoveListener);\n\n  _clearDoubleClickTimeoutAndEvents();\n\n  state = JSON.parse(JSON.stringify(defaultState));\n}\n\n/**\n * Copies a set of points.\n * @param points - The `IPoints` instance to copy.\n *\n * @returns A copy of the points.\n */\nfunction _copyPoints(points: IPoints): IPoints {\n  return JSON.parse(JSON.stringify(points));\n}\n\n/**\n * Recalculates the last world coordinate, as the linear transform from client\n * to world could be different if the camera was updated.\n * @param element - The HTML element\n * @param lastPoints - The last points\n */\nfunction _updateMouseEventsLastPoints(\n  element: HTMLDivElement,\n  lastPoints: IPoints\n): IPoints {\n  const { viewport } = getEnabledElement(element);\n  // Need to update the world point to be calculated from the current reference frame,\n  // Which might have changed since the last interaction.\n  const world = viewport.canvasToWorld(lastPoints.canvas);\n\n  return {\n    page: lastPoints.page,\n    client: lastPoints.client,\n    canvas: lastPoints.canvas,\n    world,\n  };\n}\n\n/**\n * Returns the difference between two `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints -- The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The difference in IPoints format\n */\nfunction _getDeltaPoints(currentPoints: IPoints, lastPoints: IPoints): IPoints {\n  return {\n    page: _subtractPoints2D(currentPoints.page, lastPoints.page),\n    client: _subtractPoints2D(currentPoints.client, lastPoints.client),\n    canvas: _subtractPoints2D(currentPoints.canvas, lastPoints.canvas),\n    world: _subtractPoints3D(currentPoints.world, lastPoints.world),\n  };\n}\n\n/**\n * _subtractPoints - Subtracts `point1` from `point0`.\n * @param point0 - The first point.\n * @param point1 - The second point to subtract from the first.\n *\n * @returns The difference.\n */\nfunction _subtractPoints2D(\n  point0: Types.Point2,\n  point1: Types.Point2\n): Types.Point2 {\n  return [point0[0] - point1[0], point0[1] - point1[1]];\n}\n\nfunction _subtractPoints3D(\n  point0: Types.Point3,\n  point1: Types.Point3\n): Types.Point3 {\n  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\n\nexport function getMouseButton(): number {\n  return state.mouseButton;\n}\n\n/**\n * Handles a dblclick event to determine if it should be ignored based on the\n * double click state's ignoreDoubleClick flag. stopImmediatePropagation and\n * preventDefault are used to ignore the event.\n * @param evt browser dblclick event\n */\nexport function mouseDoubleClickIgnoreListener(evt: MouseEvent) {\n  if (doubleClickState.ignoreDoubleClick) {\n    doubleClickState.ignoreDoubleClick = false;\n\n    // Use stopImmediatePropagation to lessen the possibility that a third party 'dblclick'\n    // listener receives this event. However, there still is no guarantee\n    // that any third party listener has not already handled the event.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  } else {\n    // If the embedding application blocked the first mouse down and up\n    // of a double click sequence from reaching this module, then this module\n    // has handled the second mouse down and up and thus needs to clean them up.\n    // Doing a clean up here for the typical double click case is harmless.\n    _cleanUp();\n  }\n}\n\nexport default mouseDownListener;\n","import mouseDoubleClickListener from './mouseDoubleClickListener';\nimport mouseDownListener, {\n  mouseDoubleClickIgnoreListener,\n} from './mouseDownListener';\nimport mouseMoveListener from './mouseMoveListener';\n\n/**\n * Removes mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('dblclick', mouseDoubleClickListener);\n  element.removeEventListener('mousedown', mouseDownListener);\n  element.removeEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.removeEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\n/**\n * Registers mouse event listeners for native mouse event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n\n  element.addEventListener('dblclick', mouseDoubleClickListener);\n  element.addEventListener('mousedown', mouseDownListener);\n  element.addEventListener('mousemove', mouseMoveListener);\n  // The mouseDoubleClickIgnoreListener prevents those browser 'dblclick'\n  // events that cornerstone has determined are single clicks from propagating\n  // to other (3rd party) listeners. A capture phase listener is used so that\n  // the 'dblclick' event can be ignored and not propagated ASAP.\n  element.addEventListener('dblclick', mouseDoubleClickIgnoreListener, {\n    capture: true,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport normalizeWheel from './normalizeWheel';\nimport Events from '../../enums/Events';\n// ~~ VIEWPORT LIBRARY\nimport getMouseEventPoints from '../mouse/getMouseEventPoints';\nimport { MouseWheelEventDetail } from '../../types/EventTypes';\n\n/**\n * wheelListener - Captures and normalizes mouse wheel events. Emits as a\n * cornerstoneTools3D mouse wheel event.\n * @param evt - The mouse wheel event.\n */\nfunction wheelListener(evt: WheelEvent) {\n  const element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  // Prevent triggering MouseWheel events that are not real scroll events:\n  // E.g. when clicking the MiddleMouseWheelButton, a deltaY of 0 is emitted.\n  // See https://github.com/cornerstonejs/cornerstoneTools/issues/935\n  if (evt.deltaY > -1 && evt.deltaY < 1) {\n    return;\n  }\n\n  evt.preventDefault();\n\n  const { spinX, spinY, pixelX, pixelY } = normalizeWheel(evt);\n  const direction = spinY < 0 ? -1 : 1;\n\n  const eventDetail: MouseWheelEventDetail = {\n    event: evt,\n    eventName: Events.MOUSE_WHEEL,\n    renderingEngineId,\n    viewportId,\n    element,\n    camera: {},\n    detail: evt,\n    wheel: {\n      spinX,\n      spinY,\n      pixelX,\n      pixelY,\n      direction,\n    },\n    points: getMouseEventPoints(evt),\n  };\n\n  triggerEvent(element, Events.MOUSE_WHEEL, eventDetail);\n}\n\nexport default wheelListener;\n","// Reasonable defaults\nconst PIXEL_STEP = 10;\nconst LINE_HEIGHT = 40;\nconst PAGE_HEIGHT = 800;\n\n/**\n * Normalizes wheel events and provides properties that are more\n * consistent and helpful across different browsers\n *\n * @param event - the original mouse event\n * @returns a normalized eventDetail\n */\nexport default function normalizeWheel(event) {\n  let spinX = 0,\n    spinY = 0,\n    pixelX = 0,\n    pixelY = 0;\n\n  // Legacy\n  if ('detail' in event) {\n    spinY = event.detail;\n  }\n  if ('wheelDelta' in event) {\n    spinY = -event.wheelDelta / 120;\n  }\n  if ('wheelDeltaY' in event) {\n    spinY = -event.wheelDeltaY / 120;\n  }\n  if ('wheelDeltaX' in event) {\n    spinX = -event.wheelDeltaX / 120;\n  }\n\n  pixelX = spinX * PIXEL_STEP;\n  pixelY = spinY * PIXEL_STEP;\n\n  if ('deltaY' in event) {\n    pixelY = event.deltaY;\n  }\n  if ('deltaX' in event) {\n    pixelX = event.deltaX;\n  }\n\n  if ((pixelX || pixelY) && event.deltaMode) {\n    if (event.deltaMode === 1) {\n      // Delta in LINE units\n      pixelX *= LINE_HEIGHT;\n      pixelY *= LINE_HEIGHT;\n    } else {\n      // Delta in PAGE units\n      pixelX *= PAGE_HEIGHT;\n      pixelY *= PAGE_HEIGHT;\n    }\n  }\n\n  // Fall-back if spin cannot be determined\n  if (pixelX && !spinX) {\n    spinX = pixelX < 1 ? -1 : 1;\n  }\n  if (pixelY && !spinY) {\n    spinY = pixelY < 1 ? -1 : 1;\n  }\n\n  return {\n    spinX,\n    spinY,\n    pixelX,\n    pixelY,\n  };\n}\n","import wheelListener from './wheelListener';\n\n/**\n * Listens for the wheel event, and handles it. Handled event\n * will be \"normalized\" and re-emitted as `Events.MOUSE_WHEEL`\n *\n * @param element - The HTML element\n */\nfunction enable(element: HTMLDivElement) {\n  disable(element);\n  element.addEventListener('wheel', wheelListener, { passive: false });\n}\n\n/**\n * Removes listener and handler for wheel event. `Events.MOUSE_WHEEL`\n * will no longer be emitted.\n *\n * @param element - THe HTML element\n */\nfunction disable(element: HTMLDivElement) {\n  element.removeEventListener('wheel', wheelListener);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","// Functions to prevent ghost clicks following a touch\n// Since the event lifecycle is touchstart, mousedown, touchend, mouseup\n// we want to prevent mousedown and mouseup events after touch events\n// All credit to @kosich\n// https://gist.github.com/kosich/23188dd86633b6c2efb7\n\nconst antiGhostDelay = 2000,\n  pointerType = {\n    mouse: 0,\n    touch: 1,\n  };\n\nlet lastInteractionType, lastInteractionTime;\n\nfunction handleTap(type, e) {\n  const now = Date.now();\n\n  if (type !== lastInteractionType) {\n    if (now - lastInteractionTime <= antiGhostDelay) {\n      e.preventDefault();\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n\n      return false;\n    }\n\n    lastInteractionType = type;\n  }\n\n  lastInteractionTime = now;\n}\n\n// Cacheing the function references\n// Necessary because a new function reference is created after .bind() is called\n// http://stackoverflow.com/questions/11565471/removing-event-listener-which-was-added-with-bind\nconst handleTapMouse = handleTap.bind(null, pointerType.mouse);\nconst handleTapTouch = handleTap.bind(null, pointerType.touch);\n\nfunction attachEvents(element, eventList, interactionType) {\n  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;\n\n  eventList.forEach(function (eventName) {\n    element.addEventListener(eventName, tapHandler, { passive: false });\n  });\n}\n\nfunction removeEvents(element, eventList, interactionType) {\n  const tapHandler = interactionType ? handleTapMouse : handleTapTouch;\n\n  eventList.forEach(function (eventName) {\n    element.removeEventListener(eventName, tapHandler);\n  });\n}\n\nconst mouseEvents = ['mousedown', 'mouseup', 'mousemove'];\nconst touchEvents = ['touchstart', 'touchend'];\n\nfunction disable(element) {\n  removeEvents(element, mouseEvents, pointerType.mouse);\n  removeEvents(element, touchEvents, pointerType.touch);\n}\n\nfunction enable(element) {\n  disable(element);\n  attachEvents(element, mouseEvents, pointerType.mouse);\n  attachEvents(element, touchEvents, pointerType.touch);\n}\n\nexport default {\n  enable,\n  disable,\n};\n","enum Swipe {\n  UP = 'UP',\n  DOWN = 'DOWN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nexport { Swipe };\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { ITouchPoints } from '../../types';\n\n/**\n * Given a native touch event, get the associated cornerstone3D enabled element\n * and derive a set of coordinates useful for tools.\n * @param evt - The Touch event.\n * @param element - The DOM HTMLDivElement that the event was triggered on.\n * @returns The points related to the event in the form of a `IPoints` object containing\n * the following properties: `page`, `client`, `canvas`, and `world` details of the event.\n */\nexport default function getTouchEventPoints(\n  evt: TouchEvent,\n  element?: HTMLDivElement\n): ITouchPoints[] {\n  const elementToUse = element || (evt.currentTarget as HTMLDivElement);\n  const touches = evt.type === 'touchend' ? evt.changedTouches : evt.touches;\n  return Object.keys(touches).map((i) => {\n    const clientPoint = _clientToPoint(touches[i]);\n    const pagePoint = _pageToPoint(touches[i]);\n    const canvasPoint = _pagePointsToCanvasPoints(elementToUse, pagePoint);\n    const { viewport } = getEnabledElement(elementToUse);\n    const worldPoint = viewport.canvasToWorld(canvasPoint);\n    return {\n      page: pagePoint,\n      client: clientPoint,\n      canvas: canvasPoint,\n      world: worldPoint,\n      touch: {\n        identifier: i,\n        radiusX: touches[i].radiusX,\n        radiusY: touches[i].radiusY,\n        force: touches[i].force,\n        rotationAngle: touches[i].rotationAngle,\n      },\n    };\n  });\n}\n\n/**\n * Converts point from page coordinates to canvas coordinates.\n * @param element - HTMLDivElement\n * @param pagePoint - Point in page coordinates pageX and pageY\n *\n * @returns The canvas coordinate points\n */\nfunction _pagePointsToCanvasPoints(\n  element: HTMLDivElement,\n  pagePoint: Types.Point2\n): Types.Point2 {\n  const rect = element.getBoundingClientRect();\n  return [\n    pagePoint[0] - rect.left - window.pageXOffset,\n    pagePoint[1] - rect.top - window.pageYOffset,\n  ];\n}\n\n/**\n * Converts the event's `pageX` and `pageY` properties to Types.Point2 format\n *\n * @param touch - The Touch\n */\nfunction _pageToPoint(touch: Touch): Types.Point2 {\n  return [touch.pageX, touch.pageY];\n}\n\n/**\n * Converts the event's `clientX` and `clientY` properties to Types.Point2 format\n * @param evt - The Touch `Event`\n */\nfunction _clientToPoint(touch: Touch): Types.Point2 {\n  return [touch.clientX, touch.clientY];\n}\n","import { IDistance, IPoints, ITouchPoints } from '../../types';\nimport { Types } from '@cornerstonejs/core';\n\n/**\n * Returns the difference between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints - The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The difference in IPoints format\n */\nfunction getDeltaPoints(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IPoints {\n  const curr = getMeanPoints(currentPoints);\n  const last = getMeanPoints(lastPoints);\n  return {\n    page: _subtractPoints2D(curr.page, last.page),\n    client: _subtractPoints2D(curr.client, last.client),\n    canvas: _subtractPoints2D(curr.canvas, last.canvas),\n    world: _subtractPoints3D(curr.world, last.world),\n  };\n}\n\n/**\n * Returns the distance between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints - The last points, to be subtracted from the `currentPoints`.\n *\n * @returns The distance difference in IDistance format\n */\nfunction getDeltaDistance(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IDistance {\n  const curr = getMeanPoints(currentPoints);\n  const last = getMeanPoints(lastPoints);\n  return {\n    page: _getDistance2D(curr.page, last.page),\n    client: _getDistance2D(curr.client, last.client),\n    canvas: _getDistance2D(curr.canvas, last.canvas),\n    world: _getDistance3D(curr.world, last.world),\n  };\n}\n\nfunction getDeltaRotation(\n  currentPoints: ITouchPoints[],\n  lastPoints: ITouchPoints[]\n) {\n  // TODO\n}\n\n/**\n * Returns the distance difference between multiple `IPoints` instances.\n * @param currentPoints - The current points.\n * @param lastPoints -- The last points.\n *\n * @returns The difference in IPoints format\n */\nfunction getDeltaDistanceBetweenIPoints(\n  currentPoints: IPoints[],\n  lastPoints: IPoints[]\n): IDistance {\n  const currentDistance = _getMeanDistanceBetweenAllIPoints(currentPoints);\n  const lastDistance = _getMeanDistanceBetweenAllIPoints(lastPoints);\n  const deltaDistance = {\n    page: currentDistance.page - lastDistance.page,\n    client: currentDistance.client - lastDistance.client,\n    canvas: currentDistance.canvas - lastDistance.canvas,\n    world: currentDistance.world - lastDistance.world,\n  };\n  return deltaDistance;\n}\n\n/**\n * Copies a set of points.\n * @param points - The `IPoints` instance to copy.\n *\n * @returns A copy of the points.\n */\nfunction copyPointsList(points: ITouchPoints[]): ITouchPoints[] {\n  return JSON.parse(JSON.stringify(points));\n}\n\nfunction copyPoints(points: ITouchPoints): ITouchPoints {\n  return JSON.parse(JSON.stringify(points));\n}\n\nfunction getMeanPoints(points: IPoints[]): IPoints {\n  return points.reduce(\n    (prev, curr) => {\n      return {\n        page: [\n          prev.page[0] + curr.page[0] / points.length,\n          prev.page[1] + curr.page[1] / points.length,\n        ],\n        client: [\n          prev.client[0] + curr.client[0] / points.length,\n          prev.client[1] + curr.client[1] / points.length,\n        ],\n        canvas: [\n          prev.canvas[0] + curr.canvas[0] / points.length,\n          prev.canvas[1] + curr.canvas[1] / points.length,\n        ],\n        world: [\n          prev.world[0] + curr.world[0] / points.length,\n          prev.world[1] + curr.world[1] / points.length,\n          prev.world[2] + curr.world[2] / points.length,\n        ],\n      };\n    },\n    {\n      page: [0, 0],\n      client: [0, 0],\n      canvas: [0, 0],\n      world: [0, 0, 0],\n    }\n  );\n}\n\nfunction getMeanTouchPoints(points: ITouchPoints[]): ITouchPoints {\n  return points.reduce(\n    (prev, curr) => {\n      return {\n        page: [\n          prev.page[0] + curr.page[0] / points.length,\n          prev.page[1] + curr.page[1] / points.length,\n        ],\n        client: [\n          prev.client[0] + curr.client[0] / points.length,\n          prev.client[1] + curr.client[1] / points.length,\n        ],\n        canvas: [\n          prev.canvas[0] + curr.canvas[0] / points.length,\n          prev.canvas[1] + curr.canvas[1] / points.length,\n        ],\n        world: [\n          prev.world[0] + curr.world[0] / points.length,\n          prev.world[1] + curr.world[1] / points.length,\n          prev.world[2] + curr.world[2] / points.length,\n        ],\n        touch: {\n          identifier: null,\n          radiusX: prev.touch.radiusX + curr.touch.radiusX / points.length,\n          radiusY: prev.touch.radiusY + curr.touch.radiusY / points.length,\n          force: prev.touch.force + curr.touch.force / points.length,\n          rotationAngle:\n            prev.touch.rotationAngle + curr.touch.rotationAngle / points.length,\n        },\n      };\n    },\n    {\n      page: [0, 0],\n      client: [0, 0],\n      canvas: [0, 0],\n      world: [0, 0, 0],\n      touch: {\n        identifier: null,\n        radiusX: 0,\n        radiusY: 0,\n        force: 0,\n        rotationAngle: 0,\n      },\n    }\n  );\n}\n/**\n * _subtractPoints - Subtracts `point1` from `point0`.\n * @param point0 - The first point.\n * @param point1 - The second point to subtract from the first.\n *\n * @returns The difference.\n */\nfunction _subtractPoints2D(\n  point0: Types.Point2,\n  point1: Types.Point2\n): Types.Point2 {\n  return [point0[0] - point1[0], point0[1] - point1[1]];\n}\n\nfunction _subtractPoints3D(\n  point0: Types.Point3,\n  point1: Types.Point3\n): Types.Point3 {\n  return [point0[0] - point1[0], point0[1] - point1[1], point0[2] - point1[2]];\n}\n\nfunction _getMeanDistanceBetweenAllIPoints(points: IPoints[]): IDistance {\n  // get mean distance between all unordered pairs of points\n  const pairedDistance: IDistance[] = [];\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j < points.length; j++) {\n      if (i < j) {\n        pairedDistance.push({\n          page: _getDistance2D(points[i].page, points[j].page),\n          client: _getDistance2D(points[i].client, points[j].client),\n          canvas: _getDistance2D(points[i].canvas, points[j].canvas),\n          world: _getDistance3D(points[i].world, points[j].world),\n        });\n      }\n    }\n  }\n\n  // take the average distance\n  return pairedDistance.reduce(\n    (prev, curr) => {\n      return {\n        page: prev.page + curr.page / pairedDistance.length,\n        client: prev.client + curr.client / pairedDistance.length,\n        canvas: prev.canvas + curr.canvas / pairedDistance.length,\n        world: prev.world + curr.world / pairedDistance.length,\n      };\n    },\n    {\n      page: 0,\n      client: 0,\n      canvas: 0,\n      world: 0,\n    }\n  );\n}\n\nfunction _getDistance2D(point0: Types.Point2, point1: Types.Point2): number {\n  return Math.sqrt(\n    Math.pow(point0[0] - point1[0], 2) + Math.pow(point0[1] - point1[1], 2)\n  );\n}\n\nfunction _getDistance3D(point0: Types.Point3, point1: Types.Point3): number {\n  return Math.sqrt(\n    Math.pow(point0[0] - point1[0], 2) +\n      Math.pow(point0[1] - point1[1], 2) +\n      Math.pow(point0[2] - point1[2], 2)\n  );\n}\n\nexport {\n  getMeanPoints,\n  getMeanTouchPoints,\n  copyPoints,\n  copyPointsList,\n  getDeltaDistanceBetweenIPoints,\n  getDeltaPoints,\n  getDeltaDistance,\n  getDeltaRotation,\n};\n","import { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { Swipe } from '../../enums/Touch';\n\nimport { EventTypes, ITouchPoints, IPoints, IDistance } from '../../types';\n\nimport getTouchEventPoints from './getTouchEventPoints';\nimport {\n  copyPoints,\n  copyPointsList,\n  getDeltaDistanceBetweenIPoints,\n  getDeltaDistance,\n  getDeltaPoints,\n  getMeanTouchPoints,\n  // getRotation\n} from '../../utilities/touch';\nimport { Settings } from '@cornerstonejs/core';\n\nconst runtimeSettings = Settings.getRuntimeSettings();\n\nconst {\n  TOUCH_START,\n  TOUCH_START_ACTIVATE,\n  TOUCH_PRESS,\n  TOUCH_DRAG,\n  TOUCH_END,\n  TOUCH_TAP,\n  TOUCH_SWIPE,\n} = Events;\n\ninterface ITouchTapListenerState {\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  startPointsList: ITouchPoints[];\n  tapMaxDistance: number;\n  tapTimeout: ReturnType<typeof setTimeout>;\n  taps: number;\n  tapToleranceMs: number;\n}\n\ninterface ITouchStartListenerState {\n  element: HTMLDivElement;\n  renderingEngineId: string;\n  viewportId: string;\n  startPointsList: ITouchPoints[];\n  lastPointsList: ITouchPoints[];\n\n  // only trigger one touch event in the case the user puts down multiple fingers\n  isTouchStart: boolean;\n  startTime: Date;\n\n  // handle long press\n  pressTimeout: ReturnType<typeof setTimeout>;\n  pressDelay: number;\n  pressMaxDistance: number;\n  accumulatedDistance: IDistance;\n\n  // handle swipes\n  swipeDistanceThreshold: number;\n  swiped: boolean;\n  swipeToleranceMs: number;\n}\n\nconst zeroIPoint: IPoints = {\n  page: [0, 0],\n  client: [0, 0],\n  canvas: [0, 0],\n  world: [0, 0, 0],\n};\n\nconst zeroIDistance: IDistance = {\n  page: 0,\n  client: 0,\n  canvas: 0,\n  world: 0,\n};\n\n// STATE\nconst defaultState: ITouchStartListenerState = {\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  element: null,\n  startPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  lastPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  isTouchStart: false,\n  startTime: null,\n\n  pressTimeout: null,\n  pressDelay: 700,\n  pressMaxDistance: 5,\n  accumulatedDistance: zeroIDistance,\n\n  swipeDistanceThreshold: 48,\n  swiped: false,\n  swipeToleranceMs: 300, // user has 300ms to swipe after touch start or no swipe will trigger\n};\n\n// TODO: these values should be configurable to handle different use cases such\n// as pen, left/right handed, index finger vs thumb, etc. These current values\n// assume thumb usage for single finger and index/middle finger for two finger\n// gestures in an attempt to cover the 90% use case.\nconst defaultTapState: ITouchTapListenerState = {\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  element: null,\n  startPointsList: [\n    {\n      ...zeroIPoint,\n      touch: null,\n    },\n  ],\n  taps: 0,\n  tapTimeout: null,\n  tapMaxDistance: 24,\n  tapToleranceMs: 300,\n};\n\nlet state: ITouchStartListenerState = JSON.parse(JSON.stringify(defaultState));\nlet tapState: ITouchTapListenerState = JSON.parse(\n  JSON.stringify(defaultTapState)\n);\n\nfunction triggerEventCallback(ele, name, eventDetail) {\n  return triggerEvent(ele, name, eventDetail);\n}\n\n/**\n * Listens to touch events from the DOM (touchstart, touchmove, touchend)\n * and depending on interaction and further interaction can emit the\n * following touch events:\n *\n * - TOUCH_START\n * - TOUCH_START_ACTIVATE\n * - TOUCH_PRESS\n * - TOUCH_DRAG (move while down)\n * - TOUCH_SWIPE\n * - TOUCH_END (also an end for multi touch)\n *\n * - TOUCH_TAP\n *\n * @param evt - The Touch event (touchstart).\n * @private\n */\nfunction touchStartListener(evt: TouchEvent) {\n  // if a user adds an extra finger when a touch/multi touch has already started\n  // don't trigger another touch.\n  state.element = <HTMLDivElement>evt.currentTarget;\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n  // this prevents multiple start firing\n  if (state.isTouchStart) {\n    return;\n  }\n  // this will clear on touchstart and touchend\n  clearTimeout(state.pressTimeout);\n  state.pressTimeout = setTimeout(() => _onTouchPress(evt), state.pressDelay);\n\n  _onTouchStart(evt);\n  document.addEventListener('touchmove', _onTouchDrag); // also checks for swipe\n  document.addEventListener('touchend', _onTouchEnd); // also checks for tap\n}\n\n/**\n * _onTouchPress - Handle emission of touchstart events which are held down for a longer\n * period of time\n *\n * @private\n * @param evt - The touch event (touchstart)\n */\nfunction _onTouchPress(evt: TouchEvent) {\n  const totalDistance = state.accumulatedDistance.canvas;\n  if (totalDistance > state.pressMaxDistance) {\n    return;\n  }\n  const eventDetail: EventTypes.TouchPressEventDetail = {\n    event: evt, // touchstart native event\n    eventName: TOUCH_PRESS,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(state.lastPointsList),\n    startPoints: copyPoints(getMeanTouchPoints(state.startPointsList)),\n    lastPoints: copyPoints(getMeanTouchPoints(state.lastPointsList)),\n  };\n  triggerEventCallback(eventDetail.element, TOUCH_PRESS, eventDetail);\n}\n\n/**\n * _onTouchStart - Handle emission of touchstart events.\n *\n * @private\n * @param evt - The touch event (touchstart)\n */\nfunction _onTouchStart(evt: TouchEvent) {\n  state.isTouchStart = true;\n  state.startTime = new Date();\n  const startPointsList = getTouchEventPoints(evt, state.element);\n  const startPoints = getMeanTouchPoints(startPointsList);\n  const deltaPoints = zeroIPoint;\n  const deltaDistance = zeroIDistance;\n  // deltaRotation same as deltaDistance but values are theta\n  const eventDetail: EventTypes.TouchStartEventDetail = {\n    event: evt,\n    eventName: TOUCH_START,\n    element: state.element,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPointsList: startPointsList,\n    lastPointsList: startPointsList,\n    currentPointsList: startPointsList,\n    startPoints: startPoints,\n    lastPoints: startPoints,\n    currentPoints: startPoints,\n    deltaPoints,\n    deltaDistance,\n    // deltaRotation\n  };\n\n  state.startPointsList = copyPointsList(eventDetail.startPointsList);\n  state.lastPointsList = copyPointsList(eventDetail.lastPointsList);\n  // by triggering TOUCH_START it checks if this is toolSelection, handle modification etc.\n  // of already existing tools\n  const eventDidPropagate = triggerEventCallback(\n    eventDetail.element,\n    TOUCH_START,\n    eventDetail\n  );\n\n  // if no tools responded to this event and prevented its default propagation behavior,\n  // create a new tool\n  if (eventDidPropagate) {\n    triggerEventCallback(\n      eventDetail.element,\n      TOUCH_START_ACTIVATE,\n      eventDetail\n    );\n  }\n}\n\n/**\n * _onTouchDrag - Handle emission of drag events whilst the touch is depressed.\n *\n * @private\n * @param evt - The touch event (touchmove)\n */\nfunction _onTouchDrag(evt: TouchEvent) {\n  const currentPointsList = getTouchEventPoints(evt, state.element);\n  const lastPointsList = _updateTouchEventsLastPoints(\n    state.element,\n    state.lastPointsList\n  );\n\n  const deltaPoints =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaPoints(currentPointsList, lastPointsList)\n      : zeroIPoint;\n\n  const deltaDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList)\n      : zeroIDistance;\n\n  const totalDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistance(currentPointsList, state.lastPointsList)\n      : zeroIDistance;\n\n  state.accumulatedDistance = {\n    page: state.accumulatedDistance.page + totalDistance.page,\n    client: state.accumulatedDistance.client + totalDistance.client,\n    canvas: state.accumulatedDistance.canvas + totalDistance.canvas,\n    world: state.accumulatedDistance.world + totalDistance.world,\n  };\n\n  /**\n   * this is can be uncommented to make dragging smoother. In the future, these values\n   * should be in a configuration file. There may also need to be different\n   * profiles for left handed and right handed thumb use. These values\n   * are currently optimized for left handed use.\n   *\n   * const clamp = (num) => Math.min(Math.max(num, -15), 10);\n   * const deltaDistanceClamped = \\{\n   *     page: clamp(deltaDistance.page),\n   *     client: clamp(deltaDistance.client),\n   *     canvas: clamp(deltaDistance.canvas),\n   *     world: clamp(deltaDistance.world),\n   * \\};\n   */\n\n  const eventDetail: EventTypes.TouchDragEventDetail = {\n    event: evt,\n    eventName: TOUCH_DRAG,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    startPoints: getMeanTouchPoints(state.startPointsList),\n    lastPoints: getMeanTouchPoints(lastPointsList),\n    currentPoints: getMeanTouchPoints(currentPointsList),\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(lastPointsList),\n    currentPointsList,\n    deltaPoints: deltaPoints,\n    deltaDistance: deltaDistance,\n  };\n\n  triggerEventCallback(state.element, TOUCH_DRAG, eventDetail);\n\n  // check for swipe events\n  _checkTouchSwipe(evt, deltaPoints);\n\n  // Update the last points\n  state.lastPointsList = copyPointsList(currentPointsList);\n}\n\n/**\n * _onTouchEnd - Handle emission of touch end events\n *\n * @private\n * @param evt - The touch event.\n */\nfunction _onTouchEnd(evt: TouchEvent): void {\n  // in case it was a tap event we don't want to fire the cornerstone normalized\n  // touch end event if the touch start never happend\n  clearTimeout(state.pressTimeout);\n  const currentPointsList = getTouchEventPoints(evt, state.element);\n  const lastPointsList = _updateTouchEventsLastPoints(\n    state.element,\n    state.lastPointsList\n  );\n  const deltaPoints =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaPoints(currentPointsList, lastPointsList)\n      : getDeltaPoints(currentPointsList, currentPointsList);\n  const deltaDistance =\n    currentPointsList.length === lastPointsList.length\n      ? getDeltaDistanceBetweenIPoints(currentPointsList, lastPointsList)\n      : getDeltaDistanceBetweenIPoints(currentPointsList, currentPointsList);\n  const eventDetail: EventTypes.TouchEndEventDetail = {\n    event: evt,\n    eventName: TOUCH_END,\n    element: state.element,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    startPointsList: copyPointsList(state.startPointsList),\n    lastPointsList: copyPointsList(lastPointsList),\n    currentPointsList,\n    startPoints: getMeanTouchPoints(state.startPointsList),\n    lastPoints: getMeanTouchPoints(lastPointsList),\n    currentPoints: getMeanTouchPoints(currentPointsList),\n    deltaPoints,\n    deltaDistance,\n  };\n\n  triggerEventCallback(eventDetail.element, TOUCH_END, eventDetail);\n  _checkTouchTap(evt);\n\n  // reset to default state\n  state = JSON.parse(JSON.stringify(defaultState));\n  document.removeEventListener('touchmove', _onTouchDrag);\n  document.removeEventListener('touchend', _onTouchEnd);\n}\n\nfunction _checkTouchTap(evt: TouchEvent): void {\n  const currentTime = new Date().getTime();\n  const startTime = state.startTime.getTime();\n  if (currentTime - startTime > tapState.tapToleranceMs) {\n    return;\n  }\n\n  // first tap, initialize the state\n  if (tapState.taps === 0) {\n    tapState.element = state.element;\n    tapState.renderingEngineId = state.renderingEngineId;\n    tapState.viewportId = state.viewportId;\n    tapState.startPointsList = state.startPointsList;\n  }\n\n  // subsequent tap is on a different element\n  if (\n    tapState.taps > 0 &&\n    !(\n      tapState.element == state.element &&\n      tapState.renderingEngineId == state.renderingEngineId &&\n      tapState.viewportId == state.viewportId\n    )\n  ) {\n    return;\n  }\n\n  const currentPointsList = getTouchEventPoints(evt, tapState.element);\n  const distanceFromStart = getDeltaDistance(\n    currentPointsList,\n    tapState.startPointsList\n  ).canvas;\n\n  // if the tap is too far from starting tap, we can ignore it.\n  // TODO: in the case the user means to tap in two separate areas within the\n  // tapTolerance (300ms), the second tap will not trigger. This is because it\n  // is ignored below for simplicity to track multiple taps (double, triple etc)\n  // in order to support two separate single taps that occur < 300ms on the\n  // screen. One can create the concept of \"TapChains\". Our current implementation\n  // only supports a single tap chain on the screen. You can think of it as a\n  // region where the user has the option to perform unlimited multitaps as long\n  // as they are < the tapToleranceMs value. So a tap somewhere else on the screen\n  // that is > the tapMaxDistance will start a separate and new \"TapChain\".\n  if (distanceFromStart > tapState.tapMaxDistance) {\n    return;\n  }\n\n  clearTimeout(tapState.tapTimeout);\n  tapState.taps += 1;\n\n  tapState.tapTimeout = setTimeout(() => {\n    const eventDetail: EventTypes.TouchTapEventDetail = {\n      event: evt,\n      eventName: TOUCH_TAP,\n      element: tapState.element,\n      renderingEngineId: tapState.renderingEngineId,\n      viewportId: tapState.viewportId,\n      camera: {},\n      currentPointsList,\n      currentPoints: getMeanTouchPoints(currentPointsList),\n      taps: tapState.taps,\n    };\n    triggerEventCallback(eventDetail.element, TOUCH_TAP, eventDetail);\n    tapState = JSON.parse(JSON.stringify(defaultTapState));\n  }, tapState.tapToleranceMs);\n}\n\nfunction _checkTouchSwipe(evt: TouchEvent, deltaPoints: IPoints) {\n  const currentTime = new Date().getTime();\n  const startTime = state.startTime.getTime();\n  if (state.swiped || currentTime - startTime > state.swipeToleranceMs) {\n    return;\n  }\n  const [x, y] = deltaPoints.canvas;\n  const eventDetail: EventTypes.TouchSwipeEventDetail = {\n    event: evt,\n    eventName: TOUCH_SWIPE,\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    camera: {},\n    element: state.element,\n    swipe: null,\n  };\n  if (Math.abs(x) > state.swipeDistanceThreshold) {\n    eventDetail.swipe = x > 0 ? Swipe.RIGHT : Swipe.LEFT;\n    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);\n    state.swiped = true;\n  }\n\n  if (Math.abs(y) > state.swipeDistanceThreshold) {\n    eventDetail.swipe = y > 0 ? Swipe.DOWN : Swipe.UP;\n    triggerEventCallback(eventDetail.element, TOUCH_SWIPE, eventDetail);\n    state.swiped = true;\n  }\n}\n\n/**\n * Recalculates the last world coordinate, as the linear transform from client\n * to world could be different if the camera was updated.\n * @param element - The HTML element\n * @param lastPoints - The last points\n */\nfunction _updateTouchEventsLastPoints(\n  element: HTMLDivElement,\n  lastPoints: ITouchPoints[]\n): ITouchPoints[] {\n  const { viewport } = getEnabledElement(element);\n  // Need to update the world point to be calculated from the current reference frame,\n  // Which might have changed since the last interaction.\n  return lastPoints.map((lp) => {\n    const world = viewport.canvasToWorld(lp.canvas);\n    return {\n      page: lp.page,\n      client: lp.client,\n      canvas: lp.canvas,\n      world,\n      touch: lp.touch,\n    };\n  });\n}\n\nexport default touchStartListener;\n","import preventGhostClick from './preventGhostClick';\nimport touchStartListener from './touchStartListener';\n\n/**\n * Removes touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to remove event listeners from.\n */\nfunction disable(element: HTMLDivElement): void {\n  preventGhostClick.disable(element);\n  element.removeEventListener('touchstart', touchStartListener);\n}\n\n/**\n * Registers touch event listeners for native touch event. Enables\n * vtk.js tools flavored events that build on top of existing events to\n * provide more helpful information.\n *\n * @private\n * @param element - The DOM element to register event listeners on.\n */\nfunction enable(element: HTMLDivElement): void {\n  // Prevent handlers from being attached multiple times\n  disable(element);\n  preventGhostClick.enable(element);\n  element.addEventListener('touchstart', touchStartListener, {\n    passive: false,\n  });\n}\n\nexport default {\n  enable,\n  disable,\n};\n","import _cloneDeep from 'lodash.clonedeep';\nimport { getEnabledElement, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { KeyDownEventDetail, KeyUpEventDetail } from '../../types/EventTypes';\n\ninterface IKeyDownListenerState {\n  renderingEngineId: string;\n  viewportId: string;\n  key: string | null;\n  keyCode: number | null;\n  element: HTMLDivElement;\n}\n\nconst defaultState: IKeyDownListenerState = {\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  key: undefined,\n  keyCode: undefined,\n  element: null,\n};\n\nlet state: IKeyDownListenerState = {\n  //\n  renderingEngineId: undefined,\n  viewportId: undefined,\n  //\n  key: undefined,\n  keyCode: undefined,\n  element: null,\n};\n\n/**\n * Normalizes the keyboard event and triggers KEY_DOWN event from CornerstoneTools3D events\n * @param evt - DOM Keyboard event\n */\nfunction keyListener(evt: KeyboardEvent): void {\n  state.element = <HTMLDivElement>evt.currentTarget;\n\n  const enabledElement = getEnabledElement(state.element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  state.renderingEngineId = renderingEngineId;\n  state.viewportId = viewportId;\n  state.key = evt.key;\n  state.keyCode = evt.keyCode;\n\n  evt.preventDefault();\n  const eventDetail: KeyDownEventDetail = {\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    element: state.element,\n    key: state.key,\n    keyCode: state.keyCode,\n\n    // detail: evt,\n    // Todo: mouse event points can be used later for placing tools with a key\n    // e.g., putting an arrow/probe/etc. on the mouse position. Another use case\n    // hovering and deleting the tool\n    // points: getMouseEventPoints(evt),\n  };\n\n  triggerEvent(eventDetail.element, Events.KEY_DOWN, eventDetail);\n\n  document.addEventListener('keyup', _onKeyUp);\n  document.addEventListener('visibilitychange', _onVisibilityChange);\n\n  // Todo: handle combination of keys\n  state.element.removeEventListener('keydown', keyListener);\n}\n\n/**\n * Whenever the visibility (i.e. tab focus) changes such that the tab is NOT the\n * active tab, reset the modifier key.\n */\nfunction _onVisibilityChange(): void {\n  document.removeEventListener('visibilitychange', _onVisibilityChange);\n  if (document.visibilityState === 'hidden') {\n    resetModifierKey();\n  }\n}\n\nfunction _onKeyUp(evt: KeyboardEvent): void {\n  const eventDetail: KeyUpEventDetail = {\n    renderingEngineId: state.renderingEngineId,\n    viewportId: state.viewportId,\n    element: state.element,\n    key: state.key,\n    keyCode: state.keyCode,\n    // detail: evt,\n  };\n\n  // Remove our temporary handlers\n  document.removeEventListener('keyup', _onKeyUp);\n  document.removeEventListener('visibilitychange', _onVisibilityChange);\n  state.element.addEventListener('keydown', keyListener);\n\n  // Restore `state` to `defaultState`\n  state = _cloneDeep(defaultState);\n  triggerEvent(eventDetail.element, Events.KEY_UP, eventDetail);\n}\n\nexport function getModifierKey(): number | undefined {\n  return state.keyCode;\n}\n\nexport function resetModifierKey(): void {\n  state.keyCode = undefined;\n}\n\nexport default keyListener;\n","import keyDownListener, { getModifierKey } from './keyDownListener';\n\nfunction enable(element: HTMLDivElement): void {\n  disable(element);\n  element.addEventListener('keydown', keyDownListener);\n}\n\nfunction disable(element: HTMLDivElement): void {\n  element.removeEventListener('keydown', keyDownListener);\n}\n\nexport default {\n  enable,\n  disable,\n  getModifierKey,\n};\n","import { state } from '../store';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\n/**\n * Returns the SVG drawing helper for the given HTML element.\n * @param element - The HTML element to get the SVG drawing helper for.\n * @private\n */\nfunction getSvgDrawingHelper(element: HTMLDivElement): SVGDrawingHelper {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId, renderingEngineId } = enabledElement;\n  const canvasHash = `${viewportId}:${renderingEngineId}`;\n  const svgLayerElement = _getSvgLayer(element);\n\n  // Reset touched\n  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n    state.svgNodeCache[canvasHash][cacheKey].touched = false;\n  });\n\n  return {\n    svgLayerElement: svgLayerElement,\n    svgNodeCacheForCanvas: state.svgNodeCache,\n    getSvgNode: getSvgNode.bind(this, canvasHash),\n    appendNode: appendNode.bind(this, svgLayerElement, canvasHash),\n    setNodeTouched: setNodeTouched.bind(this, canvasHash),\n    clearUntouched: clearUntouched.bind(this, svgLayerElement, canvasHash),\n  };\n}\n\n/**\n *\n * @param element\n * @private\n */\nfunction _getSvgLayer(element) {\n  const viewportElement = `.${VIEWPORT_ELEMENT}`;\n  const internalDivElement = element.querySelector(viewportElement);\n\n  // Using :scope to make sure the right svg layer is selected otherwise it\n  // may select one from a nested viewport (eg: AdvancedMagnifyTool).\n  const svgLayer = internalDivElement.querySelector(':scope > .svg-layer');\n\n  return svgLayer;\n}\n\nfunction getSvgNode(canvasHash, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  if (state.svgNodeCache[canvasHash][cacheKey]) {\n    return state.svgNodeCache[canvasHash][cacheKey].domRef;\n  }\n}\n\nfunction appendNode(svgLayerElement, canvasHash, svgNode, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return null;\n  }\n\n  state.svgNodeCache[canvasHash][cacheKey] = {\n    touched: true,\n    domRef: svgNode,\n  };\n\n  svgLayerElement.appendChild(svgNode);\n}\n\nfunction setNodeTouched(canvasHash, cacheKey) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  if (state.svgNodeCache[canvasHash][cacheKey]) {\n    state.svgNodeCache[canvasHash][cacheKey].touched = true;\n  }\n}\n\nfunction clearUntouched(svgLayerElement, canvasHash) {\n  // If state has been reset\n  if (!state.svgNodeCache[canvasHash]) {\n    return;\n  }\n\n  Object.keys(state.svgNodeCache[canvasHash]).forEach((cacheKey) => {\n    const cacheEntry = state.svgNodeCache[canvasHash][cacheKey];\n\n    if (!cacheEntry.touched && cacheEntry.domRef) {\n      svgLayerElement.removeChild(cacheEntry.domRef);\n      delete state.svgNodeCache[canvasHash][cacheKey];\n    }\n  });\n}\n\nexport default getSvgDrawingHelper;\n","import getSvgDrawingHelper from './getSvgDrawingHelper';\n\nfunction draw(\n  element: HTMLDivElement,\n  fn: (svgDrawingElement: any) => any\n): void {\n  const svgDrawingHelper = getSvgDrawingHelper(element);\n\n  // Save...\n  fn(svgDrawingHelper);\n  // Restore...\n\n  svgDrawingHelper.clearUntouched();\n}\n\nexport default draw;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a rendering engine Id and a viewport Id, return the tool group that\n * contains that rendering engine and viewport. Note: A viewport can only be\n * associated with a single tool group. You cannot have a viewport that belongs\n * to multiple tool groups. To achieve so, create a new viewport and a new toolGroup\n * for it. This will not impact memory usage much as the volume textures are\n * shared across all viewports rendering the same image.\n *\n * @param viewportId - The Id of the viewport that the tool is being\n * added to.\n * @param renderingEngineId - The Id of the rendering engine that the\n * tool group is associated with.\n * @returns A tool group.\n */\nfunction getToolGroupForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): IToolGroup | undefined {\n  const toolGroupFilteredByIds = state.toolGroups.filter((tg) =>\n    tg.viewportsInfo.some(\n      (vp) =>\n        vp.renderingEngineId === renderingEngineId &&\n        (!vp.viewportId || vp.viewportId === viewportId)\n    )\n  );\n\n  if (!toolGroupFilteredByIds.length) {\n    return;\n  }\n\n  if (toolGroupFilteredByIds.length > 1) {\n    throw new Error(\n      `Multiple tool groups found for renderingEngineId: ${renderingEngineId} and viewportId: ${viewportId}. You should only\n      have one tool group per viewport in a renderingEngine.`\n    );\n  }\n\n  return toolGroupFilteredByIds[0];\n}\n\nexport default getToolGroupForViewport;\n","import { ToolGroupManager } from '../store';\nimport { ToolModes } from '../enums';\nimport { getEnabledElement } from '@cornerstonejs/core';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Finds the enabled element, and iterates over the tools inside its\n * toolGroup. Returns the list of tool instances that are valid based\n * on the provided tool mode.\n *\n * @param element Canvas element\n * @param modesFilter tool modes: active, passive, enabled, disabled\n * @returns enabled tool instances\n */\nexport default function getToolsWithModesForElement(\n  element: HTMLDivElement,\n  modesFilter: ModesFilter\n) {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngineId, viewportId } = enabledElement;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    /* filter out tools that don't have options */\n    if (!toolOptions) {\n      continue;\n    }\n\n    if (modesFilter.includes(toolOptions.mode)) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import {\n  getEnabledElement,\n  triggerEvent,\n  getRenderingEngine,\n} from '@cornerstonejs/core';\nimport { Events, ToolModes } from '../enums';\nimport { draw as drawSvg } from '../drawingSvg';\nimport getToolsWithModesForElement from './getToolsWithModesForElement';\nimport { AnnotationRenderedEventDetail } from '../types/EventTypes';\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * AnnotationRenderingEngine is a class that is responsible for rendering\n * annotations defined in the renderAnnotation method of annotation tools on the page.\n * It mimics the RenderingEngine in the Cornerstone Core. Here it uses requestAnimationFrame\n * is used to render annotations by calling renderAnnotations() on each enabled tool. Note: This\n * is a Singleton class and should not be instantiated directly. To trigger\n * an annotation render for an HTML element containing a viewport you can use\n *\n * ```\n * triggerAnnotationRender(element)\n * ```\n */\nclass AnnotationRenderingEngine {\n  public hasBeenDestroyed: boolean;\n  private _needsRender: Set<HTMLDivElement> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  private _viewportElements: Map<string, HTMLDivElement>;\n\n  constructor() {\n    this._viewportElements = new Map();\n  }\n\n  /**\n   * Add the viewport's HTMLDivElement to the viewports for rendering. This method\n   * just informs the annotationRenderingEngine about the viewport and\n   * does not initiate a render.\n   * @param viewportId - Viewport Unique identifier\n   * @param element - HTMLDivElement\n   */\n  public addViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.set(viewportId, element);\n  }\n\n  /**\n   * Remove the viewport's HTMLDivElement from subsequent annotation renders\n   * @param viewportId - Viewport Unique identifier\n   */\n  public removeViewportElement(viewportId: string, element: HTMLDivElement) {\n    this._viewportElements.delete(viewportId);\n\n    // delete element from needsRender if element exist\n    this._needsRender.delete(element);\n\n    // I don' think there is any disadvantage to canceling the animation frame\n    // and resetting the flags on viewport's element removal, since the removeVIewportElement\n    // might be as a result of reEnabling the element (in re-enable we disable first), hence the need to render the\n    // new one while removing the old one\n    this._reset();\n  }\n\n  /**\n   * It tells the AnnotationRenderingEngine to render the viewport element the next\n   * time it renders.\n   *\n   * @param element - The element to render.\n   */\n  public renderViewport(element: HTMLDivElement): void {\n    this._setViewportsToBeRenderedNextFrame([element]);\n  }\n\n  /**\n   * _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _renderFlaggedViewports = () => {\n    this._throwIfDestroyed();\n\n    const elements = Array.from(this._viewportElements.values());\n\n    for (let i = 0; i < elements.length; i++) {\n      const element = elements[i];\n      if (this._needsRender.has(element)) {\n        this._triggerRender(element);\n\n        // This viewport has been rendered, we can remove it from the set\n        this._needsRender.delete(element);\n\n        // If there is nothing left that is flagged for rendering, stop here\n        // and allow RAF to be called again\n        if (this._needsRender.size === 0) {\n          this._animationFrameSet = false;\n          this._animationFrameHandle = null;\n          return;\n        }\n      }\n    }\n  };\n\n  private _setAllViewportsToBeRenderedNextFrame() {\n    const elements = [...this._viewportElements.values()];\n\n    elements.forEach((element) => {\n      this._needsRender.add(element);\n    });\n\n    this._renderFlaggedViewports();\n  }\n\n  private _setViewportsToBeRenderedNextFrame(elements: HTMLDivElement[]) {\n    const elementsEnabled = [...this._viewportElements.values()];\n\n    // Add the viewports to the set of flagged viewports\n    elements.forEach((element) => {\n      // only enabledElement need to render\n      if (elementsEnabled.indexOf(element) !== -1) {\n        this._needsRender.add(element);\n      }\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   * _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedViewports\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  _triggerRender(element) {\n    const enabledElement = getEnabledElement(element);\n\n    if (!enabledElement) {\n      console.warn('Element has been disabled');\n      return;\n    }\n\n    const renderingEngine = getRenderingEngine(\n      enabledElement.renderingEngineId\n    );\n    if (!renderingEngine) {\n      console.warn('rendering Engine has been destroyed');\n      return;\n    }\n\n    const enabledTools = getToolsWithModesForElement(element, [\n      Active,\n      Passive,\n      Enabled,\n    ]);\n\n    const { renderingEngineId, viewportId } = enabledElement;\n    const eventDetail: AnnotationRenderedEventDetail = {\n      element,\n      renderingEngineId,\n      viewportId,\n    };\n\n    // const enabledToolsWithAnnotations = enabledTools.filter((tool) => {\n    //   const annotations = getAnnotations(tool.getToolName(), {FrameOfReferenceUID});\n    //   return annotations && annotations.length;\n    // });\n\n    drawSvg(element, (svgDrawingHelper) => {\n      let anyRendered = false;\n      const handleDrawSvg = (tool) => {\n        if (tool.renderAnnotation) {\n          const rendered = tool.renderAnnotation(\n            enabledElement,\n            svgDrawingHelper\n          );\n          anyRendered = anyRendered || rendered;\n        }\n      };\n\n      /**\n       * We should be able to filter tools that don't have annotations, but\n       * currently some of tools have renderAnnotation method BUT\n       * don't keep annotation in the state, so if we do so, the tool will not be\n       * rendered.\n       */\n      enabledTools.forEach(handleDrawSvg);\n\n      if (anyRendered) {\n        triggerEvent(element, Events.ANNOTATION_RENDERED, { ...eventDetail });\n      }\n    });\n  }\n\n  /**\n   * _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n\n    this._setAllViewportsToBeRenderedNextFrame();\n  }\n}\n\nconst annotationRenderingEngine = new AnnotationRenderingEngine();\n\n/**\n * It triggers the rendering of the annotations for the given HTML element using\n * the `AnnotationRenderingEngine`\n * @param element - The element to render the annotation on.\n */\nfunction triggerAnnotationRender(element: HTMLDivElement): void {\n  annotationRenderingEngine.renderViewport(element);\n}\n\nexport { annotationRenderingEngine, triggerAnnotationRender };\n\nexport default triggerAnnotationRender;\n","import { Enums, Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from '../utilities/triggerAnnotationRender';\n\n/**\n *  When the image is rendered, check what tools can be rendered for this element.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `renderAnnotation` method, then we render them.\n * - Note that these tools don't necessarily have to be instances of  `AnnotationTool`,\n *   Any tool may register a `renderAnnotation` method (e.g. a tool that displays an overlay).\n *\n * @param evt - The normalized IMAGE_RENDERED event.\n */\nconst onImageRendered = function (evt: Types.EventTypes.ImageRenderedEvent) {\n  // TODO: should we do this on camera modified instead of image rendered?\n  // e.g. no need to re-render annotations if only the VOI has changed\n  triggerAnnotationRender(evt.detail.element);\n};\n\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement): void {\n  element.removeEventListener(\n    Enums.Events.IMAGE_RENDERED,\n    onImageRendered as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the normalized mouse event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized mouseDown event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForMouseEvent(\n  evt: EventTypes.MouseMoveEventType,\n  modesFilter: ModesFilter,\n  evtButton?: any\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button - we match those with\n    // any modifier keys too since they can be passively interacted with\n    const correctBinding =\n      evtButton != null && // not null or undefined\n      tool.bindings.length &&\n      tool.bindings.some((binding) => binding.mouseButton === evtButton);\n\n    if (\n      modesFilter.includes(tool.mode) &&\n      // Should not filter by event's button\n      // or should, and the tool binding includes the event's button\n      (!evtButton || correctBinding)\n    ) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When the camera is modified, check what tools need to react to this.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onCameraModified` method, we call it.\n *\n * @param evt - The normalized camera modified event.\n */\nconst onCameraModified = function (evt: Types.EventTypes.CameraModifiedEvent) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onCameraModified) {\n      tool.onCameraModified(evt);\n    }\n  });\n};\n\nconst enable = function (element) {\n  element.addEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nconst disable = function (element) {\n  element.removeEventListener(Enums.Events.CAMERA_MODIFIED, onCameraModified);\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { Enums, Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../enums';\nimport getToolsWithModesForMouseEvent from './shared/getToolsWithModesForMouseEvent';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * When image spacing is calibrated modify the annotations for all of its tools\n * to consider the new calibration info.\n *\n * - First we get all tools which are active, passive or enabled on the element.\n * - If any of these tools have a `onImageSpacingCalibrated` method, we call it.\n *\n * @param evt - The normalized image calibration event.\n */\nconst onImageSpacingCalibrated = function (\n  evt: Types.EventTypes.ImageSpacingCalibratedEvent\n) {\n  // @ts-ignore\n  const enabledTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n    Enabled,\n  ]);\n\n  enabledTools.forEach((tool) => {\n    if (tool.onImageSpacingCalibrated) {\n      tool.onImageSpacingCalibrated(evt);\n    }\n  });\n};\n\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(\n    Enums.Events.IMAGE_SPACING_CALIBRATED,\n    onImageSpacingCalibrated as EventListener\n  );\n};\n\nexport default {\n  enable,\n  disable,\n};\n","import { state, ToolGroupManager } from '../../store';\nimport ToolModes from '../../enums/ToolModes';\n\nconst { Active } = ToolModes;\n\n/**\n * @function customCallbackHandler This is used as a generic event handler for tool events\n * on viewports. It:\n *\n * - Finds an \"active\" tool with:\n *    - A matching `handlerType`\n *    - A matching `customFunction` on its tool instance\n *\n * Then calls that custom function with raised event.\n *\n * @param handlerType - 'Mouse' | 'Touch' | 'MouseWheel'\n * @param customFunction - Function name that's expected to live on implementing\n *   (and event handling) active tool ex. 'doubleClickCallback'\n * @param evt\n */\nexport default function customCallbackHandler(\n  handlerType: string,\n  customFunction: string,\n  evt\n) {\n  if (state.isInteractingWithTool) {\n    return false;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return false;\n  }\n\n  // TODO: Filter tools by interaction type?\n  /**\n   * Iterate tool group tools until we find a tool that is:\n   * - active\n   * - has the custom callback function\n   *\n   */\n  let activeTool;\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n    // TODO: Should be getter\n    const toolInstance = toolGroup.getToolInstance(toolName);\n\n    if (\n      // TODO: Should be enum?\n      tool.mode === Active &&\n      // TODO: Should be implements interface?\n      // Weird that we need concrete instance. Other options to filter / get callback?\n      typeof toolInstance[customFunction] === 'function'\n    ) {\n      activeTool = toolGroup.getToolInstance(toolName);\n      break;\n    }\n  }\n\n  if (!activeTool) {\n    return;\n  }\n\n  activeTool[customFunction](evt);\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * mouseClick - Event handler for mouse click events. Uses `customCallbackHandler` to fire\n * the `mouseClickCallback` function on active tools.\n */\nconst mouseClick = customCallbackHandler.bind(\n  null,\n  'Mouse',\n  'mouseClickCallback'\n);\n\nexport default mouseClick;\n","import type { Types } from '@cornerstonejs/core';\n\nimport {\n  ToolAnnotationsPair,\n  ToolsWithMoveableHandles,\n} from '../types/InternalToolTypes';\n\n/**\n * Filters an array of tools, returning only tools with moveable handles at the mouse location that are not locked\n *\n * @param element - The element\n * @param ToolAndAnnotations - The input tool array.\n * @param canvasCoords - The coordinates of the mouse position.\n * @param interactionType - The type of interaction (e.g. 'mouse' or 'touch')\n * @returns The filtered array.\n */\nexport default function filterToolsWithMoveableHandles(\n  element: HTMLDivElement,\n  ToolAndAnnotations: ToolAnnotationsPair[],\n  canvasCoords: Types.Point2,\n  interactionType = 'mouse'\n): ToolsWithMoveableHandles[] {\n  const proximity = interactionType === 'touch' ? 36 : 6;\n  const toolsWithMoveableHandles = [];\n\n  ToolAndAnnotations.forEach(({ tool, annotations }) => {\n    for (const annotation of annotations) {\n      if (annotation.isLocked || !annotation.isVisible) {\n        continue;\n      }\n\n      const handle = tool.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        proximity\n      );\n\n      if (handle) {\n        toolsWithMoveableHandles.push({\n          tool,\n          annotation,\n          handle,\n        });\n        break;\n      }\n    }\n  });\n\n  return toolsWithMoveableHandles;\n}\n","import { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport { ToolAnnotationsPair } from '../types/InternalToolTypes';\nimport type AnnotationTool from '../tools/base/AnnotationTool';\nimport BaseTool from '../tools/base/BaseTool';\nimport { getEnabledElement } from '@cornerstonejs/core';\n\n/**\n * Filters an array of tools, returning only tools which have annotation.\n *\n * @param element - The cornerstone3D enabled element.\n * @param tools - The array of tools to check.\n *\n * @returns The array of tools with their found annotations.\n */\nexport default function filterToolsWithAnnotationsForElement(\n  element: HTMLDivElement,\n  tools: AnnotationTool[]\n): ToolAnnotationsPair[] {\n  const result = [];\n  for (let i = 0; i < tools.length; i++) {\n    const tool = tools[i];\n\n    if (!tool) {\n      console.warn('undefined tool in filterToolsWithAnnotationsForElement');\n      continue;\n    }\n\n    let annotations = getAnnotations(\n      (tool.constructor as typeof BaseTool).toolName,\n      element\n    );\n\n    if (!annotations?.length) {\n      continue;\n    }\n\n    if (typeof tool.filterInteractableAnnotationsForElement === 'function') {\n      // If the tool has a annotations filter (e.g. with in-plane-annotations-only filtering), use it.\n      annotations = tool.filterInteractableAnnotationsForElement(\n        element,\n        annotations\n      );\n    }\n\n    if (annotations.length > 0) {\n      result.push({ tool, annotations });\n    }\n  }\n\n  return result;\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport {\n  ToolAnnotationPair,\n  ToolAnnotationsPair,\n} from '../types/InternalToolTypes';\n\n/**\n * Filters an array of tools with annotations, returning the first annotation\n * for each tool that is moveable and at the mouse location. It results in\n * one annotation per tool.\n *\n *\n * @param element - The HTML element\n * @param ToolAndAnnotations - The input tool array.\n * @param canvasCoords - The coordinates of the mouse position.\n * @param interactionType - The type of interaction that is taking place.\n * @returns The filtered array containing ToolAndAnnotation\n */\nexport default function filterMoveableAnnotationTools(\n  element: HTMLDivElement,\n  ToolAndAnnotations: ToolAnnotationsPair[],\n  canvasCoords: Types.Point2,\n  interactionType = 'mouse'\n): ToolAnnotationPair[] {\n  const proximity = interactionType === 'touch' ? 36 : 6;\n\n  // TODO - This could get pretty expensive pretty quickly. We don't want to fetch the camera\n  // And do world to canvas on each coord.\n\n  // We want to produce a matrix from canvas to world for the viewport and just do a matrix operation on each handle.\n  // This could still be expensive for ROIs, but we probably shouldn't have \"handles\" for them anyway.\n\n  const moveableAnnotationTools = [];\n\n  ToolAndAnnotations.forEach(({ tool, annotations }) => {\n    for (const annotation of annotations) {\n      if (annotation.isLocked || !annotation.isVisible) {\n        continue;\n      }\n\n      const near = tool.isPointNearTool(\n        element,\n        annotation,\n        canvasCoords,\n        proximity,\n        interactionType\n      );\n\n      if (near) {\n        moveableAnnotationTools.push({\n          tool,\n          annotation,\n        });\n        break;\n      }\n    }\n  });\n\n  return moveableAnnotationTools;\n}\n","/**\n * Mouse This enum enumerates the different buttons returned by `.buttons` on the mouse event.\n * These values are used when setting a tool active in a tool group.\n *\n * See also: https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n */\nenum MouseBindings {\n  /** usually the left button */\n  Primary = 1,\n  /** usually the right button */\n  Secondary = 2,\n  Primary_And_Secondary = 3,\n  /** usually mouse wheel button */\n  Auxiliary = 4,\n  Primary_And_Auxiliary = 5,\n  Secondary_And_Auxiliary = 6,\n  Primary_And_Secondary_And_Auxiliary = 7,\n  /** usually \"Browser Back\" button */\n  Fourth_Button = 8,\n  /** usually \"Browser Forward\" button */\n  Fifth_Button = 16,\n}\n\nenum KeyboardBindings {\n  Shift = 16,\n  Ctrl = 17,\n  Alt = 18,\n  Meta = 91,\n  ShiftCtrl = 1617,\n  ShiftAlt = 1618,\n  ShiftMeta = 1691,\n  CtrlAlt = 1718,\n  CtrlMeta = 1791,\n  AltMeta = 1891,\n}\n\nexport { MouseBindings, KeyboardBindings };\n","import { KeyboardBindings as kb } from '../../enums';\n\n/**\n * Gets the mouse modifier key from a mouse event.\n * Supports Shift, Ctrl, Alt, in singly and in combinations of 2\n * Supports Meta singly.\n */\nconst getMouseModifierKey = (evt) => {\n  // The logic is a hard coded key mapping\n  if (evt.shiftKey) {\n    if (evt.ctrlKey) {\n      return kb.ShiftCtrl;\n    }\n    if (evt.altKey) {\n      return kb.ShiftAlt;\n    }\n    if (evt.metaKey) {\n      return kb.ShiftMeta;\n    }\n    return kb.Shift;\n  }\n  if (evt.ctrlKey) {\n    if (evt.altKey) {\n      return kb.CtrlAlt;\n    }\n    if (evt.metaKey) {\n      return kb.CtrlMeta;\n    }\n    return kb.Ctrl;\n  }\n  if (evt.altKey) {\n    return (evt.metaKey && kb.AltMeta) || kb.Alt;\n  }\n  if (evt.metaKey) {\n    return kb.Meta;\n  }\n  return undefined;\n};\n\nexport default getMouseModifierKey;\n","import { ToolGroupManager } from '../../store';\nimport { MouseBindings, ToolModes } from '../../enums';\nimport { keyEventListener } from '../../eventListeners';\nimport { EventTypes } from '../../types';\nimport getMouseModifier from './getMouseModifier';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our MouseEvent's `buttons`. It's possible there will be no match\n * (no active tool for that mouse button combination).\n *\n * @param evt - The event dispatcher mouse event.\n *\n * @returns tool\n */\nexport default function getActiveToolForMouseEvent(\n  evt: EventTypes.NormalizedMouseEventType\n) {\n  // Todo: we should refactor this to use getToolsWithModesForMouseEvent instead\n  const { renderingEngineId, viewportId } = evt.detail;\n  const mouseEvent = evt.detail.event;\n\n  // If any keyboard modifier key is also pressed - get the mouse version\n  // first since it handles combinations, while the key event handles non-modifier\n  // keys.\n  const modifierKey =\n    getMouseModifier(mouseEvent) || keyEventListener.getModifierKey();\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button, if mouseEvent is undefined\n    // it uses the primary button\n    const correctBinding =\n      toolOptions.bindings.length &&\n      toolOptions.bindings.some((binding) => {\n        return (\n          binding.mouseButton ===\n            (mouseEvent ? mouseEvent.buttons : defaultMousePrimary) &&\n          binding.modifierKey === modifierKey\n        );\n      });\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\n// Util\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getToolsWithActionsForMouseEvent from '../shared/getToolsWithActionsForMouseEvent';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * Look for active or passive annotations with an action that could handle the\n * event based on the bindings and invoke the first one found.\n *\n * @param evt - The normalized mouseDown event.\n * @returns True if an action has executed or false otherwise\n */\nexport default function mouseDownAnnotationAction(\n  evt: EventTypes.MouseDownEventType\n): boolean {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return false;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { canvas: canvasCoords } = eventDetail.currentPoints;\n\n  if (!enabledElement) {\n    return false;\n  }\n\n  // Find all tools that might respond to this mouse down\n  const toolsWithActions = getToolsWithActionsForMouseEvent(evt, [\n    Active,\n    Passive,\n  ]);\n\n  const tools = Array.from(toolsWithActions.keys());\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    tools\n  );\n\n  // Only moveable annotations (unlocked, visible and close to the canvas coordinates) may trigger actions\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = moveableAnnotationTools[0];\n    const action = toolsWithActions.get(tool);\n    const method =\n      typeof action.method === 'string' ? tool[action.method] : action.method;\n\n    method.call(tool, evt, annotation);\n\n    return true;\n  }\n\n  return false;\n}\n","import { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport {\n  ToolAnnotationPair,\n  ToolsWithMoveableHandles,\n} from '../../types/InternalToolTypes';\n\nimport {\n  setAnnotationSelected,\n  isAnnotationSelected,\n} from '../../stateManagement/annotation/annotationSelection';\n\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\n\n// Util\nimport filterToolsWithMoveableHandles from '../../store/filterToolsWithMoveableHandles';\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport getToolsWithModesForMouseEvent from '../shared/getToolsWithModesForMouseEvent';\nimport mouseDownAnnotationAction from './mouseDownAnnotationAction';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * When the mouse is depressed we check which entities can process these events in the following manner:\n *\n * - First we get the `activeTool` for the mouse button pressed.\n * - If the `activeTool` has a `preMouseDownCallback`, this is called. If the callback returns `true`,\n *   the event does not propagate further.\n * - Next we get all tools which are active or passive (`activeAndPassiveTools`), as annotation. for these tools could\n *   possibly catch and handle these events. We then filter the `activeAndPassiveTools` using `filterToolsWithAnnotationsForElement`, which filters tools with annotations\n *   for this frame of reference. Optionally a tool can employ a further filtering (via a\n *   `filterInteractableAnnotationsForElement` callback) for tools interactable within the current camera view\n *   (e.g. tools that only render when viewed from a certain direction).\n * - Next we check if any handles are interactable for each tool (`filterToolsWithMoveableHandles`). If interactable\n *   handles are found, the first tool/handle found consumes the event and the event does not propagate further.\n * - Next we check any tools are interactable (e.g. moving an entire length annotation rather than one of its handles:\n *   `filterMoveableAnnotationTools`). If interactable tools are found, the first tool found consumes the event and the\n *   event does not propagate further.\n * - If the `activeTool` has `postMouseDownCallback`, this is called.  If the callback returns `true`,\n *   the event does not propagate further.\n * - Finally, look for annotations actions that could handle the event such as showing a dropdown to allow the user\n *   change the magnifying glass zoom factor.\n *\n * If the event is not consumed the event will bubble to the `mouseDownActivate` handler.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDown(evt: EventTypes.MouseDownEventType) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  // Check for preMouseDownCallbacks,\n  // If the tool claims it consumed the event, prevent further checks.\n  if (activeTool && typeof activeTool.preMouseDownCallback === 'function') {\n    const consumedEvent = activeTool.preMouseDownCallback(evt);\n\n    if (consumedEvent) {\n      return;\n    }\n  }\n\n  // Find all tools that might respond to this mouse down\n  const isPrimaryClick = evt.detail.event.buttons === 1;\n  const activeToolsWithEventBinding = getToolsWithModesForMouseEvent(\n    evt,\n    [Active],\n    evt.detail.event.buttons\n  );\n  const passiveToolsIfEventWasPrimaryMouseButton = isPrimaryClick\n    ? getToolsWithModesForMouseEvent(evt, [Passive])\n    : undefined;\n  const applicableTools = [\n    ...(activeToolsWithEventBinding || []),\n    ...(passiveToolsIfEventWasPrimaryMouseButton || []),\n  ];\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    applicableTools\n  );\n\n  const canvasCoords = eventDetail.currentPoints.canvas;\n\n  // For the canvas coordinates, find all tools that might respond to this mouse down\n  // on their handles. This filter will call getHandleNearImagePoint for each tool\n  // instance (each annotation)\n  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'mouse'\n  );\n\n  // Preserve existing selections when shift key is pressed\n  const isMultiSelect = !!evt.detail.event.shiftKey;\n\n  // If there are annotation tools whose handle is near the mouse, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (annotationToolsWithMoveableHandles.length > 0) {\n    const { tool, annotation, handle } = getAnnotationForSelection(\n      annotationToolsWithMoveableHandles\n    ) as ToolsWithMoveableHandles;\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.handleSelectedCallback(evt, annotation, handle, 'Mouse');\n\n    return;\n  }\n\n  // If there were no annotation tools whose handle was near the mouse, try to check\n  // if any of the annotation tools are interactable (e.g. moving an entire length annotation)\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'mouse'\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = getAnnotationForSelection(\n      moveableAnnotationTools\n    );\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.toolSelectedCallback(evt, annotation, 'Mouse', canvasCoords);\n\n    return;\n  }\n\n  // Run the postMouseDownCallback for the active tool if it exists\n  if (activeTool && typeof activeTool.postMouseDownCallback === 'function') {\n    const consumedEvent = activeTool.postMouseDownCallback(evt);\n\n    if (consumedEvent) {\n      // If the tool claims it consumed the event, prevent further checks.\n      return;\n    }\n  }\n\n  const actionExecuted = mouseDownAnnotationAction(evt);\n\n  if (actionExecuted) {\n    return;\n  }\n\n  // Don't stop propagation so that mouseDownActivate can handle the event\n}\n\n/**\n * If there are multiple annotation tools, return the first one that isn't locked neither hidden.\n * If there's only one annotation tool, return it\n * @param annotationTools - An array of tools and annotation.\n * @returns The candidate for selection\n */\nfunction getAnnotationForSelection(\n  toolsWithMovableHandles: ToolAnnotationPair[]\n): ToolAnnotationPair {\n  return (\n    (toolsWithMovableHandles.length > 1 &&\n      toolsWithMovableHandles.find(\n        (item) =>\n          !isAnnotationLocked(item.annotation) &&\n          isAnnotationVisible(item.annotation.annotationUID)\n      )) ||\n    toolsWithMovableHandles[0]\n  );\n}\n\n/**\n * If the annotation is selected, deselect it. If it's not selected, select it\n * @param annotationUID - The AnnotationUID that we\n * want to toggle the selection of.\n * @param isMultiSelect - If true, the annotation. will be deselected if it is\n * already selected, or deselected if it is selected.\n */\nfunction toggleAnnotationSelection(\n  annotationUID: string,\n  isMultiSelect = false\n): void {\n  if (isMultiSelect) {\n    if (isAnnotationSelected(annotationUID)) {\n      setAnnotationSelected(annotationUID, false);\n    } else {\n      const preserveSelected = true;\n      setAnnotationSelected(annotationUID, true, preserveSelected);\n    }\n  } else {\n    const preserveSelected = false;\n    setAnnotationSelected(annotationUID, true, preserveSelected);\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { ToolAction, EventTypes } from '../../types';\n\nimport { keyEventListener } from '../../eventListeners';\nimport getMouseModifier from './getMouseModifier';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the mouse event and a list of tool modes, find all tool instances\n * with actions that were added to the tool group associated with the viewport\n * that triggered the event.\n *\n * @param evt - mouseDown event triggered by a cornerstone viewport\n * @param toolModes - List of tool modes used to filter the tools registered\n *                    in the viewport's tool group\n */\nexport default function getToolsWithActionsForMouseEvent(\n  evt: EventTypes.MouseMoveEventType,\n  toolModes: ToolModes[]\n): Map<any, ToolAction> {\n  const toolsWithActions = new Map();\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return toolsWithActions;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n  const mouseEvent = evt.detail.event;\n  const mouseButton = mouseEvent?.buttons ?? defaultMousePrimary;\n  const modifierKey =\n    getMouseModifier(mouseEvent) || keyEventListener.getModifierKey();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.getToolInstance(toolName);\n    const actions = tool.configuration?.actions;\n\n    if (!actions?.length || !toolModes.includes(tool.mode)) {\n      continue;\n    }\n\n    const action = actions.find(\n      (action) =>\n        action.bindings.length &&\n        action.bindings.some(\n          (binding) =>\n            binding.mouseButton === mouseButton &&\n            binding.modifierKey === modifierKey\n        )\n    );\n\n    if (action) {\n      toolsWithActions.set(tool, action);\n    }\n  }\n\n  return toolsWithActions;\n}\n","import { state } from '../../store';\nimport getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport { setAnnotationSelected } from '../../stateManagement/annotation/annotationSelection';\nimport { EventTypes } from '../../types';\n\n/**\n * If the `mouseDown` handler does not consume an event,\n * activate the creation loop of the active tool, if one is found for the\n * mouse button pressed.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDownActivate(\n  evt: EventTypes.MouseDownActivateEventType\n) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  if (state.isMultiPartToolActive) {\n    return;\n  }\n\n  if (activeTool.addNewAnnotation) {\n    const annotation = activeTool.addNewAnnotation(evt, 'mouse');\n    setAnnotationSelected(annotation.annotationUID);\n  }\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * @function mouseDoubleClick - Event handler for mouse double click events. Uses `customCallbackHandler` to fire\n * the `doubleClickCallback` function on active tools.\n */\nconst mouseDoubleClick = customCallbackHandler.bind(\n  null,\n  'Mouse',\n  'doubleClickCallback'\n);\n\nexport default mouseDoubleClick;\n","import getActiveToolForMouseEvent from '../shared/getActiveToolForMouseEvent';\nimport { state } from '../../store';\nimport { MouseDragEventType } from '../../types/EventTypes';\n\n/**\n * mouseDrag - Event handler for mouse drag events. Fires the `mouseDragCallback`\n * function on active tools.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseDrag(evt: MouseDragEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForMouseEvent(evt);\n\n  const noFoundToolOrDoesNotHaveMouseDragCallback =\n    !activeTool || typeof activeTool.mouseDragCallback !== 'function';\n  if (noFoundToolOrDoesNotHaveMouseDragCallback) {\n    return;\n  }\n\n  activeTool.mouseDragCallback(evt);\n}\n","// // State\nimport { state } from '../../store';\nimport { ToolModes } from '../../enums';\n\n// // Util\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport getToolsWithModesForMouseEvent from '../shared/getToolsWithModesForMouseEvent';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport { MouseMoveEventType } from '../../types/EventTypes';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * mouseMove - On mouse move when not dragging, fire tools `mouseMoveCallback`s.\n * This is mostly used to update the [un]hover state\n * of a tool.\n *\n * @param evt - The normalized mouseDown event.\n */\nexport default function mouseMove(evt: MouseMoveEventType) {\n  // Tool interactions when mouse moved are handled inside each tool.\n  // This function is mostly used to update the [un]hover state\n  if (state.isInteractingWithTool || state.isMultiPartToolActive) {\n    return;\n  }\n\n  const activeAndPassiveTools = getToolsWithModesForMouseEvent(evt, [\n    Active,\n    Passive,\n  ]);\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Annotation tool specific\n  const toolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    activeAndPassiveTools\n  );\n\n  const toolsWithoutAnnotations = activeAndPassiveTools.filter((tool) => {\n    const doesNotHaveAnnotations = !toolsWithAnnotations.some(\n      (toolAndAnnotation) =>\n        toolAndAnnotation.tool.getToolName() === tool.getToolName()\n    );\n\n    return doesNotHaveAnnotations;\n  });\n\n  let annotationsNeedToBeRedrawn = false;\n\n  for (const { tool, annotations } of toolsWithAnnotations) {\n    if (typeof tool.mouseMoveCallback === 'function') {\n      annotationsNeedToBeRedrawn =\n        tool.mouseMoveCallback(evt, annotations) || annotationsNeedToBeRedrawn;\n    }\n  }\n\n  // Run mouse move handlers for non-annotation tools\n  toolsWithoutAnnotations.forEach((tool) => {\n    if (typeof tool.mouseMoveCallback === 'function') {\n      tool.mouseMoveCallback(evt);\n    }\n  });\n\n  // Annotation activation status changed, redraw the annotations\n  if (annotationsNeedToBeRedrawn === true) {\n    triggerAnnotationRender(element);\n  }\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * mouseClick - Event handler for mouse up events. Uses `customCallbackHandler` to fire\n * the `mouseUpCallback` function on active tools.\n */\nconst mouseUp = customCallbackHandler.bind(null, 'Mouse', 'mouseUpCallback');\n\nexport default mouseUp;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * Event handler for mouse wheel events. Uses `customCallbackHandler` to fire\n * the `mouseWheelCallback` function on active tools.\n */\nconst mouseWheel = customCallbackHandler.bind(\n  null,\n  'MouseWheel',\n  'mouseWheelCallback'\n);\n\nexport default mouseWheel;\n","import Events from '../enums/Events';\n\nimport {\n  mouseClick,\n  mouseDown,\n  mouseDownActivate,\n  mouseDoubleClick,\n  mouseDrag,\n  mouseMove,\n  mouseUp,\n  mouseWheel,\n} from './mouseEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.addEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.addEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.addEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.addEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.addEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.addEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.addEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.MOUSE_CLICK, mouseClick as EventListener);\n  element.removeEventListener(Events.MOUSE_DOWN, mouseDown as EventListener);\n  element.removeEventListener(\n    Events.MOUSE_DOWN_ACTIVATE,\n    mouseDownActivate as EventListener\n  );\n  element.removeEventListener(\n    Events.MOUSE_DOUBLE_CLICK,\n    mouseDoubleClick as EventListener\n  );\n  element.removeEventListener(Events.MOUSE_DRAG, mouseDrag as EventListener);\n  element.removeEventListener(Events.MOUSE_MOVE, mouseMove as EventListener);\n  element.removeEventListener(Events.MOUSE_UP, mouseUp as EventListener);\n  element.removeEventListener(Events.MOUSE_WHEEL, mouseWheel as EventListener);\n};\n\nconst mouseToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default mouseToolEventDispatcher;\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes, MouseBindings } from '../../enums';\nimport { keyEventListener } from '../../eventListeners';\nimport { EventTypes } from '../../types';\nimport { getMouseButton } from '../../eventListeners/mouse/mouseDownListener';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our Keyboard pressed keys. It's possible there will be no match\n * (no active tool for that mouse button combination).\n *\n * @param evt - The normalized keyboard event.\n *\n * @returns tool\n */\nexport default function getActiveToolForKeyboardEvent(\n  evt: EventTypes.KeyDownEventType\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  // Get the current mouse button clicked\n  const mouseButton = getMouseButton();\n\n  // If any keyboard modifier key is also pressed\n  const modifierKey = keyEventListener.getModifierKey();\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    // tool has binding that matches the mouse button, if mouseEvent is undefined\n    // it uses the primary button\n    const correctBinding =\n      toolOptions.bindings.length &&\n      toolOptions.bindings.some(\n        (binding) =>\n          binding.mouseButton === (mouseButton ?? defaultMousePrimary) &&\n          binding.modifierKey === modifierKey\n      );\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport getActiveToolForKeyboardEvent from '../shared/getActiveToolForKeyboardEvent';\nimport { KeyDownEventType } from '../../types/EventTypes';\n\n/**\n * KeyDown event listener to handle viewport cursor icon changes\n *\n * @param evt - The KeyboardEvent\n */\nexport default function keyDown(evt: KeyDownEventType): void {\n  // get the active tool given the key and mouse button\n  const activeTool = getActiveToolForKeyboardEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  const toolName = activeTool.getToolName();\n  if (Object.keys(toolGroup.toolOptions).includes(toolName)) {\n    toolGroup.setViewportsCursorByToolName(toolName);\n  }\n}\n","import { resetModifierKey } from '../../eventListeners/keyboard/keyDownListener';\nimport { ToolGroupManager } from '../../store';\nimport getActiveToolForKeyboardEvent from '../shared/getActiveToolForKeyboardEvent';\nimport { KeyDownEventType } from '../../types/EventTypes';\n\n/**\n * KeyDown event listener to handle viewport cursor icon changes\n *\n * @param evt - The KeyboardEvent\n */\nexport default function keyUp(evt: KeyDownEventType): void {\n  // get the active tool for the primary mouse button\n  const activeTool = getActiveToolForKeyboardEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  const { renderingEngineId, viewportId } = evt.detail;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  // Reset the modifier key\n  resetModifierKey();\n\n  const toolName = activeTool.getToolName();\n  if (Object.keys(toolGroup.toolOptions).includes(toolName)) {\n    toolGroup.setViewportsCursorByToolName(toolName);\n  }\n}\n","import Events from '../enums/Events';\nimport { keyDown, keyUp } from './keyboardEventHandlers';\n\n/**\n * Enable Key down and key up listeners\n *\n * @param element - The HTML element to attach the event listeners to.\n */\nconst enable = function (element: HTMLDivElement) {\n  element.addEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.addEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\n/**\n * Disable Key down and key up listeners\n * @param element - The HTML element to attach the event listeners to.\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.KEY_DOWN, keyDown as EventListener);\n  element.removeEventListener(Events.KEY_UP, keyUp as EventListener);\n};\n\nconst keyboardToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default keyboardToolEventDispatcher;\n","import { ToolGroupManager } from '../../store';\nimport { MouseBindings, ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport getMouseModifier from './getMouseModifier';\nimport { keyEventListener } from '../../eventListeners';\n\nconst { Active } = ToolModes;\n\n/**\n * Iterate tool group tools until we find a tool that has a \"ToolBinding\"\n * that matches our TouchEvent's `buttons`. It's possible there will be no match\n * (no active tool for that touch button combination).\n *\n * @param evt - The event dispatcher touch event.\n *\n * @returns tool\n */\nexport default function getActiveToolForTouchEvent(\n  evt: EventTypes.NormalizedTouchEventType\n) {\n  // Todo: we should refactor this to use getToolsWithModesForTouchEvent instead\n  const { renderingEngineId, viewportId } = evt.detail;\n  const touchEvent = evt.detail.event;\n\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  const numTouchPoints = Object.keys(touchEvent.touches).length;\n\n  // If any keyboard modifier key is also pressed\n  const modifierKey =\n    getMouseModifier(touchEvent) || keyEventListener.getModifierKey();\n  const defaultMousePrimary = toolGroup.getDefaultMousePrimary();\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const toolOptions = toolGroup.toolOptions[toolName];\n\n    const correctBinding =\n      toolOptions.bindings.length &&\n      /**\n       * TODO: setActiveTool treats MouseBindings.Primary in a special way\n       * which is analgous to numTouchPoints === 1 as the primary interaction\n       * for touch based applications. The ToolGroup set active and get active\n       * logic should be updated to account for numTouchPoints === 1\n       */\n      toolOptions.bindings.some(\n        (binding) =>\n          (binding.numTouchPoints === numTouchPoints ||\n            (numTouchPoints === 1 &&\n              binding.mouseButton === defaultMousePrimary)) &&\n          binding.modifierKey === modifierKey\n      );\n\n    if (toolOptions.mode === Active && correctBinding) {\n      return toolGroup.getToolInstance(toolName);\n    }\n  }\n}\n","import { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\n\ntype ModesFilter = Array<ToolModes>;\n\n/**\n * Given the normalized touch event and a filter of modes,\n * find all the tools on the element that are in one of the specified modes.\n * If the evtButton is specified, only tools with a matching binding will be returned.\n * @param evt - The normalized touchStart event.\n * @param modesFilter - An array of entries from the `ToolModes` enum.\n */\nexport default function getToolsWithModesForTouchEvent(\n  evt: EventTypes.NormalizedTouchEventType,\n  modesFilter: ModesFilter,\n  numTouchPoints?: number\n) {\n  const { renderingEngineId, viewportId } = evt.detail;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return [];\n  }\n\n  const enabledTools = [];\n\n  const toolGroupToolNames = Object.keys(toolGroup.toolOptions);\n\n  for (let j = 0; j < toolGroupToolNames.length; j++) {\n    const toolName = toolGroupToolNames[j];\n    const tool = toolGroup.toolOptions[toolName];\n\n    const correctBinding =\n      numTouchPoints != null &&\n      tool.bindings.length &&\n      tool.bindings.some(\n        (binding) => binding.numTouchPoints === numTouchPoints\n      );\n\n    if (\n      modesFilter.includes(tool.mode) &&\n      (!numTouchPoints || correctBinding)\n    ) {\n      const toolInstance = toolGroup.getToolInstance(toolName);\n      enabledTools.push(toolInstance);\n    }\n  }\n\n  return enabledTools;\n}\n","import { state } from '../../store';\nimport { ToolModes } from '../../enums';\nimport { EventTypes } from '../../types';\nimport {\n  ToolAnnotationPair,\n  ToolsWithMoveableHandles,\n} from '../../types/InternalToolTypes';\n\nimport {\n  setAnnotationSelected,\n  isAnnotationSelected,\n} from '../../stateManagement/annotation/annotationSelection';\n\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\n\n// Util\nimport filterToolsWithMoveableHandles from '../../store/filterToolsWithMoveableHandles';\nimport filterToolsWithAnnotationsForElement from '../../store/filterToolsWithAnnotationsForElement';\nimport filterMoveableAnnotationTools from '../../store/filterMoveableAnnotationTools';\nimport getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\nimport getToolsWithModesForTouchEvent from '../shared/getToolsWithModesForTouchEvent';\n\nconst { Active, Passive } = ToolModes;\n\n/**\n * touchStart - Event handler for touchStart events. Uses `customCallbackHandler` to fire\n * the `touchStartCallback` function on active tools.\n */\nexport default function touchStart(evt: EventTypes.TouchStartEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  // Check for preTouchStartCallbacks,\n  // If the tool claims it consumed the event, prevent further checks.\n  if (activeTool && typeof activeTool.preTouchStartCallback === 'function') {\n    const consumedEvent = activeTool.preTouchStartCallback(evt);\n\n    if (consumedEvent) {\n      return;\n    }\n  }\n\n  const isPrimaryClick = Object.keys(evt.detail.event.touches).length === 1;\n  const activeToolsWithEventBinding = getToolsWithModesForTouchEvent(\n    evt,\n    [Active],\n    Object.keys(evt.detail.event.touches).length\n  );\n  const passiveToolsIfEventWasPrimaryTouchButton = isPrimaryClick\n    ? getToolsWithModesForTouchEvent(evt, [Passive])\n    : undefined;\n  const applicableTools = [\n    ...(activeToolsWithEventBinding || []),\n    ...(passiveToolsIfEventWasPrimaryTouchButton || []),\n    activeTool,\n  ];\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Filter tools with annotations for this element\n  const annotationToolsWithAnnotations = filterToolsWithAnnotationsForElement(\n    element,\n    applicableTools\n  );\n\n  const canvasCoords = eventDetail.currentPoints.canvas;\n\n  // For the canvas coordinates, find all tools that might respond to this touch start\n  // on their handles. This filter will call getHandleNearImagePoint for each tool\n  // instance (each annotation)\n  const annotationToolsWithMoveableHandles = filterToolsWithMoveableHandles(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'touch'\n  );\n\n  const isMultiSelect = false;\n\n  // If there are annotation tools whose handle is near the touch, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (annotationToolsWithMoveableHandles.length > 0) {\n    const { tool, annotation, handle } = getAnnotationForSelection(\n      annotationToolsWithMoveableHandles\n    ) as ToolsWithMoveableHandles;\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.handleSelectedCallback(evt, annotation, handle, 'Touch');\n\n    return;\n  }\n\n  // If there were no annotation tools whose handle was near the touch, try to check\n  // if any of the annotation tools are interactable (e.g. moving an entire length annotation)\n  const moveableAnnotationTools = filterMoveableAnnotationTools(\n    element,\n    annotationToolsWithAnnotations,\n    canvasCoords,\n    'touch'\n  );\n\n  // If there are annotation tools that are interactable, select the first one\n  // that isn't locked. If there's only one annotation tool, select it.\n  if (moveableAnnotationTools.length > 0) {\n    const { tool, annotation } = getAnnotationForSelection(\n      moveableAnnotationTools\n    );\n\n    toggleAnnotationSelection(annotation.annotationUID, isMultiSelect);\n    tool.toolSelectedCallback(evt, annotation, 'Touch');\n\n    return;\n  }\n\n  // Run the postTouchStartCallback for the active tool if it exists\n  if (activeTool && typeof activeTool.postTouchStartCallback === 'function') {\n    const consumedEvent = activeTool.postTouchStartCallback(evt);\n\n    if (consumedEvent) {\n      // If the tool claims it consumed the event, prevent further checks.\n      return;\n    }\n  }\n\n  // Don't stop propagation so that touchStartActivate can handle the event\n}\n\n/**\n * If there are multiple annotation tools, return the first one that isn't locked neither hidden.\n * If there's only one annotation tool, return it\n * @param annotationTools - An array of tools and annotation.\n * @returns The candidate for selection\n */\nfunction getAnnotationForSelection(\n  toolsWithMovableHandles: ToolAnnotationPair[]\n): ToolAnnotationPair {\n  return (\n    (toolsWithMovableHandles.length > 1 &&\n      toolsWithMovableHandles.find(\n        (item) =>\n          !isAnnotationLocked(item.annotation) &&\n          isAnnotationVisible(item.annotation.annotationUID)\n      )) ||\n    toolsWithMovableHandles[0]\n  );\n}\n\n/**\n * If the annotation is selected, deselect it. If it's not selected, select it\n * @param annotationUID - The AnnotationUID that we\n * want to toggle the selection of.\n * @param isMultiSelect - If true, the annotation. will be deselected if it is\n * already selected, or deselected if it is selected.\n */\nfunction toggleAnnotationSelection(\n  annotationUID: string,\n  isMultiSelect = false\n): void {\n  if (isMultiSelect) {\n    if (isAnnotationSelected(annotationUID)) {\n      setAnnotationSelected(annotationUID, false);\n    } else {\n      const preserveSelected = true;\n      setAnnotationSelected(annotationUID, true, preserveSelected);\n    }\n  } else {\n    const preserveSelected = false;\n    setAnnotationSelected(annotationUID, true, preserveSelected);\n  }\n}\n","import { state } from '../../store';\nimport { EventTypes } from '../../types';\nimport { setAnnotationSelected } from '../../stateManagement/annotation/annotationSelection';\n\nimport getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\n\n/**\n * If the `touchStart` handler does not consume an event,\n * activate the creation loop of the active tool, if one is found for the\n * touch button pressed.\n *\n * @param evt - The normalized touchStart event.\n */\nexport default function touchStartActivate(\n  evt: EventTypes.TouchStartActivateEventType\n) {\n  // If a tool has locked the current state it is dealing with an interaction within its own eventLoop.\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  if (!activeTool) {\n    return;\n  }\n\n  if (state.isMultiPartToolActive) {\n    return;\n  }\n\n  if (activeTool.addNewAnnotation) {\n    const annotation = activeTool.addNewAnnotation(evt, 'touch');\n    setAnnotationSelected(annotation.annotationUID);\n  }\n}\n","import getActiveToolForTouchEvent from '../shared/getActiveToolForTouchEvent';\nimport { state } from '../../store';\nimport { TouchDragEventType } from '../../types/EventTypes';\n\n/**\n * touchDrag - Event handler for touchDrag events. Uses `customCallbackHandler` to fire\n * the `touchDragCallback` function on active tools.\n */\nexport default function touchDrag(evt: TouchDragEventType) {\n  if (state.isInteractingWithTool) {\n    return;\n  }\n\n  const activeTool = getActiveToolForTouchEvent(evt);\n\n  const noFoundToolOrDoesNotHaveTouchDragCallback =\n    !activeTool || typeof activeTool.touchDragCallback !== 'function';\n  if (noFoundToolOrDoesNotHaveTouchDragCallback) {\n    return;\n  }\n\n  activeTool.touchDragCallback(evt);\n}\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchEnd - Event handler for touchEnd events. Uses `customCallbackHandler` to fire\n * the `touchEndCallback` function on active tools.\n */\nconst touchEnd = customCallbackHandler.bind(null, 'Touch', 'touchEndCallback');\n\nexport default touchEnd;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchTap - Event handler for touch tap events. Uses `customCallbackHandler` to fire\n * the `touchTapCallback` function on active tools.\n */\nconst touchTap = customCallbackHandler.bind(null, 'Touch', 'touchTapCallback');\n\nexport default touchTap;\n","import customCallbackHandler from '../shared/customCallbackHandler';\n\n/**\n * touchPress - Event handler for touch press events. Uses `customCallbackHandler` to fire\n * the `touchPressCallback` function on active tools.\n */\nconst touchPress = customCallbackHandler.bind(\n  null,\n  'Touch',\n  'touchPressCallback'\n);\n\nexport default touchPress;\n","import Events from '../enums/Events';\n\nimport {\n  touchStart,\n  touchStartActivate,\n  touchDrag,\n  touchEnd,\n  touchTap,\n  touchPress,\n} from './touchEventHandlers';\n\n/**\n * Enable these listeners are emitted in order, and can be cancelled/prevented from bubbling\n * by any previous event.\n *\n * @param element - The element to add the event listeners to.\n */\nconst enable = function (element: HTMLDivElement): void {\n  element.addEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.addEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.addEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.addEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.addEventListener(Events.TOUCH_TAP, touchTap as EventListener);\n  element.addEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\n/**\n * Disable and Remove the MouseToolEventDispatcher handlers from the element.\n *\n * @param element - HTMLDivElement\n */\nconst disable = function (element: HTMLDivElement) {\n  element.removeEventListener(Events.TOUCH_START, touchStart as EventListener);\n  element.removeEventListener(\n    Events.TOUCH_START_ACTIVATE,\n    touchStartActivate as EventListener\n  );\n  element.removeEventListener(Events.TOUCH_DRAG, touchDrag as EventListener);\n  element.removeEventListener(Events.TOUCH_END, touchEnd as EventListener);\n  element.removeEventListener(Events.TOUCH_PRESS, touchPress as EventListener);\n};\n\nconst touchToolEventDispatcher = {\n  enable,\n  disable,\n};\n\nexport default touchToolEventDispatcher;\n","import { Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  touchToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n} from '../eventDispatchers';\nimport { state } from './state';\n\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\n/**\n * When an element is \"enabled\", add event listeners and dispatchers to it\n * so we can use interactions to affect tool behaviors\n *\n * @param evt - The ELEMENT_ENABLED event\n */\nexport default function addEnabledElement(\n  evt: Types.EventTypes.ElementEnabledEvent\n): void {\n  const { element, viewportId } = evt.detail;\n  const svgLayer = _createSvgAnnotationLayer(viewportId);\n\n  // Reset/Create svgNodeCache for element\n  _setSvgNodeCache(element);\n  _appendChild(svgLayer, element);\n\n  // Add this element to the annotation rendering engine\n  annotationRenderingEngine.addViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.enable(element);\n  wheelEventListener.enable(element);\n  touchEventListeners.enable(element);\n  keyEventListener.enable(element);\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.enable(element);\n  cameraModifiedEventDispatcher.enable(element);\n  imageSpacingCalibratedEventDispatcher.enable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.enable(element);\n  keyboardToolEventDispatcher.enable(element);\n  touchToolEventDispatcher.enable(element);\n\n  // labelmap\n  // State\n  state.enabledElements.push(element);\n}\n\n/**\n *\n */\nfunction _createSvgAnnotationLayer(viewportId: string): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgLayer = document.createElementNS(svgns, 'svg');\n\n  const svgLayerId = `svg-layer-${viewportId}`;\n  svgLayer.classList.add('svg-layer');\n  svgLayer.setAttribute('id', svgLayerId);\n  svgLayer.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n  svgLayer.style.width = '100%';\n  svgLayer.style.height = '100%';\n  svgLayer.style.pointerEvents = 'none';\n  svgLayer.style.position = 'absolute';\n  // TODO: we should test this on high-res monitors\n  //svgLayer.style.textRendering = 'optimizeSpeed'\n\n  // Single dropshadow config for now\n  const defs = document.createElementNS(svgns, 'defs');\n  const filter = document.createElementNS(svgns, 'filter');\n  const feOffset = document.createElementNS(svgns, 'feOffset');\n  const feColorMatrix = document.createElementNS(svgns, 'feColorMatrix');\n  const feBlend = document.createElementNS(svgns, 'feBlend');\n\n  //\n  filter.setAttribute('id', `shadow-${svgLayerId}`);\n  filter.setAttribute('filterUnits', 'userSpaceOnUse');\n\n  //\n  feOffset.setAttribute('result', 'offOut');\n  feOffset.setAttribute('in', 'SourceGraphic');\n  feOffset.setAttribute('dx', '0.5');\n  feOffset.setAttribute('dy', '0.5');\n\n  //\n  feColorMatrix.setAttribute('result', 'matrixOut');\n  feColorMatrix.setAttribute('in', 'offOut');\n  feColorMatrix.setAttribute('in2', 'matrix');\n  feColorMatrix.setAttribute(\n    'values',\n    '0.2 0 0 0 0 0 0.2 0 0 0 0 0 0.2 0 0 0 0 0 1 0'\n  );\n\n  //\n  feBlend.setAttribute('in', 'SourceGraphic');\n  feBlend.setAttribute('in2', 'matrixOut');\n  feBlend.setAttribute('mode', 'normal');\n\n  filter.appendChild(feOffset);\n  filter.appendChild(feColorMatrix);\n  filter.appendChild(feBlend);\n  defs.appendChild(filter);\n  svgLayer.appendChild(defs);\n\n  return svgLayer;\n}\n\nfunction _setSvgNodeCache(element) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  // Create or reset\n  // TODO: If... Reset, we should blow out any nodes in DOM\n  state.svgNodeCache[elementHash] = {};\n}\n\n/**\n *\n * @param newNode\n * @param referenceNode\n */\nfunction _appendChild(\n  newNode: SVGElement,\n  referenceNode: HTMLDivElement\n): void {\n  referenceNode.querySelector('div.viewport-element').appendChild(newNode);\n}\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * It returns all synchronizers that are not disabled and have a source viewport\n * with the given rendering engine Id and viewport Id\n * @param renderingEngineId - The Id of the rendering engine\n * @param viewportId - The Id of the viewport\n * @returns An array of synchronizers\n */\nfunction getSynchronizersForViewport(\n  viewportId: string,\n  renderingEngineId: string\n): Array<Synchronizer> {\n  const synchronizersFilteredByIds = [];\n\n  if (!renderingEngineId && !viewportId) {\n    throw new Error(\n      'At least one of renderingEngineId or viewportId should be given'\n    );\n  }\n\n  for (let i = 0; i < state.synchronizers.length; i++) {\n    const synchronizer = state.synchronizers[i];\n    const notDisabled = !synchronizer.isDisabled();\n    const hasSourceViewport = synchronizer.hasSourceViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    const hasTargetViewport = synchronizer.hasTargetViewport(\n      renderingEngineId,\n      viewportId\n    );\n\n    if (notDisabled && (hasSourceViewport || hasTargetViewport)) {\n      synchronizersFilteredByIds.push(synchronizer);\n    }\n  }\n\n  return synchronizersFilteredByIds;\n}\n\nexport default getSynchronizersForViewport;\n","import { getEnabledElement, Types } from '@cornerstonejs/core';\nimport {\n  mouseEventListeners,\n  wheelEventListener,\n  touchEventListeners,\n  keyEventListener,\n} from '../eventListeners';\nimport {\n  imageRenderedEventDispatcher,\n  cameraModifiedEventDispatcher,\n  mouseToolEventDispatcher,\n  keyboardToolEventDispatcher,\n  imageSpacingCalibratedEventDispatcher,\n  touchToolEventDispatcher,\n} from '../eventDispatchers';\n// ~~\n\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\nimport { state } from './state';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport { ToolModes } from '../enums';\nimport { removeAnnotation } from '../stateManagement';\nimport getSynchronizersForViewport from './SynchronizerManager/getSynchronizersForViewport';\nimport getToolGroupForViewport from './ToolGroupManager/getToolGroupForViewport';\nimport { annotationRenderingEngine } from '../utilities/triggerAnnotationRender';\n\nconst VIEWPORT_ELEMENT = 'viewport-element';\n\nfunction removeEnabledElement(\n  elementDisabledEvt: Types.EventTypes.ElementDisabledEvent\n): void {\n  // Is DOM element\n  const { element, viewportId } = elementDisabledEvt.detail;\n\n  _resetSvgNodeCache(element);\n  _removeSvgNode(element);\n\n  // Remove this element from the annotation rendering engine\n  annotationRenderingEngine.removeViewportElement(viewportId, element);\n\n  // Listeners\n  mouseEventListeners.disable(element);\n  wheelEventListener.disable(element);\n  touchEventListeners.disable(element);\n  keyEventListener.disable(element);\n  // labelmap\n\n  // Dispatchers: renderer\n  imageRenderedEventDispatcher.disable(element);\n  cameraModifiedEventDispatcher.disable(element);\n  imageSpacingCalibratedEventDispatcher.disable(element);\n  // Dispatchers: interaction\n  mouseToolEventDispatcher.disable(element);\n  keyboardToolEventDispatcher.disable(element);\n  touchToolEventDispatcher.disable(element);\n\n  // State\n  // @TODO: We used to \"disable\" the tool before removal. Should we preserve the hook that would call on tools?\n  _removeViewportFromSynchronizers(element);\n  _removeViewportFromToolGroup(element);\n\n  // _removeAllToolsForElement(canvas)\n  _removeEnabledElement(element);\n}\n\nconst _removeViewportFromSynchronizers = (element: HTMLDivElement) => {\n  const enabledElement = getEnabledElement(element);\n\n  const synchronizers = getSynchronizersForViewport(\n    enabledElement.viewportId,\n    enabledElement.renderingEngineId\n  );\n  synchronizers.forEach((sync) => {\n    sync.remove(enabledElement);\n  });\n};\n\nconst _removeViewportFromToolGroup = (element: HTMLDivElement) => {\n  const { renderingEngineId, viewportId } = getEnabledElement(element);\n\n  const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n  if (toolGroup) {\n    toolGroup.removeViewports(renderingEngineId, viewportId);\n  }\n};\n\nconst _removeAllToolsForElement = function (element) {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  toolsWithData.forEach(({ annotations }) => {\n    annotations.forEach((annotation) => {\n      removeAnnotation(annotation.annotationUID);\n    });\n  });\n};\n\nfunction _resetSvgNodeCache(element: HTMLDivElement) {\n  const { viewportUid: viewportId, renderingEngineUid: renderingEngineId } =\n    element.dataset;\n  const elementHash = `${viewportId}:${renderingEngineId}`;\n\n  delete state.svgNodeCache[elementHash];\n}\n\nfunction _removeSvgNode(element: HTMLDivElement) {\n  const internalViewportNode = element.querySelector(`div.${VIEWPORT_ELEMENT}`);\n  const svgLayer = internalViewportNode.querySelector('svg');\n  if (svgLayer) {\n    internalViewportNode.removeChild(svgLayer);\n  }\n}\n\n/**\n * @private\n * @param enabledElement\n */\nconst _removeEnabledElement = function (element: HTMLDivElement) {\n  const foundElementIndex = state.enabledElements.findIndex(\n    (el) => el === element\n  );\n\n  if (foundElementIndex > -1) {\n    state.enabledElements.splice(foundElementIndex, 1);\n  }\n};\n\nexport default removeEnabledElement;\n","import type { Types } from '@cornerstonejs/core';\nimport triggerAnnotationRender from './triggerAnnotationRender';\n\nexport function triggerAnnotationRenderForViewportIds(\n  renderingEngine: Types.IRenderingEngine,\n  viewportIdsToRender: string[]\n): void {\n  if (!viewportIdsToRender.length) {\n    return;\n  }\n\n  viewportIdsToRender.forEach((viewportId) => {\n    const { element } = renderingEngine.getViewport(viewportId);\n    triggerAnnotationRender(element);\n  });\n}\n\nexport default triggerAnnotationRenderForViewportIds;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\n/**\n * This is a callback function that is called when an annotation is modified.\n * Since we are throttling the cachedStats calculation for annotation tools,\n * we need to trigger a final render for the annotation. so that the annotation\n * textBox is updated.\n * Todo: This will trigger all the annotation tools to re-render, although DOM\n * will update those that have changed, but more efficient would be to only\n * update the changed annotation.\n * Todo: A better way is to extract the textBox render logic from the renderAnnotation\n * of all tools and just trigger a render for that (instead of the entire annotation., even if\n * no svg update happens since the attributes for handles are the same)\n */\nfunction annotationModifiedListener(evt): void {\n  const { viewportId, renderingEngineId } = evt.detail;\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n  triggerAnnotationRenderForViewportIds(renderingEngine, [viewportId]);\n}\n\nexport default annotationModifiedListener;\n","import { getRenderingEngines } from '@cornerstonejs/core';\nimport { triggerAnnotationRenderForViewportIds } from '../../utilities';\n\n/**\n * When an annotation is deselected, trigger an annotation render for all viewports.\n * The reason for this is that, drawing an annotation in a different viewport\n * should deselect all other annotations in other viewports. In order to achieve\n * this, we need to trigger an annotation render for all viewports.\n * Todo: Although this is inefficient, but since annotations are only rendered if necessary,\n * it's probably not going to have a noticeable impact on performance.\n * @param evt - The event object.\n */\nfunction annotationSelectionListener(evt): void {\n  const deselectedAnnotation = evt.detail.removed;\n\n  if (!deselectedAnnotation.length) {\n    return;\n  }\n\n  const renderingEngines = getRenderingEngines();\n\n  renderingEngines.forEach((renderingEngine) => {\n    const viewports = renderingEngine.getViewports();\n    const viewportIds = viewports.map((vp) => vp.id);\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n  });\n}\n\nexport default annotationSelectionListener;\n","import { SegmentationModifiedEventType } from '../../types/EventTypes';\nimport {\n  getToolGroupIdsWithSegmentation,\n  getSegmentationRepresentations,\n} from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationRepresentationModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\n\n/** A function that listens to the `segmentationModified` event and triggers\n * the triggerSegmentationRepresentationModified on each toolGroup that\n * has a representation of the given segmentationId.\n */\nconst segmentationModifiedListener = function (\n  evt: SegmentationModifiedEventType\n): void {\n  const { segmentationId } = evt.detail;\n\n  const toolGroupIds = getToolGroupIdsWithSegmentation(segmentationId);\n\n  toolGroupIds.forEach((toolGroupId) => {\n    const segRepresentations = getSegmentationRepresentations(toolGroupId);\n    segRepresentations.forEach((representation) => {\n      if (representation.segmentationId === segmentationId) {\n        triggerSegmentationRepresentationModified(\n          toolGroupId,\n          representation.segmentationRepresentationUID\n        );\n      }\n    });\n  });\n};\n\nexport default segmentationModifiedListener;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Given a tool group Id, return the tool group\n * @param toolGroupId - The Id of the tool group to be retrieved.\n * @returns The tool group that has the same id as the tool group id that was\n * passed in.\n */\nfunction getToolGroup(toolGroupId: string): IToolGroup | undefined {\n  return state.toolGroups.find((s) => s.id === toolGroupId);\n}\n\nexport default getToolGroup;\n","import SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\n\nimport {\n  RepresentationConfig,\n  SegmentationRepresentationConfig,\n  SegmentSpecificRepresentationConfig,\n} from '../../../types/SegmentationStateTypes';\n\n/**\n * It returns the global segmentation config.\n * @returns The global segmentation config containing the representations\n * config for each representation type and renderInactiveSegmentations flag.\n */\nfunction getGlobalConfig(): SegmentationRepresentationConfig {\n  return SegmentationState.getGlobalConfig();\n}\n\n/**\n * Set the global segmentation config\n * @param segmentationConfig - SegmentationConfig\n */\nfunction setGlobalConfig(\n  segmentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setGlobalConfig(segmentationConfig);\n}\n\n/**\n * Given a representation type, return the corresponding global representation config\n * @param representationType - The type of representation to query\n * @returns A representation configuration object.\n */\nfunction getGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations\n): RepresentationConfig['LABELMAP'] {\n  const globalConfig = getGlobalConfig();\n  return globalConfig.representations[representationType];\n}\n\n/**\n * Set the global configuration for a given representation type. It fires\n * a SEGMENTATION_MODIFIED event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param representationType - The type of representation to set config for\n * @param config - The configuration for the representation.\n */\nfunction setGlobalRepresentationConfig(\n  representationType: SegmentationRepresentations,\n  config: RepresentationConfig['LABELMAP']\n): void {\n  const globalConfig = getGlobalConfig();\n\n  setGlobalConfig({\n    ...globalConfig,\n    representations: {\n      ...globalConfig.representations,\n      [representationType]: {\n        ...globalConfig.representations[representationType],\n        ...config,\n      },\n    },\n  });\n}\n\n/**\n * Get the toolGroup specific segmentation config\n * @param toolGroupId - The Id of the tool group\n * @returns A SegmentationConfig object.\n */\nfunction getToolGroupSpecificConfig(\n  toolGroupId: string\n): SegmentationRepresentationConfig {\n  return SegmentationState.getToolGroupSpecificConfig(toolGroupId);\n}\n\n/**\n * Sets the tool group specific configuration for the segmentation\n * representation. This will apply to all segmentation representations.\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationConfig - This is the configuration object that you will use to set the default values for\n * the segmentation representation.\n */\nfunction setToolGroupSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationConfig: SegmentationRepresentationConfig\n): void {\n  SegmentationState.setToolGroupSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationConfig\n  );\n}\n\n/**\n * Give the segmentation representation UID, return the corresponding config\n * which is shared by all segments in the segmentation representation. This is\n * an optional level of configuration that can be set by the user, by default\n * it will fallback to the toolGroup specific config, if not set, it will fallback\n * to the global config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n * @returns - The configuration for the representation.\n */\nfunction getSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): RepresentationConfig {\n  return SegmentationState.getSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Set the segmentation representation specific configuration for the\n * segmentation representation. This will apply to all segments in the\n * segmentation representation and has higher priority than the toolGroup\n * specific config.\n *\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param config - The configuration for the representation. This is an object\n * only containing the representation type as key and the config as value.\n */\nfunction setSegmentationRepresentationSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: RepresentationConfig\n): void {\n  SegmentationState.setSegmentationRepresentationSpecificConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\n/**\n * Get the segment specific configuration for the segmentation representation.\n *\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID  - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @returns - The configuration for the segment index in the segmentation representation that is shown in the toolGroup's viewport\n */\nfunction getSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): RepresentationConfig {\n  return SegmentationState.getSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n}\n\n/**\n * Set the segment specific configuration for the segmentation representation.\n * This configuration, if specified, has higher priority than the segmentation representation specific config,\n * and the toolGroup specific config. The order of priority is: segment specific config > segmentation representation specific config > toolGroup specific config > global config\n * @param toolGroupId - The tool group id where the segmentation representation belongs to.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment\n * @param config - The configuration for the representation. This is an object\n */\nfunction setSegmentSpecificConfig(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  config: SegmentSpecificRepresentationConfig\n): void {\n  SegmentationState.setSegmentSpecificRepresentationConfig(\n    toolGroupId,\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport {\n  // Global\n  getGlobalConfig,\n  setGlobalConfig,\n  getGlobalRepresentationConfig,\n  setGlobalRepresentationConfig,\n  // ToolGroup Specific\n  getToolGroupSpecificConfig,\n  setToolGroupSpecificConfig,\n  // segmentation representation specific config\n  getSegmentationRepresentationSpecificConfig,\n  setSegmentationRepresentationSpecificConfig,\n  // segment specific config\n  getSegmentSpecificConfig,\n  setSegmentSpecificConfig,\n};\n","import { cache, Types } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getSegmentationRepresentations } from '../../../stateManagement/segmentation/segmentationState';\nimport { ToolGroupSpecificRepresentation } from '../../../types/SegmentationStateTypes';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nimport SegmentationRepresentations from '../../../enums/SegmentationRepresentations';\n\nfunction getSegmentationIndices(segmentationId) {\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n\n  if (segmentation.type === SegmentationRepresentations.Labelmap) {\n    const volume = cache.getVolume(segmentationId);\n    const scalarData = volume.getScalarData();\n\n    const keySet = {};\n    for (let i = 0; i < scalarData.length; i++) {\n      const segmentIndex = scalarData[i];\n      if (segmentIndex !== 0 && !keySet[segmentIndex]) {\n        keySet[segmentIndex] = true;\n      }\n    }\n    return Object.keys(keySet).map((it) => parseInt(it, 10));\n  } else if (segmentation.type === SegmentationRepresentations.Contour) {\n    const geometryIds = segmentation.representationData.CONTOUR?.geometryIds;\n\n    if (!geometryIds) {\n      throw new Error(\n        `No geometryIds found for segmentationId ${segmentationId}`\n      );\n    }\n\n    return geometryIds.map((geometryId) => {\n      const geometry = cache.getGeometry(geometryId) as Types.IGeometry;\n      return (geometry.data as Types.IContourSet).getSegmentIndex();\n    });\n  }\n}\n\n/**\n * Set the visibility of a segmentation representation for a given tool group. It fires\n * a SEGMENTATION_REPRESENTATION_MODIFIED event. Visibility true will show all segments\n * and visibility false will hide all segments\"\n *\n * @triggers SEGMENTATION_REPRESENTATION_MODIFIED\n * @param toolGroupId - The Id of the tool group that contains the segmentation.\n * @param segmentationRepresentationUID - The id of the segmentation representation to modify its visibility.\n * @param visibility - boolean\n */\nfunction setSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  visibility: boolean\n): void {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden, segmentationId } = representation;\n\n  const indices = getSegmentationIndices(segmentationId);\n\n  // if visibility is set to be true, we need to remove all the segments\n  // from the segmentsHidden set, otherwise we need to add all the segments\n  // to the segmentsHidden set\n  if (visibility) {\n    segmentsHidden.clear();\n  } else {\n    indices.forEach((index) => {\n      segmentsHidden.add(index);\n    });\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    representation.segmentationRepresentationUID\n  );\n}\n\n/**\n * Get the visibility of a segmentation data for a given tool group.\n *\n * @param toolGroupId - The Id of the tool group that the segmentation\n * data belongs to.\n * @param segmentationRepresentationUID - The id of the segmentation data to get\n * @returns A boolean value that indicates whether the segmentation data is visible or\n * not on the toolGroup\n */\nfunction getSegmentationVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): boolean | undefined {\n  const toolGroupSegmentationRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  const representation = toolGroupSegmentationRepresentations.find(\n    (representation: ToolGroupSpecificRepresentation) =>\n      representation.segmentationRepresentationUID ===\n      segmentationRepresentationUID\n  );\n\n  if (!representation) {\n    return;\n  }\n\n  const { segmentsHidden } = representation;\n\n  return segmentsHidden.size === 0;\n}\n\n/**\n * Set the visibility of the given segment indices to the given visibility. This\n * is a helper to set the visibility of multiple segments at once and reduces\n * the number of events fired.\n *\n * @param toolGroupId -  The tool group id of the segmentation representation.\n * @param segmentationRepresentationUID -  The UID of the segmentation\n * representation.\n * @param segmentIndices -  The indices of the segments to be hidden/shown.\n * @param visibility -  The visibility to set the segments to.\n *\n */\nfunction setSegmentsVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndices: number[],\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  segmentIndices.forEach((segmentIndex) => {\n    visibility\n      ? segRepresentation.segmentsHidden.delete(segmentIndex)\n      : segRepresentation.segmentsHidden.add(segmentIndex);\n  });\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nfunction setSegmentVisibility(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  visibility: boolean\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    return;\n  }\n\n  visibility\n    ? segRepresentation.segmentsHidden.delete(segmentIndex)\n    : segRepresentation.segmentsHidden.add(segmentIndex);\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  setSegmentationVisibility,\n  getSegmentationVisibility,\n  setSegmentVisibility,\n  setSegmentsVisibility,\n};\n","import {\n  StackViewport,\n  utilities,\n  BaseVolumeViewport,\n  VideoViewport,\n} from '@cornerstonejs/core';\nimport { Types } from '@cornerstonejs/core';\nimport { ToolModes } from '../../enums';\nimport { InteractionTypes, ToolProps, PublicToolProps } from '../../types';\n\nexport interface IBaseTool {\n  /** ToolGroup ID the tool instance belongs to */\n  toolGroupId: string;\n  /** Tool supported interaction types */\n  supportedInteractionTypes: InteractionTypes[];\n  /** Tool Mode : Active, Passive, Enabled, Disabled */\n  mode: ToolModes;\n  /** Tool Configuration */\n  configuration: {\n    preventHandleOutsideImage?: boolean;\n    strategies?: Record<string, any>;\n    defaultStrategy?: string;\n    activeStrategy?: string;\n    strategyOptions?: Record<string, unknown>;\n  };\n}\n\n/**\n * Abstract base class from which all tools derive.\n * Deals with cleanly merging custom and default configuration, and strategy\n * application.\n */\nabstract class BaseTool implements IBaseTool {\n  static toolName;\n  /** Supported Interaction Types - currently only Mouse */\n  public supportedInteractionTypes: InteractionTypes[];\n  public configuration: Record<string, any>;\n  /** ToolGroup ID the tool instance belongs to */\n  public toolGroupId: string;\n  /** Tool Mode - Active/Passive/Enabled/Disabled/ */\n  public mode: ToolModes;\n\n  constructor(toolProps: PublicToolProps, defaultToolProps: ToolProps) {\n    const initialProps = utilities.deepMerge(defaultToolProps, toolProps);\n\n    const {\n      configuration = {},\n      supportedInteractionTypes,\n      toolGroupId,\n    } = initialProps;\n\n    // If strategies are not initialized in the tool config\n    if (!configuration.strategies) {\n      configuration.strategies = {};\n      configuration.defaultStrategy = undefined;\n      configuration.activeStrategy = undefined;\n      configuration.strategyOptions = {};\n    }\n\n    this.toolGroupId = toolGroupId;\n    this.supportedInteractionTypes = supportedInteractionTypes || [];\n    this.configuration = Object.assign({}, configuration);\n    this.mode = ToolModes.Disabled;\n  }\n\n  /**\n   * Returns the name of the tool\n   * @returns The name of the tool.\n   */\n  public getToolName(): string {\n    // Since toolName is static we get it from the class constructor\n    return (<typeof BaseTool>this.constructor).toolName;\n  }\n\n  /**\n   * It applies the active strategy to the enabled element.\n   * @param enabledElement - The element that is being operated on.\n   * @param operationData - The data that needs to be passed to the strategy.\n   * @returns The result of the strategy.\n   */\n  public applyActiveStrategy(\n    enabledElement: Types.IEnabledElement,\n    operationData: unknown\n  ): any {\n    const { strategies, activeStrategy } = this.configuration;\n    return strategies[activeStrategy].call(this, enabledElement, operationData);\n  }\n\n  /**\n   * merges the new configuration with the tool configuration\n   * @param configuration - toolConfiguration\n   */\n  public setConfiguration(newConfiguration: Record<string, any>): void {\n    this.configuration = utilities.deepMerge(\n      this.configuration,\n      newConfiguration\n    );\n  }\n\n  /**\n   * Sets the active strategy for a tool. Strategies are\n   * multiple implementations of tool behavior that can be switched by tool\n   * configuration.\n   *\n   * @param strategyName - name of the strategy to be set as active\n   */\n  public setActiveStrategy(strategyName: string): void {\n    this.setConfiguration({ activeStrategy: strategyName });\n  }\n\n  /**\n   * Returns the volumeId for the volume viewport. It will grabbed the volumeId\n   * from the volumeId if particularly specified in the tool configuration, or if\n   * not, the first actorUID in the viewport is returned as the volumeId. NOTE: for\n   * segmentations, actorUID is not necessarily the volumeId since the segmentation\n   * can have multiple representations, use segmentation helpers to get the volumeId\n   * based on the actorUID.\n   *\n   * @param viewport - Volume viewport\n   * @returns the volumeId for the viewport if specified in the tool configuration,\n   * or the first actorUID in the viewport if not.\n   */\n  private getTargetVolumeId(viewport: Types.IViewport): string | undefined {\n    if (this.configuration.volumeId) {\n      return this.configuration.volumeId;\n    }\n\n    // If volume not specified, then return the actorUID for the\n    // default actor - first actor\n    const actorEntries = viewport.getActors();\n\n    if (!actorEntries) {\n      return;\n    }\n\n    // find the first image actor of instance type vtkVolume\n    return actorEntries.find(\n      (actorEntry) => actorEntry.actor.getClassName() === 'vtkVolume'\n    )?.uid;\n  }\n\n  /**\n   * Get the image that is displayed for the targetId in the cachedStats\n   * which can be\n   * * imageId:<imageId>\n   * * volumeId:<volumeId>\n   * * videoId:<basePathForVideo>/frames/<frameSpecifier>\n   *\n   * @param targetId - annotation targetId stored in the cached stats\n   * @param renderingEngine - The rendering engine\n   * @returns The image data for the target.\n   */\n  protected getTargetIdImage(\n    targetId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): Types.IImageData | Types.CPUIImageData | Types.IImageVolume {\n    if (targetId.startsWith('imageId:')) {\n      const imageId = targetId.split('imageId:')[1];\n      const imageURI = utilities.imageIdToURI(imageId);\n      let viewports = utilities.getViewportsWithImageURI(\n        imageURI,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      viewports = viewports.filter((viewport) => {\n        return viewport.getCurrentImageId() === imageId;\n      });\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('volumeId:')) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const viewports = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else if (targetId.startsWith('videoId:')) {\n      // Video id can be multi-valued for the frame information\n      const imageURI = utilities.imageIdToURI(targetId);\n      const viewports = utilities.getViewportsWithImageURI(\n        imageURI,\n        renderingEngine.id\n      );\n\n      if (!viewports || !viewports.length) {\n        return;\n      }\n\n      return viewports[0].getImageData();\n    } else {\n      throw new Error(\n        'getTargetIdImage: targetId must start with \"imageId:\" or \"volumeId:\"'\n      );\n    }\n  }\n\n  /**\n   * Get the target Id for the viewport which will be used to store the cached\n   * statistics scoped to that target in the annotations.\n   * For StackViewport, targetId is the viewportId, but for the volume viewport,\n   * the targetId will be grabbed from the volumeId if particularly specified\n   * in the tool configuration, or if not, the first actorUID in the viewport.\n   *\n   * @param viewport - viewport to get the targetId for\n   * @returns targetId\n   */\n  protected getTargetId(viewport: Types.IViewport): string | undefined {\n    if (viewport instanceof StackViewport) {\n      return `imageId:${viewport.getCurrentImageId()}`;\n    } else if (viewport instanceof BaseVolumeViewport) {\n      return `volumeId:${this.getTargetVolumeId(viewport)}`;\n    } else if (viewport instanceof VideoViewport) {\n      return `videoId:${viewport.getCurrentImageId()}`;\n    } else {\n      throw new Error(\n        'getTargetId: viewport must be a StackViewport or VolumeViewport'\n      );\n    }\n  }\n}\n\n// Note: this is a workaround since terser plugin does not support static blocks\n// yet and we can't easily say static toolName = \"BaseTool\" in the class definition.\nBaseTool.toolName = 'BaseTool';\nexport default BaseTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the surface representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the surface representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeContourFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const actorEntries = (viewport as Types.IVolumeViewport).getActors();\n\n  // remove actors whose id has the same prefix as the segmentationRepresentationUID\n  const actorUIDsToRemove = actorEntries\n    .map(({ uid }) =>\n      uid.startsWith(segmentationRepresentationUID) ? uid : undefined\n    )\n    .filter(Boolean);\n\n  // @ts-ignore\n  viewport.removeActors(actorUIDsToRemove);\n}\n\nexport default removeContourFromElement;\n","export function pointToString(point, decimals = 5) {\n  return (\n    parseFloat(point[0]).toFixed(decimals) +\n    ',' +\n    parseFloat(point[1]).toFixed(decimals) +\n    ',' +\n    parseFloat(point[2]).toFixed(decimals) +\n    ','\n  );\n}\n","import {\n  getEnabledElement,\n  Enums,\n  VolumeViewport3D,\n} from '@cornerstonejs/core';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkClipClosedSurface from '@kitware/vtk.js/Filters/General/ClipClosedSurface';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport { pointToString } from '../../../utilities/pointToString';\n\nconst polyDataCache = new Map();\n\nfunction addSurfaceToElement(\n  element: HTMLDivElement,\n  surface: any,\n  actorUID: string\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  // Default to true since we are setting a new segmentation, however,\n  // in the event listener, we will make other segmentations visible/invisible\n  // based on the config\n  const points = surface.getPoints();\n  const polys = surface.getPolys();\n  const color = surface.getColor();\n\n  const polyData = vtkPolyData.newInstance();\n  polyData.getPoints().setData(points, 3);\n\n  const triangles = vtkCellArray.newInstance({\n    values: Float32Array.from(polys),\n  });\n  polyData.setPolys(triangles);\n\n  const mapper = vtkMapper.newInstance({});\n  let clippingFilter;\n  if (!(viewport instanceof VolumeViewport3D)) {\n    clippingFilter = vtkClipClosedSurface.newInstance({\n      clippingPlanes: [],\n      activePlaneId: 2,\n      passPointData: false,\n    });\n    clippingFilter.setInputData(polyData);\n    clippingFilter.setGenerateOutline(true);\n    clippingFilter.setGenerateFaces(false);\n    clippingFilter.update();\n    const filteredData = clippingFilter.getOutputData();\n    mapper.setInputData(filteredData);\n  } else {\n    mapper.setInputData(polyData);\n  }\n\n  const actor = vtkActor.newInstance();\n  actor.setMapper(mapper);\n\n  // sets the color of the surface actor\n  actor.getProperty().setColor(color[0] / 255, color[1] / 255, color[2] / 255);\n  viewport.addActor({\n    actor,\n    uid: actorUID,\n    clippingFilter,\n  });\n\n  element.addEventListener(\n    Enums.Events.CLIPPING_PLANES_UPDATED,\n    updateSurfacePlanes\n  );\n}\n\n/**\n * Updates the clipping planes of a surface and caches the resulting poly data\n * @param evt\n */\nfunction updateSurfacePlanes(evt) {\n  const { actorEntry, vtkPlanes, viewport } = evt.detail;\n  if (!actorEntry?.clippingFilter) {\n    return;\n  }\n\n  const mapper = actorEntry.actor.getMapper();\n\n  const { viewPlaneNormal } = viewport.getCamera();\n  const imageIndex = viewport.getCurrentImageIdIndex();\n\n  // we should not use the focalPoint here, since the pan and zoom updates it,\n  // imageIndex is reliable enough\n  const cacheId = `${viewport.id}-${pointToString(\n    viewPlaneNormal\n  )}-${imageIndex}`;\n\n  let actorCache = polyDataCache.get(actorEntry.uid);\n  if (!actorCache) {\n    actorCache = new Map();\n    polyDataCache.set(actorEntry.uid, actorCache);\n  }\n\n  let polyData = actorCache.get(cacheId);\n  if (!polyData) {\n    const clippingFilter = actorEntry.clippingFilter;\n    clippingFilter.setClippingPlanes(vtkPlanes);\n    try {\n      clippingFilter.update();\n      polyData = clippingFilter.getOutputData();\n      actorCache.set(cacheId, polyData);\n    } catch (e) {\n      console.error('Error clipping surface', e);\n    }\n  }\n  mapper.setInputData(polyData);\n}\n\nexport default addSurfaceToElement;\n","import {\n  cache,\n  getEnabledElementByIds,\n  Types,\n  utilities,\n  Enums,\n} from '@cornerstonejs/core';\n\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport * as SegmentationConfig from '../../../stateManagement/segmentation/config/segmentationConfig';\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport {\n  RepresentationPublicInput,\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\n\nimport removeSurfaceFromElement from './removeSurfaceFromElement';\nimport addSurfaceToElement from './addSurfaceToElement';\n\n/**\n * It adds a new segmentation representation to the segmentation state\n * @param toolGroupId - The id of the toolGroup that the segmentation\n * belongs to\n * @param representationInput - RepresentationPublicInput\n * @param toolGroupSpecificConfig - The configuration that is specific to the toolGroup.\n * @returns The segmentationRepresentationUID\n */\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId } = representationInput;\n  const segmentationRepresentationUID = utilities.uuidv4();\n  // Todo: make these configurable during representation input by user\n  const segmentsHidden = new Set() as Set<number>;\n  const colorLUTIndex = 0;\n  const active = true;\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: Representations.Surface,\n    segmentsHidden,\n    colorLUTIndex,\n    active,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: {},\n  };\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const mergedConfig = utilities.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n  SegmentationState.addSegmentationRepresentation(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n  return segmentationRepresentationUID;\n}\n\n/**\n * It removes a segmentation representation from the tool group's viewports and\n * from the segmentation state\n * @param toolGroupId - The toolGroupId of the toolGroup that the\n * segmentationRepresentation belongs to.\n * @param segmentationRepresentationUID - This is the unique identifier\n * for the segmentation representation.\n * @param renderImmediate - If true, the viewport will be rendered\n * immediately after the segmentation representation is removed.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeSurfaceFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * It renders the Surface  for the given segmentation\n * @param viewport - The viewport object\n * @param representation - ToolGroupSpecificRepresentation\n * @param toolGroupConfig - This is the configuration object for the tool group\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representation: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const {\n    colorLUTIndex,\n    active,\n    segmentationId,\n    segmentationRepresentationUID,\n    segmentsHidden,\n  } = representation;\n\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const SurfaceData = segmentation.representationData[Representations.Surface];\n  const { geometryId } = SurfaceData;\n\n  if (!geometryId) {\n    console.warn(\n      `No Surfaces found for segmentationId ${segmentationId}. Skipping render.`\n    );\n  }\n\n  const geometry = cache.getGeometry(geometryId);\n  if (!geometry) {\n    throw new Error(`No Surfaces found for geometryId ${geometryId}`);\n  }\n\n  if (geometry.type !== Enums.GeometryType.SURFACE) {\n    // Todo: later we can support converting other geometries to Surfaces\n    throw new Error(\n      `Geometry type ${geometry.type} not supported for rendering.`\n    );\n  }\n\n  if (!geometry.data) {\n    console.warn(\n      `No Surfaces found for geometryId ${geometryId}. Skipping render.`\n    );\n    return;\n  }\n\n  const surface = geometry.data;\n\n  const surfaceUID = `${segmentationRepresentationUID}_${surface.id}}`;\n  _renderSurface(viewport, surface, surfaceUID);\n\n  viewport.resetCamera();\n  viewport.render();\n}\n\nfunction _renderSurface(\n  viewport: Types.IVolumeViewport,\n  surface: any,\n  surfaceUID: string\n): void {\n  const actorUID = surfaceUID;\n  const actorEntry = viewport.getActor(actorUID);\n\n  if (!actorEntry) {\n    addSurfaceToElement(viewport.element, surface, actorUID);\n  } else {\n    throw new Error('Not implemented yet. (Update surface)');\n  }\n}\n\nfunction _removeSurfaceFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeSurfaceFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nexport default {\n  render,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n};\n","import { Enums, Types } from '@cornerstonejs/core';\nimport vtkCellArray from '@kitware/vtk.js/Common/Core/CellArray';\nimport vtkPoints from '@kitware/vtk.js/Common/Core/Points';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\nimport { ToolGroupSpecificContourRepresentation } from '../../../types';\n\n/**\n * If the segment specific config exists for the given segment id, it returns\n * the segment specific config. Otherwise, it looks for the segment specific\n * config for the given index. If it doesn't exist, it returns null.\n *\n * @param contourRepresentation -  The representation object that is passed\n * to the tool.\n * @param segmentId -  The id of the segment.\n * @param index -  The index of the segment in the list of segments.\n * @returns the segment specific config for the given segment id.\n *\n */\nexport function getSegmentSpecificConfig(\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  segmentId: string,\n  index: number\n) {\n  let segmentSpecificConfig =\n    contourRepresentation.segmentSpecificConfig?.[segmentId];\n\n  if (!segmentSpecificConfig) {\n    // try the index\n    segmentSpecificConfig =\n      contourRepresentation.segmentSpecificConfig?.[index];\n  }\n\n  if (!segmentSpecificConfig) {\n    return null;\n  }\n\n  return segmentSpecificConfig.CONTOUR;\n}\n\n/**\n * takes a geometry object as an argument\n * and throws an error if the geometry object is not a contour\n * @param geometry -  The geometry object to be rendered.\n */\nexport function validateGeometry(geometry: Types.IGeometry): void {\n  if (!geometry) {\n    throw new Error(`No contours found for geometryId ${geometry.id}`);\n  }\n\n  const geometryId = geometry.id;\n\n  if (geometry.type !== Enums.GeometryType.CONTOUR) {\n    throw new Error(\n      `Geometry type ${geometry.type} not supported for rendering.`\n    );\n  }\n\n  if (!geometry.data) {\n    console.warn(\n      `No contours found for geometryId ${geometryId}. Skipping render.`\n    );\n    return;\n  }\n}\n\n/**\n * It takes a contourSet and returns a vtkPolyData for that contourSet. A contour set\n * is a collection of contours. Each contour is a collection of points. Each point\n * is x,y,z in the world coordinate system.\n *\n * @param contourSet -  the contour set that you want to convert to polyData\n * @returns A vtkPolyData object\n */\nexport function getPolyData(contourSet: Types.IContourSet) {\n  const pointArray = [];\n\n  const points = vtkPoints.newInstance();\n  const lines = vtkCellArray.newInstance();\n\n  // this variable will indicate the index of the first point in the current line\n  // so we can correctly generate the point index list to add in the cellArray\n  let pointIndex = 0;\n  contourSet.getContours().forEach((contour: Types.IContour) => {\n    const pointList = contour.getPoints();\n    const flatPoints = contour.getFlatPointsArray();\n    const type = contour.getType();\n\n    // creating a point index list that defines a line\n    const pointIndexes = pointList.map(\n      (_, pointListIndex) => pointListIndex + pointIndex\n    );\n\n    // if close planar, add the first point index to the list\n    if (type === Enums.ContourType.CLOSED_PLANAR) {\n      pointIndexes.push(pointIndexes[0]);\n    }\n\n    const linePoints = Float32Array.from(flatPoints);\n    // add the current points into the point list\n    pointArray.push(...linePoints);\n    // add the point indexes into the cell array\n    lines.insertNextCell([...pointIndexes]);\n    // update the first point index\n    pointIndex = pointIndex + pointList.length;\n  });\n\n  // converts the pointArray into vtkPoints\n  points.setData(pointArray, 3);\n\n  // creates the polyData\n  const polygon = vtkPolyData.newInstance();\n  polygon.setPoints(points);\n  polygon.setLines(lines);\n\n  return polygon;\n}\n","type ConfigCache = {\n  segmentsHidden: Set<number>;\n  outlineWidthActive: number;\n  visibility: boolean;\n};\n\n/**\n * Config cache is used to store the config for a given segmentation\n * representation. This is used to avoid having to recompute the config\n * every time the user changes the active segment, and also for performance\n * reasons.\n */\nconst configCachePerSegmentationRepresentationUID = new Map();\n\nexport function getConfigCache(\n  segmentationRepresentationUID: string\n): ConfigCache {\n  return configCachePerSegmentationRepresentationUID.get(\n    segmentationRepresentationUID\n  );\n}\n\nexport function setConfigCache(\n  segmentationRepresentationUID: string,\n  config: ConfigCache\n) {\n  configCachePerSegmentationRepresentationUID.set(\n    segmentationRepresentationUID,\n    config\n  );\n}\n\nexport function deleteConfigCache(segmentationRepresentationUID: string) {\n  configCachePerSegmentationRepresentationUID.delete(\n    segmentationRepresentationUID\n  );\n}\n","import { cache, Types } from '@cornerstonejs/core';\nimport vtkDataArray from '@kitware/vtk.js/Common/Core/DataArray';\nimport vtkAppendPolyData from '@kitware/vtk.js/Filters/General/AppendPolyData';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\n\nimport {\n  getPolyData,\n  getSegmentSpecificConfig,\n  validateGeometry,\n} from './utils';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\n\nexport function addContourSetsToElement(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig,\n  contourActorUID: string\n) {\n  const { segmentationRepresentationUID, segmentsHidden } =\n    contourRepresentation;\n  const appendPolyData = vtkAppendPolyData.newInstance();\n\n  const scalarToColorMap = new Map();\n  const segmentSpecificMap = new Map();\n\n  geometryIds.forEach((geometryId) => {\n    const geometry = cache.getGeometry(geometryId);\n\n    if (!geometry) {\n      console.warn(\n        `No geometry found for geometryId ${geometryId}. Skipping render.`\n      );\n      return;\n    }\n\n    const segmentIndex = (geometry.data as Types.IContourSet).getSegmentIndex();\n\n    validateGeometry(geometry);\n\n    const segmentSpecificConfig = getSegmentSpecificConfig(\n      contourRepresentation,\n      geometryId,\n      segmentIndex\n    );\n\n    const contourSet = geometry.data;\n    const polyData = getPolyData(contourSet as Types.IContourSet);\n    const color = contourSet.getColor();\n\n    const size = polyData.getPoints().getNumberOfPoints();\n\n    const scalars = vtkDataArray.newInstance({\n      size: size * 4,\n      numberOfComponents: 4,\n      dataType: 'Uint8Array',\n    });\n    for (let i = 0; i < size; ++i) {\n      scalars.setTuple(i, [...color, 255]);\n    }\n    polyData.getPointData().setScalars(scalars);\n\n    if (segmentSpecificConfig) {\n      segmentSpecificMap.set(segmentIndex, segmentSpecificConfig);\n    }\n\n    scalarToColorMap.set(segmentIndex, [\n      ...color,\n      segmentsHidden.has(segmentIndex) ? 0 : 255,\n    ]);\n\n    segmentIndex === 0\n      ? appendPolyData.setInputData(polyData)\n      : appendPolyData.addInputData(polyData);\n  });\n\n  const polyDataOutput = appendPolyData.getOutputData();\n\n  const outlineWidthActive =\n    contourRepresentationConfig.representations.CONTOUR.outlineWidthActive;\n\n  const mapper = vtkMapper.newInstance();\n  mapper.setInputData(polyDataOutput);\n\n  const actor = vtkActor.newInstance();\n  actor.setMapper(mapper);\n  actor.getProperty().setLineWidth(outlineWidthActive);\n\n  // set the config cache for later update of the contour\n  setConfigCache(\n    segmentationRepresentationUID,\n    Object.assign({}, getConfigCache(segmentationRepresentationUID), {\n      segmentsHidden: new Set(segmentsHidden),\n      segmentSpecificMap,\n      outlineWidthActive,\n    })\n  );\n\n  actor.setForceOpaque(true);\n\n  viewport.addActor({\n    uid: contourActorUID,\n    actor: actor as unknown as Types.Actor,\n  });\n  viewport.resetCamera();\n  viewport.render();\n}\n","import { cache, Types } from '@cornerstonejs/core';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { getConfigCache, setConfigCache } from './contourConfigCache';\nimport { getSegmentSpecificConfig } from './utils';\n\nexport function updateContourSets(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig,\n  contourActorUID: string\n) {\n  const { segmentationRepresentationUID, segmentsHidden } =\n    contourRepresentation;\n  const newContourConfig = contourRepresentationConfig.representations.CONTOUR;\n  const cachedConfig = getConfigCache(segmentationRepresentationUID);\n\n  const contourSetsActor = viewport.getActor(contourActorUID);\n\n  if (!contourSetsActor) {\n    console.warn(\n      `No contour actor found for actorUID ${contourActorUID}. Skipping render.`\n    );\n    return;\n  }\n\n  const { actor } = contourSetsActor;\n\n  const newOutlineWithActive = newContourConfig.outlineWidthActive;\n\n  if (cachedConfig?.outlineWidthActive !== newOutlineWithActive) {\n    (actor as unknown as vtkActor)\n      .getProperty()\n      .setLineWidth(newOutlineWithActive);\n\n    setConfigCache(\n      segmentationRepresentationUID,\n      Object.assign({}, cachedConfig, {\n        outlineWidthActive: newOutlineWithActive,\n      })\n    );\n  }\n\n  const mapper = (actor as unknown as vtkActor).getMapper();\n  const lut = mapper.getLookupTable();\n\n  const segmentsToSetToInvisible = [];\n  const segmentsToSetToVisible = [];\n\n  for (const segmentIndex of segmentsHidden) {\n    if (!cachedConfig.segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToInvisible.push(segmentIndex);\n    }\n  }\n\n  // the other way around\n  for (const segmentIndex of cachedConfig.segmentsHidden) {\n    if (!segmentsHidden.has(segmentIndex)) {\n      segmentsToSetToVisible.push(segmentIndex);\n    }\n  }\n\n  const mergedInvisibleSegments = Array.from(cachedConfig.segmentsHidden)\n    .filter((segmentIndex) => !segmentsToSetToVisible.includes(segmentIndex))\n    .concat(segmentsToSetToInvisible);\n\n  const { contourSets, segmentSpecificConfigs } = geometryIds.reduce(\n    (acc, geometryId) => {\n      const geometry = cache.getGeometry(geometryId);\n      const { data: contourSet } = geometry;\n      const segmentIndex = (contourSet as Types.IContourSet).getSegmentIndex();\n      const segmentSpecificConfig = getSegmentSpecificConfig(\n        contourRepresentation,\n        geometryId,\n        segmentIndex\n      );\n\n      acc.contourSets.push(contourSet);\n      acc.segmentSpecificConfigs[segmentIndex] = segmentSpecificConfig ?? {};\n\n      return acc;\n    },\n    { contourSets: [], segmentSpecificConfigs: {} }\n  );\n\n  const affectedSegments = [\n    ...mergedInvisibleSegments,\n    ...segmentsToSetToVisible,\n  ];\n\n  const hasCustomSegmentSpecificConfig = Object.values(\n    segmentSpecificConfigs\n  ).some((config) => Object.keys(config).length > 0);\n\n  let polyDataModified = false;\n\n  if (affectedSegments.length || hasCustomSegmentSpecificConfig) {\n    const appendPolyData = mapper.getInputData();\n    const appendScalars = appendPolyData.getPointData().getScalars();\n    const appendScalarsData = appendScalars.getData();\n    // below we will only manipulate the polyData of the contourSets that are affected\n    // by picking the correct offset in the scalarData array\n    let offset = 0;\n    contourSets.forEach((contourSet) => {\n      const segmentIndex = (contourSet as Types.IContourSet).getSegmentIndex();\n      const size = contourSet.getTotalNumberOfPoints();\n\n      if (\n        affectedSegments.includes(segmentIndex) ||\n        segmentSpecificConfigs[segmentIndex]?.fillAlpha // Todo: add others\n      ) {\n        const color = contourSet.getColor();\n        let visibility = mergedInvisibleSegments.includes(segmentIndex)\n          ? 0\n          : 255;\n\n        const segmentConfig = segmentSpecificConfigs[segmentIndex];\n        if (segmentConfig.fillAlpha !== undefined) {\n          visibility = segmentConfig.fillAlpha * 255;\n        }\n\n        for (let i = 0; i < size; ++i) {\n          appendScalarsData[offset + i * 4] = color[0];\n          appendScalarsData[offset + i * 4 + 1] = color[1];\n          appendScalarsData[offset + i * 4 + 2] = color[2];\n          appendScalarsData[offset + i * 4 + 3] = visibility;\n        }\n\n        polyDataModified = true;\n      }\n\n      offset = offset + size * 4;\n    });\n\n    if (polyDataModified) {\n      appendPolyData.modified();\n    }\n\n    setConfigCache(\n      segmentationRepresentationUID,\n      Object.assign({}, cachedConfig, {\n        segmentsHidden: new Set(segmentsHidden),\n      })\n    );\n\n    mapper.setLookupTable(lut);\n  }\n\n  viewport.render();\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the contour representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the contour representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeContourFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const actorEntries = (viewport as Types.IVolumeViewport).getActors();\n\n  // remove actors whose id has the same prefix as the segmentationRepresentationUID\n  const actorUIDsToRemove = actorEntries\n    .map(({ uid }) =>\n      uid.includes(segmentationRepresentationUID) ? uid : undefined\n    )\n    .filter(Boolean);\n\n  // @ts-ignore\n  viewport.removeActors(actorUIDsToRemove);\n}\n\nexport default removeContourFromElement;\n","import {\n  getEnabledElementByIds,\n  Types,\n  utilities as csUtils,\n  StackViewport,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationConfig from '../../../stateManagement/segmentation/config/segmentationConfig';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport {\n  RepresentationPublicInput,\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\nimport { addOrUpdateContourSets } from './addOrUpdateContourSets';\nimport removeContourFromElement from './removeContourFromElement';\nimport { deleteConfigCache } from './contourConfigCache';\n\n/**\n * It adds a new segmentation representation to the segmentation state\n * @param toolGroupId - The id of the toolGroup that the segmentation\n * belongs to\n * @param representationInput - RepresentationPublicInput\n * @param toolGroupSpecificConfig - The configuration that is specific to the toolGroup.\n * @returns The segmentationRepresentationUID\n */\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId } = representationInput;\n  const segmentationRepresentationUID = csUtils.uuidv4();\n  // Todo: make these configurable during representation input by user\n  const segmentsHidden = new Set() as Set<number>;\n  const visibility = true;\n  const colorLUTIndex = 0;\n  const active = true;\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: Representations.Contour,\n    segmentsHidden,\n    colorLUTIndex,\n    active,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: {},\n  };\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const mergedConfig = csUtils.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n  SegmentationState.addSegmentationRepresentation(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n  return segmentationRepresentationUID;\n}\n\n/**\n * It removes a segmentation representation from the tool group's viewports and\n * from the segmentation state\n * @param toolGroupId - The toolGroupId of the toolGroup that the\n * segmentationRepresentation belongs to.\n * @param segmentationRepresentationUID - This is the unique identifier\n * for the segmentation representation.\n * @param renderImmediate - If true, the viewport will be rendered\n * immediately after the segmentation representation is removed.\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeContourFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  deleteConfigCache(segmentationRepresentationUID);\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * It renders the contour sets for the given segmentation\n * @param viewport - The viewport object\n * @param representation - ToolGroupSpecificRepresentation\n * @param toolGroupConfig - This is the configuration object for the tool group\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representationConfig: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const { segmentationId } = representationConfig;\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const contourData = segmentation.representationData[Representations.Contour];\n  const { geometryIds } = contourData;\n\n  // We don't have a good way to handle stack viewports for contours at the moment.\n  // Plus, if we add a segmentation to one viewport, it gets added to all the viewports in the toolGroup too.\n  if (viewport instanceof StackViewport) {\n    return;\n  }\n\n  if (!geometryIds?.length) {\n    console.warn(\n      `No contours found for segmentationId ${segmentationId}. Skipping render.`\n    );\n  }\n\n  // add the contour sets to the viewport\n  addOrUpdateContourSets(\n    viewport,\n    geometryIds,\n    representationConfig,\n    toolGroupConfig\n  );\n}\n\nfunction _removeContourFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeContourFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nexport default {\n  render,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n};\n","import { Types } from '@cornerstonejs/core';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificContourRepresentation,\n} from '../../../types';\nimport { addContourSetsToElement } from './addContourSetsToElement';\nimport { updateContourSets } from './updateContourSets';\n\nexport function addOrUpdateContourSets(\n  viewport: Types.IVolumeViewport,\n  geometryIds: string[],\n  contourRepresentation: ToolGroupSpecificContourRepresentation,\n  contourRepresentationConfig: SegmentationRepresentationConfig\n) {\n  const { segmentationRepresentationUID } = contourRepresentation;\n  const actorUID = `CONTOUR_${segmentationRepresentationUID}`;\n  const actor = viewport.getActor(actorUID);\n\n  const addOrUpdateFn = actor ? updateContourSets : addContourSetsToElement;\n  addOrUpdateFn(\n    viewport,\n    geometryIds,\n    contourRepresentation,\n    contourRepresentationConfig,\n    actorUID\n  );\n}\n","import {\n  getEnabledElement,\n  addVolumesToViewports,\n  Types,\n  Enums,\n} from '@cornerstonejs/core';\n\n/**\n * It adds a labelmap segmentation representation of the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that will be rendered.\n * @param volumeId - The volume id of the labelmap.\n * @param segmentationRepresentationUID - The segmentation representation UID.\n *\n * @internal\n */\nasync function addLabelmapToElement(\n  element: HTMLDivElement,\n  volumeId: string,\n  segmentationRepresentationUID: string\n): Promise<void> {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n  const { id: viewportId } = viewport;\n\n  // Default to true since we are setting a new segmentation, however,\n  // in the event listener, we will make other segmentations visible/invisible\n  // based on the config\n  const visibility = true;\n  const immediateRender = false;\n  const suppressEvents = true;\n\n  // Todo: Right now we use MIP blend mode for the labelmap, since the\n  // composite blend mode has a non linear behavior regarding fill and line\n  // opacity. This should be changed to a custom labelmap blendMode which does\n  // what composite does, but with a linear behavior.\n  const volumeInputs: Types.IVolumeInput[] = [\n    {\n      volumeId,\n      actorUID: segmentationRepresentationUID,\n      visibility,\n      blendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n    },\n  ];\n\n  // Add labelmap volumes to the viewports to be be rendered, but not force the render\n  await addVolumesToViewports(\n    renderingEngine,\n    volumeInputs,\n    [viewportId],\n    immediateRender,\n    suppressEvents\n  );\n}\n\nexport default addLabelmapToElement;\n","import { StackViewport, getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Remove the labelmap segmentation representation from the viewport's HTML Element.\n * NOTE: This function should not be called directly.\n *\n * @param element - The element that the segmentation is being added to.\n * @param segmentationRepresentationUID - The UID of the labelmap representation to remove.\n * @param removeFromCache - boolean\n *\n * @internal\n */\nfunction removeLabelmapFromElement(\n  element: HTMLDivElement,\n  segmentationRepresentationUID: string,\n  removeFromCache = false // Todo\n): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  if (viewport instanceof StackViewport) {\n    // Todo: we don't have stack segmentation yet\n    return;\n  }\n\n  (viewport as Types.IVolumeViewport).removeVolumeActors([\n    segmentationRepresentationUID,\n  ]);\n}\n\nexport default removeLabelmapFromElement;\n","import vtkPiecewiseFunction from '@kitware/vtk.js/Common/DataModel/PiecewiseFunction';\nimport vtkColorTransferFunction from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction';\n\nimport {\n  cache,\n  getEnabledElementByIds,\n  Types,\n  utilities,\n} from '@cornerstonejs/core';\n\nimport Representations from '../../../enums/SegmentationRepresentations';\nimport * as SegmentationConfig from '../../../stateManagement/segmentation/config/segmentationConfig';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../../store/ToolGroupManager';\nimport type {\n  LabelmapConfig,\n  LabelmapRenderingConfig,\n} from '../../../types/LabelmapTypes';\nimport {\n  RepresentationPublicInput,\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../../types/SegmentationStateTypes';\n\nimport addLabelmapToElement from './addLabelmapToElement';\n\nimport removeLabelmapFromElement from './removeLabelmapFromElement';\n\nconst MAX_NUMBER_COLORS = 255;\nconst labelMapConfigCache = new Map();\n\n/**\n * For each viewport, in the toolGroup it adds the segmentation labelmap\n * representation to its viewports.\n * @param toolGroup - the tool group that contains the viewports\n * @param representationInput - The segmentation representation input\n * @param toolGroupSpecificConfig - The configuration object for toolGroup\n *\n * @returns The UID of the new segmentation representation\n */\nasync function addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  const { segmentationId } = representationInput;\n  const segmentationRepresentationUID = utilities.uuidv4();\n\n  // Todo: make these configurable during representation input by user\n  const segmentsHidden = new Set() as Set<number>;\n  const colorLUTIndex = 0;\n  const active = true;\n  const cfun = vtkColorTransferFunction.newInstance();\n  const ofun = vtkPiecewiseFunction.newInstance();\n\n  ofun.addPoint(0, 0);\n\n  const toolGroupSpecificRepresentation: ToolGroupSpecificRepresentation = {\n    segmentationId,\n    segmentationRepresentationUID,\n    type: Representations.Labelmap,\n    segmentsHidden,\n    colorLUTIndex,\n    active,\n    segmentationRepresentationSpecificConfig: {},\n    segmentSpecificConfig: {},\n    config: {\n      cfun,\n      ofun,\n    },\n  };\n\n  // Update the toolGroup specific configuration\n  if (toolGroupSpecificConfig) {\n    // Since setting configuration on toolGroup will trigger a segmentationRepresentation\n    // update event, we don't want to trigger the event twice, so we suppress\n    // the first one\n    const currentToolGroupConfig =\n      SegmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n\n    const mergedConfig = utilities.deepMerge(\n      currentToolGroupConfig,\n      toolGroupSpecificConfig\n    );\n\n    SegmentationConfig.setToolGroupSpecificConfig(toolGroupId, {\n      renderInactiveSegmentations:\n        mergedConfig.renderInactiveSegmentations || true,\n      representations: {\n        ...mergedConfig.representations,\n      },\n    });\n  }\n\n  SegmentationState.addSegmentationRepresentation(\n    toolGroupId,\n    toolGroupSpecificRepresentation\n  );\n\n  return segmentationRepresentationUID;\n}\n\n/**\n * For each viewport, and for each segmentation, set the segmentation for the viewport's enabled element\n * Initializes the global and viewport specific state for the segmentation in the\n * SegmentationStateManager.\n * @param toolGroup - the tool group that contains the viewports\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param renderImmediate - If true, there will be a render call after the labelmap is removed\n */\nfunction removeSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  renderImmediate = false\n): void {\n  _removeLabelmapFromToolGroupViewports(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n  SegmentationState.removeSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  if (renderImmediate) {\n    const viewportsInfo = getToolGroup(toolGroupId).getViewportsInfo();\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      enabledElement.viewport.render();\n    });\n  }\n}\n\n/**\n * Checks if a segmentation data have the same frameOfReference as the series\n * displayed in a given viewport\n * @param viewport\n * @param referencedVolumeId volume id of the segmentation reference series\n * @returns\n */\nfunction isSameFrameOfReference(viewport, referencedVolumeId) {\n  // if the referencedVolumeId is not defined, we acted as before to not break\n  // applications as referencedVolumeId is inserted in this change\n  // Can modify that in the future commits\n  if (!referencedVolumeId) {\n    return true;\n  }\n  const defaultActor = viewport.getDefaultActor();\n  if (!defaultActor) {\n    return false;\n  }\n  const { uid: defaultActorUID } = defaultActor;\n  const volume = cache.getVolume(defaultActorUID);\n\n  if (volume) {\n    const referencedVolume = cache.getVolume(referencedVolumeId);\n    if (\n      referencedVolume &&\n      volume.metadata.FrameOfReferenceUID ===\n        referencedVolume.metadata.FrameOfReferenceUID\n    ) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * It takes the enabled element, the segmentation Id, and the configuration, and\n * it sets the segmentation for the enabled element as a labelmap\n * @param enabledElement - The cornerstone enabled element\n * @param segmentationId - The id of the segmentation to be rendered.\n * @param configuration - The configuration object for the labelmap.\n */\nasync function render(\n  viewport: Types.IVolumeViewport,\n  representation: ToolGroupSpecificRepresentation,\n  toolGroupConfig: SegmentationRepresentationConfig\n): Promise<void> {\n  const {\n    colorLUTIndex,\n    active,\n    segmentationId,\n    segmentationRepresentationUID,\n    segmentsHidden,\n    config: renderingConfig,\n  } = representation;\n\n  const segmentation = SegmentationState.getSegmentation(segmentationId);\n  const labelmapData =\n    segmentation.representationData[Representations.Labelmap];\n  const { volumeId: labelmapUID } = labelmapData;\n\n  const labelmap = cache.getVolume(labelmapUID);\n\n  if (!labelmap) {\n    throw new Error(`No Labelmap found for volumeId: ${labelmapUID}`);\n  }\n\n  if (!isSameFrameOfReference(viewport, labelmapData?.referencedVolumeId)) {\n    return;\n  }\n  let actorEntry = viewport.getActor(segmentationRepresentationUID);\n\n  if (!actorEntry) {\n    const segmentation = SegmentationState.getSegmentation(segmentationId);\n    const { volumeId } =\n      segmentation.representationData[Representations.Labelmap];\n    // only add the labelmap to ToolGroup viewports if it is not already added\n    await _addLabelmapToViewport(\n      viewport,\n      volumeId,\n      segmentationRepresentationUID\n    );\n\n    actorEntry = viewport.getActor(segmentationRepresentationUID);\n  }\n\n  if (!actorEntry) {\n    return;\n  }\n\n  const { cfun, ofun } = renderingConfig as LabelmapRenderingConfig;\n\n  const renderInactiveSegmentations =\n    toolGroupConfig.renderInactiveSegmentations;\n\n  _setLabelmapColorAndOpacity(\n    viewport.id,\n    actorEntry,\n    cfun,\n    ofun,\n    colorLUTIndex,\n    toolGroupConfig.representations[Representations.Labelmap],\n    representation,\n    active,\n    renderInactiveSegmentations,\n    segmentsHidden\n  );\n}\n\nfunction _setLabelmapColorAndOpacity(\n  viewportId: string,\n  actorEntry: Types.ActorEntry,\n  cfun: vtkColorTransferFunction,\n  ofun: vtkPiecewiseFunction,\n  colorLUTIndex: number,\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentation: ToolGroupSpecificRepresentation,\n  isActiveLabelmap: boolean,\n  renderInactiveSegmentations: boolean,\n  segmentsHidden: Set<number>\n): void {\n  const { segmentSpecificConfig, segmentationRepresentationSpecificConfig } =\n    segmentationRepresentation;\n\n  const segmentationRepresentationLabelmapConfig =\n    segmentationRepresentationSpecificConfig[Representations.Labelmap];\n\n  // Note: MAX_NUMBER_COLORS = 256 is needed because the current method to generate\n  // the default color table uses RGB.\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  const numColors = Math.min(256, colorLUT.length);\n  const volumeActor = actorEntry.actor as Types.VolumeActor;\n  const { uid: actorUID } = actorEntry;\n\n  // Note: right now outlineWidth and renderOutline are not configurable\n  // at the segment level, so we don't need to check for segment specific\n  // configuration in the loop, Todo: make them configurable at the segment level\n  const { outlineWidth, renderOutline, outlineOpacity } = _getLabelmapConfig(\n    toolGroupLabelmapConfig,\n    segmentationRepresentationLabelmapConfig,\n    isActiveLabelmap\n  );\n\n  // Todo: the below loop probably can be optimized so that we don't hit it\n  // unless a config has changed. Right now we get into the following loop\n  // even for brush drawing which does not makes sense\n  for (let i = 0; i < numColors; i++) {\n    const segmentIndex = i;\n    const segmentColor = colorLUT[segmentIndex];\n\n    const segmentSpecificLabelmapConfig =\n      segmentSpecificConfig[segmentIndex]?.[Representations.Labelmap];\n\n    const { fillAlpha, outlineWidth, renderFill, renderOutline } =\n      _getLabelmapConfig(\n        toolGroupLabelmapConfig,\n        segmentationRepresentationLabelmapConfig,\n        isActiveLabelmap,\n        segmentSpecificLabelmapConfig\n      );\n\n    const { forceOpacityUpdate, forceColorUpdate } =\n      _needsTransferFunctionUpdate(viewportId, actorUID, segmentIndex, {\n        fillAlpha,\n        renderFill,\n        renderOutline,\n        segmentColor,\n        outlineWidth,\n        segmentsHidden,\n      });\n\n    if (forceColorUpdate) {\n      cfun.addRGBPoint(\n        segmentIndex,\n        segmentColor[0] / MAX_NUMBER_COLORS,\n        segmentColor[1] / MAX_NUMBER_COLORS,\n        segmentColor[2] / MAX_NUMBER_COLORS\n      );\n    }\n\n    if (forceOpacityUpdate) {\n      if (renderFill) {\n        const segmentOpacity = segmentsHidden.has(segmentIndex)\n          ? 0\n          : (segmentColor[3] / 255) * fillAlpha;\n\n        ofun.removePoint(segmentIndex);\n        ofun.addPointLong(segmentIndex, segmentOpacity, 0.5, 1.0);\n      } else {\n        ofun.addPointLong(segmentIndex, 0.01, 0.5, 1.0);\n      }\n    }\n  }\n\n  volumeActor.getProperty().setRGBTransferFunction(0, cfun);\n\n  ofun.setClamping(false);\n  volumeActor.getProperty().setScalarOpacity(0, ofun);\n\n  volumeActor.getProperty().setInterpolationTypeToNearest();\n\n  volumeActor.getProperty().setUseLabelOutline(renderOutline);\n\n  // @ts-ignore: setLabelOutlineWidth is not in the vtk.d.ts apparently\n  volumeActor.getProperty().setLabelOutlineOpacity(outlineOpacity);\n  volumeActor.getProperty().setLabelOutlineThickness(outlineWidth);\n\n  // Set visibility based on whether actor visibility is specifically asked\n  // to be turned on/off (on by default) AND whether is is in active but\n  // we are rendering inactive labelmap\n  const visible = isActiveLabelmap || renderInactiveSegmentations;\n  volumeActor.setVisibility(visible);\n}\n\nfunction _getLabelmapConfig(\n  toolGroupLabelmapConfig: LabelmapConfig,\n  segmentationRepresentationLabelmapConfig: LabelmapConfig,\n  isActiveLabelmap: boolean,\n  segmentsLabelmapConfig?: LabelmapConfig\n) {\n  const segmentLabelmapConfig = segmentsLabelmapConfig || {};\n\n  const configToUse = {\n    ...toolGroupLabelmapConfig,\n    ...segmentationRepresentationLabelmapConfig,\n    ...segmentLabelmapConfig,\n  };\n\n  const fillAlpha = isActiveLabelmap\n    ? configToUse.fillAlpha\n    : configToUse.fillAlphaInactive;\n  const outlineWidth = isActiveLabelmap\n    ? configToUse.outlineWidthActive\n    : configToUse.outlineWidthInactive;\n\n  const renderFill = isActiveLabelmap\n    ? configToUse.renderFill\n    : configToUse.renderFillInactive;\n\n  const renderOutline = configToUse.renderOutline;\n\n  const outlineOpacity = isActiveLabelmap\n    ? configToUse.outlineOpacity\n    : configToUse.outlineOpacityInactive;\n\n  return {\n    fillAlpha,\n    outlineWidth,\n    renderFill,\n    renderOutline,\n    outlineOpacity,\n  };\n}\n\nfunction _needsTransferFunctionUpdate(\n  viewportId: string,\n  actorUID: string,\n  segmentIndex: number,\n  {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    segmentColor,\n    outlineWidth,\n    segmentsHidden,\n  }: {\n    fillAlpha: number;\n    renderFill: boolean;\n    renderOutline: boolean;\n    outlineWidth: number;\n    segmentColor: number[];\n    segmentsHidden: Set<number>;\n  }\n) {\n  const cacheUID = `${viewportId}-${actorUID}-${segmentIndex}`;\n  const oldConfig = labelMapConfigCache.get(cacheUID);\n\n  if (!oldConfig) {\n    labelMapConfigCache.set(cacheUID, {\n      fillAlpha,\n      renderFill,\n      renderOutline,\n      outlineWidth,\n      segmentColor: segmentColor.slice(), // Create a copy\n      segmentsHidden: new Set(segmentsHidden), // Create a copy\n    });\n\n    return {\n      forceOpacityUpdate: true,\n      forceColorUpdate: true,\n    };\n  }\n\n  const {\n    fillAlpha: oldFillAlpha,\n    renderFill: oldRenderFill,\n    renderOutline: oldRenderOutline,\n    outlineWidth: oldOutlineWidth,\n    segmentColor: oldSegmentColor,\n    segmentsHidden: oldSegmentsHidden,\n  } = oldConfig;\n\n  const forceColorUpdate =\n    oldSegmentColor[0] !== segmentColor[0] ||\n    oldSegmentColor[1] !== segmentColor[1] ||\n    oldSegmentColor[2] !== segmentColor[2];\n\n  const forceOpacityUpdate =\n    oldSegmentColor[3] !== segmentColor[3] ||\n    oldFillAlpha !== fillAlpha ||\n    oldRenderFill !== renderFill ||\n    oldRenderOutline !== renderOutline ||\n    oldOutlineWidth !== outlineWidth ||\n    oldSegmentsHidden.has(segmentIndex) !== segmentsHidden.has(segmentIndex);\n\n  // update the cache\n  labelMapConfigCache.set(cacheUID, {\n    fillAlpha,\n    renderFill,\n    renderOutline,\n    outlineWidth,\n    segmentColor: segmentColor.slice(), // Create a copy\n    segmentsHidden: new Set(segmentsHidden), // Create a copy\n  });\n\n  return {\n    forceOpacityUpdate,\n    forceColorUpdate,\n  };\n}\n\nfunction _removeLabelmapFromToolGroupViewports(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    throw new Error(`ToolGroup with ToolGroupId ${toolGroupId} does not exist`);\n  }\n\n  const { viewportsInfo } = toolGroup;\n\n  for (const viewportInfo of viewportsInfo) {\n    const { viewportId, renderingEngineId } = viewportInfo;\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    removeLabelmapFromElement(\n      enabledElement.viewport.element,\n      segmentationRepresentationUID\n    );\n  }\n}\n\nasync function _addLabelmapToViewport(\n  viewport: Types.IVolumeViewport,\n  volumeId: string,\n  segmentationRepresentationUID: string\n): Promise<void> {\n  await addLabelmapToElement(\n    viewport.element,\n    volumeId,\n    segmentationRepresentationUID\n  );\n}\n\nexport default {\n  render,\n  addSegmentationRepresentation,\n  removeSegmentationRepresentation,\n};\n","import {\n  getEnabledElementByIds,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { config as segmentationConfig } from '../../stateManagement/segmentation';\nimport { setSegmentationVisibility } from '../../stateManagement/segmentation/config/segmentationVisibility';\nimport { getSegmentationRepresentations } from '../../stateManagement/segmentation/segmentationState';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport { PublicToolProps, ToolProps } from '../../types';\nimport { BaseTool } from '../base';\n\nimport {\n  SegmentationRepresentationConfig,\n  ToolGroupSpecificRepresentation,\n} from '../../types/SegmentationStateTypes';\nimport { surfaceDisplay } from './Surface';\nimport { contourDisplay } from './Contour';\nimport { labelmapDisplay } from './Labelmap';\n\n/**\n * In Cornerstone3DTools, displaying of segmentations are handled by the SegmentationDisplayTool.\n * Generally, any Segmentation can be viewed in various representations such as\n * labelmap (3d), contours, surface etc. As of now, Cornerstone3DTools only implements\n * Labelmap representation.\n *\n * SegmentationDisplayTool works at ToolGroup level, and is responsible for displaying the\n * segmentation representation for ALL viewports of a toolGroup, this way we can support complex\n * scenarios for displaying segmentations.\n *\n * Current Limitations:\n * - Only supports rendering of the volumetric segmentations in 3D space. (StackViewport segmentations are not supported yet)\n * - Labelmap representation is the only supported representation for now.\n *\n * Similar to other tools in Cornerstone3DTools, the SegmentationDisplayTool should\n * be added to the CornerstoneTools by calling cornerstoneTools.addTool(SegmentationDisplayTool)\n * and a toolGroup should be created for it using the ToolGroupManager API, finally\n * viewports information such as viewportId and renderingEngineId should be provided\n * to the toolGroup and the SegmentationDisplayTool should be set to be activated.\n *\n *\n */\nclass SegmentationDisplayTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {},\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolEnabled(): void {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // for each segmentationData, make the visibility true\n    toolGroupSegmentationRepresentations.forEach(\n      (segmentationRepresentation) => {\n        setSegmentationVisibility(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          true\n        );\n      }\n    );\n  }\n\n  onSetToolDisabled(): void {\n    const toolGroupId = this.toolGroupId;\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // for each segmentationData, make the visibility false\n    toolGroupSegmentationRepresentations.forEach(\n      (segmentationRepresentation) => {\n        setSegmentationVisibility(\n          toolGroupId,\n          segmentationRepresentation.segmentationRepresentationUID,\n          false\n        );\n      }\n    );\n  }\n\n  /**\n   * It is used to trigger the render for each segmentations in the toolGroup.\n   * Based on the segmentation representation type, it will call the corresponding\n   * render function.\n   *\n   * @param toolGroupId - the toolGroupId\n   */\n  renderSegmentation = (toolGroupId: string): void => {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      return;\n    }\n\n    const toolGroupSegmentationRepresentations =\n      getSegmentationRepresentations(toolGroupId);\n\n    if (\n      !toolGroupSegmentationRepresentations ||\n      toolGroupSegmentationRepresentations.length === 0\n    ) {\n      return;\n    }\n\n    // toolGroup Viewports\n    const toolGroupViewports = toolGroup.viewportsInfo.map(\n      ({ renderingEngineId, viewportId }) => {\n        const enabledElement = getEnabledElementByIds(\n          viewportId,\n          renderingEngineId\n        );\n\n        if (enabledElement) {\n          return enabledElement.viewport;\n        }\n      }\n    );\n\n    // Render each segmentationData, in each viewport in the toolGroup\n    const segmentationRenderList = toolGroupSegmentationRepresentations.map(\n      (representation: ToolGroupSpecificRepresentation) => {\n        const config = this._getMergedRepresentationsConfig(toolGroupId);\n\n        const viewportsRenderList = [];\n\n        const renderers = {\n          [Representations.Labelmap]: labelmapDisplay,\n          [Representations.Contour]: contourDisplay,\n          [Representations.Surface]: surfaceDisplay,\n        };\n\n        const display = renderers[representation.type];\n\n        for (const viewport of toolGroupViewports) {\n          const renderedViewport = display.render(\n            viewport as Types.IVolumeViewport,\n            representation,\n            config\n          );\n\n          viewportsRenderList.push(renderedViewport);\n        }\n        return viewportsRenderList;\n      }\n    );\n\n    Promise.allSettled(segmentationRenderList).then(() => {\n      // for all viewports in the toolGroup trigger a re-render\n      toolGroupViewports.forEach((viewport) => {\n        viewport.render();\n      });\n    });\n  };\n\n  /**\n   * Merge the toolGroup specific configuration with the default global configuration\n   * @param toolGroupId\n   * @returns\n   */\n  _getMergedRepresentationsConfig(\n    toolGroupId: string\n  ): SegmentationRepresentationConfig {\n    const toolGroupConfig =\n      segmentationConfig.getToolGroupSpecificConfig(toolGroupId);\n    const globalConfig = segmentationConfig.getGlobalConfig();\n\n    // merge two configurations and override the global config\n    const mergedConfig = csUtils.deepMerge(globalConfig, toolGroupConfig);\n\n    return mergedConfig;\n  }\n}\n\nSegmentationDisplayTool.toolName = 'SegmentationDisplay';\nexport default SegmentationDisplayTool;\n","import {\n  triggerEvent,\n  eventTarget,\n  getRenderingEngine,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\nimport { Events as csToolsEvents } from '../../enums';\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../../store/ToolGroupManager';\n\nimport SegmentationDisplayTool from '../../tools/displayTools/SegmentationDisplayTool';\nimport { SegmentationRenderedEventDetail } from '../../types/EventTypes';\n\n/**\n * SegmentationRenderingEngine is a class that is responsible for rendering\n * segmentations for a toolGroup. It will call SegmentationDisplayTool to render the segmentation\n * based on the segmentation data and their configurations. Note: This is a Singleton class\n * and should not be instantiated directly. To trigger a render for all the\n * segmentations of a tool group you can use.\n *\n * ```\n * triggerSegmentationRender(toolGroupId)\n * ```\n */\nclass SegmentationRenderingEngine {\n  private _needsRender: Set<string> = new Set();\n  private _animationFrameSet = false;\n  private _animationFrameHandle: number | null = null;\n  public hasBeenDestroyed: boolean;\n\n  public removeToolGroup(toolGroupId) {\n    this._needsRender.delete(toolGroupId);\n\n    if (this._needsRender.size === 0) {\n      this._reset();\n    }\n  }\n\n  public renderToolGroupSegmentations(toolGroupId): void {\n    this._setToolGroupSegmentationToBeRenderedNextFrame([toolGroupId]);\n  }\n\n  /**\n   *  _throwIfDestroyed Throws an error if trying to interact with the `RenderingEngine`\n   * instance after its `destroy` method has been called.\n   */\n  private _throwIfDestroyed() {\n    if (this.hasBeenDestroyed) {\n      throw new Error(\n        'this.destroy() has been manually called to free up memory, can not longer use this instance. Instead make a new one.'\n      );\n    }\n  }\n\n  private _setToolGroupSegmentationToBeRenderedNextFrame(\n    toolGroupIds: string[]\n  ) {\n    // Add the viewports to the set of flagged viewports\n    toolGroupIds.forEach((toolGroupId) => {\n      this._needsRender.add(toolGroupId);\n    });\n\n    // Render any flagged viewports\n    this._render();\n  }\n\n  /**\n   *  _render Sets up animation frame if necessary\n   */\n  private _render() {\n    // If we have viewports that need rendering and we have not already\n    // set the RAF callback to run on the next frame.\n    if (this._needsRender.size > 0 && this._animationFrameSet === false) {\n      this._animationFrameHandle = window.requestAnimationFrame(\n        this._renderFlaggedToolGroups\n      );\n\n      // Set the flag that we have already set up the next RAF call.\n      this._animationFrameSet = true;\n    }\n  }\n\n  private _renderFlaggedToolGroups = () => {\n    this._throwIfDestroyed();\n\n    // for each toolGroupId insides the _needsRender set, render the segmentation\n    const toolGroupIds = Array.from(this._needsRender.values());\n\n    for (const toolGroupId of toolGroupIds) {\n      this._triggerRender(toolGroupId);\n\n      // This viewport has been rendered, we can remove it from the set\n      this._needsRender.delete(toolGroupId);\n\n      // If there is nothing left that is flagged for rendering, stop here\n      // and allow RAF to be called again\n      if (this._needsRender.size === 0) {\n        this._animationFrameSet = false;\n        this._animationFrameHandle = null;\n        return;\n      }\n    }\n  };\n  _triggerRender(toolGroupId) {\n    const toolGroup = getToolGroup(toolGroupId);\n\n    if (!toolGroup) {\n      console.warn(`No tool group found with toolGroupId: ${toolGroupId}`);\n      return;\n    }\n\n    const { viewportsInfo } = toolGroup;\n    const viewports = [];\n\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const renderingEngine = getRenderingEngine(renderingEngineId);\n\n      if (!renderingEngine) {\n        console.warn('rendering Engine has been destroyed');\n        return;\n      }\n\n      viewports.push(renderingEngine.getViewport(viewportId));\n    });\n\n    const segmentationDisplayToolInstance = toolGroup.getToolInstance(\n      SegmentationDisplayTool.toolName\n    ) as SegmentationDisplayTool;\n    if (!segmentationDisplayToolInstance) {\n      console.warn('No segmentation tool found inside', toolGroupId);\n      return;\n    }\n\n    function onSegmentationRender(evt: Types.EventTypes.ImageRenderedEvent) {\n      const { element, viewportId, renderingEngineId } = evt.detail;\n\n      element.removeEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender as EventListener\n      );\n\n      const toolGroup = getToolGroupForViewport(viewportId, renderingEngineId);\n\n      if (!toolGroup) {\n        console.warn('toolGroup has been destroyed');\n        return;\n      }\n\n      const eventDetail: SegmentationRenderedEventDetail = {\n        toolGroupId: toolGroup.id,\n        viewportId,\n      };\n\n      triggerEvent(eventTarget, csToolsEvents.SEGMENTATION_RENDERED, {\n        ...eventDetail,\n      });\n    }\n\n    // Todo: for other representations we probably need the drawSVG, but right now we are not using it\n    // drawSvg(element, (svgDrawingHelper) => {\n    //   const handleDrawSvg = (tool) => {\n    //     if (tool instanceof SegmentationDisplayTool && tool.renderAnnotation) {\n    //       tool.renderAnnotation({ detail: eventDetail })\n    //       triggerEvent(element, csToolsEvents.SEGMENTATION_RENDERED, { ...eventDetail })\n    //     }\n    //   }\n    //   enabledTools.forEach(handleDrawSvg)\n    // })\n\n    viewports.forEach(({ element }) => {\n      element.addEventListener(\n        Enums.Events.IMAGE_RENDERED,\n        onSegmentationRender\n      );\n    });\n\n    segmentationDisplayToolInstance.renderSegmentation(toolGroupId);\n  }\n\n  /**\n   *  _reset Resets the `RenderingEngine`\n   */\n  private _reset() {\n    window.cancelAnimationFrame(this._animationFrameHandle);\n\n    this._needsRender.clear();\n    this._animationFrameSet = false;\n    this._animationFrameHandle = null;\n  }\n}\n\nconst segmentationRenderingEngine = new SegmentationRenderingEngine();\n\n/**\n * It triggers a render for all the segmentations of the tool group with the given Id.\n * @param toolGroupId - The Id of the tool group to render.\n */\nfunction triggerSegmentationRender(toolGroupId: string): void {\n  segmentationRenderingEngine.renderToolGroupSegmentations(toolGroupId);\n}\n\nexport { segmentationRenderingEngine, triggerSegmentationRender };\nexport default triggerSegmentationRender;\n","import { cache } from '@cornerstonejs/core';\n\nimport triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport * as SegmentationState from '../../stateManagement/segmentation/segmentationState';\nimport { SegmentationDataModifiedEventType } from '../../types/EventTypes';\n\n/** A callback function that is called when the segmentation data is modified which\n *  often is as a result of tool interactions e.g., scissors, eraser, etc.\n */\nconst onSegmentationDataModified = function (\n  evt: SegmentationDataModifiedEventType\n): void {\n  const { segmentationId, modifiedSlicesToUse } = evt.detail;\n\n  const { representationData, type } =\n    SegmentationState.getSegmentation(segmentationId);\n\n  let toolGroupIds;\n  if (type === SegmentationRepresentations.Labelmap) {\n    // get the volume from cache, we need the openGLTexture to be updated to GPU\n    const segmentationVolume = cache.getVolume(\n      representationData[type].volumeId\n    );\n\n    if (!segmentationVolume) {\n      console.warn('segmentation not found in cache');\n      return;\n    }\n\n    const { imageData, vtkOpenGLTexture } = segmentationVolume;\n\n    // Update the texture for the volume in the GPU\n    let slicesToUpdate;\n    if (modifiedSlicesToUse && Array.isArray(modifiedSlicesToUse)) {\n      slicesToUpdate = modifiedSlicesToUse;\n    } else {\n      const numSlices = imageData.getDimensions()[2];\n      slicesToUpdate = [...Array(numSlices).keys()];\n    }\n\n    slicesToUpdate.forEach((i) => {\n      vtkOpenGLTexture.setUpdatedFrame(i);\n    });\n\n    // Trigger modified on the imageData to update the image\n    imageData.modified();\n    toolGroupIds =\n      SegmentationState.getToolGroupIdsWithSegmentation(segmentationId);\n  } else {\n    throw new Error(\n      `onSegmentationDataModified: representationType ${type} not supported yet`\n    );\n  }\n\n  toolGroupIds.forEach((toolGroupId) => {\n    triggerSegmentationRender(toolGroupId);\n  });\n};\n\nexport default onSegmentationDataModified;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationModifiedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationStateModified` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationModifiedListener = function (\n  evt: SegmentationRepresentationModifiedEventType\n): void {\n  const { toolGroupId } = evt.detail;\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationModifiedListener;\n","import triggerSegmentationRender from '../../utilities/segmentation/triggerSegmentationRender';\nimport { SegmentationRepresentationRemovedEventType } from '../../types/EventTypes';\n\n/** A function that listens to the `segmentationRepresentationRemoved` event and triggers\n * the `triggerSegmentationRender` function. This function is called when the\n * segmentation state or config is modified.\n */\nconst segmentationRepresentationRemovedEventListener = function (\n  evt: SegmentationRepresentationRemovedEventType\n): void {\n  const { toolGroupId, segmentationRepresentationUID } = evt.detail;\n\n  triggerSegmentationRender(toolGroupId);\n};\n\nexport default segmentationRepresentationRemovedEventListener;\n","import SegmentationRepresentations from '../../enums/SegmentationRepresentations';\nimport { labelmapDisplay } from '../../tools/displayTools/Labelmap';\nimport { contourDisplay } from '../../tools/displayTools/Contour';\n\nimport {\n  getSegmentationRepresentations,\n  getSegmentationRepresentationByUID,\n} from './segmentationState';\n\n/**\n * Remove the segmentation representation (representation) from the viewports of the toolGroup.\n * @param toolGroupId - The Id of the toolGroup to remove the segmentation from.\n * @param segmentationRepresentationUIDs - The UIDs of the segmentation representations to remove.\n * @param immediate - if True the viewport will be re-rendered immediately.\n */\nfunction removeSegmentationsFromToolGroup(\n  toolGroupId: string,\n  segmentationRepresentationUIDs?: string[] | undefined,\n  immediate?: boolean\n): void {\n  const toolGroupSegRepresentations =\n    getSegmentationRepresentations(toolGroupId);\n\n  if (\n    !toolGroupSegRepresentations ||\n    toolGroupSegRepresentations.length === 0\n  ) {\n    return;\n  }\n\n  const toolGroupSegRepresentationUIDs = toolGroupSegRepresentations.map(\n    (representation) => representation.segmentationRepresentationUID\n  );\n\n  let segRepresentationUIDsToRemove = segmentationRepresentationUIDs;\n  if (segRepresentationUIDsToRemove) {\n    // make sure the segmentationDataUIDs that are going to be removed belong\n    // to the toolGroup\n    const invalidSegRepresentationUIDs = segmentationRepresentationUIDs.filter(\n      (segRepresentationUID) =>\n        !toolGroupSegRepresentationUIDs.includes(segRepresentationUID)\n    );\n\n    if (invalidSegRepresentationUIDs.length > 0) {\n      throw new Error(\n        `The following segmentationRepresentationUIDs are not part of the toolGroup: ${JSON.stringify(\n          invalidSegRepresentationUIDs\n        )}`\n      );\n    }\n  } else {\n    // remove all segmentation representations\n    segRepresentationUIDsToRemove = toolGroupSegRepresentationUIDs;\n  }\n\n  segRepresentationUIDsToRemove.forEach((segmentationDataUID) => {\n    _removeSegmentation(toolGroupId, segmentationDataUID, immediate);\n  });\n}\n\nfunction _removeSegmentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  immediate?: boolean\n): void {\n  const segmentationRepresentation = getSegmentationRepresentationByUID(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  const { type } = segmentationRepresentation;\n\n  if (type === SegmentationRepresentations.Labelmap) {\n    labelmapDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else if (type === SegmentationRepresentations.Contour) {\n    contourDisplay.removeSegmentationRepresentation(\n      toolGroupId,\n      segmentationRepresentationUID,\n      immediate\n    );\n  } else {\n    throw new Error(`The representation ${type} is not supported yet`);\n  }\n}\n\nexport default removeSegmentationsFromToolGroup;\n","import { state } from '../index';\nimport { removeSegmentationsFromToolGroup } from '../../stateManagement/segmentation';\nimport { segmentationRenderingEngine } from '../../utilities/segmentation/triggerSegmentationRender';\n// ToolGroups function entirely by their \"state\" being queried and leveraged\n// removing a ToolGroup from state is equivalent to killing it\n\n/**\n * Given a tool group Id, destroy the toolGroup. It will also cleanup all segmentations\n * associated with that tool group too\n *\n * @param toolGroupId - The Id of the tool group to be destroyed.\n */\nfunction destroyToolGroup(toolGroupId: string): void {\n  const toolGroupIndex = state.toolGroups.findIndex(\n    (tg) => tg.id === toolGroupId\n  );\n\n  if (toolGroupIndex > -1) {\n    segmentationRenderingEngine.removeToolGroup(toolGroupId);\n    // Todo: this should not happen here)\n    removeSegmentationsFromToolGroup(toolGroupId);\n    state.toolGroups.splice(toolGroupIndex, 1);\n  }\n}\n\nexport default destroyToolGroup;\n","// `BaseManager` or IManager interface for duplicate API between ToolGroup/Synchronizer?\nimport { state as csToolsState } from '../index';\nimport destroyToolGroup from './destroyToolGroup';\n\n// ToolGroups function entirely by their \"state\" being queried and leveraged\n// removing a ToolGroup from state is equivalent to killing it. Calling\n// destroyToolGroup() to make sure the SegmentationDisplayTools\n// have been removed from the toolGroup Viewports. //Todo: this makes more sense\n// to be based on events, but we don't have any toolGroup created/removed events\n\n/**\n * Destroy all tool groups\n */\nfunction destroy(): void {\n  const toolGroups = [...csToolsState.toolGroups];\n\n  for (const toolGroup of toolGroups) {\n    destroyToolGroup(toolGroup.id);\n  }\n\n  csToolsState.toolGroups = [];\n}\n\nexport default destroy;\n","import { eventTarget, Enums } from '@cornerstonejs/core';\nimport { getAnnotationManager } from './stateManagement/annotation/annotationState';\nimport { getDefaultSegmentationStateManager } from './stateManagement/segmentation/segmentationState';\nimport { Events as TOOLS_EVENTS } from './enums';\nimport { addEnabledElement, removeEnabledElement } from './store';\nimport { resetCornerstoneToolsState } from './store/state';\nimport {\n  annotationSelectionListener,\n  segmentationDataModifiedEventListener,\n  segmentationRepresentationModifiedEventListener,\n  segmentationRepresentationRemovedEventListener,\n  segmentationModifiedListener,\n  annotationModifiedListener,\n} from './eventListeners';\n\nimport * as ToolGroupManager from './store/ToolGroupManager';\n\nlet csToolsInitialized = false;\n\n/**\n * Initialize the cornerstoneTools package. It will add event listeners for mouse\n * and keyboard events.\n * @param defaultConfiguration - A configuration object that will be used to\n * initialize the tool.\n */\nexport function init(defaultConfiguration = {}): void {\n  if (csToolsInitialized) {\n    return;\n  }\n\n  _addCornerstoneEventListeners();\n  _addCornerstoneToolsEventListeners();\n\n  csToolsInitialized = true;\n}\n\n/**\n * It destroys and cleanup state for cornerstone3DTools. It removes all the tools\n * that were added to the tool groups and restore states. It also removes all\n * event listeners.\n */\nexport function destroy(): void {\n  _removeCornerstoneEventListeners();\n  _removeCornerstoneToolsEventListeners();\n\n  // Important: destroy ToolGroups first, in order for cleanup to work correctly for the\n  // added tools.\n  ToolGroupManager.destroy();\n\n  // Remove all tools\n  resetCornerstoneToolsState();\n\n  // remove all annotation.\n  const annotationManager = getAnnotationManager();\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  annotationManager.restoreAnnotations({});\n  segmentationStateManager.resetState();\n  csToolsInitialized = false;\n}\n\n/**\n * Wires up event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n * @internal\n */\nfunction _addCornerstoneEventListeners(): void {\n  // Clear any listeners that may already be set\n  _removeCornerstoneEventListeners();\n\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.addEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.addEventListener(elementDisabledEvent, removeEnabledElement);\n}\n\n/**\n * Removes event listeners for the Cornerstone#ElementDisabled and\n * Cornerstone#ElementEnabled events.\n *\n */\nfunction _removeCornerstoneEventListeners(): void {\n  const elementEnabledEvent = Enums.Events.ELEMENT_ENABLED;\n  const elementDisabledEvent = Enums.Events.ELEMENT_DISABLED;\n\n  eventTarget.removeEventListener(elementEnabledEvent, addEnabledElement);\n  eventTarget.removeEventListener(elementDisabledEvent, removeEnabledElement);\n}\n\n/**\n * It adds an event listener to the event target (the cornerstoneTools object) for\n * the annotation selected and annotation modified events.\n */\nfunction _addCornerstoneToolsEventListeners() {\n  // Clear any listeners that may already be set\n  _removeCornerstoneToolsEventListeners();\n\n  /**\n   * Annotation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.addEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\n/**\n * Remove the event listener for the the annotation selected and annotation modified events.\n */\nfunction _removeCornerstoneToolsEventListeners() {\n  /**\n   * Annotation\n   */\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_MODIFIED,\n    annotationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.ANNOTATION_SELECTION_CHANGE,\n    annotationSelectionListener\n  );\n\n  /**\n   * Segmentation\n   */\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_MODIFIED,\n    segmentationModifiedListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_DATA_MODIFIED,\n    segmentationDataModifiedEventListener\n  );\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_MODIFIED,\n    segmentationRepresentationModifiedEventListener\n  );\n\n  eventTarget.removeEventListener(\n    TOOLS_EVENTS.SEGMENTATION_REPRESENTATION_REMOVED,\n    segmentationRepresentationRemovedEventListener\n  );\n}\n\nexport default init;\n","import { state } from './state';\n\n/**\n * Adds the tool class to the cornerstoneTools to be used later. This function\n * should be called before creating the toolGroups and adding tools and setting their mode.\n * The flow is:\n * - addTool(ToolClass) // where ToolClass is the tool constructor imported from CornerstoneTools or created by a 3rd party\n * - createToolGroup(toolGroupId)\n * - toolGroup.addTool(${toolName}) // NOT THE TOOL CLASS\n * - toolGroup.setToolActive(${toolName})\n *\n * @param ToolClass - A tool calls to instantiate.\n * @param toolOptions - The tool-specific configuration options for the tool.\n * @returns\n */\nexport function addTool(ToolClass): void {\n  // Check if tool exists and name is not undefined\n  const toolName = ToolClass.toolName;\n  const toolAlreadyAdded = state.tools[toolName] !== undefined;\n\n  if (!toolName) {\n    throw new Error(`No Tool Found for the ToolClass ${ToolClass.name}`);\n  }\n\n  if (toolAlreadyAdded) {\n    throw new Error(`${toolName} has already been added globally`);\n  }\n\n  // Stores the toolNames and ToolClass to be instantiated in the toolGroup on toolGroup.addTool\n  state.tools[toolName] = {\n    toolClass: ToolClass,\n  };\n}\n\n/**\n * Removes the tool class from the cornerstoneTools.\n *\n * @param ToolClass - A tool calls to instantiate.\n */\nexport function removeTool(ToolClass): void {\n  const toolName = ToolClass.toolName;\n\n  if (!toolName) {\n    throw new Error(`No tool found for: ${ToolClass.name}`);\n  }\n\n  if (!state.tools[toolName] !== undefined) {\n    delete state.tools[toolName];\n  } else {\n    throw new Error(\n      `${toolName} cannot be removed because it has not been added`\n    );\n  }\n}\n\nexport default addTool;\n","import { ToolModes } from '../enums';\nimport getToolsWithModesForElement from '../utilities/getToolsWithModesForElement';\nimport filterToolsWithAnnotationsForElement from './filterToolsWithAnnotationsForElement';\n\n/**\n * Cancel the current active manipulation that is being performed on the provided\n * element. It filters all the active and passive tools for the enabledElement\n * and calls cancel() method for all of them, and returns the tool that has executed its\n * cancellation (returned its annotationUID), since tools that are not being manipulated will\n * short circuit early. Note: not all tools currently implement a cancel method.\n *\n * @param element - canvas element\n * @returns annotationUID that is cancelled\n */\nexport default function cancelActiveManipulations(\n  element: HTMLDivElement\n): string | undefined {\n  const tools = getToolsWithModesForElement(element, [\n    ToolModes.Active,\n    ToolModes.Passive,\n  ]);\n\n  const toolsWithData = filterToolsWithAnnotationsForElement(element, tools);\n  for (const { tool } of toolsWithData) {\n    const annotationUID = tool.cancel(element);\n    if (annotationUID) {\n      return annotationUID;\n    }\n  }\n}\n","import {\n  getRenderingEngine,\n  getEnabledElement,\n  Enums,\n  Types,\n} from '@cornerstonejs/core';\n\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Synchronizer is a class that listens to a specific event on a specific source\n * targets and fires a specific event on a specific target elements. Use cases\n * include: synchronizing a camera between two viewports, synchronizing a\n * windowLevel between various viewports.\n */\nclass Synchronizer {\n  //\n  private _enabled: boolean;\n  private _eventName: string;\n  private _eventHandler: ISynchronizerEventHandler;\n  private _ignoreFiredEvents: boolean;\n  private _sourceViewports: Array<Types.IViewportId>;\n  private _targetViewports: Array<Types.IViewportId>;\n  private _viewportOptions: Record<string, Record<string, unknown>> = {};\n  private _options: any;\n  public id: string;\n\n  constructor(\n    synchronizerId: string,\n    eventName: string,\n    eventHandler: ISynchronizerEventHandler,\n    options?: any\n  ) {\n    this._enabled = true;\n    this._eventName = eventName;\n    this._eventHandler = eventHandler;\n    this._ignoreFiredEvents = false;\n    this._sourceViewports = [];\n    this._targetViewports = [];\n    this._options = options || {};\n\n    //\n    this.id = synchronizerId;\n  }\n\n  /**\n   * \"Returns true if the synchronizer is disabled.\"\n   * @returns A boolean value.\n   */\n  public isDisabled(): boolean {\n    return !this._enabled || !this._hasSourceElements();\n  }\n\n  /**\n   * Sets the options for the viewport id.  This can be used to\n   * provide configuration on a viewport basis for things like offsets\n   * to the general synchronization, or turn on/off synchronization of certain\n   * attributes.\n   */\n  public setOptions(\n    viewportId: string,\n    options: Record<string, unknown> = {}\n  ): void {\n    this._viewportOptions[viewportId] = options;\n  }\n\n  /** Gets the options for the given viewport id */\n  public getOptions(viewportId: string): Record<string, unknown> | undefined {\n    return this._viewportOptions[viewportId];\n  }\n\n  /**\n   * Add a viewport to the list of targets and sources both.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public add(viewportInfo: Types.IViewportId): void {\n    this.addTarget(viewportInfo);\n    this.addSource(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of sources (source ONLY)\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addSource(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._sourceViewports, viewportInfo)) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = viewportInfo;\n\n    const { element } =\n      getRenderingEngine(renderingEngineId).getViewport(viewportId);\n\n    // @ts-ignore\n    element.addEventListener(this._eventName, this._onEvent.bind(this));\n    this._updateDisableHandlers();\n\n    this._sourceViewports.push(viewportInfo);\n  }\n\n  /**\n   * Add a viewport to the list of viewports that will get the eventHandler\n   * executed when the event is fired on the source viewport.\n   * @param viewportInfo - The viewportId and its renderingEngineId to add to the list of targets and sources.\n   */\n  public addTarget(viewportInfo: Types.IViewportId): void {\n    if (_containsViewport(this._targetViewports, viewportInfo)) {\n      return;\n    }\n\n    this._targetViewports.push(viewportInfo);\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Get the list of source viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getSourceViewports(): Array<Types.IViewportId> {\n    return this._sourceViewports;\n  }\n\n  /**\n   * Get the list of target viewports (as {viewportId, renderingEngineId} objects)\n   * @returns An array of {viewportId, renderingEngineId} objects.\n   */\n  public getTargetViewports(): Array<Types.IViewportId> {\n    return this._targetViewports;\n  }\n\n  public destroy(): void {\n    this._sourceViewports.forEach((s) => this.removeSource(s));\n    this._targetViewports.forEach((t) => this.removeTarget(t));\n  }\n\n  /**\n   * Remove the viewport from the list of targets and sources\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public remove(viewportInfo: Types.IViewportId): void {\n    this.removeTarget(viewportInfo);\n    this.removeSource(viewportInfo);\n  }\n\n  /**\n   * Remove the viewport from the list of source viewports\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   */\n  public removeSource(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._sourceViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    const element = _getViewportElement(viewportInfo);\n\n    this._sourceViewports.splice(index, 1);\n    // @ts-ignore\n    element.removeEventListener(this._eventName, this._eventHandler);\n    this._updateDisableHandlers();\n  }\n\n  /**\n   * Remove the viewport from the list of viewports that are currently targeted by\n   * this handler\n   * @param viewportInfo - The viewport info including viewportId and renderingEngineId.\n   *\n   */\n  public removeTarget(viewportInfo: Types.IViewportId): void {\n    const index = _getViewportIndex(this._targetViewports, viewportInfo);\n\n    if (index === -1) {\n      return;\n    }\n\n    this._targetViewports.splice(index, 1);\n    this._updateDisableHandlers();\n  }\n\n  public hasSourceViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._sourceViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  public hasTargetViewport(\n    renderingEngineId: string,\n    viewportId: string\n  ): boolean {\n    return _containsViewport(this._targetViewports, {\n      renderingEngineId,\n      viewportId,\n    });\n  }\n\n  private fireEvent(sourceViewport: Types.IViewportId, sourceEvent: any): void {\n    if (this.isDisabled() || this._ignoreFiredEvents) {\n      return;\n    }\n\n    this._ignoreFiredEvents = true;\n    const promises = [];\n    try {\n      for (let i = 0; i < this._targetViewports.length; i++) {\n        const targetViewport = this._targetViewports[i];\n        const targetIsSource =\n          sourceViewport.viewportId === targetViewport.viewportId;\n\n        if (targetIsSource) {\n          continue;\n        }\n        const result = this._eventHandler(\n          this,\n          sourceViewport,\n          targetViewport,\n          sourceEvent,\n          this._options\n        );\n\n        // if the result is a promise, then add it to the list of promises\n        // to wait for before setting _ignoreFiredEvents to false\n        if (result instanceof Promise) {\n          promises.push(result);\n        }\n      }\n    } catch (ex) {\n      console.warn(`Synchronizer, for: ${this._eventName}`, ex);\n    } finally {\n      if (promises.length) {\n        Promise.allSettled(promises).then(() => {\n          this._ignoreFiredEvents = false;\n        });\n      } else {\n        this._ignoreFiredEvents = false;\n      }\n    }\n  }\n\n  private _onEvent = (evt: any): void => {\n    if (this._ignoreFiredEvents === true) {\n      return;\n    }\n\n    // If no target viewports, then return immediately, this is useful\n    // when switching between layouts, when previous layout has disabled\n    // its viewports, and the new layout has not yet enabled them.\n    // Right now we don't \"delete\" the synchronizer if all source and targets\n    // are removed, but we may want to do that in the future.\n    if (!this._targetViewports.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(evt.currentTarget);\n\n    if (!enabledElement) {\n      return;\n    }\n\n    const { renderingEngineId, viewportId } = enabledElement;\n\n    // If the viewport has been removed from the synchronizer before the event is\n    // fired, then return immediately.\n    if (!this._sourceViewports.find((s) => s.viewportId === viewportId)) {\n      return;\n    }\n\n    this.fireEvent(\n      {\n        renderingEngineId,\n        viewportId,\n      },\n      evt\n    );\n  };\n\n  private _hasSourceElements(): boolean {\n    return this._sourceViewports.length !== 0;\n  }\n\n  private _updateDisableHandlers(): void {\n    const viewports = _getUniqueViewports(\n      this._sourceViewports,\n      this._targetViewports\n    );\n    const _remove = this.remove;\n    const disableHandler = (elementDisabledEvent) => {\n      _remove(elementDisabledEvent.detail.element);\n    };\n\n    viewports.forEach(function (vUid) {\n      const renderingEngine = getRenderingEngine(\n        vUid.renderingEngineId\n      ).getViewport(vUid.viewportId);\n\n      if (!renderingEngine) {\n        return;\n      }\n\n      const { element } = renderingEngine;\n\n      element.removeEventListener(\n        Enums.Events.ELEMENT_DISABLED,\n        disableHandler\n      );\n      element.addEventListener(Enums.Events.ELEMENT_DISABLED, disableHandler);\n    });\n  }\n}\n\nfunction _getUniqueViewports(\n  vp1: Array<Types.IViewportId>,\n  vp2: Array<Types.IViewportId>\n): Array<Types.IViewportId> {\n  const unique = [];\n\n  const vps = vp1.concat(vp2);\n\n  for (let i = 0; i < vps.length; i++) {\n    const vp = vps[i];\n    if (\n      !unique.some(\n        (u) =>\n          vp.renderingEngineId === u.renderingEngineId &&\n          vp.viewportId === u.viewportId\n      )\n    ) {\n      unique.push(vp);\n    }\n  }\n\n  return unique;\n}\n\nfunction _getViewportIndex(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n): number {\n  return arr.findIndex(\n    (ar) =>\n      vp.renderingEngineId === ar.renderingEngineId &&\n      vp.viewportId === ar.viewportId\n  );\n}\n\nfunction _containsViewport(\n  arr: Array<Types.IViewportId>,\n  vp: Types.IViewportId\n) {\n  return arr.some(\n    (ar) =>\n      ar.renderingEngineId === vp.renderingEngineId &&\n      ar.viewportId === vp.viewportId\n  );\n}\n\nfunction _getViewportElement(vp: Types.IViewportId): HTMLDivElement {\n  const renderingEngine = getRenderingEngine(vp.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(`No RenderingEngine for Id: ${vp.renderingEngineId}`);\n  }\n\n  return renderingEngine.getViewport(vp.viewportId).element;\n}\n\nexport default Synchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\nimport { ISynchronizerEventHandler } from '../../types';\n\n/**\n * Create a new synchronizer instance from Synchronizer class\n * @param synchronizerId - The id of the synchronizer.\n * @param eventName - The name of the event that will be emitted by the\n * synchronizer.\n * @param eventHandler - The event handler that will be\n * called when the event is emitted.\n * @param options - Options for the synchronizer.\n * @returns A reference to the synchronizer.\n */\nfunction createSynchronizer(\n  synchronizerId: string,\n  eventName: string,\n  eventHandler: ISynchronizerEventHandler,\n  options?: any\n): Synchronizer {\n  const synchronizerWithSameIdExists = state.synchronizers.some(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerWithSameIdExists) {\n    throw new Error(`Synchronizer with id '${synchronizerId}' already exists.`);\n  }\n\n  // Create\n  const synchronizer = new Synchronizer(\n    synchronizerId,\n    eventName,\n    eventHandler,\n    options\n  );\n\n  // Update state\n  state.synchronizers.push(synchronizer);\n\n  // Return reference\n  return synchronizer;\n}\n\nexport default createSynchronizer;\n","import { state } from '../index';\n\n/**\n * \"Destroy all synchronizers.\"\n */\nfunction destroy(): void {\n  while (state.synchronizers.length > 0) {\n    const synchronizer = state.synchronizers.pop();\n\n    synchronizer.destroy();\n  }\n}\n\nexport default destroy;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Get the synchronizer with the given id from the state.\n * @param synchronizerId - The id of the synchronizer to be retrieved.\n * @returns A synchronizer object.\n */\nfunction getSynchronizer(synchronizerId: string): Synchronizer | void {\n  return state.synchronizers.find((s) => s.id === synchronizerId);\n}\n\nexport default getSynchronizer;\n","import { state } from '../index';\nimport Synchronizer from './Synchronizer';\n\n/**\n * Return the array of synchronizers\n * @returns An array of synchronizers.\n */\nfunction getAllSynchronizers(): Array<Synchronizer> {\n  return state.synchronizers;\n}\n\nexport default getAllSynchronizers;\n","import { state } from '../index';\n\n// Synchronizers are a bit more tenacious. We need to make sure we remove\n// any attached events\n// We should probably just have a destroySynchronizer call\n// then use getByX to allow versatility in how we can call destroy\n\n/**\n * Destroy a synchronizer by its ID.\n * @param synchronizerId - The id of the synchronizer to destroy.\n */\nfunction destroySynchronizer(synchronizerId: string): void {\n  const synchronizerIndex = state.synchronizers.findIndex(\n    (sync) => sync.id === synchronizerId\n  );\n\n  if (synchronizerIndex > -1) {\n    const synchronizer = state.synchronizers[synchronizerIndex];\n\n    synchronizer.destroy();\n    state.synchronizers.splice(synchronizerIndex, 1);\n  }\n}\n\nexport default destroySynchronizer;\n","const DEFINED_CURSORS = Symbol('DefinedCursors');\nconst STANDARD_CURSORS = new Set([\n  'alias',\n  'all-scroll',\n  'auto',\n  'cell',\n  'col-resize',\n  'context-menu',\n  'copy',\n  'crosshair',\n  'default',\n  'e-resize',\n  'ew-resize',\n  'grab',\n  'grabbing',\n  'help',\n  'move',\n  'ne-resize',\n  'nesw-resize',\n  'no-drop',\n  'none',\n  'not-allowed',\n  'n-resize',\n  'ns-resize',\n  'nw-resize',\n  'nwse-resize',\n  'pointer',\n  'progress',\n  'row-resize',\n  'se-resize',\n  's-resize',\n  'sw-resize',\n  'text',\n  'vertical-text',\n  'wait',\n  'w-resize',\n  'zoom-in',\n  'zoom-out',\n]);\n\nexport default class MouseCursor {\n  private name: string;\n  private fallback: MouseCursor | undefined;\n\n  constructor(name: string, fallback?: MouseCursor | undefined) {\n    this.name = name + '';\n    this.fallback = fallback;\n  }\n\n  getName(): string {\n    return this.name + '';\n  }\n\n  addFallbackStyleProperty(style: string): string {\n    const { fallback } = this;\n    if (fallback instanceof MouseCursor) {\n      return `${style}, ${fallback.getStyleProperty()}`;\n    }\n    return style + '';\n  }\n\n  getStyleProperty(): string {\n    return this.addFallbackStyleProperty(this.name) + '';\n  }\n\n  static getDefinedCursor(name: string): MouseCursor | undefined {\n    const definedCursors = getDefinedCursors(\n      // @ts-ignore\n      MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n      DEFINED_CURSORS\n    );\n    let mouseCursor = definedCursors.get(name);\n    if (mouseCursor instanceof MouseCursor) {\n      return mouseCursor;\n    }\n    if (STANDARD_CURSORS.has(name)) {\n      mouseCursor = new MouseCursor(name);\n      definedCursors.set(name, mouseCursor);\n      return mouseCursor;\n    }\n  }\n\n  static setDefinedCursor(name: string, cursor: MouseCursor): boolean {\n    if (cursor instanceof MouseCursor) {\n      const definedCursors = getDefinedCursors(\n        // @ts-ignore\n        MouseCursor as Record<symbol, Map<string, MouseCursor>>,\n        DEFINED_CURSORS\n      );\n      definedCursors.set(name, cursor);\n      return true;\n    }\n    return false;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction getDefinedCursors(\n  context: Record<symbol, Map<string, MouseCursor>>,\n  symbol: symbol\n): Map<string, MouseCursor> {\n  let definedCursors = context[symbol];\n  if (!(definedCursors instanceof Map)) {\n    definedCursors = new Map();\n    Object.defineProperty(context, symbol, { value: definedCursors });\n  }\n  return definedCursors;\n}\n\nconst standardCursorNames = STANDARD_CURSORS.values();\nexport { standardCursorNames };\n","/**\n * AnnotationStyleStates - This enum defines the 4 possible states available for\n *  a Annotation instance.\n *\n * Default:\n *   The default state for the annotation instance\n * Highlighted:\n *   The annotation should be rendered in \"highlighted\" mode in response to\n *   direct user interaction;\n * Selected:\n *   The annotation has been selected by the user;\n * Locked:\n *   The annotation has been locked;\n */\nenum AnnotationStyleStates {\n  Default = '',\n  Highlighted = 'Highlighted',\n  Selected = 'Selected',\n  Locked = 'Locked',\n}\n\nexport default AnnotationStyleStates;\n","import { utilities } from '@cornerstonejs/core';\nimport MouseCursor from './MouseCursor';\n\nconst DEFAULT_NAME = 'image-cursor';\n\nexport default class ImageMouseCursor extends MouseCursor {\n  private url: string;\n  private x: number;\n  private y: number;\n\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(\n      name || ImageMouseCursor.getUniqueInstanceName(DEFAULT_NAME),\n      fallback\n    );\n    this.url = url;\n    this.x = Number(x) || 0;\n    this.y = Number(y) || 0;\n  }\n\n  getStyleProperty(): string {\n    const { url, x, y } = this;\n    let style = `url('${url}')`;\n    if (x >= 0 && y >= 0 && (x > 0 || y > 0)) {\n      style += ` ${x} ${y}`;\n    }\n    return this.addFallbackStyleProperty(style);\n  }\n\n  static getUniqueInstanceName(prefix: string): string {\n    return `${prefix}-${utilities.getRuntimeId(ImageMouseCursor)}`;\n  }\n}\n","import { SVGCursorDescriptor } from '../types';\n\n/*\n * Definitions\n */\n\nconst BASE: SVGCursorDescriptor = {\n  iconContent: '',\n  iconSize: 16,\n  viewBox: {\n    x: 16,\n    y: 16,\n  },\n  mousePoint: {\n    x: 8,\n    y: 8,\n  },\n  mousePointerGroupString: `\n    <path stroke=\"{{color}}\" d=\"M8 16L8 0\"></path>\n    <path stroke=\"{{color}}\" d=\"M16 8L0 8\"></path>\n  `,\n};\n\nconst SEGMENTATION_CURSOR_BOUNDARIES = {\n  x: 127,\n  y: 60,\n};\n\nconst MINUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n`;\n\nconst PLUS_RECT = `\n<rect fill=\"{{color}}\" x=\"80.19\" y=\"25.03\" width=\"47.14\" height=\"15.85\"/>\n<rect fill=\"{{color}}\" x=\"95.84\" y=\"9.38\" width=\"15.85\" height=\"47.14\"/>\n`;\n\nconst SCISSOR_ICON = `<path fill=\"{{color}}\" d=\"M82.89,10a12.09,12.09,0,0,0-16.8-2.5l-27.5,20.4-8.5-6.3a2.93,2.93,0,0,1-1.1-3,14.66,14.66,0,0,0,.1-6.6,14.08,14.08,0,1,0-6.5,15.2,2.87,2.87,0,0,1,3.2.2l8.2,6.1-8.2,6.1a2.87,2.87,0,0,1-3.2.2,14.16,14.16,0,1,0,6.7,14.4,14,14,0,0,0-.3-5.8,2.93,2.93,0,0,1,1.1-3l8.5-6.3,27.5,20.4A11.91,11.91,0,0,0,82.89,57l-31.7-23.5ZM15.29,21a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,21Zm0,36.8a5.9,5.9,0,1,1,5.9-5.9A5.91,5.91,0,0,1,15.29,57.77Zm28.3-21.5a2.8,2.8,0,1,1,2.8-2.8A2.8,2.8,0,0,1,43.59,36.27Z\" transform=\"translate(-1.17 -0.96)\"/>`;\nconst RECTANGLE_ICON = `<path fill=\"{{color}}\" d=\"M8.86,2.25V66.08H72.69V2.25H8.86ZM65.28,58.67h-49v-49h49v49Z\" transform=\"translate(-8.86 -2.25)\"/>`;\nconst CIRCLE_ICON = `<path fill=\"{{color}}\" d=\"M40.77,2.25A31.92,31.92,0,1,0,72.69,34.16,31.92,31.92,0,0,0,40.77,2.25Zm0,57.63A25.71,25.71,0,1,1,66.48,34.16,25.71,25.71,0,0,1,40.77,59.87Z\" transform=\"translate(-8.86 -2.25)\"/>`;\n\nconst CursorSVG: Record<string, SVGCursorDescriptor> = {\n  Angle: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1203 544q0 13-10 23l-393 393 393 393q10 10 10 23t-10 23l-50\n    50q-10 10-23 10t-23-10l-466-466q-10-10-10-23t10-23l466-466q10-10 23-10t23\n    10l50 50q10 10 10 23z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  ArrowAnnotate: extend(BASE, {\n    iconContent: `<g id=\"arrowAnnotate-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"arrowAnnotate-arrow\" d=\"M23,7 l-15,15 M7,17 l0,6 6,0\" stroke-width=\"2\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Bidirectional: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke-width=\"3\" stroke=\"{{color}}\">\n    <path d=\"M27.63 3.21L3.12 28.81\"></path>\n    <path d=\"M27.63 15.75L15.27 4.43\"></path>\n    <path d=\"M16.5 4.28C16.5 4.96 15.95 5.51 15.27 5.51C14.59 5.51 14.03 4.96 14.03 4.28C14.03 3.59 14.59 3.04 15.27 3.04C15.95 3.04 16.5 3.59 16.5 4.28Z\" ></path>\n    <path d=\"M28.87 3.19C28.87 3.87 28.31 4.43 27.63 4.43C26.95 4.43 26.4 3.87 26.4 3.19C26.4 2.51 26.95 1.95 27.63 1.95C28.31 1.95 28.87 2.51 28.87 3.19Z\"></path>\n    <path d=\"M28.87 15.75C28.87 16.43 28.31 16.99 27.63 16.99C26.95 16.99 26.4 16.43 26.4 15.75C26.4 15.07 26.95 14.51 27.63 14.51C28.31 14.51 28.87 15.07 28.87 15.75Z\"></path>\n    <path d=\"M4.73 28.44C4.73 29.12 4.17 29.68 3.49 29.68C2.81 29.68 2.25 29.12 2.25 28.44C2.25 27.76 2.81 27.2 3.49 27.2C4.17 27.2 4.73 27.76 4.73 28.44Z\"></path>\n  </g>`,\n    viewBox: {\n      x: 48,\n      y: 48,\n    },\n  }),\n  CobbAngle: extend(BASE, {\n    iconContent: `<g stroke=\"{{color}}\" stroke-width=\"3\">\n    <path d=\"M28.59 2.34L3.82 12.32\"></path>\n    <path d=\"M28.59 29.66L3.82 19.68\"></path>\n    <path stroke-dasharray=\"2\" fill-opacity=\"0\" d=\"M12.37\n      23.06C12.67 22.36 12.85 21.93 12.92 21.76C14.6 17.8 14.68 13.35 13.15\n      9.33C13.11 9.24 13.02 9 12.88 8.63\">\n    </path>\n  </g>`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  CircleROI: extend(BASE, {\n    iconContent: `<circle stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" cx=\"16\" cy=\"16\" r=\"14\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  EllipticalROI: extend(BASE, {\n    iconContent: `<path stroke=\"{{color}}\" fill=\"none\" stroke-width=\"3\" d=\"M30.74 15.76C30.74 20.99 24.14 25.23 16\n    25.23C7.86 25.23 1.26 20.99 1.26 15.76C1.26 10.54 7.86 6.3 16 6.3C24.14\n    6.3 30.74 10.54 30.74 15.76Z\" />`,\n    viewBox: {\n      x: 32,\n      y: 32,\n    },\n  }),\n  FreehandROI: extend(BASE, {\n    iconContent: `<g fill=\"{{color}}\" stroke=\"{{color}}\" stroke-width=\"2\">\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_3\" cy=\"4.240343\" cx=\"14.306499\"/>\n    <line id=\"svg_4\" y2=\"3.58462\" x2=\"12.242186\" y1=\"3.997482\" x1=\"13.432202\"/>\n    <line id=\"svg_5\" y2=\"3.268901\" x2=\"10.857882\" y1=\"3.608906\" x1=\"12.387902\"/>\n    <line id=\"svg_6\" y2=\"3.147471\" x2=\"9.740724\" y1=\"3.293187\" x1=\"10.955026\"/>\n    <line id=\"svg_7\" y2=\"3.147471\" x2=\"8.089274\" y1=\"3.196043\" x1=\"9.983585\"/>\n    <line id=\"svg_8\" y2=\"3.268901\" x2=\"6.874972\" y1=\"3.123185\" x1=\"8.307848\"/>\n    <line id=\"svg_9\" y2=\"3.657478\" x2=\"5.587812\" y1=\"3.220329\" x1=\"7.020688\"/>\n    <line id=\"svg_10\" y2=\"4.046054\" x2=\"4.737801\" y1=\"3.560334\" x1=\"5.854959\"/>\n    <line id=\"svg_11\" y2=\"4.337487\" x2=\"4.300652\" y1=\"3.997482\" x1=\"4.834945\"/>\n    <line id=\"svg_12\" y2=\"4.726063\" x2=\"3.88779\" y1=\"4.191771\" x1=\"4.470655\"/>\n    <line id=\"svg_15\" y2=\"5.3575\" x2=\"3.377783\" y1=\"4.604633\" x1=\"3.960648\"/>\n    <line id=\"svg_16\" y2=\"6.183226\" x2=\"2.916348\" y1=\"5.138926\" x1=\"3.547785\"/>\n    <line id=\"svg_17\" y2=\"6.960379\" x2=\"2.770632\" y1=\"5.867507\" x1=\"3.037779\"/>\n    <line id=\"svg_18\" y2=\"7.713246\" x2=\"2.673488\" y1=\"6.741804\" x1=\"2.819204\"/>\n    <line id=\"svg_19\" y2=\"8.684687\" x2=\"2.697774\" y1=\"7.616102\" x1=\"2.673488\"/>\n    <line id=\"svg_20\" y2=\"9.753273\" x2=\"2.892062\" y1=\"8.611829\" x1=\"2.697774\"/>\n    <line id=\"svg_21\" y2=\"10.724714\" x2=\"3.134923\" y1=\"9.534698\" x1=\"2.84349\"/>\n    <line id=\"svg_23\" y2=\"11.647583\" x2=\"3.596357\" y1=\"10.578998\" x1=\"3.086351\"/>\n    <line id=\"svg_25\" y2=\"12.521881\" x2=\"4.276366\" y1=\"11.501867\" x1=\"3.499213\"/>\n    <line id=\"svg_26\" y2=\"13.930471\" x2=\"5.830673\" y1=\"12.376165\" x1=\"4.13065\"/>\n    <line id=\"svg_28\" y2=\"14.707624\" x2=\"7.263549\" y1=\"13.881899\" x1=\"5.733528\"/>\n    <line id=\"svg_29\" y2=\"15.339061\" x2=\"8.963571\" y1=\"14.61048\" x1=\"7.06926\"/>\n    <line id=\"svg_30\" y2=\"15.581921\" x2=\"10.882168\" y1=\"15.314775\" x1=\"8.817855\"/>\n    <line id=\"svg_31\" y2=\"15.460491\" x2=\"12.023612\" y1=\"15.581921\" x1=\"10.785024\"/>\n    <line id=\"svg_33\" y2=\"15.120487\" x2=\"13.092197\" y1=\"15.484777\" x1=\"11.877895\"/>\n    <line id=\"svg_34\" y2=\"14.586194\" x2=\"13.86935\" y1=\"15.217631\" x1=\"12.897909\"/>\n    <line id=\"svg_35\" y2=\"13.833327\" x2=\"14.597931\" y1=\"14.756196\" x1=\"13.699348\"/>\n    <line id=\"svg_37\" y2=\"12.716169\" x2=\"15.180796\" y1=\"13.881899\" x1=\"14.549359\"/>\n    <line id=\"svg_39\" y2=\"11.429009\" x2=\"15.520801\" y1=\"12.813313\" x1=\"15.15651\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_40\" cy=\"10.967574\" cx=\"15.520801\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  FreehandROISculptor: extend(BASE, {\n    iconContent: `<g id=\"icon-freehand-sculpt\" fill=\"none\" stroke-width=\"1.5\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <line id=\"svg_1\" y2=\"2.559367\" x2=\"10.184807\" y1=\"4.467781\" x1=\"8.81711\"/>\n    <line id=\"svg_4\" y2=\"1.493836\" x2=\"11.727442\" y1=\"2.766112\" x1=\"10.089386\"/>\n    <line id=\"svg_7\" y2=\"1.080346\" x2=\"13.047428\" y1=\"1.748291\" x1=\"11.345759\"/>\n    <line id=\"svg_8\" y2=\"1.000829\" x2=\"14.351511\" y1=\"1.112153\" x1=\"12.77707\"/>\n    <line id=\"svg_9\" y2=\"1.350705\" x2=\"15.242104\" y1=\"0.905408\" x1=\"13.969828\"/>\n    <line id=\"svg_10\" y2=\"2.098167\" x2=\"15.862339\" y1=\"1.14396\" x1=\"14.955842\"/>\n    <line id=\"svg_11\" y2=\"3.195505\" x2=\"16.41896\" y1=\"1.939133\" x1=\"15.766918\"/>\n    <line id=\"svg_12\" y2=\"4.292843\" x2=\"16.530284\" y1=\"2.925147\" x1=\"16.387153\"/>\n    <line id=\"svg_16\" y2=\"5.644637\" x2=\"16.196311\" y1=\"3.831643\" x1=\"16.593898\"/>\n    <line id=\"svg_18\" y2=\"7.266789\" x2=\"15.623787\" y1=\"5.19934\" x1=\"16.275829\"/>\n    <line id=\"svg_19\" y2=\"10.813258\" x2=\"14.526449\" y1=\"6.726071\" x1=\"15.766918\"/>\n    <line id=\"svg_20\" y2=\"5.056209\" x2=\"8.085552\" y1=\"4.181519\" x1=\"8.976145\"/>\n    <line id=\"svg_23\" y2=\"5.326568\" x2=\"7.481221\" y1=\"4.78585\" x1=\"8.403621\"/>\n    <line id=\"svg_24\" y2=\"5.565119\" x2=\"6.749662\" y1=\"5.294761\" x1=\"7.624352\"/>\n    <line id=\"svg_25\" y2=\"5.994512\" x2=\"5.429675\" y1=\"5.533312\" x1=\"6.956407\"/>\n    <line id=\"svg_27\" y2=\"6.551133\" x2=\"4.284627\" y1=\"5.962706\" x1=\"5.572807\"/>\n    <line id=\"svg_28\" y2=\"7.584858\" x2=\"3.044158\" y1=\"6.392099\" x1=\"4.427758\"/>\n    <line id=\"svg_29\" y2=\"8.84123\" x2=\"2.185372\" y1=\"7.489437\" x1=\"3.219096\"/>\n    <line id=\"svg_31\" y2=\"10.606513\" x2=\"1.644654\" y1=\"8.602678\" x1=\"2.280792\"/>\n    <line id=\"svg_32\" y2=\"13.214679\" x2=\"1.48562\" y1=\"10.352058\" x1=\"1.724171\"/>\n    <line id=\"svg_33\" y2=\"14.375631\" x2=\"1.676461\" y1=\"12.992031\" x1=\"1.453813\"/>\n    <line id=\"svg_34\" y2=\"15.298031\" x2=\"2.264889\" y1=\"14.152983\" x1=\"1.517427\"/>\n    <line id=\"svg_35\" y2=\"16.172721\" x2=\"3.521261\" y1=\"14.948155\" x1=\"1.915013\"/>\n    <line id=\"svg_36\" y2=\"16.824762\" x2=\"5.207027\" y1=\"15.997783\" x1=\"3.28271\"/>\n    <line id=\"svg_38\" y2=\"17.063314\" x2=\"7.035924\" y1=\"16.745245\" x1=\"4.968475\"/>\n    <line id=\"svg_39\" y2=\"16.888376\" x2=\"9.278311\" y1=\"17.047411\" x1=\"6.733758\"/>\n    <line id=\"svg_40\" y2=\"16.284045\" x2=\"10.661911\" y1=\"16.983797\" x1=\"8.992048\"/>\n    <line id=\"svg_41\" y2=\"15.313934\" x2=\"11.647925\" y1=\"16.395369\" x1=\"10.455166\"/>\n    <line id=\"svg_44\" y2=\"13.898527\" x2=\"12.82478\" y1=\"15.425259\" x1=\"11.504794\"/>\n    <line id=\"svg_45\" y2=\"12.037824\" x2=\"14.144766\" y1=\"14.312017\" x1=\"12.522614\"/>\n    <line id=\"svg_47\" y2=\"10.59061\" x2=\"14.605966\" y1=\"12.228665\" x1=\"13.953925\"/>\n    <ellipse ry=\"1\" rx=\"1\" id=\"svg_48\" cy=\"3.982726\" cx=\"13.460918\"/>\n  </g>`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Length: extend(BASE, {\n    iconContent: `<g id=\"length-group\" fill=\"none\" stroke-width=\"1\" stroke=\"{{color}}\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n    <path id=\"length-dashes\" d=\"m22.5,6 -16.5,16.5\" stroke-width=\"3\" stroke-dasharray=\"0.6666,5\" />\n  </g>`,\n    viewBox: {\n      x: 24,\n      y: 24,\n    },\n  }),\n  Probe: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1152 896q0 106-75 181t-181 75-181-75-75-181 75-181 181-75 181 75\n    75 181zm-256-544q-148 0-273 73t-198 198-73 273 73 273 198 198 273 73 273-73\n    198-198 73-273-73-273-198-198-273-73zm768 544q0 209-103 385.5t-279.5\n    279.5-385.5 103-385.5-103-279.5-279.5-103-385.5 103-385.5 279.5-279.5\n    385.5-103 385.5 103 279.5 279.5 103 385.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  RectangleROI: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1312 256h-832q-66 0-113 47t-47 113v832q0 66 47\n    113t113 47h832q66 0 113-47t47-113v-832q0-66-47-113t-113-47zm288 160v832q0\n    119-84.5 203.5t-203.5 84.5h-832q-119 0-203.5-84.5t-84.5-203.5v-832q0-119\n    84.5-203.5t203.5-84.5h832q119 0 203.5 84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  TextMarker: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M789 559l-170 450q33 0 136.5 2t160.5 2q19 0\n    57-2-87-253-184-452zm-725 1105l2-79q23-7 56-12.5t57-10.5 49.5-14.5 44.5-29\n    31-50.5l237-616 280-724h128q8 14 11 21l205 480q33 78 106 257.5t114 274.5q15\n    34 58 144.5t72 168.5q20 45 35 57 19 15 88 29.5t84 20.5q6 38 6 57 0 5-.5\n    13.5t-.5 12.5q-63 0-190-8t-191-8q-76 0-215 7t-178 8q0-43 4-78l131-28q1 0\n    12.5-2.5t15.5-3.5 14.5-4.5 15-6.5 11-8 9-11\n    2.5-14q0-16-31-96.5t-72-177.5-42-100l-450-2q-26 58-76.5 195.5t-50.5 162.5q0\n    22 14 37.5t43.5 24.5 48.5 13.5 57 8.5 41 4q1 19 1 58 0 9-2 27-58\n    0-174.5-10t-174.5-10q-8 0-26.5 4t-21.5 4q-80 14-188 14z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Crosshairs: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1325 1024h-109q-26 0-45-19t-19-45v-128q0-26\n    19-45t45-19h109q-32-108-112.5-188.5t-188.5-112.5v109q0 26-19 45t-45\n    19h-128q-26 0-45-19t-19-45v-109q-108 32-188.5 112.5t-112.5 188.5h109q26\n    0 45 19t19 45v128q0 26-19 45t-45 19h-109q32 108 112.5 188.5t188.5\n    112.5v-109q0-26 19-45t45-19h128q26 0 45 19t19 45v109q108-32\n    188.5-112.5t112.5-188.5zm339-192v128q0 26-19 45t-45 19h-143q-37 161-154.5\n    278.5t-278.5 154.5v143q0 26-19 45t-45 19h-128q-26\n    0-45-19t-19-45v-143q-161-37-278.5-154.5t-154.5-278.5h-143q-26\n    0-45-19t-19-45v-128q0-26 19-45t45-19h143q37-161\n    154.5-278.5t278.5-154.5v-143q0-26 19-45t45-19h128q26 0 45 19t19 45v143q161\n    37 278.5 154.5t154.5 278.5h143q26 0 45 19t19 45z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Eraser: extend(BASE, {\n    iconContent: `<path transform=\"translate(0,1792) scale(1,-1)\" fill=\"{{color}}\" d=\"M960 1408l336-384h-768l-336 384h768zm1013-1077q15\n    34 9.5 71.5t-30.5 65.5l-896 1024q-38 44-96 44h-768q-38\n    0-69.5-20.5t-47.5-54.5q-15-34-9.5-71.5t30.5-65.5l896-1024q38-44 96-44h768q38\n    0 69.5 20.5t47.5 54.5z\" />`,\n    viewBox: {\n      x: 2048,\n      y: 1792,\n    },\n  }),\n  Magnify: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />`,\n    viewBox: {\n      x: 512,\n      y: 512,\n    },\n  }),\n  Pan: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1411 541l-355 355 355 355 144-144q29-31 70-14 39 17\n    39 59v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39 14-69l144-144-355-355-355\n    355 144 144q31 30 14 69-17 40-59 40h-448q-26 0-45-19t-19-45v-448q0-42 40-59\n    39-17 69 14l144 144 355-355-355-355-144 144q-19 19-45 19-12\n    0-24-5-40-17-40-59v-448q0-26 19-45t45-19h448q42 0 59 40 17 39-14 69l-144\n    144 355 355 355-355-144-144q-31-30-14-69 17-40 59-40h448q26 0 45 19t19\n    45v448q0 42-39 59-13 5-25 5-26 0-45-19z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  Rotate: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 256v448q0 26-19 45t-45 19h-448q-42 0-59-40-17-39\n    14-69l138-138q-148-137-349-137-104 0-198.5 40.5t-163.5 109.5-109.5\n    163.5-40.5 198.5 40.5 198.5 109.5 163.5 163.5 109.5 198.5 40.5q119 0\n    225-52t179-147q7-10 23-12 15 0 25 9l137 138q9 8 9.5 20.5t-7.5 22.5q-109\n    132-264 204.5t-327 72.5q-156 0-298-61t-245-164-164-245-61-298 61-298\n    164-245 245-164 298-61q147 0 284.5 55.5t244.5 156.5l130-129q29-31 70-14\n    39 17 39 59z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  StackScroll: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M24 21v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1zM24 13v2c0\n    0.547-0.453 1-1 1h-22c-0.547 0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547\n    0 1 0.453 1 1zM24 5v2c0 0.547-0.453 1-1 1h-22c-0.547\n    0-1-0.453-1-1v-2c0-0.547 0.453-1 1-1h22c0.547 0 1 0.453 1 1z\" />`,\n    viewBox: {\n      x: 24,\n      y: 28,\n    },\n  }),\n  WindowLevelRegion: extend(BASE, {\n    iconContent: `<path fill=\"{{color}}\" d=\"M1664 416v960q0 119-84.5 203.5t-203.5 84.5h-960q-119\n    0-203.5-84.5t-84.5-203.5v-960q0-119 84.5-203.5t203.5-84.5h960q119 0 203.5\n    84.5t84.5 203.5z\" />`,\n    viewBox: {\n      x: 1792,\n      y: 1792,\n    },\n  }),\n  WindowLevel: extend(BASE, {\n    iconContent: `\n    <path fill=\"{{color}}\" d=\"M14.5,3.5 a1 1 0 0 1 -11,11 Z\" stroke=\"none\" opacity=\"0.8\" />\n    <circle cx=\"9\" cy=\"9\" r=\"8\" fill=\"none\" stroke-width=\"2\" stroke=\"{{color}}\" />`,\n    viewBox: {\n      x: 18,\n      y: 18,\n    },\n  }),\n  Zoom: extend(BASE, {\n    iconContent: `\n  <path fill=\"{{color}}\" d=\"M508.5 481.6l-129-129c-2.3-2.3-5.3-3.5-8.5-3.5h-10.3C395\n    312 416 262.5 416 208 416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c54.5\n    0 104-21 141.1-55.2V371c0 3.2 1.3 6.2 3.5 8.5l129 129c4.7 4.7 12.3 4.7 17\n    0l9.9-9.9c4.7-4.7 4.7-12.3 0-17zM208 384c-97.3 0-176-78.7-176-176S110.7 32 208\n    32s176 78.7 176 176-78.7 176-176 176z\" />\n  <path fill=\"{{color}}\" transform=\"scale(0.22,0.22) translate(1400,0)\" d=\"M1216\n    320q0 26-19 45t-45 19h-128v1024h128q26 0 45 19t19 45-19 45l-256 256q-19\n    19-45 19t-45-19l-256-256q-19-19-19-45t19-45 45-19h128v-1024h-128q-26\n    0-45-19t-19-45 19-45l256-256q19-19 45-19t45 19l256 256q19 19 19 45z\" />`,\n    viewBox: {\n      x: 640,\n      y: 512,\n    },\n  }),\n\n  /*\n   * Segmentation Cursors\n   */\n\n  SegmentationFreeHandEraseInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillInside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandEraseOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationFreeHandFillOutside: extend(BASE, {\n    iconContent: `${SCISSOR_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  SegmentationRectangleEraseInside: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  // Default Rectangle Scissors\n  RectangleScissor: extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'RectangleScissor.ERASE_INSIDE': extend(BASE, {\n    iconContent: `${RECTANGLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  CircleScissor: extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_INSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.ERASE_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${MINUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n\n  'CircleScissor.FILL_OUTSIDE': extend(BASE, {\n    iconContent: `${CIRCLE_ICON} ${PLUS_RECT}`,\n    viewBox: SEGMENTATION_CURSOR_BOUNDARIES,\n  }),\n};\n\n/*\n * Utils\n */\n\nfunction extend(\n  base: SVGCursorDescriptor,\n  values: Record<string, unknown>\n): SVGCursorDescriptor {\n  return Object.assign(Object.create(base), values);\n}\n\n/**\n * Registers a cursor to the list, so that it will be used for the given `toolName`.\n * Overwrites the given cursor if it is already set.\n *\n * @param toolName - The name of the tool to assign a cursor to.\n * @param iconContent - The SVG icon content of the cursor.\n * @param viewBox - The viewBox of the cursor object.\n */\nfunction registerCursor(\n  toolName: string,\n  iconContent: string,\n  viewBox: { x: number; y: number }\n) {\n  CursorSVG[toolName] = extend(BASE, {\n    iconContent,\n    viewBox,\n  });\n}\n\nfunction getDefinedSVGCursorDescriptor(\n  name: string\n): SVGCursorDescriptor | undefined {\n  return CursorSVG[name];\n}\n\n/*\n * Exports\n */\nconst svgCursorNames = Object.keys(CursorSVG);\n\nexport {\n  getDefinedSVGCursorDescriptor,\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n};\n","import {\n  StyleConfig,\n  ToolStyleConfig,\n  StyleSpecifier,\n  AnnotationStyle,\n} from '../../../types/AnnotationStyle';\n\n/**\n * This class handles the configuration of the tool style. You can use it to set\n * the style of a tool at various levels (annotation, viewport, toolGroup, global).\n *\n * The hierarchy of the configuration is as follows (each level falls back to the\n * next level if not specified):\n *\n * 1) Annotation-level styles (with annotationUID)\n *     2) Viewport-level tool styles\n *         - Per-tool: Length on the viewport with viewportId\n *         - Global: All tools on the viewport with viewportId\n *             3) ToolGroup tool styles\n *                 - Per-tool: Angle on toolGroupId in all viewports of the toolGroup\n *                 - Global: All tools in the toolGroupId for all viewports\n *                     4) Default level:\n *                         - Per-tool: Length styles\n *                         - Global: Opinionated styles by CornerstoneJS\n */\nclass ToolStyle {\n  config: StyleConfig;\n\n  constructor() {\n    const defaultConfig = {\n      color: 'rgb(255, 255, 0)',\n      colorHighlighted: 'rgb(0, 255, 0)',\n      colorSelected: 'rgb(0, 220, 0)',\n      colorLocked: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '',\n      shadow: true,\n      textBoxVisibility: true,\n      textBoxFontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n      textBoxFontSize: '14px',\n      textBoxColor: 'rgb(255, 255, 0)',\n      textBoxColorHighlighted: 'rgb(0, 255, 0)',\n      textBoxColorSelected: 'rgb(0, 255, 0)',\n      textBoxColorLocked: 'rgb(255, 255, 0)',\n      textBoxBackground: '',\n      textBoxLinkLineWidth: '1',\n      textBoxLinkLineDash: '2,3',\n      textBoxShadow: true,\n    };\n\n    this._initializeConfig(defaultConfig);\n  }\n\n  /**\n   * It returns the annotation-specific tool styles for the annotation with the given UID\n   * @param annotationUID - The unique identifier of the annotation.\n   * @returns The annotation tool styles for the annotation with the given UID.\n   */\n  getAnnotationToolStyles(annotationUID: string): AnnotationStyle {\n    return this.config.annotations && this.config.annotations[annotationUID];\n  }\n\n  /**\n   * It returns the styles for a given viewport. It includes tool-specific and\n   * global styles (all tools in the viewport)\n   * @param viewportId - The id of the viewport\n   * @returns The viewport tool styles for the given viewport id.\n   */\n  getViewportToolStyles(viewportId: string): ToolStyleConfig {\n    return this.config.viewports && this.config.viewports[viewportId];\n  }\n\n  /**\n   * It returns the tool style for the given toolGroup. It includes tool-specific and\n   * global styles (all tools in the toolGroup)\n   * @param toolGroupId - The id of the toolGroup.\n   * @returns The tool styles for the tool group with the given id.\n   */\n  getToolGroupToolStyles(toolGroupId: string): ToolStyleConfig {\n    return this.config.toolGroups && this.config.toolGroups[toolGroupId];\n  }\n\n  /**\n   * It returns the default tool styles from the config file. It includes tool-specific and\n   * global styles (all tools in all tooLGroups)\n   * @returns The default tool styles.\n   */\n  getDefaultToolStyles(): ToolStyleConfig {\n    return this.config.default;\n  }\n\n  /**\n   * It takes an annotationUID and a style object and sets the styles at\n   * the annotationLevel (highest priority in the hierarchy). The styles is an\n   * object with key value pairs.\n   * @param annotationUID - string - The unique identifier for the annotation.\n   * @param styles - ToolStyles\n   */\n  setAnnotationStyles(annotationUID: string, styles: AnnotationStyle) {\n    let annotationSpecificStyles = this.config.annotations;\n\n    if (!annotationSpecificStyles) {\n      this.config = {\n        ...this.config,\n        annotations: {},\n      };\n\n      annotationSpecificStyles = this.config.annotations;\n    }\n\n    annotationSpecificStyles[annotationUID] = styles;\n  }\n\n  /**\n   * It takes a viewportId and a ToolStyles object, and adds the ToolStyles object\n   * at the viewport level (second highest priority in the hierarchy after the annotation level).\n   * @param viewportId - The id of the viewport\n   * @param styles - style object including tool-specific and/or global styles (All tools in the viewport)\n   */\n  setViewportToolStyles(viewportId: string, styles: ToolStyleConfig) {\n    let viewportSpecificStyles = this.config.viewports;\n\n    if (!viewportSpecificStyles) {\n      this.config = {\n        ...this.config,\n        viewports: {},\n      };\n\n      viewportSpecificStyles = this.config.viewports;\n    }\n\n    viewportSpecificStyles[viewportId] = styles;\n  }\n\n  /**\n   * It takes a toolGroupId and a ToolStyles object, and it adds the ToolStyles object\n   * at the toolGroup level (third highest priority in the hierarchy after the viewport level).\n   * @param toolGroupId - The id of the toolGroup\n   * @param styles - style object including tool-specific (in all viewports of the toolGroup) and/or\n   * global styles (All tools in the toolGroup for all viewports)\n   */\n  setToolGroupToolStyles(toolGroupId: string, styles: ToolStyleConfig) {\n    let toolGroupSpecificStyles = this.config.toolGroups;\n\n    if (!toolGroupSpecificStyles) {\n      this.config = {\n        ...this.config,\n        toolGroups: {},\n      };\n\n      toolGroupSpecificStyles = this.config.toolGroups;\n    }\n\n    toolGroupSpecificStyles[toolGroupId] = styles;\n  }\n\n  /**\n   * Sets the default tool styles for the editor. It overrides the default styles for all tools.\n   * @param styles - style object including tool-specific (a tool in all toolGroups) and/or\n   * global styles (All tools in all tooLGroups)\n   */\n  setDefaultToolStyles(styles: ToolStyleConfig) {\n    this.config.default = styles;\n  }\n\n  /**\n   * It returns the value for a given style key, based on the provided specifications.\n   * It starts by looking at the annotation-specific styles, then at the viewport-specific styles,\n   * then at the toolGroup-specific styles, and finally at the default styles.\n   * @param styleKey - The key of the style.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met\n   * @returns The value for the given style key.\n   */\n  getStyleProperty(toolStyle: string, specifications: StyleSpecifier) {\n    const { annotationUID, viewportId, toolGroupId, toolName } = specifications;\n\n    return this._getToolStyle(\n      toolStyle,\n      annotationUID,\n      viewportId,\n      toolGroupId,\n      toolName\n    );\n  }\n\n  private _getToolStyle(\n    property: string,\n    annotationUID: string,\n    viewportId: string,\n    toolGroupId: string,\n    toolName: string\n  ) {\n    if (annotationUID) {\n      const annotationToolStyles = this.getAnnotationToolStyles(annotationUID);\n\n      if (annotationToolStyles) {\n        // check first in the toolSpecific styles\n        if (annotationToolStyles[property] !== undefined) {\n          return annotationToolStyles[property];\n        }\n      }\n    }\n\n    if (viewportId) {\n      const viewportToolStyles = this.getViewportToolStyles(viewportId);\n\n      if (viewportToolStyles) {\n        // check if we have the viewportId specific style\n        // check first in the toolSpecific styles\n        if (\n          viewportToolStyles[toolName] &&\n          viewportToolStyles[toolName][property] !== undefined\n        ) {\n          return viewportToolStyles[toolName][property];\n        }\n\n        // check if we have the style in the viewport specific global viewportSpecificStyles\n        if (\n          viewportToolStyles.global &&\n          viewportToolStyles.global[property] !== undefined\n        ) {\n          return viewportToolStyles.global[property];\n        }\n      }\n    }\n\n    if (toolGroupId) {\n      const toolGroupToolStyles = this.getToolGroupToolStyles(toolGroupId);\n\n      if (toolGroupToolStyles) {\n        // check first in the toolSpecific styles\n        if (\n          toolGroupToolStyles[toolName] &&\n          toolGroupToolStyles[toolName][property] !== undefined\n        ) {\n          return toolGroupToolStyles[toolName][property];\n        }\n\n        // check if we have the style in the toolGroup specific global styles\n        if (\n          toolGroupToolStyles.global &&\n          toolGroupToolStyles.global[property] !== undefined\n        ) {\n          return toolGroupToolStyles.global[property];\n        }\n      }\n    }\n\n    const globalStyles = this.getDefaultToolStyles();\n\n    if (\n      globalStyles[toolName] &&\n      globalStyles[toolName][property] !== undefined\n    ) {\n      return globalStyles[toolName][property];\n    }\n\n    if (globalStyles.global && globalStyles.global[property] !== undefined) {\n      return globalStyles.global[property];\n    }\n  }\n\n  private _initializeConfig(config) {\n    const toolStyles = {};\n    for (const name in config) {\n      toolStyles[name] = config[name];\n    }\n\n    this.config = {\n      default: {\n        global: toolStyles as AnnotationStyle,\n      },\n    };\n  }\n}\n\nconst toolStyle = new ToolStyle();\n\nexport default toolStyle;\n","import { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport toolStyle from './ToolStyle';\n\n/**\n * Build a list of hierarchal property names in ascending order of priority\n * @param property - The base property name -- e.g., 'color'\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns A list of property names\n */\nfunction getHierarchalPropertyStyles(\n  property: string,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string[] {\n  const list = [`${property}`];\n  if (state) {\n    list.push(`${list[0]}${state}`);\n  }\n  if (mode) {\n    list.push(`${list[list.length - 1]}${mode}`);\n  }\n  return list;\n}\n\n/**\n * Get the value of a style property from the ToolStyle config\n * @param property - The name of the property to get.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - The state of the tool (Default, Locked etc.)\n * @param mode - The current tool mode. (Active, Passive etc.)\n * @returns The value of the property.\n */\nfunction getStyleProperty(\n  property: string,\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  // Hierarchal property styles is a list of property names with priority in ascending\n  // order like: ['color', 'colorSelected', 'colorSelectedActive'], if in the toolStyle\n  // config, the `colorSelectedActive` property is defined, it will be used, otherwise\n  // the `colorSelected` property will be used, and if that is not defined, the `color`\n  // property will be used. This is done to ensure that the most specific property is used.\n  // Thus, we attempt resolving property names in reverse order\n  const alternatives = getHierarchalPropertyStyles(property, state, mode);\n  for (let i = alternatives.length - 1; i >= 0; --i) {\n    const style = toolStyle.getStyleProperty(alternatives[i], styleSpecifier);\n    if (style !== undefined) {\n      return style;\n    }\n  }\n}\n\nexport { getStyleProperty };\n","import { ToolModes, AnnotationStyleStates } from '../enums';\nimport MouseCursor from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport { getDefinedSVGCursorDescriptor } from './SVGCursorDescriptor';\nimport { getStyleProperty } from '../stateManagement/annotation/config/helpers';\n\nimport type { StyleSpecifier } from '../types/AnnotationStyle';\nimport type { SVGCursorDescriptor } from '../types';\n\nconst PROPERTY = 'color';\nconst STATE = AnnotationStyleStates.Highlighted;\nconst MODE = ToolModes.Active;\n\nexport default class SVGMouseCursor extends ImageMouseCursor {\n  constructor(\n    url: string,\n    x?: number,\n    y?: number,\n    name?: string | undefined,\n    fallback?: MouseCursor | undefined\n  ) {\n    super(url, x, y, name, fallback);\n  }\n\n  /**\n   * Get a shared instance of the SVGMouseCursor class satisfying the given parameters.\n   *\n   * @param name - The name of the cursor (defined in SVGCursorDescriptor.ts);\n   * @param pointer - Should be true to use the version of the cursor containing\n   * a mouse pointer. Defaults to false (which does not add a pointer to the cursor);\n   * @param color - The color of the cursor. Defaults to tool.style.colorHighlightedActive;\n   * @returns a SVGMouseCursor instance or\n   * undefined if no SVG cursor descriptor was found with the given name;\n   */\n  static getDefinedCursor(\n    name: string,\n    pointer = false,\n    color?: string\n  ): MouseCursor {\n    if (!color) {\n      color = getStyleProperty(PROPERTY, {} as StyleSpecifier, STATE, MODE);\n    }\n    const urn = getCursorURN(name, pointer, color);\n    let cursor = super.getDefinedCursor(urn);\n    if (!cursor) {\n      const descriptor = getDefinedSVGCursorDescriptor(name);\n      if (descriptor) {\n        cursor = createSVGMouseCursor(\n          descriptor,\n          urn,\n          pointer,\n          color,\n          super.getDefinedCursor('default')\n        );\n        super.setDefinedCursor(urn, cursor);\n      }\n    }\n    return cursor;\n  }\n}\n\n/*\n * Helpers\n */\n\nfunction format(template: string, dictionary: Record<string, unknown>): string {\n  const dict = Object(dictionary);\n  const defined = Object.prototype.hasOwnProperty.bind(dict);\n  return (template + '').replace(/\\{\\{(\\w+)\\}\\}/g, (match, key) => {\n    return defined(key) ? dict[key] + '' : '';\n  });\n}\n\nfunction getCursorURN(name: string, pointer: boolean, color: string) {\n  const type = pointer ? 'pointer' : 'cursor';\n  return `${type}:${name}/${color}`;\n}\n\nfunction createSVGMouseCursor(\n  descriptor: SVGCursorDescriptor,\n  name: string,\n  pointer: boolean,\n  color: string,\n  fallback: MouseCursor\n): SVGMouseCursor {\n  const { x, y } = descriptor.mousePoint;\n  return new SVGMouseCursor(\n    createSVGIconUrl(descriptor, pointer, { color }),\n    x,\n    y,\n    name,\n    fallback\n  );\n}\n\nfunction createSVGIconUrl(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): string {\n  return URL.createObjectURL(createSVGIconBlob(descriptor, pointer, options));\n}\n\nfunction createSVGIconBlob(\n  descriptor: SVGCursorDescriptor,\n  pointer: boolean,\n  options: Record<string, unknown>\n): Blob {\n  const svgString = (pointer ? createSVGIconWithPointer : createSVGIcon)(\n    descriptor,\n    options\n  );\n  return new Blob([svgString], { type: 'image/svg+xml' });\n}\n\nfunction createSVGIcon(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n): string {\n  const { iconContent, iconSize, viewBox } = descriptor;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${iconSize}\" height=\"${iconSize}\" viewBox=\"0 0\n      ${viewBox.x} ${viewBox.y}\">\n      ${iconContent}\n    </svg>`;\n  return format(svgString, options);\n}\n\nfunction createSVGIconWithPointer(\n  descriptor: SVGCursorDescriptor,\n  options: Record<string, unknown>\n) {\n  const { iconContent, iconSize, viewBox, mousePointerGroupString } =\n    descriptor;\n  const scale = iconSize / Math.max(viewBox.x, viewBox.y, 1);\n  const svgSize = 16 + iconSize;\n  const svgString = `\n    <svg data-icon=\"cursor\" role=\"img\" xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"${svgSize}\" height=\"${svgSize}\" viewBox=\"0 0 ${svgSize} ${svgSize}\">\n      <g>${mousePointerGroupString}</g>\n      <g transform=\"translate(16, 16) scale(${scale})\">${iconContent}</g>\n    </svg>`;\n  return format(svgString, options);\n}\n","import { MouseCursor } from '.';\n\nconst ELEMENT_CURSORS_MAP = Symbol('ElementCursorsMap');\n\n/*\n * Public Methods\n */\n\nfunction initElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  _getElementCursors(element)[0] = cursor;\n  _setElementCursor(element, cursor);\n}\n\nfunction _setElementCursor(\n  element: HTMLDivElement,\n  cursor: MouseCursor | null\n): void {\n  const cursors = _getElementCursors(element);\n  cursors[1] = cursors[0];\n  cursors[0] = cursor;\n  element.style.cursor = (\n    cursor instanceof MouseCursor\n      ? cursor\n      : MouseCursor.getDefinedCursor('auto')\n  ).getStyleProperty();\n}\n\nfunction resetElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, _getElementCursors(element)[1]);\n}\n\nfunction hideElementCursor(element: HTMLDivElement): void {\n  _setElementCursor(element, MouseCursor.getDefinedCursor('none'));\n}\n\n/*\n * Helpers\n */\n\nfunction _getElementCursors(\n  element: HTMLDivElement\n): [MouseCursor | null, MouseCursor | null] {\n  let map = _getElementCursors[ELEMENT_CURSORS_MAP];\n  if (!(map instanceof WeakMap)) {\n    map = new WeakMap();\n    Object.defineProperty(_getElementCursors, ELEMENT_CURSORS_MAP, {\n      value: map,\n    });\n  }\n  let cursors = map.get(element);\n  if (!cursors) {\n    cursors = [null, null];\n    map.set(element, cursors);\n  }\n  return cursors;\n}\n\n/*\n * Exports\n */\nexport {\n  initElementCursor,\n  resetElementCursor,\n  hideElementCursor,\n  _setElementCursor as setElementCursor,\n};\n","import { MouseBindings, ToolModes } from '../../enums';\nimport cloneDeep from 'lodash.clonedeep';\nimport get from 'lodash.get';\nimport {\n  triggerEvent,\n  eventTarget,\n  getRenderingEngine,\n  getRenderingEngines,\n  getEnabledElementByIds,\n  Settings,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { Events } from '../../enums';\nimport {\n  ToolActivatedEventDetail,\n  ToolModeChangedEventDetail,\n} from '../../types/EventTypes';\nimport { ToolGroupManager, state } from '../index';\nimport {\n  IToolBinding,\n  IToolClassReference,\n  IToolGroup,\n  SetToolBindingsType,\n  ToolOptionsType,\n  ToolConfiguration,\n} from '../../types';\n\nimport { MouseCursor, SVGMouseCursor } from '../../cursors';\nimport { initElementCursor } from '../../cursors/elementCursor';\n\nconst { Active, Passive, Enabled, Disabled } = ToolModes;\n\n/**\n * ToolGroup class which is a container for tools and their modes and states.\n * In Cornerstone3DTools, you need to create a tool group in order to use the\n * tools. ToolGroup is a way to share tool configuration, state (enabled, disabled, etc.)\n * across a set of viewports. Tools can set to be activated, enabled or disabled\n * in a toolGroup. You should not directly instantiate a ToolGroup. You need to use\n * ToolGroupManager helpers to create a new toolGroup or get a reference to an existing toolGroup.\n *\n * ```js\n * const toolGroup = csTools.ToolGroupManager.createToolGroup('toolGroupId')\n * ```\n */\nexport default class ToolGroup implements IToolGroup {\n  id: string;\n  viewportsInfo = [];\n  toolOptions = {};\n  /**\n   * Options used for restoring a tool\n   */\n  restoreToolOptions = {};\n  _toolInstances = {};\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  /**\n   * Get the viewport IDs of all the viewports in the current viewport\n   * @returns An array of viewport IDs.\n   */\n  getViewportIds(): string[] {\n    return this.viewportsInfo.map(({ viewportId }) => viewportId);\n  }\n\n  /**\n   * Returns the toolGroup viewports info which is an array of {viewportId, renderingEngineId}\n   */\n  getViewportsInfo(): Array<Types.IViewportId> {\n    return this.viewportsInfo.slice();\n  }\n\n  /**\n   * Get the tool instance for a given tool name in the toolGroup\n   * @param toolName - The name of the tool.\n   * @returns A tool instance.\n   */\n  public getToolInstance(toolInstanceName: string) {\n    const toolInstance = this._toolInstances[toolInstanceName];\n    if (!toolInstance) {\n      console.warn(\n        `'${toolInstanceName}' is not registered with this toolGroup (${this.id}).`\n      );\n      return;\n    }\n\n    return toolInstance;\n  }\n  /**\n   * Add a tool to the tool group with the given tool name and tool configuration.\n   * Note that adding a tool to a tool group will not automatically set the tool\n   * to be active. You must call setToolActive or setToolPassive and other methods\n   * to set the tool to be active or passive or in other states.\n   *\n   * @param toolName - string\n   * @param configuration - Tool configuration objects and a custom statistics calculator if needed\n   */\n  addTool(toolName: string, configuration: ToolConfiguration = {}): void {\n    const toolDefinition = state.tools[toolName];\n    const hasToolName = typeof toolName !== 'undefined' && toolName !== '';\n    const localToolInstance = this.toolOptions[toolName];\n\n    if (!hasToolName) {\n      console.warn(\n        'Tool with configuration did not produce a toolName: ',\n        configuration\n      );\n      return;\n    }\n\n    if (!toolDefinition) {\n      console.warn(\n        `'${toolName}' is not registered with the library. You need to use cornerstoneTools.addTool to register it.`\n      );\n      return;\n    }\n\n    if (localToolInstance) {\n      console.warn(\n        `'${toolName}' is already registered for ToolGroup ${this.id}.`\n      );\n      return;\n    }\n\n    // Should these be renamed higher up, so we don't have to alias?\n    // Wrap in try-catch so 3rd party tools don't explode?\n    const { toolClass: ToolClass } = toolDefinition;\n\n    const toolProps = {\n      name: toolName,\n      toolGroupId: this.id,\n      configuration,\n    };\n\n    const instantiatedTool = new ToolClass(toolProps);\n\n    // API instead of directly exposing schema?\n    // Maybe not here, but feels like a \"must\" for any method outside of the ToolGroup itself\n    this._toolInstances[toolName] = instantiatedTool;\n  }\n\n  public addToolInstance(\n    toolName: string,\n    parentClassName: string,\n    configuration = {}\n  ): void {\n    let ToolClassToUse = state.tools[toolName]\n      ?.toolClass as IToolClassReference;\n\n    if (!ToolClassToUse) {\n      // get parent class constructor\n      const ParentClass = state.tools[parentClassName]\n        .toolClass as IToolClassReference;\n\n      // Todo: could not find a way to make this work with typescript\n      // @ts-ignore\n      class ToolInstance extends ParentClass {}\n      // @ts-ignore\n      ToolInstance.toolName = toolName;\n      // @ts-ignore\n      ToolClassToUse = ToolInstance;\n\n      state.tools[toolName] = {\n        toolClass: ToolInstance as IToolClassReference,\n      };\n    }\n\n    // add the tool to the toolGroup\n    // @ts-ignore\n    this.addTool(ToolClassToUse.toolName, configuration);\n  }\n\n  //   class InstanceTool extends parentClass;\n  // InstanceTool.constructor.toolName = name;\n  // addTool(InstanceTool,configuration)\n  /**\n   * Add a viewport to the ToolGroup. It accepts viewportId and optional\n   * renderingEngineId parameter. If renderingEngineId is not provided,\n   * it checks if cornerstone-core has more than one renderingEngine; If so,\n   * it will throw an error. If cornerstone-core has only one renderingEngine,\n   * it will use that renderingEngine.\n   *\n   * @param viewportId - The unique identifier for the viewport.\n   * @param renderingEngineId - The rendering engine to use.\n   */\n  public addViewport(viewportId: string, renderingEngineId?: string): void {\n    const renderingEngines = getRenderingEngines();\n\n    if (!renderingEngineId && renderingEngines.length > 1) {\n      throw new Error(\n        'You must specify a renderingEngineId when there are multiple rendering engines.'\n      );\n    }\n\n    const renderingEngineUIDToUse = renderingEngineId || renderingEngines[0].id;\n\n    // Don't overwrite if it already exists\n    if (\n      !this.viewportsInfo.some(({ viewportId: vpId }) => vpId === viewportId)\n    ) {\n      this.viewportsInfo.push({\n        viewportId,\n        renderingEngineId: renderingEngineUIDToUse,\n      });\n    }\n\n    // Handle the newly added viewport's mouse cursor\n    const toolName = this.getActivePrimaryMouseButtonTool();\n\n    const runtimeSettings = Settings.getRuntimeSettings();\n    if (runtimeSettings.get('useCursors')) {\n      this.setViewportsCursorByToolName(toolName);\n    }\n  }\n\n  /**\n   * Removes viewport from the toolGroup. If only renderingEngineId is defined\n   * it removes all the viewports with the same renderingEngineId, if viewportId\n   * is also provided, it will remove that specific viewport from the ToolGroup.\n   *\n   * @param renderingEngineId - renderingEngine id\n   * @param viewportId - viewport id\n   */\n  public removeViewports(renderingEngineId: string, viewportId?: string): void {\n    const indices = [];\n\n    this.viewportsInfo.forEach((vpInfo, index) => {\n      let match = false;\n      if (vpInfo.renderingEngineId === renderingEngineId) {\n        match = true;\n\n        if (viewportId && vpInfo.viewportId !== viewportId) {\n          match = false;\n        }\n      }\n      if (match) {\n        indices.push(index);\n      }\n    });\n\n    if (indices.length) {\n      // Note: Traverse the array backwards, such that when we remove items we\n      // do not immediately mess up our loop indicies.\n      for (let i = indices.length - 1; i >= 0; i--) {\n        this.viewportsInfo.splice(indices[i], 1);\n      }\n    }\n  }\n\n  public setActiveStrategy(toolName: string, strategyName: string) {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool configuration.`\n      );\n\n      return;\n    }\n\n    toolInstance.setActiveStrategy(strategyName);\n  }\n\n  setToolMode(\n    toolName: string,\n    mode: ToolModes,\n    options = {} as SetToolBindingsType\n  ): void {\n    if (!toolName) {\n      console.warn('setToolMode: toolName must be defined');\n      return;\n    }\n\n    if (mode === ToolModes.Active) {\n      this.setToolActive(\n        toolName,\n        options || this.restoreToolOptions[toolName]\n      );\n      return;\n    }\n\n    if (mode === ToolModes.Passive) {\n      this.setToolPassive(toolName);\n      return;\n    }\n\n    if (mode === ToolModes.Enabled) {\n      this.setToolEnabled(toolName);\n      return;\n    }\n\n    if (mode === ToolModes.Disabled) {\n      this.setToolDisabled(toolName);\n      return;\n    }\n\n    console.warn('setToolMode: mode must be defined');\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Active. This means the tool\n   * can be actively used by the defined bindings (e.g., Mouse primary click)\n   *\n   * - Can be actively used by mouse/touch events mapped to its `ToolBinding`s.\n   * - Can add data if an annotation tool.\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   *\n   * @param toolName - tool name\n   * @param toolBindingsOptions - tool bindings\n   */\n  public setToolActive(\n    toolName: string,\n    toolBindingsOptions = {} as SetToolBindingsType\n  ): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    if (!toolInstance) {\n      console.warn(\n        `'${toolName}' instance ${toolInstance} is not registered with this toolGroup, can't set tool mode.`\n      );\n      return;\n    }\n\n    const prevBindings: IToolBinding[] = this.toolOptions[toolName]\n      ? this.toolOptions[toolName].bindings\n      : [];\n\n    const newBindings = toolBindingsOptions.bindings\n      ? toolBindingsOptions.bindings\n      : [];\n\n    // combine the new bindings with the previous bindings to avoid duplicates\n    // it allows duplicated mouse buttons as long as they don't have same\n    // modifier keys.\n    const bindingsToUse = [...prevBindings, ...newBindings].reduce(\n      (unique, binding) => {\n        const TouchBinding = binding.numTouchPoints !== undefined;\n        const MouseBinding = binding.mouseButton !== undefined;\n\n        if (\n          !unique.some((obj) => hasSameBinding(obj, binding)) &&\n          (TouchBinding || MouseBinding)\n        ) {\n          unique.push(binding);\n        }\n        return unique;\n      },\n      []\n    );\n\n    // We should not override the bindings if they are already set\n    const toolOptions: ToolOptionsType = {\n      bindings: bindingsToUse,\n      mode: Active,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    this._toolInstances[toolName].mode = Active;\n\n    // reset the mouse cursor if tool has left click binding\n    const runtimeSettings = Settings.getRuntimeSettings();\n    const useCursor = runtimeSettings.get('useCursors');\n\n    if (this._hasMousePrimaryButtonBinding(toolBindingsOptions) && useCursor) {\n      this.setViewportsCursorByToolName(toolName);\n    } else {\n      // reset to default cursor only if there is no other tool with primary binding\n      const activeToolIdentifier = this.getActivePrimaryMouseButtonTool();\n      if (!activeToolIdentifier && useCursor) {\n        const cursor = MouseCursor.getDefinedCursor('default');\n        this._setCursorForViewports(cursor);\n      }\n    }\n\n    if (typeof toolInstance.onSetToolActive === 'function') {\n      toolInstance.onSetToolActive();\n    }\n    this._renderViewports();\n\n    const eventDetail: ToolActivatedEventDetail = {\n      toolGroupId: this.id,\n      toolName,\n      toolBindingsOptions,\n    };\n\n    triggerEvent(eventTarget, Events.TOOL_ACTIVATED, eventDetail);\n    this._triggerToolModeChangedEvent(toolName, Active, toolBindingsOptions);\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Passive.\n   *\n   * - Can be passively interacted by grabbing a tool or its handles.\n   * - Renders data if the tool has a `renderAnnotation` method.\n   *\n   * @param toolName - tool name\n   */\n  public setToolPassive(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    // We should only remove the primary button bindings and keep\n    // the other ones (Zoom on right click)\n    const prevToolOptions = this.getToolOptions(toolName);\n    const toolOptions = Object.assign(\n      {\n        bindings: prevToolOptions ? prevToolOptions.bindings : [],\n      },\n      prevToolOptions,\n      {\n        mode: Passive,\n      }\n    );\n\n    const defaultMousePrimary = this.getDefaultMousePrimary();\n\n    // Remove the primary button bindings without modifiers, if they exist\n    toolOptions.bindings = toolOptions.bindings.filter(\n      (binding) =>\n        binding.mouseButton !== defaultMousePrimary || binding.modifierKey\n    );\n    // If there are other bindings, set the tool to be active\n    let mode = Passive;\n    if (toolOptions.bindings.length !== 0) {\n      mode = Active;\n      toolOptions.mode = mode;\n    }\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = mode;\n\n    if (typeof toolInstance.onSetToolPassive === 'function') {\n      toolInstance.onSetToolPassive();\n    }\n    this._renderViewports();\n\n    // It would make sense to use `toolInstance.mode` as mode when setting a tool\n    // as passive because it can still be actived in the end but `Passive` must\n    // be used when synchronizing ToolGroups so that other ToolGroups can take the\n    // same action (update tool bindings). Should the event have two different modes\n    // to handle this special case?\n    this._triggerToolModeChangedEvent(toolName, Passive);\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Enabled.\n   *\n   * - Renders data if the tool has a `renderAnnotation` method..\n   *\n   * @param toolName - tool name\n   */\n  public setToolEnabled(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    const toolOptions = {\n      bindings: [],\n      mode: Enabled,\n    };\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = Enabled;\n\n    if (typeof toolInstance.onSetToolEnabled === 'function') {\n      toolInstance.onSetToolEnabled();\n    }\n\n    this._renderViewports();\n    this._triggerToolModeChangedEvent(toolName, Enabled);\n  }\n\n  /**\n   * Set the tool mode on the toolGroup to be Disabled.\n   *\n   * - Annotation does not render.\n   *\n   * @param toolName - tool name\n   */\n  public setToolDisabled(toolName: string): void {\n    const toolInstance = this._toolInstances[toolName];\n\n    if (toolInstance === undefined) {\n      console.warn(\n        `Tool ${toolName} not added to toolGroup, can't set tool mode.`\n      );\n\n      return;\n    }\n\n    const toolOptions = {\n      bindings: [],\n      mode: Disabled,\n    };\n\n    this.restoreToolOptions[toolName] = this.toolOptions[toolName];\n\n    this.toolOptions[toolName] = toolOptions;\n    toolInstance.mode = Disabled;\n\n    if (typeof toolInstance.onSetToolDisabled === 'function') {\n      toolInstance.onSetToolDisabled();\n    }\n    this._renderViewports();\n    this._triggerToolModeChangedEvent(toolName, Disabled);\n  }\n\n  /**\n   * Get the options for a given tool\n   * @param toolName - The name of the tool.\n   * @returns the tool options\n   */\n  public getToolOptions(toolName: string): ToolOptionsType {\n    const toolOptionsForTool = this.toolOptions[toolName];\n\n    if (toolOptionsForTool === undefined) {\n      return;\n    }\n\n    return toolOptionsForTool;\n  }\n\n  /**\n   * Find the name of the tool that is Active and has a primary button binding\n   * (Mouse primary click)\n   *\n   * @returns The name of the tool\n   */\n  public getActivePrimaryMouseButtonTool(): string {\n    return Object.keys(this.toolOptions).find((toolName) => {\n      const toolOptions = this.toolOptions[toolName];\n      return (\n        toolOptions.mode === Active &&\n        this._hasMousePrimaryButtonBinding(toolOptions)\n      );\n    });\n  }\n\n  public setViewportsCursorByToolName(\n    toolName: string,\n    strategyName?: string\n  ): void {\n    const cursor = this._getCursor(toolName, strategyName);\n\n    this._setCursorForViewports(cursor);\n  }\n\n  private _getCursor(toolName: string, strategyName?: string): MouseCursor {\n    let cursorName;\n    let cursor;\n\n    if (strategyName) {\n      // Try combinations with strategyName first:\n      // Try with toolName and toolInstanceName first.\n      cursorName = `${toolName}.${strategyName}`;\n\n      cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n      if (cursor) {\n        return cursor;\n      }\n    }\n\n    // Try with toolName and toolInstanceName first.\n    cursorName = `${toolName}`;\n\n    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n    if (cursor) {\n      return cursor;\n    }\n\n    // Try with just toolName.\n    cursorName = toolName;\n\n    cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n\n    if (cursor) {\n      return cursor;\n    }\n\n    return MouseCursor.getDefinedCursor('default');\n  }\n\n  _setCursorForViewports(cursor: MouseCursor): void {\n    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const { viewport } = enabledElement;\n      initElementCursor(viewport.element, cursor);\n    });\n  }\n\n  /**\n   * Set a configuration of a tool by the given toolName.\n   * Use overwrite as true in case you want to overwrite any existing configuration (be careful, depending on config change it might break the annotation flow).\n   */\n  public setToolConfiguration(\n    toolName: string,\n    configuration: ToolConfiguration,\n    overwrite?: boolean\n  ): boolean {\n    if (this._toolInstances[toolName] === undefined) {\n      console.warn(\n        `Tool ${toolName} not present, can't set tool configuration.`\n      );\n      return false;\n    }\n\n    let _configuration;\n\n    if (overwrite) {\n      _configuration = configuration;\n    } else {\n      // We should not deep copy here, it is the job of the application to\n      // deep copy the configuration before passing it to the toolGroup, otherwise\n      // some strange appending behaviour happens for the arrays\n      _configuration = Object.assign(\n        this._toolInstances[toolName].configuration,\n        configuration\n      );\n    }\n\n    this._toolInstances[toolName].configuration = _configuration;\n\n    this._renderViewports();\n\n    return true;\n  }\n\n  /**\n   * Returns the default mouse primary button.\n   *\n   */\n  public getDefaultMousePrimary(): MouseBindings {\n    return MouseBindings.Primary;\n  }\n\n  /**\n   * Get the configuration of tool. It returns only the config for the given path (in case exists).\n   * ConfigurationPath is the the path of the property to get separated by '.'.\n   *\n   * @example\n   * getToolConfiguration('LengthTool', 'firstLevel.secondLevel')\n   * // get from LengthTool instance the configuration value as being LengthToolInstance[configuration][firstLevel][secondLevel]\n   */\n  getToolConfiguration(toolName: string, configurationPath: string): any {\n    if (this._toolInstances[toolName] === undefined) {\n      console.warn(\n        `Tool ${toolName} not present, can't set tool configuration.`\n      );\n      return;\n    }\n\n    const _configuration = get(\n      this._toolInstances[toolName].configuration,\n      configurationPath\n    );\n\n    return cloneDeep(_configuration);\n  }\n\n  /**\n   *\n   * @param newToolGroupId - Id of the new (clone) tool group\n   * @param fnToolFilter - Function to filter which tools from this tool group\n   * should be added to the new (clone) one. Example: only annotations tools\n   * can be filtered and added to the new tool group.\n   * @returns A new tool group that is a clone of this one\n   */\n  public clone(\n    newToolGroupId,\n    fnToolFilter: (toolName: string) => void = null\n  ): IToolGroup {\n    let toolGroup = ToolGroupManager.getToolGroup(newToolGroupId);\n\n    if (toolGroup) {\n      console.warn(`ToolGroup ${newToolGroupId} already exists`);\n      return toolGroup;\n    }\n\n    toolGroup = ToolGroupManager.createToolGroup(newToolGroupId);\n    fnToolFilter = fnToolFilter ?? (() => true);\n\n    Object.keys(this._toolInstances)\n      .filter(fnToolFilter)\n      .forEach((toolName) => {\n        const sourceToolInstance = this._toolInstances[toolName];\n        const sourceToolOptions = this.toolOptions[toolName];\n        const sourceToolMode = sourceToolInstance.mode;\n\n        toolGroup.addTool(toolName);\n\n        (toolGroup as unknown as ToolGroup).setToolMode(\n          toolName,\n          sourceToolMode,\n          {\n            bindings: sourceToolOptions.bindings ?? [],\n          }\n        );\n      });\n\n    return toolGroup;\n  }\n\n  /**\n   * Check if the tool binding is set to be primary mouse button.\n   * @param toolOptions - The options for the tool mode.\n   * @returns A boolean value.\n   */\n  private _hasMousePrimaryButtonBinding(toolOptions) {\n    const defaultMousePrimary = this.getDefaultMousePrimary();\n\n    return toolOptions?.bindings?.some(\n      (binding) =>\n        binding.mouseButton === defaultMousePrimary &&\n        binding.modifierKey === undefined\n    );\n  }\n\n  /**\n   * It re-renders the viewports in the toolGroup\n   */\n  private _renderViewports(): void {\n    this.viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      getRenderingEngine(renderingEngineId).renderViewport(viewportId);\n    });\n  }\n\n  /**\n   * Trigger ToolModeChangedEvent when changing the tool mode\n   * @param toolName - Tool name\n   * @param mode - Tool mode\n   * @param toolBindingsOptions - Binding options used when a tool is activated\n   */\n  private _triggerToolModeChangedEvent(\n    toolName: string,\n    mode: ToolModes,\n    toolBindingsOptions?: SetToolBindingsType\n  ): void {\n    const eventDetail: ToolModeChangedEventDetail = {\n      toolGroupId: this.id,\n      toolName,\n      mode,\n      toolBindingsOptions,\n    };\n\n    triggerEvent(eventTarget, Events.TOOL_MODE_CHANGED, eventDetail);\n  }\n}\n\nfunction hasSameBinding(\n  binding1: IToolBinding,\n  binding2: IToolBinding\n): boolean {\n  if (binding1.mouseButton !== binding2.mouseButton) {\n    return false;\n  }\n\n  return binding1.modifierKey === binding2.modifierKey;\n}\n","import { state } from '../index';\nimport ToolGroup from './ToolGroup';\nimport { IToolGroup } from '../../types';\n\n/**\n * Create a new tool group with the given name. ToolGroups are the new way\n * in Cornerstone3DTools to share tool configuration, state (enabled, disabled, etc.)\n * across a set of viewports.\n *\n * @param toolGroupId - The unique ID of the tool group.\n * @returns A reference to the tool group that was created.\n */\nfunction createToolGroup(toolGroupId: string): IToolGroup | undefined {\n  // Exit early if ID conflict\n  const toolGroupWithIdExists = state.toolGroups.some(\n    (tg) => tg.id === toolGroupId\n  );\n\n  if (toolGroupWithIdExists) {\n    console.warn(`'${toolGroupId}' already exists.`);\n    return;\n  }\n\n  const toolGroup = new ToolGroup(toolGroupId);\n\n  // Update state\n  state.toolGroups.push(toolGroup);\n\n  // Return reference\n  return toolGroup;\n}\n\nexport default createToolGroup;\n","import { state } from '../index';\nimport { IToolGroup } from '../../types';\n\n/**\n * Return the array of tool groups\n * @returns An array of tool groups.\n */\nfunction getAllToolGroups(): Array<IToolGroup> {\n  return state.toolGroups;\n}\n\nexport default getAllToolGroups;\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera by updating all camera\n * values.  See also zoomPanSyncCallback\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default function cameraSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  cameraModifiedEvent: CustomEvent\n): void {\n  const { camera } = cameraModifiedEvent.detail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n\n  tViewport.setCamera(camera);\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport cameraSyncCallback from '../callbacks/cameraSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createCameraPositionSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const cameraPositionSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    cameraSyncCallback\n  );\n\n  return cameraPositionSynchronizer;\n}\n","import {\n  BaseVolumeViewport,\n  getRenderingEngine,\n  StackViewport,\n  Types,\n} from '@cornerstonejs/core';\n\n/**\n * Synchronizer callback to synchronize the voi of volumeActors of identical volumes\n * in different viewports.\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport.\n * @param voiModifiedEvent - The VOI_MODIFIED event.\n * @param options - Options for the synchronizer.\n */\nexport default function voiSyncCallback(\n  synchronizerInstance,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId,\n  voiModifiedEvent: Types.EventTypes.VoiModifiedEvent,\n  options?: any\n): void {\n  const eventDetail = voiModifiedEvent.detail;\n  const { volumeId, range, invertStateChanged, invert } = eventDetail;\n\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `Rendering Engine does not exist: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const tProperties:\n    | Types.VolumeViewportProperties\n    | Types.StackViewportProperties = {\n    voiRange: range,\n  };\n\n  if (options?.syncInvertState && invertStateChanged) {\n    tProperties.invert = invert;\n  }\n\n  if (tViewport instanceof BaseVolumeViewport) {\n    tViewport.setProperties(tProperties, volumeId);\n  } else if (tViewport instanceof StackViewport) {\n    tViewport.setProperties(tProperties);\n  } else {\n    throw new Error('Viewport type not supported.');\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport voiSyncCallback from '../callbacks/voiSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\ntype VOISynchronizerOptions = {\n  syncInvertState: boolean;\n};\n\n/**\n * A helper that creates a new `Synchronizer`\n * which listens to the `VOI_MODIFIED` rendering event and calls the `voiSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @param options - The options for the synchronizer. By default the voi\n * synchronizer will also sync the invert state of the volume, but this can be\n * disabled by setting `syncInvertState` to false.\n *\n * @returns A new `Synchronizer` instance.\n */\nexport default function createVOISynchronizer(\n  synchronizerName: string,\n  options = { syncInvertState: true } as VOISynchronizerOptions\n): Synchronizer {\n  const VOISynchronizer = createSynchronizer(\n    synchronizerName,\n    Enums.Events.VOI_MODIFIED,\n    voiSyncCallback,\n    options\n  );\n\n  return VOISynchronizer;\n}\n","import { getRenderingEngine, Types } from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\n\n/**\n * Synchronizer callback to synchronize the camera. Synchronization\n *\n * targetViewport.options.syncZoom set to false to not sync the zoom\n * targetViewport.options.syncPan set to false to not sync the pan\n\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, different\n *   from sourceViewport\n */\nexport default function zoomPanSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): void {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n\n  const tViewport = renderingEngine.getViewport(targetViewport.viewportId);\n  const sViewport = renderingEngine.getViewport(sourceViewport.viewportId);\n\n  if (options?.syncZoom !== false) {\n    const srcZoom = sViewport.getZoom();\n    // Do the zoom first, as the pan is relative to the zoom level\n    tViewport.setZoom(srcZoom);\n  }\n  if (options?.syncPan !== false) {\n    const srcPan = sViewport.getPan();\n    tViewport.setPan(srcPan);\n  }\n\n  tViewport.render();\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport zoomPanSyncCallback from '../callbacks/zoomPanSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { CAMERA_MODIFIED } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `CAMERA_MODIFIED`\n * rendering event and calls the `cameraSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createZoomPanSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const zoomPanSynchronizer = createSynchronizer(\n    synchronizerName,\n    CAMERA_MODIFIED,\n    zoomPanSyncCallback\n  );\n\n  return zoomPanSynchronizer;\n}\n","/**\n * Clips a value to an upper and lower bound.\n * @export @public @method\n * @name clip\n *\n * @param  {number} val  The value to clip.\n * @param  {number} low  The lower bound.\n * @param  {number} high The upper bound.\n * @returns {number}      The clipped value.\n */\nexport function clip(val, low, high) {\n  return Math.min(Math.max(low, val), high);\n}\n\n/**\n * Clips a value within a box.\n * @export @public @method\n * @name clipToBox\n *\n * @param  {Object} point The point to clip\n * @param  {Object} box   The bounding box to clip to.\n * @returns {Object}       The clipped point.\n */\nexport function clipToBox(point, box) {\n  // Clip an {x, y} point to a box of size {width, height}\n  point.x = clip(point.x, 0, box.width);\n  point.y = clip(point.y, 0, box.height);\n}\n\nexport default clip;\n","import {\n  StackViewport,\n  Types,\n  VolumeViewport,\n  eventTarget,\n  EVENTS,\n  utilities as csUtils,\n  getEnabledElement,\n  VideoViewport,\n} from '@cornerstonejs/core';\nimport { ScrollOptions, EventTypes } from '../types';\n\n/**\n * It scrolls one slice in the Stack or Volume Viewport, it uses the options provided\n * to determine the slice to scroll to. For Stack Viewport, it scrolls in the 1 or -1\n * direction, for Volume Viewport, it uses the camera and focal point to determine the\n * slice to scroll to based on the spacings.\n * @param viewport - The viewport in which to scroll\n * @param options - Options to use for scrolling, including direction, invert, and volumeId\n * @returns\n */\nexport default function scroll(\n  viewport: Types.IViewport,\n  options: ScrollOptions\n): void {\n  // check if viewport is disabled then throw error\n  const enabledElement = getEnabledElement(viewport.element);\n\n  if (!enabledElement) {\n    throw new Error('Scroll::Viewport is not enabled (it might be disabled)');\n  }\n\n  if (\n    viewport instanceof StackViewport &&\n    viewport.getImageIds().length === 0\n  ) {\n    throw new Error('Scroll::Stack Viewport has no images');\n  }\n\n  const { type: viewportType } = viewport;\n  const { volumeId, delta } = options;\n\n  if (viewport instanceof StackViewport) {\n    viewport.scroll(delta, options.debounceLoading, options.loop);\n  } else if (viewport instanceof VolumeViewport) {\n    scrollVolume(viewport, volumeId, delta);\n  } else if (viewport instanceof VideoViewport) {\n    viewport.scroll(delta);\n  } else {\n    throw new Error(`Not implemented for Viewport Type: ${viewportType}`);\n  }\n}\n\nexport function scrollVolume(\n  viewport: VolumeViewport,\n  volumeId: string,\n  delta: number\n) {\n  const { numScrollSteps, currentStepIndex, sliceRangeInfo } =\n    csUtils.getVolumeViewportScrollInfo(viewport, volumeId);\n\n  if (!sliceRangeInfo) {\n    return;\n  }\n\n  const { sliceRange, spacingInNormalDirection, camera } = sliceRangeInfo;\n  const { focalPoint, viewPlaneNormal, position } = camera;\n\n  const { newFocalPoint, newPosition } = csUtils.snapFocalPointToSlice(\n    focalPoint,\n    position,\n    sliceRange,\n    viewPlaneNormal,\n    spacingInNormalDirection,\n    delta\n  );\n\n  viewport.setCamera({\n    focalPoint: newFocalPoint,\n    position: newPosition,\n  });\n  viewport.render();\n\n  const desiredStepIndex = currentStepIndex + delta;\n\n  if (\n    (desiredStepIndex > numScrollSteps || desiredStepIndex < 0) &&\n    viewport.getCurrentImageId() // Check that we are in the plane of acquistion\n  ) {\n    // One common use case of this trigger might be to load the next\n    // volume in a time series or the next segment of a partially loaded volume.\n\n    const VolumeScrollEventDetail = {\n      volumeId,\n      viewport,\n      delta,\n      desiredStepIndex,\n      currentStepIndex,\n      numScrollSteps,\n      currentImageId: viewport.getCurrentImageId(),\n    };\n\n    csUtils.triggerEvent(\n      eventTarget,\n      EVENTS.VOLUME_SCROLL_OUT_OF_BOUNDS,\n      VolumeScrollEventDetail as EventTypes.VolumeScrollOutOfBoundsEventDetail\n    );\n  }\n}\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n  Types,\n} from '@cornerstonejs/core';\nimport JumpToSliceOptions from '../../types/JumpToSliceOptions';\nimport clip from '../clip';\nimport scroll from '../scroll';\n\n/**\n * It uses the imageIndex in the Options to scroll to the slice that is intended.\n * It works for both Stack and Volume viewports. In VolumeViewports, the imageIndex\n * should be given with respect to the index in the 3D image in the view direction\n * (i.e. the index of the slice in Axial, Sagittal, Coronal, or Oblique).\n *\n * @param element - the HTML Div element scrolling inside\n * @param options - the options used for jumping to a slice\n * @returns Promise that resolves to ImageIdIndex\n */\nasync function jumpToSlice(\n  element: HTMLDivElement,\n  options = {} as JumpToSliceOptions\n): Promise<void> {\n  const { imageIndex, debounceLoading, volumeId } = options;\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error('Element has been disabled');\n  }\n\n  const { viewport } = enabledElement;\n\n  const { imageIndex: currentImageIndex, numberOfSlices } = _getImageSliceData(\n    viewport,\n    debounceLoading\n  );\n\n  const imageIndexToJump = _getImageIndexToJump(numberOfSlices, imageIndex);\n  const delta = imageIndexToJump - currentImageIndex;\n\n  scroll(viewport, { delta, debounceLoading, volumeId });\n}\n\nfunction _getImageSliceData(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  debounceLoading?: boolean\n): Types.ImageSliceData {\n  if (viewport instanceof StackViewport) {\n    return {\n      numberOfSlices: viewport.getImageIds().length,\n      imageIndex: debounceLoading\n        ? viewport.getTargetImageIdIndex()\n        : viewport.getCurrentImageIdIndex(),\n    };\n  } else if (viewport instanceof VolumeViewport) {\n    return csUtils.getImageSliceDataForVolumeViewport(viewport);\n  } else {\n    throw new Error('Unsupported viewport type');\n  }\n}\n\nfunction _getImageIndexToJump(\n  numberOfSlices: number,\n  imageIndex: number\n): number {\n  const lastSliceIndex = numberOfSlices - 1;\n\n  return clip(imageIndex, 0, lastSliceIndex);\n}\n\nexport default jumpToSlice;\n","import { vec3, mat4 } from 'gl-matrix';\nimport {\n  getRenderingEngine,\n  Types,\n  metaData,\n  utilities,\n} from '@cornerstonejs/core';\nimport { Synchronizer } from '../../store';\nimport { jumpToSlice } from '../../utilities';\nimport areViewportsCoplanar from './areViewportsCoplanar ';\n\nconst getSpatialRegistration = (targetId, sourceId) =>\n  utilities.spatialRegistrationMetadataProvider.get(\n    'spatialRegistrationModule',\n    targetId,\n    sourceId\n  );\n\n/**\n * Synchronizer callback to synchronize the source viewport image to the\n * target viewports closest image in its stack.\n *\n * This synchronizer does a setup (which can already be predefined as required)\n * to register the target and soruce viewports.  The registration will default\n * to the identity registration if the same FOR is present in both viewports,\n * unless the option `useInitialPosition` is set in the target viewport.\n *\n * The consuming apps using Cornerstone3D (OHIF, etc) MAY provide such data in\n * the registrationMetadataProvider to override the data here. This can be done\n * by various methods 1) Using spatialRegistrationModule inside dicom 2) assuming\n * the user has actually manually scrolled the target viewport to the correct\n * slice before initiating the synchronization 3) using some other method\n *\n * @param synchronizerInstance - The Instance of the Synchronizer\n * @param sourceViewport - The list of IDs defining the source viewport.\n * @param targetViewport - The list of IDs defining the target viewport, never\n *   the same as sourceViewport.\n * @param cameraModifiedEvent - The CAMERA_MODIFIED event.\n */\nexport default async function stackImageSyncCallback(\n  synchronizerInstance: Synchronizer,\n  sourceViewport: Types.IViewportId,\n  targetViewport: Types.IViewportId\n): Promise<void> {\n  const renderingEngine = getRenderingEngine(targetViewport.renderingEngineId);\n  if (!renderingEngine) {\n    throw new Error(\n      `No RenderingEngine for Id: ${targetViewport.renderingEngineId}`\n    );\n  }\n\n  const sViewport = renderingEngine.getViewport(\n    sourceViewport.viewportId\n  ) as Types.IStackViewport;\n\n  const options = synchronizerInstance.getOptions(targetViewport.viewportId);\n\n  if (options?.disabled) {\n    return;\n  }\n\n  const tViewport = renderingEngine.getViewport(\n    targetViewport.viewportId\n  ) as Types.IStackViewport;\n\n  const imageId1 = sViewport.getCurrentImageId();\n  const imagePlaneModule1 = metaData.get('imagePlaneModule', imageId1);\n  const sourceImagePositionPatient = imagePlaneModule1.imagePositionPatient;\n\n  const targetImageIds = tViewport.getImageIds();\n\n  if (!areViewportsCoplanar(sViewport, tViewport)) {\n    return;\n  }\n\n  // if the frame of reference is different we need to use the registrationMetadataProvider\n  // and add that to the imagePositionPatient of the source viewport to get the\n  // imagePositionPatient of the target viewport's closest image in its stack\n  let registrationMatrixMat4 = getSpatialRegistration(\n    targetViewport.viewportId,\n    sourceViewport.viewportId\n  );\n\n  if (!registrationMatrixMat4) {\n    const frameOfReferenceUID1 = sViewport.getFrameOfReferenceUID();\n    const frameOfReferenceUID2 = tViewport.getFrameOfReferenceUID();\n    if (\n      frameOfReferenceUID1 === frameOfReferenceUID2 &&\n      options?.useInitialPosition !== false\n    ) {\n      registrationMatrixMat4 = mat4.identity(mat4.create());\n    } else {\n      utilities.calculateViewportsSpatialRegistration(sViewport, tViewport);\n      registrationMatrixMat4 = getSpatialRegistration(\n        targetViewport.viewportId,\n        sourceViewport.viewportId\n      );\n    }\n    if (!registrationMatrixMat4) {\n      return;\n    }\n  }\n\n  // apply the registration matrix to the source viewport's imagePositionPatient\n  // to get the target viewport's imagePositionPatient\n  const targetImagePositionPatientWithRegistrationMatrix = vec3.transformMat4(\n    vec3.create(),\n    sourceImagePositionPatient,\n    registrationMatrixMat4\n  );\n\n  // find the closest image in the target viewport's stack to the\n  // targetImagePositionPatientWithRegistrationMatrix\n  const closestImageIdIndex2 = _getClosestImageIdIndex(\n    targetImagePositionPatientWithRegistrationMatrix,\n    targetImageIds\n  );\n\n  if (\n    closestImageIdIndex2.index !== -1 &&\n    tViewport.getCurrentImageIdIndex() !== closestImageIdIndex2.index\n  ) {\n    await jumpToSlice(tViewport.element, {\n      imageIndex: closestImageIdIndex2.index,\n    });\n  }\n}\n\nfunction _getClosestImageIdIndex(targetPoint, imageIds) {\n  // todo: this does not assume orientation yet, but that can be added later\n  // todo: handle multiframe images\n  return imageIds.reduce(\n    (closestImageIdIndex, imageId, index) => {\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n      const distance = vec3.distance(imagePositionPatient, targetPoint);\n\n      if (distance < closestImageIdIndex.distance) {\n        return {\n          distance,\n          index,\n        };\n      }\n      return closestImageIdIndex;\n    },\n    {\n      distance: Infinity,\n      index: -1,\n    }\n  );\n}\n","import { vec3 } from 'gl-matrix';\nimport { Types } from '@cornerstonejs/core';\n\nexport default function areViewportsCoplanar(\n  viewport1: Types.IStackViewport,\n  viewport2: Types.IStackViewport\n): boolean {\n  const { viewPlaneNormal: viewPlaneNormal1 } = viewport1.getCamera();\n  const { viewPlaneNormal: viewPlaneNormal2 } = viewport2.getCamera();\n  const dotProducts = vec3.dot(viewPlaneNormal1, viewPlaneNormal2);\n  return Math.abs(dotProducts) > 0.9;\n}\n","import { createSynchronizer } from '../../store/SynchronizerManager';\nimport { Enums } from '@cornerstonejs/core';\nimport stackImageSyncCallback from '../callbacks/stackImageSyncCallback';\nimport Synchronizer from '../../store/SynchronizerManager/Synchronizer';\n\nconst { STACK_NEW_IMAGE } = Enums.Events;\n\n/**\n * A helper that creates a new `Synchronizer` which listens to the `STACK_NEW_IMAGE`\n * rendering event and calls the `stackImageSyncCallback`.\n *\n * @param synchronizerName - The name of the synchronizer.\n * @returns A new `Synchronizer` instance.\n */\nexport default function createStackImageSynchronizer(\n  synchronizerName: string\n): Synchronizer {\n  const stackImageSynchronizer = createSynchronizer(\n    synchronizerName,\n    STACK_NEW_IMAGE,\n    stackImageSyncCallback\n  );\n\n  return stackImageSynchronizer;\n}\n","function _getHash(\n  annotationUID: string,\n  drawingElementType: string,\n  nodeUID: string\n): string {\n  return `${annotationUID}::${drawingElementType}::${nodeUID}`;\n}\n\nexport default _getHash;\n","export function setAttributesIfNecessary(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const currentValue = svgNode.getAttribute(key);\n    const newValue = attributes[key];\n    if (newValue === undefined || newValue === '') {\n      svgNode.removeAttribute(key);\n    } else if (currentValue !== newValue) {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default setAttributesIfNecessary;\n","export function setNewAttributesIfValid(attributes, svgNode) {\n  Object.keys(attributes).forEach((key) => {\n    const newValue = attributes[key];\n    if (newValue !== undefined && newValue !== '') {\n      svgNode.setAttribute(key, newValue);\n    }\n  });\n}\n\nexport default setNewAttributesIfValid;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\n\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\n\nfunction drawCircle(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  circleUID: string,\n  center: Types.Point2,\n  radius: number,\n  options = {},\n  dataId = ''\n): void {\n  const {\n    color,\n    fill,\n    width,\n    lineWidth,\n    lineDash,\n    fillOpacity,\n    strokeOpacity,\n  } = Object.assign(\n    {\n      color: 'dodgerblue',\n      fill: 'transparent',\n      width: '2',\n      lineDash: undefined,\n      lineWidth: undefined,\n      strokeOpacity: 1,\n      fillOpacity: 1,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  // variable for the namespace\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'circle', circleUID);\n  const existingCircleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    r: `${radius}`,\n    stroke: color,\n    fill,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n    'fill-opacity': fillOpacity, // setting fill opacity\n    'stroke-opacity': strokeOpacity, // setting stroke opacity\n  };\n\n  if (existingCircleElement) {\n    setAttributesIfNecessary(attributes, existingCircleElement);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newCircleElement = document.createElementNS(svgns, 'circle');\n\n    if (dataId !== '') {\n      newCircleElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, newCircleElement);\n\n    svgDrawingHelper.appendNode(newCircleElement, svgNodeHash);\n  }\n}\n\nexport default drawCircle;\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\n\nfunction drawEllipse(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  ellipseUID: string,\n  corner1: Types.Point2,\n  corner2: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'ellipse', ellipseUID);\n  const existingEllipse = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const w = Math.abs(corner1[0] - corner2[0]);\n  const h = Math.abs(corner1[1] - corner2[1]);\n  const xMin = Math.min(corner1[0], corner2[0]);\n  const yMin = Math.min(corner1[1], corner2[1]);\n\n  const center = [xMin + w / 2, yMin + h / 2];\n  const radiusX = w / 2;\n  const radiusY = h / 2;\n\n  const attributes = {\n    cx: `${center[0]}`,\n    cy: `${center[1]}`,\n    rx: `${radiusX}`,\n    ry: `${radiusY}`,\n    stroke: color,\n    fill: 'transparent',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingEllipse) {\n    setAttributesIfNecessary(attributes, existingEllipse);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgEllipseElement = document.createElementNS(svgns, 'ellipse');\n\n    if (dataId !== '') {\n      svgEllipseElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, svgEllipseElement);\n\n    svgDrawingHelper.appendNode(svgEllipseElement, svgNodeHash);\n  }\n}\n\nexport default drawEllipse;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawHandles(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  handleGroupUID: string,\n  handlePoints: Array<Types.Point2>,\n  options = {}\n): void {\n  const { color, handleRadius, width, lineWidth, fill, type, opacity } =\n    Object.assign(\n      {\n        color: 'dodgerblue',\n        handleRadius: '6',\n        width: '2',\n        lineWidth: undefined,\n        fill: 'transparent',\n        type: 'circle',\n        opacity: 1,\n      },\n      options\n    );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  for (let i = 0; i < handlePoints.length; i++) {\n    const handle = handlePoints[i];\n\n    // variable for the namespace\n    const svgns = 'http://www.w3.org/2000/svg';\n    const svgNodeHash = _getHash(\n      annotationUID,\n      'handle',\n      `hg-${handleGroupUID}-index-${i}`\n    );\n\n    let attributes;\n    if (type === 'circle') {\n      attributes = {\n        cx: `${handle[0]}`,\n        cy: `${handle[1]}`,\n        r: handleRadius,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        opacity: opacity,\n      };\n    } else if (type === 'rect') {\n      const handleRadiusFloat = parseFloat(handleRadius);\n      const side = handleRadiusFloat * 1.5;\n      const x = handle[0] - side * 0.5;\n      const y = handle[1] - side * 0.5;\n\n      attributes = {\n        x: `${x}`,\n        y: `${y}`,\n        width: `${side}`,\n        height: `${side}`,\n        stroke: color,\n        fill,\n        'stroke-width': strokeWidth,\n        rx: `${side * 0.1}`,\n        opacity: opacity,\n      };\n    } else {\n      throw new Error(`Unsupported handle type: ${type}`);\n    }\n\n    const existingHandleElement = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n    if (existingHandleElement) {\n      setAttributesIfNecessary(attributes, existingHandleElement);\n\n      svgDrawingHelper.setNodeTouched(svgNodeHash);\n    } else {\n      const newHandleElement = document.createElementNS(svgns, type);\n\n      setNewAttributesIfValid(attributes, newHandleElement);\n\n      svgDrawingHelper.appendNode(newHandleElement, svgNodeHash);\n    }\n  }\n}\n\nexport default drawHandles;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\nexport default function drawLine(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  lineUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash, shadow } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n      shadow: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'line', lineUID);\n  const existingLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n  const dropShadowStyle = shadow\n    ? `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`\n    : '';\n\n  const attributes = {\n    x1: `${start[0]}`,\n    y1: `${start[1]}`,\n    x2: `${end[0]}`,\n    y2: `${end[1]}`,\n    stroke: color,\n    style: dropShadowStyle,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    setAttributesIfNecessary(attributes, existingLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newLine = document.createElementNS(svgns, 'line');\n\n    if (dataId !== '') {\n      newLine.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, newLine);\n\n    svgDrawingHelper.appendNode(newLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport _getHash from './_getHash';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport { SVGDrawingHelper } from '../types';\n\n/**\n * Draws an SVG polyline with the given points.\n *\n * The `connectLastToFirst` option, if true, draws a closed polyline, with the\n * last point connected to the first.\n */\nexport default function drawPolyline(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  polylineUID: string,\n  points: Types.Point2[],\n  options: {\n    color?: string;\n    fillColor?: string;\n    fillOpacity?: number;\n    width?: number;\n    lineWidth?: number;\n    lineDash?: string;\n    connectLastToFirst?: boolean;\n  }\n): void {\n  if (points.length < 2) {\n    return;\n  }\n\n  const { fillColor, fillOpacity, color, width, lineWidth, lineDash } =\n    Object.assign(\n      {\n        color: 'dodgerblue',\n        width: '2',\n        fillColor: 'none',\n        fillOpacity: 0,\n        lineWidth: undefined,\n        lineDash: undefined,\n        connectLastToFirst: false,\n      },\n      options\n    );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'polyline', polylineUID);\n  const existingPolyLine = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  let pointsAttribute = '';\n\n  for (const point of points) {\n    pointsAttribute += `${point[0]}, ${point[1]} `;\n  }\n\n  if (options.connectLastToFirst) {\n    const firstPoint = points[0];\n\n    pointsAttribute += `${firstPoint[0]}, ${firstPoint[1]}`;\n  }\n\n  const attributes = {\n    points: pointsAttribute,\n    stroke: color,\n    fill: fillColor,\n    'fill-opacity': fillOpacity,\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingPolyLine) {\n    // This is run to avoid re-rendering annotations that actually haven't changed\n    setAttributesIfNecessary(attributes, existingPolyLine);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const newPolyLine = document.createElementNS(svgns, 'polyline');\n\n    setNewAttributesIfValid(attributes, newPolyLine);\n\n    svgDrawingHelper.appendNode(newPolyLine, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\n\n/**\n * Draws a textBox.\n *\n * @param textLines - The text to display.\n * @param position - The x/y position of the textbox\n * @param options - Options for the textBox.\n * @returns Bounding box; can be used for isPointNearTool\n */\nfunction drawTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string>,\n  position: Types.Point2,\n  options = {}\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      fontFamily: 'Helvetica, Arial, sans-serif',\n      fontSize: '14px',\n      color: 'rgb(255, 255, 0)',\n      background: '',\n      padding: 25,\n      centerX: false,\n      centerY: true,\n    },\n    options\n  );\n\n  // Draw each of the text lines on top of the background box\n  const textGroupBoundingBox = _drawTextGroup(\n    svgDrawingHelper,\n    annotationUID,\n    textUID,\n    textLines,\n    position,\n    mergedOptions\n  );\n\n  return textGroupBoundingBox;\n}\n\nfunction _drawTextGroup(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textUID: string,\n  textLines: Array<string> = [''],\n  position: Types.Point2,\n  options: any\n): SVGRect {\n  const { padding, color, fontFamily, fontSize, background } = options;\n\n  let textGroupBoundingBox;\n  const [x, y] = [position[0] + padding, position[1] + padding];\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'text', textUID);\n  const existingTextGroup = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  // Todo: right now textBox gets a re-render even if the textBox has not changed\n  // and evenIf the attributes are not set again since they are the same.\n  if (existingTextGroup) {\n    // TODO: Iterate each node and update color? font-size?\n    const textElement = existingTextGroup.querySelector('text');\n    const textSpans = Array.from(textElement.children) as Array<SVGElement>;\n\n    for (let i = 0; i < textSpans.length; i++) {\n      const textSpanElement = textSpans[i];\n      const text = textLines[i] || '';\n\n      textSpanElement.textContent = text;\n    }\n\n    // if the textLines have changed size, we need to create textSpans for them\n    if (textLines.length > textSpans.length) {\n      for (let i = 0; i < textLines.length - textSpans.length; i++) {\n        const textLine = textLines[i + textSpans.length];\n        const textSpan = _createTextSpan(textLine);\n\n        textElement.appendChild(textSpan);\n      }\n\n      existingTextGroup.appendChild(textElement);\n      svgDrawingHelper.appendNode(existingTextGroup, svgNodeHash);\n    }\n\n    const textAttributes = {\n      fill: color,\n      'font-size': fontSize,\n      'font-family': fontFamily,\n    };\n\n    const textGroupAttributes = {\n      transform: `translate(${x} ${y})`,\n    };\n\n    // Todo: for some reason this does not work to not re-render the textBox\n    setAttributesIfNecessary(textAttributes, textElement);\n    setAttributesIfNecessary(textGroupAttributes, existingTextGroup);\n\n    textGroupBoundingBox = _drawTextBackground(existingTextGroup, background);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const textGroup = document.createElementNS(svgns, 'g');\n\n    textGroup.setAttribute('transform', `translate(${x} ${y})`);\n\n    //\n    const textElement = _createTextElement(svgDrawingHelper, options);\n    for (let i = 0; i < textLines.length; i++) {\n      const textLine = textLines[i];\n      const textSpan = _createTextSpan(textLine);\n\n      textElement.appendChild(textSpan);\n    }\n\n    textGroup.appendChild(textElement);\n    svgDrawingHelper.appendNode(textGroup, svgNodeHash);\n    textGroupBoundingBox = _drawTextBackground(textGroup, background);\n  }\n\n  // We translate the group using `position`\n  // which means we also need to pluck those values when returning\n  // the bounding box\n  return Object.assign({}, textGroupBoundingBox, {\n    x,\n    y,\n    height: textGroupBoundingBox.height + padding,\n    width: textGroupBoundingBox.width + padding,\n  });\n}\n\nfunction _createTextElement(\n  svgDrawingHelper: SVGDrawingHelper,\n  options: any\n): SVGElement {\n  const { color, fontFamily, fontSize } = options;\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textElement = document.createElementNS(svgns, 'text');\n  const noSelectStyle =\n    'user-select: none; pointer-events: none; -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);';\n  const dropShadowStyle = `filter:url(#shadow-${svgDrawingHelper.svgLayerElement.id});`;\n  const combinedStyle = `${noSelectStyle}${dropShadowStyle}`;\n\n  // font-size=\"100\"\n  textElement.setAttribute('x', '0');\n  textElement.setAttribute('y', '0');\n  textElement.setAttribute('fill', color);\n  textElement.setAttribute('font-family', fontFamily);\n  textElement.setAttribute('font-size', fontSize);\n  textElement.setAttribute('style', combinedStyle);\n\n  return textElement;\n}\n\nfunction _createTextSpan(text): SVGElement {\n  const svgns = 'http://www.w3.org/2000/svg';\n  const textSpanElement = document.createElementNS(svgns, 'tspan');\n\n  // TODO: centerX\n  // (parent width / 2) - my width\n  // TODO: centerY\n\n  textSpanElement.setAttribute('x', '0');\n  textSpanElement.setAttribute('dy', '1.2em');\n  textSpanElement.textContent = text;\n\n  return textSpanElement;\n}\n\nfunction _drawTextBackground(group: SVGGElement, color: string) {\n  let element = group.querySelector('rect.background');\n\n  // If we have no background color, remove any element that exists and return\n  // the bounding box of the text\n  if (!color) {\n    if (element) {\n      group.removeChild(element);\n    }\n\n    return group.getBBox();\n  }\n\n  // Otherwise, check if we have a <rect> element. If not, create one\n  if (!element) {\n    element = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n    element.setAttribute('class', 'background');\n    group.insertBefore(element, group.firstChild);\n  }\n\n  // Get the text groups's bounding box and use it to draw the background rectangle\n  const bBox = group.getBBox();\n\n  const attributes = {\n    x: `${bBox.x}`,\n    y: `${bBox.y}`,\n    width: `${bBox.width}`,\n    height: `${bBox.height}`,\n    fill: color,\n  };\n\n  setAttributesIfNecessary(attributes, element);\n\n  return bBox;\n}\n\nexport default drawTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Find the closest point to the target point\n *\n * @param sourcePoints - The potential source points.\n * @param targetPoint - The target point, used to find the closest source.\n * @returns The closest point in the array of point sources\n */\nexport default function findClosestPoint(\n  sourcePoints: Array<Types.Point2>,\n  targetPoint: Types.Point2\n): Types.Point2 {\n  let minPoint = [0, 0];\n  let minDistance = Number.MAX_SAFE_INTEGER;\n\n  sourcePoints.forEach(function (sourcePoint) {\n    const distance = _distanceBetween(targetPoint, sourcePoint);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n      minPoint = [...sourcePoint];\n    }\n  });\n\n  return minPoint as Types.Point2;\n}\n\n/**\n *\n * @private\n * @param p1\n * @param p2\n */\nfunction _distanceBetween(p1: Types.Point2, p2: Types.Point2): number {\n  const [x1, y1] = p1;\n  const [x2, y2] = p2;\n\n  return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawLine from './drawLine';\nimport findClosestPoint from '../utilities/math/vec2/findClosestPoint';\nimport { PlanarBoundingBox, SVGDrawingHelper } from '../types';\n\n/**\n * Draw a link between an annotation to a box.\n */\nfunction drawLink(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  linkUID: string,\n  // Find closest point to approx. bounding box\n  annotationAnchorPoints: Array<Types.Point2>,\n  refPoint: Types.Point2,\n  // Find bounding box point that's closest to our identified\n  // start point\n  boundingBox: PlanarBoundingBox,\n  options = {}\n): void {\n  // The closest anchor point (for the annotation) to the\n  // text box / bounding box\n  const start =\n    annotationAnchorPoints.length > 0\n      ? findClosestPoint(annotationAnchorPoints, refPoint)\n      : refPoint;\n\n  // Calculate the midpoints of the bounding box\n  const boundingBoxPoints = _boundingBoxPoints(boundingBox);\n  // Find the closest textBox midpoint to the annotation's anchor/start point\n  const end = findClosestPoint(boundingBoxPoints, start);\n\n  // Finally we draw the dashed linking line\n  const mergedOptions = Object.assign(\n    {\n      color: 'rgb(255, 255, 0)',\n      lineWidth: '1',\n      lineDash: '2,3',\n    },\n    options\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    `link-${linkUID}`,\n    start,\n    end,\n    mergedOptions\n  );\n}\n\n/**\n * Find potential anchor points for a given bounding box. For example, it may\n * look nicer to draw a line from the \"middle left\" of a bounding box to an\n * annotation (instead of from a corner). This function calculates those points\n *\n * @param boundingBox\n */\nfunction _boundingBoxPoints(\n  boundingBox: PlanarBoundingBox\n): Array<Types.Point2> {\n  const { x: left, y: top, height, width } = boundingBox;\n  const halfWidth = width / 2;\n  const halfHeight = height / 2;\n\n  const topMiddle = [left + halfWidth, top] as Types.Point2;\n  const leftMiddle = [left, top + halfHeight] as Types.Point2;\n  const bottomMiddle = [left + halfWidth, top + height] as Types.Point2;\n  const rightMiddle = [left + width, top + halfHeight] as Types.Point2;\n\n  return [topMiddle, leftMiddle, bottomMiddle, rightMiddle];\n}\n\nexport default drawLink;\n","import type { Types } from '@cornerstonejs/core';\n\nimport drawTextBox from './drawTextBox';\nimport drawLink from './drawLink';\nimport { SVGDrawingHelper } from '../types';\n\nfunction drawLinkedTextBox(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  textBoxUID: string,\n  //\n  textLines: Array<string>,\n  textBoxPosition: Types.Point2,\n  annotationAnchorPoints: Array<Types.Point2>,\n  textBox: unknown,\n  options = {}\n  // TODO: yCenter as an option\n): SVGRect {\n  const mergedOptions = Object.assign(\n    {\n      handleRadius: '6',\n      centering: {\n        x: false,\n        y: true, // yCenter,\n      },\n    },\n    options\n  );\n\n  // Draw the text box\n  const canvasBoundingBox = drawTextBox(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    textLines,\n    textBoxPosition,\n    mergedOptions\n  );\n  // if (textBox.hasMoved) {\n  //   // Draw dashed link line between tool and text\n  drawLink(\n    svgDrawingHelper,\n    annotationUID,\n    textBoxUID,\n    annotationAnchorPoints, // annotationAnchorPoints\n    textBoxPosition, // refPoint (text)\n    canvasBoundingBox, // textBoxBoundingBox\n    mergedOptions\n  );\n  // }\n\n  // const { top, left, width, height } = canvasBoundingBox\n\n  // textBox.worldBoundingBox = {\n  //   topLeft: canvasToWorld([left, top]),\n  //   topRight: canvasToWorld([left + width, top]),\n  //   bottomLeft: canvasToWorld([left, top + height]),\n  //   bottomRight: canvasToWorld([left + width, top + height]),\n  // }\n\n  return canvasBoundingBox;\n}\n\nexport default drawLinkedTextBox;\n","import type { Types } from '@cornerstonejs/core';\n\nimport _getHash from './_getHash';\nimport setAttributesIfNecessary from './setAttributesIfNecessary';\nimport setNewAttributesIfValid from './setNewAttributesIfValid';\nimport { SVGDrawingHelper } from '../types';\n\n// <rect x=\"120\" y=\"100\" width=\"100\" height=\"100\" />\nexport default function drawRect(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  rectangleUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {},\n  dataId = ''\n): void {\n  const {\n    color,\n    width: _width,\n    lineWidth,\n    lineDash,\n  } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || _width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n  const width = Math.abs(start[0] - end[0]);\n  const height = Math.abs(start[1] - end[1]);\n\n  const attributes = {\n    x: `${tlhc[0]}`,\n    y: `${tlhc[1]}`,\n    width: `${width}`,\n    height: `${height}`,\n    stroke: color,\n    fill: 'transparent',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingRect) {\n    setAttributesIfNecessary(attributes, existingRect);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgRectElement = document.createElementNS(svgns, 'rect');\n\n    if (dataId !== '') {\n      svgRectElement.setAttribute('data-id', dataId);\n    }\n\n    setNewAttributesIfValid(attributes, svgRectElement);\n\n    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n  }\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { SVGDrawingHelper } from '../types';\nimport drawLine from './drawLine';\n\nexport default function drawArrow(\n  svgDrawingHelper: SVGDrawingHelper,\n  annotationUID: string,\n  arrowUID: string,\n  start: Types.Point2,\n  end: Types.Point2,\n  options = {}\n): void {\n  // if length is NaN return\n  if (isNaN(start[0]) || isNaN(start[1]) || isNaN(end[0]) || isNaN(end[1])) {\n    return;\n  }\n\n  const { color, width, lineWidth, lineDash } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // The line itself\n  drawLine(svgDrawingHelper, annotationUID, arrowUID, start, end, {\n    color,\n    width,\n    lineWidth,\n    lineDash,\n  });\n\n  // Drawing the head arrow with two lines\n  // Variables to be used when creating the arrow\n  const headLength = 10;\n  const angle = Math.atan2(end[1] - start[1], end[0] - start[0]);\n\n  const firstLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle - Math.PI / 7),\n      end[1] - headLength * Math.sin(angle - Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  const secondLine = {\n    start: [\n      end[0] - headLength * Math.cos(angle + Math.PI / 7),\n      end[1] - headLength * Math.sin(angle + Math.PI / 7),\n    ] as Types.Point2,\n    end: end,\n  };\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '2',\n    firstLine.start,\n    firstLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n\n  drawLine(\n    svgDrawingHelper,\n    annotationUID,\n    '3',\n    secondLine.start,\n    secondLine.end,\n    {\n      color,\n      width,\n      lineWidth,\n    }\n  );\n}\n","import _getHash from './_getHash';\nimport _setAttributesIfNecessary from './setAttributesIfNecessary';\nimport _setNewAttributesIfValid from './setNewAttributesIfValid';\n\n// <rect x=\"120\" y=\"100\" width=\"100\" height=\"100\" />\nexport default function drawRedactionRect(\n  svgDrawingHelper: any,\n  annotationUID: string,\n  rectangleUID: string,\n  start: any,\n  end: any,\n  options = {}\n): void {\n  const {\n    color,\n    width: _width,\n    lineWidth,\n    lineDash,\n  } = Object.assign(\n    {\n      color: 'dodgerblue',\n      width: '2',\n      lineWidth: undefined,\n      lineDash: undefined,\n    },\n    options\n  );\n\n  // for supporting both lineWidth and width options\n  const strokeWidth = lineWidth || _width;\n\n  const svgns = 'http://www.w3.org/2000/svg';\n  const svgNodeHash = _getHash(annotationUID, 'rect', rectangleUID);\n  const existingRect = svgDrawingHelper.getSvgNode(svgNodeHash);\n\n  const tlhc = [Math.min(start[0], end[0]), Math.min(start[1], end[1])];\n  const width = Math.abs(start[0] - end[0]);\n  const height = Math.abs(start[1] - end[1]);\n\n  const attributes = {\n    x: `${tlhc[0]}`,\n    y: `${tlhc[1]}`,\n    width: `${width}`,\n    height: `${height}`,\n    stroke: color,\n    fill: 'black',\n    'stroke-width': strokeWidth,\n    'stroke-dasharray': lineDash,\n  };\n\n  if (existingRect) {\n    _setAttributesIfNecessary(attributes, existingRect);\n\n    svgDrawingHelper.setNodeTouched(svgNodeHash);\n  } else {\n    const svgRectElement = document.createElementNS(svgns, 'rect');\n\n    _setNewAttributesIfValid(attributes, svgRectElement);\n\n    svgDrawingHelper.appendNode(svgRectElement, svgNodeHash);\n  }\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool, BaseTool } from '../tools';\nimport { Annotation } from '../types';\nimport { getAnnotations } from '../stateManagement/annotation/annotationState';\nimport * as ToolGroupManager from '../store/ToolGroupManager';\n\n/**\n * Get the annotation that is close to the provided canvas point, it will return\n * the first annotation that is found.\n *\n * @param element - The element to search for an annotation on.\n * @param canvasPoint - The canvasPoint on the page where the user clicked.\n * @param proximity - The distance from the canvasPoint to the annotation.\n * @returns The annotation for the element\n */\nfunction getAnnotationNearPoint(\n  element: HTMLDivElement,\n  canvasPoint: Types.Point2,\n  proximity = 5\n): Annotation | null {\n  // Todo: this function should return closest annotation, BUT, we are not using\n  // the function anywhere.\n  const enabledElement = getEnabledElement(element);\n  if (!enabledElement) {\n    throw new Error('getAnnotationNearPoint: enabledElement not found');\n  }\n\n  return getAnnotationNearPointOnEnabledElement(\n    enabledElement,\n    canvasPoint,\n    proximity\n  );\n}\n\n/**\n * \"Find the annotation near the point on the enabled element.\" it will return the\n * first annotation that is found.\n *\n * @param enabledElement - The element that is currently active.\n * @param point - The point to search near.\n * @param proximity - The distance from the point that the annotation must\n * be within.\n * @returns A Annotation object.\n */\nfunction getAnnotationNearPointOnEnabledElement(\n  enabledElement: Types.IEnabledElement,\n  point: Types.Point2,\n  proximity: number\n): Annotation | null {\n  // Todo: this function should return closest annotation, BUT, we are not using\n  // the function anywhere.\n  const { renderingEngineId, viewportId } = enabledElement;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (!toolGroup) {\n    return null;\n  }\n\n  const { _toolInstances: tools } = toolGroup;\n  for (const name in tools) {\n    const found = findAnnotationNearPointByTool(\n      tools[name],\n      enabledElement,\n      point,\n      proximity\n    );\n    if (found) {\n      return found;\n    }\n  }\n\n  return null;\n}\n\n/**\n * For the provided toolClass, it will find the annotation that is near the point,\n * it will return the first annotation that is found.\n *\n * @param tool - AnnotationTool\n * @param enabledElement - The element that is currently active.\n * @param point - The point in the image where the user clicked.\n * @param proximity - The distance from the point that the tool must be\n * within to be considered \"near\" the point.\n * @returns The annotation object that is being returned is the annotation object that\n * is being used in the tool.\n */\nfunction findAnnotationNearPointByTool(\n  tool: AnnotationTool,\n  enabledElement: Types.IEnabledElement,\n  point: Types.Point2,\n  proximity: number\n): Annotation | null {\n  // Todo: this function does not return closest annotation. It just returns\n  // the first annotation that is found in the proximity. BUT, we are not using\n  // the function anywhere.\n  const { viewport } = enabledElement;\n\n  const annotations = getAnnotations(\n    (tool.constructor as typeof BaseTool).toolName,\n    viewport?.element\n  );\n  const currentId = viewport?.getCurrentImageId?.();\n  if (annotations?.length) {\n    const { element } = enabledElement.viewport;\n    for (const annotation of annotations) {\n      const referencedImageId = annotation.metadata?.referencedImageId;\n      if (\n        (currentId && referencedImageId && currentId !== referencedImageId) ||\n        !tool.isPointNearTool\n      ) {\n        continue;\n      }\n\n      if (\n        tool.isPointNearTool(element, annotation, point, proximity, '') ||\n        tool.getHandleNearImagePoint(element, annotation, point, proximity)\n      ) {\n        return annotation;\n      }\n    }\n  }\n  return null;\n}\n\nexport { getAnnotationNearPoint, getAnnotationNearPointOnEnabledElement };\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @since 0.1.0\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * isObject({})\n * // => true\n *\n * isObject([1, 2, 3])\n * // => true\n *\n * isObject(Function)\n * // => true\n *\n * isObject(null)\n * // => false\n */\nfunction isObject(value) {\n  const type = typeof value;\n\n  return value !== null && (type === 'object' || type === 'function');\n}\n\nexport default isObject;\n","import isObject from './isObject';\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked, or until the next browser frame is drawn. The debounced function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * debounced function. Subsequent calls to the debounced function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `debounce` and `throttle`.\n *\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0]\n *  The number of milliseconds to delay; if omitted, `requestAnimationFrame` is\n *  used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', debounce(calculateLayout, 150))\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }))\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * const debounced = debounce(batchLog, 250, { 'maxWait': 1000 })\n * const source = new EventSource('/stream')\n * jQuery(source).on('message', debounced)\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel)\n *\n * // Check for pending invocations.\n * const status = debounced.pending() ? \"Pending...\" : \"Ready\"\n */\nfunction debounce(func, wait, options) {\n  let lastArgs, lastThis, maxWait, result, timerId, lastCallTime;\n\n  let lastInvokeTime = 0;\n  let leading = false;\n  let maxing = false;\n  let trailing = true;\n\n  // Bypass `requestAnimationFrame` by explicitly setting `wait=0`.\n  const useRAF =\n    !wait && wait !== 0 && typeof window.requestAnimationFrame === 'function';\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  wait = Number(wait) || 0;\n  if (isObject(options)) {\n    leading = Boolean(options.leading);\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? Math.max(Number(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n  }\n\n  function invokeFunc(time) {\n    const args = lastArgs;\n    const thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n\n    return result;\n  }\n\n  function startTimer(pendingFunc, wait) {\n    if (useRAF) {\n      return window.requestAnimationFrame(pendingFunc);\n    }\n\n    return setTimeout(pendingFunc, wait);\n  }\n\n  function cancelTimer(id) {\n    if (useRAF) {\n      return window.cancelAnimationFrame(id);\n    }\n    clearTimeout(id);\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = startTimer(timerExpired, wait);\n\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n    const timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    const timeSinceLastCall = time - lastCallTime;\n    const timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (\n      lastCallTime === undefined ||\n      timeSinceLastCall >= wait ||\n      timeSinceLastCall < 0 ||\n      (maxing && timeSinceLastInvoke >= maxWait)\n    );\n  }\n\n  function timerExpired() {\n    const time = Date.now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = startTimer(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      cancelTimer(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(Date.now());\n  }\n\n  function pending() {\n    return timerId !== undefined;\n  }\n\n  function debounced(...args) {\n    const time = Date.now();\n    const isInvoking = shouldInvoke(time);\n\n    lastArgs = args;\n    lastThis = this; // eslint-disable-line consistent-this\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = startTimer(timerExpired, wait);\n\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = startTimer(timerExpired, wait);\n    }\n\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  debounced.pending = pending;\n\n  return debounced;\n}\n\nexport default debounce;\n","import debounce from './debounce';\nimport isObject from './isObject';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds (or once per browser frame). The throttled function\n * comes with a `cancel` method to cancel delayed `func` invocations and a\n * `flush` method to immediately invoke them. Provide `options` to indicate\n * whether `func` should be invoked on the leading and/or trailing edge of the\n * `wait` timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * If `wait` is omitted in an environment with `requestAnimationFrame`, `func`\n * invocation will be deferred until the next frame is drawn (typically about\n * 16ms).\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `throttle` and `debounce`.\n *\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0]\n *  The number of milliseconds to throttle invocations to; if omitted,\n *  `requestAnimationFrame` is used (if available).\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', throttle(updatePosition, 100))\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * const throttled = throttle(renewToken, 300000, { 'trailing': false })\n * jQuery(element).on('click', throttled)\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel)\n */\nfunction throttle(func, wait, options) {\n  let leading = true;\n  let trailing = true;\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? Boolean(options.leading) : leading;\n    trailing = 'trailing' in options ? Boolean(options.trailing) : trailing;\n  }\n\n  return debounce(func, wait, {\n    leading,\n    trailing,\n    maxWait: wait,\n  });\n}\n\nexport default throttle;\n","import { utilities, Enums } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nconst { calibratedPixelSpacingMetadataProvider } = utilities;\n\n/**\n * It adds the provided spacing to the Cornerstone internal calibratedPixelSpacing\n * metadata provider, then it invalidates all the tools that have the imageId as\n * their reference imageIds. Finally, it triggers a re-render for invalidated annotations.\n * @param imageId - ImageId for the calibrated image\n * @param rowPixelSpacing - Spacing in row direction\n * @param calibrationOrScale - either the calibration object or a scale value\n */\nexport default function calibrateImageSpacing(\n  imageId: string,\n  renderingEngine: Types.IRenderingEngine,\n  calibrationOrScale: Types.IImageCalibration | number\n): void {\n  // Handle simple parameter version\n  if (typeof calibrationOrScale === 'number') {\n    calibrationOrScale = {\n      type: Enums.CalibrationTypes.USER,\n      scale: calibrationOrScale,\n    };\n  }\n  // 1. Add the calibratedPixelSpacing metadata to the metadata\n  calibratedPixelSpacingMetadataProvider.add(imageId, calibrationOrScale);\n\n  // 2. Update the actor for stackViewports\n  const viewports = renderingEngine.getStackViewports();\n\n  // 2.1 If imageId is already being used in a stackViewport -> update actor\n  viewports.forEach((viewport) => {\n    const imageIds = viewport.getImageIds();\n    if (imageIds.includes(imageId)) {\n      viewport.calibrateSpacing(imageId);\n    }\n  });\n\n  // 2.2 If imageId is cached but not being displayed in a viewport, stackViewport\n  // will handle using the calibratedPixelSpacing since it has been added\n  // to the provider\n}\n","import { Enums } from '@cornerstonejs/core';\n\nconst { CalibrationTypes } = Enums;\nconst PIXEL_UNITS = 'px';\n\n/**\n * Extracts the length units and the type of calibration for those units\n * into the response.  The length units will typically be either mm or px\n * while the calibration type can be any of a number of different calibraiton types.\n *\n * Volumetric images have no calibration type, so are just the raw mm.\n *\n * TODO: Handle region calibration\n *\n * @param handles - used to detect if the spacing information is different\n *   between various points (eg angled ERMF or US Region).\n *   Currently unused, but needed for correct US Region handling\n * @param image - to extract the calibration from\n *        image.calibration - calibration value to extract units form\n * @returns String containing the units and type of calibration\n */\nconst getCalibratedLengthUnits = (handles, image): string => {\n  const { calibration, hasPixelSpacing } = image;\n  // Anachronistic - moving to using calibration consistently, but not completed yet\n  const units = hasPixelSpacing ? 'mm' : PIXEL_UNITS;\n  if (!calibration || !calibration.type) {\n    return units;\n  }\n  if (calibration.type === CalibrationTypes.UNCALIBRATED) {\n    return PIXEL_UNITS;\n  }\n  // TODO - handle US regions properly\n  if (calibration.SequenceOfUltrasoundRegions) {\n    return 'US Region';\n  }\n  return `${units} ${calibration.type}`;\n};\n\nconst SQUARE = '\\xb2';\n/**\n *  Extracts the area units, including the squared sign plus calibration type.\n */\nconst getCalibratedAreaUnits = (handles, image): string => {\n  const { calibration, hasPixelSpacing } = image;\n  const units = (hasPixelSpacing ? 'mm' : PIXEL_UNITS) + SQUARE;\n  if (!calibration || !calibration.type) {\n    return units;\n  }\n  if (calibration.SequenceOfUltrasoundRegions) {\n    return 'US Region';\n  }\n  return `${units} ${calibration.type}`;\n};\n\n/**\n * Gets the scale divisor for converting from internal spacing to\n * image spacing for calibrated images.\n */\nconst getCalibratedScale = (image) => image.calibration?.scale || 1;\n\n/** Gets the aspect ratio of the screen display relative to the image\n * display in order to square up measurement values.\n * That is, suppose the spacing on the image is 1, 0.5 (x,y spacing)\n * This is displayed at 1, 1 spacing on screen, then the\n * aspect value will be 1/0.5 = 2\n */\nconst getCalibratedAspect = (image) => image.calibration?.aspect || 1;\n\nexport default getCalibratedLengthUnits;\n\nexport {\n  getCalibratedAreaUnits,\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n  getCalibratedAspect,\n};\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\nimport type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport BoundsIJK from '../types/BoundsIJK';\n\nexport type PointInShape = {\n  value: number;\n  index: number;\n  pointIJK: vec3;\n  pointLPS: vec3;\n};\n\nexport type PointInShapeCallback = ({\n  value,\n  index,\n  pointIJK,\n  pointLPS,\n}: {\n  value: number;\n  index: number;\n  pointIJK: vec3;\n  pointLPS: vec3;\n}) => void;\n\nexport type ShapeFnCriteria = (pointIJK: vec3, pointLPS: vec3) => boolean;\n\n/**\n * For each point in the image (If boundsIJK is not provided, otherwise, for each\n * point in the provided bounding box), It runs the provided callback IF the point\n * passes the provided criteria to be inside the shape (which is defined by the\n * provided pointInShapeFn)\n *\n * @param imageData - The image data object.\n * @param dimensions - The dimensions of the image.\n * @param pointInShapeFn - A function that takes a point in LPS space and returns\n * true if the point is in the shape and false if it is not.\n * @param callback - A function that will be called for\n * every point in the shape.\n * @param boundsIJK - The bounds of the volume in IJK coordinates.\n */\nexport default function pointInShapeCallback(\n  imageData: vtkImageData | Types.CPUImageData,\n  pointInShapeFn: ShapeFnCriteria,\n  callback?: PointInShapeCallback,\n  boundsIJK?: BoundsIJK\n): Array<PointInShape> {\n  let iMin, iMax, jMin, jMax, kMin, kMax;\n\n  let scalarData;\n\n  // if getScalarData is a method on imageData\n  if ((imageData as Types.CPUImageData).getScalarData) {\n    scalarData = (imageData as Types.CPUImageData).getScalarData();\n  } else {\n    scalarData = (imageData as vtkImageData)\n      .getPointData()\n      .getScalars()\n      .getData();\n  }\n\n  const dimensions = imageData.getDimensions();\n\n  if (!boundsIJK) {\n    iMin = 0;\n    iMax = dimensions[0];\n    jMin = 0;\n    jMax = dimensions[1];\n    kMin = 0;\n    kMax = dimensions[2];\n  } else {\n    [[iMin, iMax], [jMin, jMax], [kMin, kMax]] = boundsIJK;\n  }\n\n  const start = vec3.fromValues(iMin, jMin, kMin);\n\n  const direction = imageData.getDirection();\n  const rowCosines = direction.slice(0, 3);\n  const columnCosines = direction.slice(3, 6);\n  const scanAxisNormal = direction.slice(6, 9);\n\n  const spacing = imageData.getSpacing();\n  const [rowSpacing, columnSpacing, scanAxisSpacing] = spacing;\n\n  // @ts-ignore will be fixed in vtk-master\n  const worldPosStart = imageData.indexToWorld(start);\n\n  const rowStep = vec3.fromValues(\n    rowCosines[0] * rowSpacing,\n    rowCosines[1] * rowSpacing,\n    rowCosines[2] * rowSpacing\n  );\n\n  const columnStep = vec3.fromValues(\n    columnCosines[0] * columnSpacing,\n    columnCosines[1] * columnSpacing,\n    columnCosines[2] * columnSpacing\n  );\n\n  const scanAxisStep = vec3.fromValues(\n    scanAxisNormal[0] * scanAxisSpacing,\n    scanAxisNormal[1] * scanAxisSpacing,\n    scanAxisNormal[2] * scanAxisSpacing\n  );\n\n  const xMultiple =\n    scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n  const yMultiple = dimensions[0] * xMultiple;\n  const zMultiple = dimensions[1] * yMultiple;\n\n  const pointsInShape: Array<PointInShape> = [];\n\n  const currentPos = vec3.clone(worldPosStart);\n\n  for (let k = kMin; k <= kMax; k++) {\n    const startPosJ = vec3.clone(currentPos);\n\n    for (let j = jMin; j <= jMax; j++) {\n      const startPosI = vec3.clone(currentPos);\n\n      for (let i = iMin; i <= iMax; i++) {\n        const pointIJK: Types.Point3 = [i, j, k];\n\n        // The current world position (pointLPS) is now in currentPos\n        if (pointInShapeFn(currentPos as Types.Point3, currentPos)) {\n          const index = k * zMultiple + j * yMultiple + i * xMultiple;\n          let value;\n          if (xMultiple > 2) {\n            value = [\n              scalarData[index],\n              scalarData[index + 1],\n              scalarData[index + 2],\n            ];\n          } else {\n            value = scalarData[index];\n          }\n\n          pointsInShape.push({ value, index, pointIJK, pointLPS: currentPos });\n          if (callback) {\n            callback({ value, index, pointIJK, pointLPS: currentPos });\n          }\n        }\n\n        // Increment currentPos by rowStep for the next iteration\n        vec3.add(currentPos, currentPos, rowStep);\n      }\n\n      // Reset currentPos to the start of the next J line and increment by columnStep\n      vec3.copy(currentPos, startPosI);\n      vec3.add(currentPos, currentPos, columnStep);\n    }\n\n    // Reset currentPos to the start of the next K slice and increment by scanAxisStep\n    vec3.copy(currentPos, startPosJ);\n    vec3.add(currentPos, currentPos, scanAxisStep);\n  }\n\n  return pointsInShape;\n}\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * With a given vertices (points) coordinates in IJK, it calculates the minimum and maximum\n * coordinate in each axis, and returns them. If dimensions are provided it also\n * clip the min, max to the provided width, height and depth\n *\n * @param points - shape corner points coordinates (IJK)\n * @param dimensions - dimensions of the image\n * @returns [[xMin,xMax],[yMin,yMax], [zMin,zMax]]\n */\nfunction getBoundingBoxAroundShape(\n  points: Types.Point3[],\n  dimensions?: Types.Point3\n): [Types.Point2, Types.Point2, Types.Point2] {\n  let xMin = Infinity;\n  let xMax = 0;\n  let yMin = Infinity;\n  let yMax = 0;\n  let zMin = Infinity;\n  let zMax = 0;\n\n  points.forEach((p) => {\n    xMin = Math.min(p[0], xMin);\n    xMax = Math.max(p[0], xMax);\n    yMin = Math.min(p[1], yMin);\n    yMax = Math.max(p[1], yMax);\n    zMin = Math.min(p[2], zMin);\n    zMax = Math.max(p[2], zMax);\n  });\n\n  xMin = Math.floor(xMin);\n  xMax = Math.floor(xMax);\n  yMin = Math.floor(yMin);\n  yMax = Math.floor(yMax);\n  zMin = Math.floor(zMin);\n  zMax = Math.floor(zMax);\n\n  if (dimensions) {\n    // clip the min, max to the provided width, height and depth\n    const [width, height, depth] = dimensions;\n    xMin = Math.max(0, xMin);\n    xMax = Math.min(width - 1, xMax);\n    yMin = Math.max(0, yMin);\n    yMax = Math.min(height - 1, yMax);\n    zMin = Math.max(0, zMin);\n    zMax = Math.min(depth - 1, zMax);\n  }\n\n  return [\n    [xMin, xMax],\n    [yMin, yMax],\n    [zMin, zMax],\n  ];\n}\n\nexport default getBoundingBoxAroundShape;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport type { vtkImageData } from '@kitware/vtk.js/Common/DataModel/ImageData';\nimport { vec3 } from 'gl-matrix';\nimport { pointInSphere } from './math/sphere';\nimport pointInShapeCallback, {\n  PointInShapeCallback,\n} from './pointInShapeCallback';\nimport { BoundsIJK } from '../types';\nimport { getBoundingBoxAroundShape } from './boundingBox';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * Given an imageData, and the great circle top and bottom points of a sphere,\n * this function will run the callback for each point of the imageData that is\n * within the sphere defined by the great circle points. If the viewport\n * is provided, region of interest will be an accurate approximation of the\n * sphere (using viewport camera), and the resulting performance will be\n * better.\n *\n * @privateRemarks great circle also known as orthodrome is the intersection of\n * the sphere and the plane that passes through the center of the sphere\n *\n * @param imageData - The volume imageData\n * @param circlePoints - bottom and top points of the great circle in world coordinates\n * @param callback - A callback function that will be called for each point in the shape.\n */\nexport default function pointInSurroundingSphereCallback(\n  imageData: vtkImageData,\n  circlePoints: [Types.Point3, Types.Point3],\n  callback: PointInShapeCallback,\n  viewport?: Types.IVolumeViewport\n): void {\n  // We can run the sphere equation to determine if a point is inside\n  // the sphere; however, since the imageData dimensions can be quite large, we\n  // can narrow down the search by estimating the bounds of the sphere in index\n  // space.\n  const { boundsIJK, centerWorld, radiusWorld } = _getBounds(\n    circlePoints,\n    imageData,\n    viewport\n  );\n\n  const sphereObj = {\n    center: centerWorld,\n    radius: radiusWorld,\n  };\n\n  pointInShapeCallback(\n    imageData,\n    (pointLPS) => pointInSphere(sphereObj, pointLPS),\n    callback,\n    boundsIJK\n  );\n}\n\nfunction _getBounds(\n  circlePoints: [Types.Point3, Types.Point3],\n  imageData: vtkImageData,\n  viewport\n): {\n  boundsIJK: BoundsIJK;\n  centerWorld: Types.Point3;\n  radiusWorld: number;\n} {\n  const [bottom, top] = circlePoints;\n\n  // Sphere center in world\n  const centerWorld = vec3.fromValues(\n    (bottom[0] + top[0]) / 2,\n    (bottom[1] + top[1]) / 2,\n    (bottom[2] + top[2]) / 2\n  );\n\n  // sphere radius in world\n  const radiusWorld = vec3.distance(bottom, top) / 2;\n\n  let boundsIJK;\n\n  if (!viewport) {\n    // If no viewport is provide (no camera), we can estimate the bounding box\n    // of the sphere in index space.\n    // This is done by calculating the maximum value for radius in the index\n    // space (since the radius is in world space, we need to convert it to index, and\n    // each dimensions can have a different scale factor). Therefore, by finding\n    // the minimum spacing value in the imageData, we can calculate the maximum\n    // radius in index space and use that to calculate the bounds of the sphere\n    // This will not be accurate, but it is a good first approximation.\n    // sphere center in index\n    const centerIJK = transformWorldToIndex(\n      imageData,\n      centerWorld as Types.Point3\n    );\n\n    const spacings = imageData.getSpacing();\n    const minSpacing = Math.min(...spacings);\n\n    const maxRadiusIJK = Math.ceil(radiusWorld / minSpacing);\n\n    boundsIJK = [\n      [centerIJK[0] - maxRadiusIJK, centerIJK[0] + maxRadiusIJK],\n      [centerIJK[1] - maxRadiusIJK, centerIJK[1] + maxRadiusIJK],\n      [centerIJK[2] - maxRadiusIJK, centerIJK[2] + maxRadiusIJK],\n    ];\n\n    return {\n      boundsIJK,\n      centerWorld: centerWorld as Types.Point3,\n      radiusWorld,\n    };\n  }\n\n  boundsIJK = _computeBoundsIJKWithCamera(\n    imageData,\n    viewport,\n    circlePoints,\n    centerWorld,\n    radiusWorld\n  );\n\n  return {\n    boundsIJK,\n    centerWorld: centerWorld as Types.Point3,\n    radiusWorld,\n  };\n}\n\nfunction _computeBoundsIJKWithCamera(\n  imageData,\n  viewport,\n  circlePoints,\n  centerWorld,\n  radiusWorld\n) {\n  const [bottom, top] = circlePoints;\n\n  const dimensions = imageData.getDimensions() as Types.Point3;\n  const camera = viewport.getCamera();\n\n  // Calculate viewRight from the camera, this will get used in order to\n  // calculate circles topLeft and bottomRight on different planes of intersection\n  // between sphere and viewPlane\n  const viewUp = vec3.fromValues(\n    camera.viewUp[0],\n    camera.viewUp[1],\n    camera.viewUp[2]\n  );\n  const viewPlaneNormal = vec3.fromValues(\n    camera.viewPlaneNormal[0],\n    camera.viewPlaneNormal[1],\n    camera.viewPlaneNormal[2]\n  );\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n  // we need to find the bounding box of the sphere in the image, e.g., the\n  // topLeftWorld and bottomRightWorld points of the bounding box.\n  // We go from the sphereCenter in the normal direction of amount radius, and\n  // we go left to find the topLeftWorld point of the bounding box. Next we go\n  // in the opposite direction and go right to find the bottomRightWorld point\n  // of the bounding box.\n  const topLeftWorld = vec3.create();\n  const bottomRightWorld = vec3.create();\n\n  vec3.scaleAndAdd(topLeftWorld, top, viewPlaneNormal, radiusWorld);\n  vec3.scaleAndAdd(bottomRightWorld, bottom, viewPlaneNormal, -radiusWorld);\n\n  // go in the direction of viewRight with the value of radius\n  vec3.scaleAndAdd(topLeftWorld, topLeftWorld, viewRight, -radiusWorld);\n  vec3.scaleAndAdd(bottomRightWorld, bottomRightWorld, viewRight, radiusWorld);\n\n  // convert the world coordinates to index coordinates\n\n  const sphereCornersIJK = [\n    <Types.Point3>transformWorldToIndex(imageData, <Types.Point3>topLeftWorld),\n    <Types.Point3>(\n      transformWorldToIndex(imageData, <Types.Point3>bottomRightWorld)\n    ),\n  ];\n\n  // get the bounding box of the sphere in the image\n  const boundsIJK = getBoundingBoxAroundShape(sphereCornersIJK, dimensions);\n\n  return boundsIJK;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\ntype Sphere = {\n  center: Types.Point3 | vec3;\n  radius: number;\n};\n\n/**\n * Checks if a point is inside a sphere. Note: this is similar to the\n * `pointInEllipse` function, but since we don't need checks for the\n * ellipse's rotation in different views, we can use a simpler equation\n * which would be faster (no if statements).\n *\n * @param sphere - Sphere object with center and radius\n * @param pointLPS - the point to check in world coordinates\n * @returns boolean\n */\nexport default function pointInSphere(sphere: Sphere, pointLPS: vec3): boolean {\n  const { center, radius } = sphere;\n\n  return (\n    (pointLPS[0] - center[0]) * (pointLPS[0] - center[0]) +\n      (pointLPS[1] - center[1]) * (pointLPS[1] - center[1]) +\n      (pointLPS[2] - center[2]) * (pointLPS[2] - center[2]) <=\n    radius ** 2\n  );\n}\n","/**\n * Truncates decimal points to that there is at least 1+precision significant\n * digits.\n *\n * For example, with the default precision 2 (3 significant digits)\n * * Values larger than 100 show no information after the decimal point\n * * Values between 10 and 99 show 1 decimal point\n * * Values between 1 and 9 show 2 decimal points\n *\n * @param value - to return a fixed measurement value from\n * @param precision - defining how many digits after 1..9 are desired\n */\nfunction roundNumber(\n  value: string | number | (string | number)[],\n  precision = 2\n): string {\n  if (Array.isArray(value)) {\n    return value.map((v) => roundNumber(v, precision)).join(', ');\n  }\n  if (value === undefined || value === null || value === '') {\n    return 'NaN';\n  }\n  value = Number(value);\n  if (value < 0.0001) {\n    return `${value}`;\n  }\n  const fixedPrecision =\n    value >= 100\n      ? precision - 2\n      : value >= 10\n      ? precision - 1\n      : value >= 1\n      ? precision\n      : value >= 0.1\n      ? precision + 1\n      : value >= 0.01\n      ? precision + 2\n      : value >= 0.001\n      ? precision + 3\n      : precision + 4;\n  return value.toFixed(fixedPrecision);\n}\n\nexport default roundNumber;\n","import { triggerEvent, eventTarget } from '@cornerstonejs/core';\nimport Events from '../enums/Events';\nimport { Annotation } from '../types';\n\nexport type FramesRange = [number, number] | number;\n\n/**\n * This class handles the annotation frame range values for multiframes.\n * Mostly used for the Video viewport, it allows references to\n * a range of frame values.\n */\nexport default class AnnotationFrameRange {\n  protected static frameRangeExtractor =\n    /(\\/frames\\/|[&?]frameNumber=)([^/&?]*)/i;\n\n  protected static imageIdToFrames(imageId: string): FramesRange {\n    const match = imageId.match(this.frameRangeExtractor);\n    if (!match || !match[2]) {\n      return null;\n    }\n    const range = match[2].split('-').map((it) => Number(it));\n    if (range.length === 1) {\n      return range[0];\n    }\n    return range as FramesRange;\n  }\n\n  public static framesToString(range) {\n    if (Array.isArray(range)) {\n      return `${range[0]}-${range[1]}`;\n    }\n    return String(range);\n  }\n\n  protected static framesToImageId(\n    imageId: string,\n    range: FramesRange | string\n  ): string {\n    const match = imageId.match(this.frameRangeExtractor);\n    if (!match || !match[2]) {\n      return null;\n    }\n    const newRangeString = this.framesToString(range);\n    return imageId.replace(\n      this.frameRangeExtractor,\n      `${match[1]}${newRangeString}`\n    );\n  }\n\n  /**\n   * Sets the range of frames to associate with the given annotation.\n   * The range can be a single frame number (1 based according to DICOM),\n   * or a range of values in the format `min-max` where min, max are inclusive\n   * Modifies the referencedImageID to specify the updated URL.\n   */\n  public static setFrameRange(\n    annotation: Annotation,\n    range: FramesRange | string,\n    eventBase?: { viewportId; renderingEngineId }\n  ) {\n    const { referencedImageId } = annotation.metadata;\n    annotation.metadata.referencedImageId = this.framesToImageId(\n      referencedImageId,\n      range\n    );\n    const eventDetail = {\n      ...eventBase,\n      annotation,\n    };\n    triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n  }\n\n  public static getFrameRange(\n    annotation: Annotation\n  ): number | [number, number] {\n    return this.imageIdToFrames(annotation.metadata.referencedImageId);\n  }\n}\n","import { Types } from '@cornerstonejs/core';\n\nfunction isWithinThreshold(\n  index: number,\n  imageVolume: Types.IImageVolume,\n  strategySpecificConfiguration: any\n) {\n  const { THRESHOLD_INSIDE_CIRCLE } = strategySpecificConfiguration;\n\n  const voxelValue = imageVolume.getScalarData()[index];\n  const { threshold } = THRESHOLD_INSIDE_CIRCLE;\n\n  return threshold[0] <= voxelValue && voxelValue <= threshold[1];\n}\n\nexport default isWithinThreshold;\n","import type { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\n\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInSurroundingSphereCallback } from '../../../utilities';\nimport isWithinThreshold from './utils/isWithinThreshold';\n\ntype OperationData = {\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: Types.IImageVolume;\n  imageVolume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentationId: string;\n  segmentsLocked: number[];\n  viewPlaneNormal: Types.Point3;\n  viewUp: Types.Point3;\n  strategySpecificConfiguration: any;\n  constraintFn: () => boolean;\n};\n\nfunction fillSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  _inside = true,\n  threshold = false\n): void {\n  const { viewport } = enabledElement;\n  const {\n    volume: segmentation,\n    segmentsLocked,\n    segmentIndex,\n    imageVolume,\n    strategySpecificConfiguration,\n    segmentationId,\n    points,\n  } = operationData;\n\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n  const scalarIndex = [];\n\n  let callback;\n\n  if (threshold) {\n    callback = ({ value, index, pointIJK }) => {\n      if (segmentsLocked.includes(value)) {\n        return;\n      }\n\n      if (\n        isWithinThreshold(index, imageVolume, strategySpecificConfiguration)\n      ) {\n        scalarData[index] = segmentIndex;\n        scalarIndex.push(index);\n      }\n    };\n  } else {\n    callback = ({ index, value }) => {\n      if (segmentsLocked.includes(value)) {\n        return;\n      }\n      scalarData[index] = segmentIndex;\n      scalarIndex.push(index);\n    };\n  }\n\n  pointInSurroundingSphereCallback(\n    imageData,\n    [points[0], points[1]],\n    callback,\n    viewport as Types.IVolumeViewport\n  );\n\n  // Since the scalar indexes start from the top left corner of the cube, the first\n  // slice that needs to be rendered can be calculated from the first mask coordinate\n  // divided by the zMultiple, as well as the last slice for the last coordinate\n  const zMultiple = dimensions[0] * dimensions[1];\n  const minSlice = Math.floor(scalarIndex[0] / zMultiple);\n  const maxSlice = Math.floor(scalarIndex[scalarIndex.length - 1] / zMultiple);\n  const sliceArray = Array.from(\n    { length: maxSlice - minSlice + 1 },\n    (v, k) => k + minSlice\n  );\n\n  triggerSegmentationDataModified(segmentationId, sliceArray);\n}\n\n/**\n * Fill inside a sphere with the given segment index in the given operation data. The\n * operation data contains the sphere required points.\n * @param enabledElement - The element that is enabled and selected.\n * @param operationData - OperationData\n */\nexport function fillInsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillSphere(enabledElement, operationData, true);\n}\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being filled.\n * @param operationData - EraseOperationData\n */\nexport function thresholdInsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  const { volume, imageVolume } = operationData;\n\n  if (\n    !csUtils.isEqual(volume.dimensions, imageVolume.dimensions) ||\n    !csUtils.isEqual(volume.direction, imageVolume.direction)\n  ) {\n    throw new Error(\n      'Only source data the same dimensions/size/orientation as the segmentation currently supported.'\n    );\n  }\n\n  fillSphere(enabledElement, operationData, true, true);\n}\n\n/**\n * Fill outside a sphere with the given segment index in the given operation data. The\n * operation data contains the sphere required points.\n * @param enabledElement - The element that is enabled and selected.\n * @param operationData - OperationData\n */\nexport function fillOutsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillSphere(enabledElement, operationData, false);\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport { fillInsideSphere } from './fillSphere';\n\ntype OperationData = {\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  imageVolume: Types.IImageVolume;\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentationId: string;\n  segmentsLocked: number[];\n  viewPlaneNormal: Types.Point3;\n  viewUp: Types.Point3;\n  constraintFn: () => boolean;\n  strategySpecificConfiguration: any;\n};\n\nexport function eraseInsideSphere(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  // Take the arguments and set the segmentIndex to 0,\n  // Then use existing fillInsideCircle functionality.\n  const eraseOperationData = Object.assign({}, operationData, {\n    segmentIndex: 0,\n  });\n\n  fillInsideSphere(enabledElement, eraseOperationData);\n}\n","import type { Types } from '@cornerstonejs/core';\n\ntype canvasCoordinates = [\n  Types.Point2, // bottom\n  Types.Point2, // top\n  Types.Point2, // left\n  Types.Point2 // right\n];\n\n/**\n * It takes the canvas coordinates of the ellipse corners and returns the top left and bottom right\n * corners of it\n *\n * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasEllipseCorners(\n  ellipseCanvasPoints: canvasCoordinates\n): Array<Types.Point2> {\n  const [bottom, top, left, right] = ellipseCanvasPoints;\n\n  const topLeft = <Types.Point2>[left[0], top[1]];\n  const bottomRight = <Types.Point2>[right[0], bottom[1]];\n\n  return [topLeft, bottomRight];\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\ntype Ellipse = {\n  center: Types.Point3;\n  xRadius: number;\n  yRadius: number;\n  zRadius: number;\n};\n\n/**\n * Given an ellipse and a point, return true if the point is inside the ellipse\n * @param ellipse - The ellipse object to check against.\n * @param pointLPS - The point in LPS space to test.\n * @returns A boolean value.\n */\nexport default function pointInEllipse(\n  ellipse: Ellipse,\n  pointLPS: vec3\n): boolean {\n  const { center: circleCenterWorld, xRadius, yRadius, zRadius } = ellipse;\n  const [x, y, z] = pointLPS;\n  const [x0, y0, z0] = circleCenterWorld;\n\n  let inside = 0;\n  if (xRadius !== 0) {\n    inside += ((x - x0) * (x - x0)) / (xRadius * xRadius);\n  }\n\n  if (yRadius !== 0) {\n    inside += ((y - y0) * (y - y0)) / (yRadius * yRadius);\n  }\n\n  if (zRadius !== 0) {\n    inside += ((z - z0) * (z - z0)) / (zRadius * zRadius);\n  }\n\n  return inside <= 1;\n}\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\n\nimport {\n  getCanvasEllipseCorners,\n  pointInEllipse,\n} from '../../../utilities/math/ellipse';\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInShapeCallback } from '../../../utilities';\nimport isWithinThreshold from './utils/isWithinThreshold';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype OperationData = {\n  segmentationId: string;\n  imageVolume: Types.IImageVolume;\n  points: any; // Todo:fix\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentsLocked: number[];\n  viewPlaneNormal: number[];\n  viewUp: number[];\n  strategySpecificConfiguration: any;\n  constraintFn: () => boolean;\n};\n\nfunction fillCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  threshold = false\n): void {\n  const {\n    volume: segmentationVolume,\n    imageVolume,\n    points,\n    segmentsLocked,\n    segmentIndex,\n    segmentationId,\n    strategySpecificConfiguration,\n  } = operationData;\n  const { imageData, dimensions } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n  const { viewport } = enabledElement;\n\n  // Average the points to get the center of the ellipse\n  const center = vec3.fromValues(0, 0, 0);\n  points.forEach((point) => {\n    vec3.add(center, center, point);\n  });\n  vec3.scale(center, center, 1 / points.length);\n\n  const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n  // 1. From the drawn tool: Get the ellipse (circle) topLeft and bottomRight\n  // corners in canvas coordinates\n  const [topLeftCanvas, bottomRightCanvas] =\n    getCanvasEllipseCorners(canvasCoordinates);\n\n  // 2. Find the extent of the ellipse (circle) in IJK index space of the image\n  const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n  const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n\n  const ellipsoidCornersIJK = [\n    <Types.Point3>transformWorldToIndex(imageData, topLeftWorld),\n    <Types.Point3>transformWorldToIndex(imageData, bottomRightWorld),\n  ];\n\n  const boundsIJK = getBoundingBoxAroundShape(ellipsoidCornersIJK, dimensions);\n\n  // using circle as a form of ellipse\n  const ellipseObj = {\n    center: center as Types.Point3,\n    xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n    yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n    zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n  };\n\n  const modifiedSlicesToUse = new Set() as Set<number>;\n\n  let callback;\n\n  if (threshold) {\n    callback = ({ value, index, pointIJK }) => {\n      if (segmentsLocked.includes(value)) {\n        return;\n      }\n\n      if (\n        isWithinThreshold(index, imageVolume, strategySpecificConfiguration)\n      ) {\n        scalarData[index] = segmentIndex;\n        //Todo: I don't think this will always be index 2 in streamingImageVolume?\n        modifiedSlicesToUse.add(pointIJK[2]);\n      }\n    };\n  } else {\n    callback = ({ value, index, pointIJK }) => {\n      if (segmentsLocked.includes(value)) {\n        return;\n      }\n      scalarData[index] = segmentIndex;\n      //Todo: I don't think this will always be index 2 in streamingImageVolume?\n      modifiedSlicesToUse.add(pointIJK[2]);\n    };\n  }\n\n  pointInShapeCallback(\n    imageData,\n    (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n    callback,\n    boundsIJK\n  );\n\n  const arrayOfSlices: number[] = Array.from(modifiedSlicesToUse);\n\n  triggerSegmentationDataModified(segmentationId, arrayOfSlices);\n}\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function fillInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillCircle(enabledElement, operationData, false);\n}\n\n/**\n * Fill inside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels inside the defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function thresholdInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  const { volume, imageVolume } = operationData;\n\n  if (\n    !csUtils.isEqual(volume.dimensions, imageVolume.dimensions) ||\n    !csUtils.isEqual(volume.direction, imageVolume.direction)\n  ) {\n    throw new Error(\n      'Only source data the same dimensions/size/orientation as the segmentation currently supported.'\n    );\n  }\n\n  fillCircle(enabledElement, operationData, true);\n}\n\n/**\n * Fill outside the circular region segment inside the segmentation defined by the operationData.\n * It fills the segmentation pixels outside the  defined circle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function fillOutsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  throw new Error('Not yet implemented');\n}\n","import type { Types } from '@cornerstonejs/core';\n\nimport { fillInsideCircle } from './fillCircle';\n\ntype OperationData = {\n  segmentationId: string;\n  imageVolume: Types.IImageVolume;\n  points: any; // Todo:fix\n  volume: Types.IImageVolume;\n  segmentIndex: number;\n  segmentsLocked: number[];\n  viewPlaneNormal: number[];\n  viewUp: number[];\n  strategySpecificConfiguration: any;\n  constraintFn: () => boolean;\n};\n\nexport function eraseInsideCircle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  // Take the arguments and set the segmentIndex to 0,\n  // Then use existing fillInsideCircle functionality.\n  const eraseOperationData = {\n    ...operationData,\n    segmentIndex: 0,\n  };\n\n  fillInsideCircle(enabledElement, eraseOperationData);\n}\n","import { ToolGroupSpecificRepresentation } from '../../types/SegmentationStateTypes';\nimport { getDefaultSegmentationStateManager } from './segmentationState';\nimport { triggerSegmentationRepresentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the active segmentation representation for the tool group with\n * the given toolGroupId.\n * @param toolGroupId - The Id of the tool group\n * @returns The active segmentation representation for the tool group.\n */\nfunction getActiveSegmentationRepresentation(\n  toolGroupId: string\n): ToolGroupSpecificRepresentation {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  const toolGroupSegmentationRepresentations =\n    segmentationStateManager.getSegmentationRepresentations(toolGroupId);\n\n  if (!toolGroupSegmentationRepresentations) {\n    return;\n  }\n\n  const activeRepresentation = toolGroupSegmentationRepresentations.find(\n    (representation) => representation.active\n  );\n\n  return activeRepresentation;\n}\n\n/**\n * Set the active segmentation for the given tool group for all its viewports\n *\n * @param toolGroupId - The Id of the tool group to set the active\n * segmentation for.\n * @param segmentationRepresentationUID - The id of the segmentation representation to set as\n * active.\n */\nfunction setActiveSegmentationRepresentation(\n  toolGroupId: string,\n  segmentationRepresentationUID: string\n): void {\n  const segmentationStateManager = getDefaultSegmentationStateManager();\n\n  segmentationStateManager.setActiveSegmentationRepresentation(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  // get\n  getActiveSegmentationRepresentation,\n  // set\n  setActiveSegmentationRepresentation,\n};\n","import { getActiveSegmentationRepresentation } from './activeSegmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Get the locked status for a segment index in a segmentation\n * @param segmentationId - The id of the segmentation that the segment\n * belongs to.\n * @param segmentIndex - The index of the segment\n * @returns A boolean value indicating whether the segment is locked or not.\n */\nfunction isSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number\n): boolean {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return segmentsLocked.has(segmentIndex);\n}\n\n/**\n * Set the locked status of a segment index in a segmentation\n * @param segmentationId - The id of the segmentation whose segment\n * index is being modified.\n * @param segmentIndex - The index of the segment to lock/unlock.\n */\nfunction setSegmentIndexLocked(\n  segmentationId: string,\n  segmentIndex: number,\n  locked = true\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n\n  if (locked) {\n    segmentsLocked.add(segmentIndex);\n  } else {\n    segmentsLocked.delete(segmentIndex);\n  }\n\n  triggerSegmentationModified(segmentationId);\n}\n\n/**\n * Get the locked segments for a segmentation\n * @param segmentationId - The id of the segmentation to get locked\n * segments for.\n * @returns An array of locked segment indices.\n */\nfunction getLockedSegments(segmentationId: string): number[] | [] {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (!segmentation) {\n    throw new Error(`No segmentation state found for ${segmentationId}`);\n  }\n\n  const { segmentsLocked } = segmentation;\n  return Array.from(segmentsLocked);\n}\n\nexport { isSegmentIndexLocked, setSegmentIndexLocked, getLockedSegments };\n","import { getSegmentation } from './segmentationState';\nimport { triggerSegmentationModified } from './triggerSegmentationEvents';\n\n/**\n * Set the active segment index for a segmentation Id. It fires a global state\n * modified event.\n *\n * @triggers SEGMENTATION_MODIFIED\n * @param segmentationId - The id of the segmentation that the segment belongs to.\n * @param segmentIndex - The index of the segment to be activated.\n */\nfunction setActiveSegmentIndex(\n  segmentationId: string,\n  segmentIndex: number\n): void {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation?.activeSegmentIndex !== segmentIndex) {\n    segmentation.activeSegmentIndex = segmentIndex;\n\n    triggerSegmentationModified(segmentationId);\n  }\n}\n\n/**\n * Get the active segment index for a segmentation in the global state\n * @param segmentationId - The id of the segmentation to get the active segment index from.\n * @returns The active segment index for the given segmentation.\n */\nfunction getActiveSegmentIndex(segmentationId: string): number | undefined {\n  const segmentation = getSegmentation(segmentationId);\n\n  if (segmentation) {\n    return segmentation.activeSegmentIndex;\n  }\n}\n\nexport { getActiveSegmentIndex, setActiveSegmentIndex };\n","import { utilities } from '@cornerstonejs/core';\nimport * as SegmentationState from '../../../stateManagement/segmentation/segmentationState';\nimport { Color } from '../../../types/SegmentationStateTypes';\nimport { ColorLUT } from '../../../types/SegmentationStateTypes';\nimport { triggerSegmentationRepresentationModified } from '../triggerSegmentationEvents';\nimport { SegmentationRepresentations } from '../../../enums';\n\n/**\n * addColorLUT - Adds a new color LUT to the state at the given colorLUTIndex.\n * If no colorLUT is provided, a new color LUT is generated.\n *\n * @param colorLUTIndex - the index of the colorLUT in the state\n * @param colorLUT - An array of The colorLUT to set.\n * @returns\n */\nfunction addColorLUT(colorLUT: ColorLUT, colorLUTIndex: number): void {\n  if (!colorLUT) {\n    throw new Error('addColorLUT: colorLUT is required');\n  }\n\n  // Append the \"zero\" (no label) color to the front of the LUT, if necessary.\n  if (!utilities.isEqual(colorLUT[0], [0, 0, 0, 0])) {\n    console.warn(\n      'addColorLUT: [0, 0, 0, 0] color is not provided for the background color (segmentIndex =0), automatically adding it'\n    );\n    colorLUT.unshift([0, 0, 0, 0]);\n  }\n\n  SegmentationState.addColorLUT(colorLUT, colorLUTIndex);\n}\n\n/**\n * It sets the toolGroup's segmentationRepresentation to use the provided\n * colorLUT at the given colorLUTIndex.\n * @param toolGroupId - the id of the toolGroup that renders the representation\n * @param segmentationRepresentationUID - the representationUID for the segmentation\n * @param colorLUTIndex - the index of the colorLUT to use\n */\nfunction setColorLUT(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  colorLUTIndex: number\n): void {\n  const segRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segRepresentation) {\n    throw new Error(\n      `setColorLUT: could not find segmentation representation with UID ${segmentationRepresentationUID}`\n    );\n  }\n\n  if (!SegmentationState.getColorLUT(colorLUTIndex)) {\n    throw new Error(\n      `setColorLUT: could not find colorLUT with index ${colorLUTIndex}`\n    );\n  }\n\n  segRepresentation.colorLUTIndex = colorLUTIndex;\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\n/**\n * Given a tool group UID, a segmentation representationUID, and a segment index, return the\n * color for that segment. It can be used for segmentation tools that need to\n * display the color of their annotation.\n *\n * @param toolGroupId - The Id of the tool group that owns the segmentation representation.\n * @param segmentationRepresentationUID - The uid of the segmentation representation\n * @param segmentIndex - The index of the segment in the segmentation\n * @returns A color.\n */\nfunction getColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number\n): Color {\n  const segmentationRepresentation =\n    SegmentationState.getSegmentationRepresentationByUID(\n      toolGroupId,\n      segmentationRepresentationUID\n    );\n\n  if (!segmentationRepresentation) {\n    throw new Error(\n      `segmentation representation with UID ${segmentationRepresentationUID} does not exist for tool group ${toolGroupId}`\n    );\n  }\n\n  const { colorLUTIndex } = segmentationRepresentation;\n\n  // get colorLUT\n  const colorLUT = SegmentationState.getColorLUT(colorLUTIndex);\n  return colorLUT[segmentIndex];\n}\n\nfunction setColorForSegmentIndex(\n  toolGroupId: string,\n  segmentationRepresentationUID: string,\n  segmentIndex: number,\n  color: Color\n): void {\n  // Get the reference to the color in the colorLUT.\n  const colorReference = getColorForSegmentIndex(\n    toolGroupId,\n    segmentationRepresentationUID,\n    segmentIndex\n  );\n\n  // Modify the values by reference\n  for (let i = 0; i < color.length; i++) {\n    colorReference[i] = color[i];\n  }\n\n  triggerSegmentationRepresentationModified(\n    toolGroupId,\n    segmentationRepresentationUID\n  );\n}\n\nexport {\n  getColorForSegmentIndex,\n  addColorLUT,\n  setColorLUT,\n  setColorForSegmentIndex,\n};\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nimport type { Types } from '@cornerstonejs/core';\nimport type {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BaseTool } from '../base';\nimport {\n  fillInsideSphere,\n  thresholdInsideSphere,\n} from './strategies/fillSphere';\nimport { eraseInsideSphere } from './strategies/eraseSphere';\nimport {\n  thresholdInsideCircle,\n  fillInsideCircle,\n} from './strategies/fillCircle';\nimport { eraseInsideCircle } from './strategies/eraseCircle';\nimport { Events, ToolModes } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportUIDs from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  state as segmentationState,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * @public\n */\nclass BrushTool extends BaseTool {\n  static toolName;\n  private _editData: {\n    segmentation: Types.IImageVolume;\n    imageVolume: Types.IImageVolume; //\n    segmentsLocked: number[]; //\n  } | null;\n  private _hoverData?: {\n    brushCursor: any;\n    segmentationId: string;\n    segmentIndex: number;\n    segmentationRepresentationUID: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    centerCanvas?: Array<number>;\n  };\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE_CIRCLE: fillInsideCircle,\n          ERASE_INSIDE_CIRCLE: eraseInsideCircle,\n          FILL_INSIDE_SPHERE: fillInsideSphere,\n          ERASE_INSIDE_SPHERE: eraseInsideSphere,\n          THRESHOLD_INSIDE_CIRCLE: thresholdInsideCircle,\n          THRESHOLD_INSIDE_SPHERE: thresholdInsideSphere,\n        },\n        strategySpecificConfiguration: {\n          THRESHOLD_INSIDE_CIRCLE: {\n            threshold: [-150, -70], // E.g. CT Fat // Only used during threshold strategies.\n          },\n        },\n        defaultStrategy: 'FILL_INSIDE_CIRCLE',\n        activeStrategy: 'FILL_INSIDE_CIRCLE',\n        brushSize: 25,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolPassive = () => {\n    this.disableCursor();\n  };\n\n  onSetToolEnabled = () => {\n    this.disableCursor();\n  };\n\n  onSetToolDisabled = () => {\n    this.disableCursor();\n  };\n\n  private disableCursor() {\n    this._hoverData = undefined;\n  }\n\n  preMouseDownCallback = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): boolean => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n    }\n\n    const { segmentationId, type } = activeSegmentationRepresentation;\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const { representationData } =\n      segmentationState.getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with this tool?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    const actors = viewport.getActors();\n\n    // Note: For tools that need the source data. Assumed to use\n    // First volume actor for now.\n    const firstVolumeActorUID = actors[0].uid;\n    const imageVolume = cache.getVolume(firstVolumeActorUID);\n\n    const viewportIdsToRender = [viewport.id];\n\n    this._editData = {\n      segmentation,\n      imageVolume,\n      segmentsLocked,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n\n    return true;\n  };\n\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): void => {\n    if (this.mode === ToolModes.Active) {\n      this.updateCursor(evt);\n    }\n  };\n\n  private updateCursor(evt: EventTypes.InteractionEventType) {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const { currentPoints } = eventData;\n    const centerCanvas = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      console.warn(\n        'No active segmentation detected, create one before using the brush tool'\n      );\n      return;\n    }\n\n    const { segmentationRepresentationUID, segmentationId } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const viewportIdsToRender = [viewport.id];\n\n    // Center of circle in canvas Coordinates\n\n    const brushCursor = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {},\n    };\n\n    this._hoverData = {\n      brushCursor,\n      centerCanvas,\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      segmentColor,\n      viewportIdsToRender,\n    };\n\n    this._calculateCursor(element, centerCanvas);\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n  }\n\n  private _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { imageVolume, segmentation, segmentsLocked } = this._editData;\n\n    this.updateCursor(evt);\n\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      brushCursor,\n      viewportIdsToRender,\n    } = this._hoverData;\n\n    const { data } = brushCursor;\n    const { viewPlaneNormal, viewUp } = brushCursor.metadata;\n\n    triggerAnnotationRenderForViewportUIDs(\n      renderingEngine,\n      viewportIdsToRender\n    );\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation, // todo: just pass the segmentationId instead\n      imageVolume,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      toolGroupId: this.toolGroupId,\n      segmentationId,\n      segmentationRepresentationUID,\n      viewUp,\n      strategySpecificConfiguration:\n        this.configuration.strategySpecificConfiguration,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  private _calculateCursor(element, centerCanvas) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n    const camera = viewport.getCamera();\n    const { brushSize } = this.configuration;\n\n    const viewUp = vec3.fromValues(\n      camera.viewUp[0],\n      camera.viewUp[1],\n      camera.viewUp[2]\n    );\n    const viewPlaneNormal = vec3.fromValues(\n      camera.viewPlaneNormal[0],\n      camera.viewPlaneNormal[1],\n      camera.viewPlaneNormal[2]\n    );\n    const viewRight = vec3.create();\n\n    vec3.cross(viewRight, viewUp, viewPlaneNormal);\n\n    // in the world coordinate system, the brushSize is the radius of the circle\n    // in mm\n    const centerCursorInWorld: Types.Point3 = canvasToWorld([\n      centerCanvas[0],\n      centerCanvas[1],\n    ]);\n\n    const bottomCursorInWorld = vec3.create();\n    const topCursorInWorld = vec3.create();\n    const leftCursorInWorld = vec3.create();\n    const rightCursorInWorld = vec3.create();\n\n    // Calculate the bottom and top points of the circle in world coordinates\n    for (let i = 0; i <= 2; i++) {\n      bottomCursorInWorld[i] = centerCursorInWorld[i] - viewUp[i] * brushSize;\n      topCursorInWorld[i] = centerCursorInWorld[i] + viewUp[i] * brushSize;\n      leftCursorInWorld[i] = centerCursorInWorld[i] - viewRight[i] * brushSize;\n      rightCursorInWorld[i] = centerCursorInWorld[i] + viewRight[i] * brushSize;\n    }\n\n    const { brushCursor } = this._hoverData;\n    const { data } = brushCursor;\n\n    if (data.handles === undefined) {\n      data.handles = {};\n    }\n\n    data.handles.points = [\n      bottomCursorInWorld,\n      topCursorInWorld,\n      leftCursorInWorld,\n      rightCursorInWorld,\n    ];\n\n    data.invalidated = false;\n  }\n\n  private _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { imageVolume, segmentation, segmentsLocked } = this._editData;\n    const {\n      segmentIndex,\n      segmentationId,\n      segmentationRepresentationUID,\n      brushCursor,\n    } = this._hoverData;\n\n    const { data } = brushCursor;\n    const { viewPlaneNormal, viewUp } = brushCursor.metadata;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this._editData = null;\n    this.updateCursor(evt);\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      imageVolume,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      toolGroupId: this.toolGroupId,\n      segmentationId,\n      segmentationRepresentationUID,\n      viewUp,\n      strategySpecificConfiguration:\n        this.configuration.strategySpecificConfiguration,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  private _activateDraw = (element: HTMLDivElement): void => {\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  private _deactivateDraw = (element: HTMLDivElement): void => {\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n  };\n\n  public invalidateBrushCursor() {\n    if (this._hoverData !== undefined) {\n      const { data } = this._hoverData.brushCursor;\n\n      data.invalidated = true;\n    }\n  }\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): void {\n    if (!this._hoverData) {\n      return;\n    }\n\n    const { viewport } = enabledElement;\n\n    const viewportIdsToRender = this._hoverData.viewportIdsToRender;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return;\n    }\n\n    const brushCursor = this._hoverData.brushCursor;\n\n    if (brushCursor.data.invalidated === true) {\n      const { centerCanvas } = this._hoverData;\n      const { element } = viewport;\n\n      // This can be set true when changing the brush size programmatically\n      // whilst the cursor is being rendered.\n      this._calculateCursor(element, centerCanvas);\n    }\n\n    const toolMetadata = brushCursor.metadata;\n    const annotationUID = toolMetadata.brushCursorUID;\n\n    const data = brushCursor.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n  }\n}\n\nBrushTool.toolName = 'Brush';\nexport default BrushTool;\n","import { Types } from '@cornerstonejs/core';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\n\nexport type ThresholdInformation = {\n  volume: Types.IImageVolume;\n  lower: number;\n  upper: number;\n};\n\nexport default function getBrushToolInstances(\n  toolGroupId: string,\n  toolName?: string\n) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  if (toolName && toolInstances[toolName]) {\n    return [toolInstances[toolName]];\n  }\n\n  // For each tool that has BrushTool as base class, set the brush size.\n  const brushBasedToolInstances = Object.values(toolInstances).filter(\n    (toolInstance) => toolInstance instanceof BrushTool\n  ) as BrushTool[];\n\n  return brushBasedToolInstances;\n}\n\nconst equalsCheck = (a, b) => {\n  return JSON.stringify(a) === JSON.stringify(b);\n};\n\n/**\n * Given the center of a voxel in world coordinates, calculate the voxel\n * corners in world coords to calculate the voxel overlap in another volume\n */\nexport function getVoxelOverlap(\n  imageData,\n  dimensions,\n  voxelSpacing,\n  voxelCenter\n) {\n  const voxelCornersWorld = [];\n  for (let i = 0; i < 2; i++) {\n    for (let j = 0; j < 2; j++) {\n      for (let k = 0; k < 2; k++) {\n        const point = [...voxelCenter]; // Create a new point from voxelCenter\n        point[0] = point[0] + ((i * 2 - 1) * voxelSpacing[0]) / 2;\n        point[1] = point[1] + ((j * 2 - 1) * voxelSpacing[1]) / 2;\n        point[2] = point[2] + ((k * 2 - 1) * voxelSpacing[2]) / 2;\n        voxelCornersWorld.push(point);\n      }\n    }\n  }\n  const voxelCornersIJK = voxelCornersWorld.map(\n    (world) => csUtils.transformWorldToIndex(imageData, world) as Types.Point3\n  );\n  const overlapBounds = getBoundingBoxAroundShape(voxelCornersIJK, dimensions);\n\n  return overlapBounds;\n}\n\n/**\n * Prepare a list of volume information objects for callback functions\n */\nexport function processVolumes(\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[]\n) {\n  const { spacing: segmentationSpacing } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n\n  // prepare a list of volume information objects for callback functions\n  const volumeInfoList = [];\n  let baseVolumeIdx = 0;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    const { imageData, spacing, dimensions } =\n      thresholdVolumeInformation[i].volume;\n\n    const volumeSize =\n      thresholdVolumeInformation[i].volume.getScalarData().length;\n    // discover the index of the volume the segmentation data is based on\n    if (\n      volumeSize === scalarData.length &&\n      equalsCheck(spacing, segmentationSpacing)\n    ) {\n      baseVolumeIdx = i;\n    }\n\n    // prepare information used in callback functions\n    const referenceValues = imageData.getPointData().getScalars().getData();\n    const lower = thresholdVolumeInformation[i].lower;\n    const upper = thresholdVolumeInformation[i].upper;\n\n    volumeInfoList.push({\n      imageData,\n      referenceValues,\n      lower,\n      upper,\n      spacing,\n      dimensions,\n      volumeSize,\n    });\n  }\n\n  return {\n    volumeInfoList,\n    baseVolumeIdx,\n  };\n}\n","import { Types } from '@cornerstonejs/core';\nimport { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { BoundsIJK } from '../../types';\nimport {\n  getVoxelOverlap,\n  processVolumes,\n  ThresholdInformation,\n} from './utilities';\n\nexport type ThresholdRangeOptions = {\n  overwrite: boolean;\n  boundsIJK: BoundsIJK;\n  overlapType?: number;\n};\n\n/**\n * It thresholds a segmentation volume based on a set of threshold values with\n * respect to a list of volumes and respective threshold ranges.\n * @param segmentationVolume - the segmentation volume to be modified\n * @param thresholdVolumeInformation - array of objects containing volume data\n * and a range (lower and upper values) to threshold\n * @param options - the options for thresholding\n * As there is a chance the volumes might have different dimensions and spacing,\n * could be the case of no 1 to 1 mapping. So we need to work with the idea of\n * voxel overlaps (1 to many mappings). We consider all intersections valid, to\n * avoid the complexity to calculate a minimum voxel intersection percentage.\n * This function, given a voxel center and spacing, calculates the overlap of\n * the voxel with another volume and range check the voxels in the overlap.\n * Three situations can occur: all voxels pass the range check, some voxels pass\n * or none voxels pass. The overlapType parameter indicates if the user requires\n * all voxels pass (overlapType = 1) or any voxel pass (overlapType = 0)\n *\n * @returns segmented volume\n */\nfunction thresholdVolumeByRange(\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[],\n  options: ThresholdRangeOptions\n): Types.IImageVolume {\n  const { imageData: segmentationImageData } = segmentationVolume;\n  const scalarData = segmentationVolume.getScalarData();\n\n  const { overwrite, boundsIJK } = options;\n  const overlapType = options?.overlapType || 0;\n\n  // set the segmentation to all zeros\n  if (overwrite) {\n    for (let i = 0; i < scalarData.length; i++) {\n      scalarData[i] = 0;\n    }\n  }\n\n  const { baseVolumeIdx, volumeInfoList } = processVolumes(\n    segmentationVolume,\n    thresholdVolumeInformation\n  );\n\n  // global variables used in callbackOverlap function\n  let overlaps, total, range;\n\n  const testOverlapRange = (volumeInfo, voxelSpacing, voxelCenter) => {\n    /**\n     * This callback function will test all overlaps between a voxel in base\n     * volume (the reference for segmentation volume creation) and voxels in other\n     * volumes.\n     */\n    const callbackOverlap = ({ value }) => {\n      total = total + 1;\n      if (value >= range.lower && value <= range.upper) {\n        overlaps = overlaps + 1;\n      }\n    };\n\n    const { imageData, dimensions, lower, upper } = volumeInfo;\n\n    const overlapBounds = getVoxelOverlap(\n      imageData,\n      dimensions,\n      voxelSpacing,\n      voxelCenter\n    );\n\n    // reset global variables and setting the range check\n    total = 0;\n    overlaps = 0;\n    range = { lower, upper };\n\n    let overlapTest = false;\n\n    // check all voxel overlaps\n    pointInShapeCallback(imageData, () => true, callbackOverlap, overlapBounds);\n\n    if (overlapType === 0) {\n      overlapTest = overlaps > 0; // any voxel overlap is accepted\n    } else if (overlapType == 1) {\n      overlapTest = overlaps === total; // require all voxel overlaps\n    }\n    return overlapTest;\n  };\n\n  // range checks a voxel in a volume with same dimension as the segmentation\n  const testRange = (volumeInfo, pointIJK) => {\n    const { imageData, referenceValues, lower, upper } = volumeInfo;\n    const offset = imageData.computeOffsetIndex(pointIJK);\n\n    const value = referenceValues[offset];\n    if (value <= lower || value >= upper) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  /**\n   * This callback function will test all overlaps between a voxel in base\n   * volume (the reference for segmentation volume creation) and voxels in other\n   * volumes.\n   */\n  const callback = ({ index, pointIJK, pointLPS }) => {\n    let insert = volumeInfoList.length > 0;\n    for (let i = 0; i < volumeInfoList.length; i++) {\n      // if volume has the same size as segmentation volume, just range check\n      if (volumeInfoList[i].volumeSize === scalarData.length) {\n        insert = testRange(volumeInfoList[i], pointIJK);\n      } else {\n        // if not, need to calculate overlaps\n        insert = testOverlapRange(\n          volumeInfoList[i],\n          volumeInfoList[baseVolumeIdx].spacing,\n          pointLPS\n        );\n      }\n      if (!insert) {\n        break;\n      }\n    }\n\n    // Todo: make the segmentIndex a parameter\n    if (insert) {\n      scalarData[index] = 1;\n    }\n  };\n\n  pointInShapeCallback(segmentationImageData, () => true, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationVolume.volumeId);\n\n  return segmentationVolume;\n}\n\nexport default thresholdVolumeByRange;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Given an array of viewports, returns a list of viewports that are viewing a\n * world space with the given `FrameOfReferenceUID`.\n *\n * @param viewports - An array of viewports.\n * @param FrameOfReferenceUID - The UID defining a particular world space/Frame Of Reference.\n *\n * @returns A filtered array of viewports.\n */\nexport default function filterViewportsWithFrameOfReferenceUID(\n  viewports: Array<Types.IViewport>,\n  FrameOfReferenceUID: string\n): Array<Types.IStackViewport | Types.IVolumeViewport> {\n  const numViewports = viewports.length;\n  const viewportsWithFrameOfReferenceUID = [];\n\n  for (let vp = 0; vp < numViewports; vp++) {\n    const viewport = viewports[vp];\n\n    if (viewport.getFrameOfReferenceUID() === FrameOfReferenceUID) {\n      viewportsWithFrameOfReferenceUID.push(viewport);\n    }\n  }\n\n  return viewportsWithFrameOfReferenceUID;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport type { IToolGroup } from '../../types';\nimport { ToolGroupManager } from '../../store';\nimport { ToolModes } from '../../enums';\n\nconst { Active, Passive, Enabled } = ToolModes;\n\n/**\n * Given an array of viewports, returns a list of viewports that have the the specified tool enabled.\n *\n * @param viewports - An array of viewports.\n * @param toolName - The name of the tool to filter on.\n *\n * @returns A filtered array of viewports.\n */\nexport default function filterViewportsWithToolEnabled(\n  viewports: Array<Types.IViewport>,\n  toolName: string\n): Array<Types.IStackViewport | Types.IVolumeViewport> {\n  const numViewports = viewports.length;\n\n  const viewportsWithToolEnabled = [];\n\n  for (let vp = 0; vp < numViewports; vp++) {\n    const viewport = viewports[vp];\n\n    const toolGroup = ToolGroupManager.getToolGroupForViewport(\n      viewport.id,\n      viewport.renderingEngineId\n    );\n\n    if (!toolGroup) {\n      continue;\n    }\n\n    const hasTool = _toolGroupHasActiveEnabledOrPassiveTool(\n      toolGroup,\n      toolName\n    );\n\n    if (hasTool) {\n      viewportsWithToolEnabled.push(viewport);\n    }\n  }\n\n  return viewportsWithToolEnabled;\n}\n\n/**\n * Given a toolGroup, return true if it contains the tool with the given `toolName` and it is\n * active, passive or enabled.\n *\n * @param toolGroup - The `toolGroup` to check.\n * @param toolName - The name of the tool.\n *\n * @returns True if the tool is enabled, passive or active in the `toolGroup`.\n */\nfunction _toolGroupHasActiveEnabledOrPassiveTool(\n  toolGroup: IToolGroup,\n  toolName: string\n) {\n  const { toolOptions } = toolGroup;\n  const tool = toolOptions[toolName];\n\n  if (!tool) {\n    return false;\n  }\n\n  const toolMode = tool.mode;\n\n  return toolMode === Active || toolMode === Passive || toolMode === Enabled;\n}\n","import { vec3 } from 'gl-matrix';\n\n/**\n * It filters the viewports that are looking in the same view as the camera\n * It basically checks if the viewPlaneNormal is parallel to the camera viewPlaneNormal\n * @param viewports - Array of viewports to filter\n * @param camera - Camera to compare against\n * @returns - Array of viewports with the same view\n */\nexport function filterViewportsWithParallelNormals(\n  viewports,\n  camera,\n  EPS = 0.999\n) {\n  return viewports.filter((viewport) => {\n    const vpCamera = viewport.getCamera();\n\n    const isParallel =\n      Math.abs(vec3.dot(vpCamera.viewPlaneNormal, camera.viewPlaneNormal)) >\n      EPS;\n\n    return isParallel;\n  });\n}\n\nexport default filterViewportsWithParallelNormals;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport filterViewportsWithFrameOfReferenceUID from './filterViewportsWithFrameOfReferenceUID';\nimport filterViewportsWithToolEnabled from './filterViewportsWithToolEnabled';\nimport filterViewportsWithParallelNormals from './filterViewportsWithParallelNormals';\n\n/**\n * Given a cornerstone3D enabled `element`, and a `toolName`, find all viewportIds\n * looking at the same Frame Of Reference that have the tool with the given `toolName`\n * active, passive or enabled.\n *\n * @param element - The target cornerstone3D enabled element.\n * @param toolName - The string toolName.\n * @param requireParallelNormals - If true, only return viewports that have parallel normals.\n *\n * @returns An array of viewportIds.\n */\nexport default function getViewportIdsWithToolToRender(\n  element: HTMLDivElement,\n  toolName: string,\n  requireParallelNormals = true\n): string[] {\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, FrameOfReferenceUID } = enabledElement;\n\n  let viewports = renderingEngine.getViewports();\n\n  viewports = filterViewportsWithFrameOfReferenceUID(\n    viewports,\n    FrameOfReferenceUID\n  );\n  viewports = filterViewportsWithToolEnabled(viewports, toolName);\n\n  const viewport = renderingEngine.getViewport(enabledElement.viewportId);\n\n  if (requireParallelNormals) {\n    viewports = filterViewportsWithParallelNormals(\n      viewports,\n      viewport.getCamera()\n    );\n  }\n\n  const viewportIds = viewports.map((vp) => vp.id);\n\n  return viewportIds;\n}\n","import { vec3 } from 'gl-matrix';\nimport { CONSTANTS, metaData } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { Annotations, Annotation } from '../../types';\nimport { debug } from 'console';\n\nconst { EPSILON } = CONSTANTS;\n\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\n\n/**\n * given some `Annotations`, and the slice defined by the camera's normal\n * direction and the spacing in the normal, filter the `Annotations` which\n * is within the slice.\n *\n * @param annotations - Annotations\n * @param camera - The camera\n * @param spacingInNormalDirection - The spacing in the normal direction\n * @returns The filtered `Annotations`.\n */\nexport default function filterAnnotationsWithinSlice(\n  annotations: Annotations,\n  camera: Types.ICamera,\n  spacingInNormalDirection: number\n): Annotations {\n  const { viewPlaneNormal } = camera;\n\n  // The reason we use parallel normals instead of actual orientation is that\n  // flipped action is done through camera API, so we can't rely on the\n  // orientation (viewplaneNormal and viewUp) since even the same image and\n  // same slice if flipped will have different orientation, but still rendering\n  // the same slice. Instead, we choose to use the parallel normals to filter\n  // the annotations and later we fine tune it with the annotation within slice\n  // logic down below.\n  const annotationsWithParallelNormals = annotations.filter(\n    (td: Annotation) => {\n      let annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n\n      if (!annotationViewPlaneNormal) {\n        // This code is run to set the annotation view plane normal\n        // for historical data which was saved without the normal.\n        const { referencedImageId } = td.metadata;\n        const { imageOrientationPatient } = metaData.get(\n          'imagePlaneModule',\n          referencedImageId\n        );\n        const rowCosineVec = vec3.fromValues(\n          imageOrientationPatient[0],\n          imageOrientationPatient[1],\n          imageOrientationPatient[2]\n        );\n\n        const colCosineVec = vec3.fromValues(\n          imageOrientationPatient[3],\n          imageOrientationPatient[4],\n          imageOrientationPatient[5]\n        );\n\n        annotationViewPlaneNormal = vec3.create() as Types.Point3;\n\n        vec3.cross(annotationViewPlaneNormal, rowCosineVec, colCosineVec);\n        td.metadata.viewPlaneNormal = annotationViewPlaneNormal;\n      }\n      const isParallel =\n        Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n        PARALLEL_THRESHOLD;\n\n      return annotationViewPlaneNormal && isParallel;\n    }\n  );\n\n  // No in plane annotations.\n  if (!annotationsWithParallelNormals.length) {\n    return [];\n  }\n\n  // Annotation should be within the slice, which means that it should be between\n  // camera's focalPoint +/- spacingInNormalDirection.\n\n  const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n  const { focalPoint } = camera;\n\n  const annotationsWithinSlice = [];\n\n  for (const annotation of annotationsWithParallelNormals) {\n    const data = annotation.data;\n    const point = data.handles.points[0];\n\n    if (!annotation.isVisible) {\n      continue;\n    }\n    // A = point\n    // B = focal point\n    // P = normal\n\n    // B-A dot P  => Distance in the view direction.\n    // this should be less than half the slice distance.\n\n    const dir = vec3.create();\n\n    vec3.sub(dir, focalPoint, point);\n\n    const dot = vec3.dot(dir, viewPlaneNormal);\n\n    if (Math.abs(dot) < halfSpacingInNormalDirection) {\n      annotationsWithinSlice.push(annotation);\n    }\n  }\n\n  return annotationsWithinSlice;\n}\n","import {\n  StackViewport,\n  VolumeViewport,\n  VideoViewport,\n  Types,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\n\nimport filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport { Annotations } from '../../types';\nimport { annotationFrameRange } from '..';\n\nconst baseUrlExtractor = /(videoId:|imageId:|volumeId:)([a-zA-Z]*:)/;\n\n/**\n * Given the viewport and the annotations, it filters the annotations array and only\n * return those annotation that should be displayed on the viewport\n * @param annotations - Annotations\n * @returns A filtered version of the annotations.\n */\nexport default function filterAnnotationsForDisplay(\n  viewport: Types.IViewport,\n  annotations: Annotations\n): Annotations {\n  if (viewport instanceof StackViewport) {\n    // 1. Get the currently displayed imageId from the StackViewport\n    const imageId = viewport.getCurrentImageId();\n\n    // 2. remove the dataLoader scheme since it might be an annotation that was\n    // created on the volumeViewport initially and has the volumeLoader scheme\n    // but shares the same imageId\n    const colonIndex = imageId.indexOf(':');\n    const imageURI = imageId.substring(colonIndex + 1);\n\n    // 3. Filter annotation in the frame of reference by the referenced image ID property\n    // Note: With the current implementation drawing on the stack (PT stack) will not\n    // show the annotation on a volume that does not share the same imageURIs (CT Volume),\n    // and we don't have a proper way to check distance either since a stack can be\n    // composed of multiple unrelated images\n    return annotations.filter((annotation) => {\n      if (!annotation.isVisible) {\n        return false;\n      }\n\n      const imageId = annotation.metadata.referencedImageId;\n\n      if (imageId === undefined) {\n        // This annotation was not drawn on a non-coplanar reformat, and such does\n        // not have a referenced imageId.\n        return false;\n      }\n\n      const colonIndex = imageId.indexOf(':');\n      const referenceImageURI = imageId.substring(colonIndex + 1);\n      return referenceImageURI === imageURI;\n    });\n  } else if (viewport instanceof VideoViewport) {\n    const frameOfReferenceUID: string = viewport.getFrameOfReferenceUID();\n\n    return annotations.filter((annotation) => {\n      if (!annotation.isVisible) {\n        return false;\n      }\n      if (annotation.metadata.FrameOfReferenceUID !== frameOfReferenceUID) {\n        return false;\n      }\n      const testURI = annotation.metadata.referencedImageId.replace(\n        baseUrlExtractor,\n        ''\n      );\n\n      if (!viewport.hasImageURI(testURI)) {\n        return false;\n      }\n      const range = annotationFrameRange.getFrameRange(annotation);\n      const frameNumber = viewport.getFrameNumber();\n      if (Array.isArray(range)) {\n        return frameNumber >= range[0] && frameNumber <= range[1];\n      }\n      // Arbitrary 5 frames of slop on the video for matching single frame\n      // number to position - this allows the annotation to display  when\n      // the video element is not exactly the same timing as expected or when\n      // playing video back.\n      return Math.abs(frameNumber - range) <= 5;\n    });\n  } else if (viewport instanceof VolumeViewport) {\n    const camera = viewport.getCamera();\n\n    const { spacingInNormalDirection } =\n      csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n\n    // Get data with same normal and within the same slice\n    return filterAnnotationsWithinSlice(\n      annotations,\n      camera,\n      spacingInNormalDirection\n    );\n  } else {\n    throw new Error(`Viewport Type ${viewport.type} not supported`);\n  }\n}\n","import { Annotation } from '../../../types';\nimport { isAnnotationLocked } from '../annotationLocking';\nimport { isAnnotationSelected } from '../annotationSelection';\nimport { AnnotationStyleStates } from '../../../enums';\n\n/**\n * Given a Annotation object, return the annotationStyle State that it\n * should be in based on its data\n * @param annotation - The annotation that we want to style.\n * @returns The state of the annotation whether it is Default, Highlighted, Locked, or Selected.\n */\nfunction getState(annotation?: Annotation): AnnotationStyleStates {\n  if (annotation) {\n    if (annotation.data && annotation.highlighted) {\n      return AnnotationStyleStates.Highlighted;\n    }\n    if (isAnnotationSelected(annotation.annotationUID)) {\n      return AnnotationStyleStates.Selected;\n    }\n\n    // Todo: make annotation lock api not to rely on the annotation itself\n    if (isAnnotationLocked(annotation)) {\n      return AnnotationStyleStates.Locked;\n    }\n  }\n\n  return AnnotationStyleStates.Default;\n}\n\nexport default getState;\n","import {\n  utilities,\n  getEnabledElement,\n  StackViewport,\n  cache,\n  VideoViewport,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport BaseTool from './BaseTool';\nimport { getAnnotationManager } from '../../stateManagement/annotation/annotationState';\nimport { Annotation, Annotations, SVGDrawingHelper } from '../../types';\nimport triggerAnnotationRender from '../../utilities/triggerAnnotationRender';\nimport filterAnnotationsForDisplay from '../../utilities/planar/filterAnnotationsForDisplay';\nimport { getStyleProperty } from '../../stateManagement/annotation/config/helpers';\nimport { getState } from '../../stateManagement/annotation/config';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationDisplayTool extends BaseTool {\n  static toolName;\n\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  /**\n   * @abstract renderAnnotation it used to draw the tool's annotation in each\n   * request animation frame\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  abstract renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  );\n\n  /**\n   * @virtual Given the element and annotations which is an array of annotation, it\n   * filters the annotations array to only include the annotation based on the viewportType.\n   * If the viewport is StackViewport, it filters based on the current imageId of the viewport,\n   * if the viewport is volumeViewport, it only returns those that are within the\n   * same slice as the current rendered slice in the volume viewport.\n   * imageId as the enabledElement.\n   * @param element - The HTML element\n   * @param annotations - The annotations to filter (array of annotation)\n   * @returns The filtered annotations\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    return filterAnnotationsForDisplay(viewport, annotations);\n  }\n\n  /**\n   * On Image Calibration, take all the annotation from the AnnotationState manager,\n   * and invalidate them to force them to be re-rendered and their stats to be recalculated.\n   * Then use the old and new imageData (non-calibrated and calibrated) to calculate the\n   * new position for the annotations in the space of the new imageData.\n   *\n   * @param evt - The calibration event\n   *\n   */\n  public onImageSpacingCalibrated = (\n    evt: Types.EventTypes.ImageSpacingCalibratedEvent\n  ) => {\n    const { element, imageId } = evt.detail;\n\n    const imageURI = utilities.imageIdToURI(imageId);\n    const annotationManager = getAnnotationManager();\n    const framesOfReference = annotationManager.getFramesOfReference();\n\n    // For each frame Of Reference\n    framesOfReference.forEach((frameOfReference) => {\n      const frameOfReferenceSpecificAnnotations =\n        annotationManager.getAnnotations(frameOfReference);\n\n      const toolSpecificAnnotations =\n        frameOfReferenceSpecificAnnotations[this.getToolName()];\n\n      if (!toolSpecificAnnotations || !toolSpecificAnnotations.length) {\n        return;\n      }\n\n      // for this specific tool\n      toolSpecificAnnotations.forEach((annotation) => {\n        if (!annotation.metadata?.referencedImageId) {\n          return;\n        }\n\n        // if the annotation is drawn on the same imageId\n        const referencedImageURI = utilities.imageIdToURI(\n          annotation.metadata.referencedImageId\n        );\n\n        if (referencedImageURI === imageURI) {\n          // make them invalid since the image has been calibrated so that\n          // we can update the cachedStats and also rendering\n          annotation.invalidated = true;\n          annotation.data.cachedStats = {};\n        }\n      });\n      triggerAnnotationRender(element);\n    });\n  };\n\n  protected getReferencedImageId(\n    viewport: Types.IViewport,\n    worldPos: Types.Point3,\n    viewPlaneNormal: Types.Point3,\n    viewUp: Types.Point3\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else if (viewport instanceof VideoViewport) {\n      referencedImageId = targetId.split('videoId:')[1];\n    } else {\n      const volumeId = targetId.split('volumeId:')[1];\n      const imageVolume = cache.getVolume(volumeId);\n\n      referencedImageId = utilities.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    return referencedImageId;\n  }\n\n  /**\n   * It takes the property (color, lineDash, etc.) and based on the state of the\n   * annotation (selected, highlighted etc.) it returns the appropriate value\n   * based on the central toolStyle settings for each level of specification.\n   * @param property - The name of the style property to get.\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns The value of the property.\n   */\n  public getStyle(\n    property: string,\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): unknown {\n    return getStyleProperty(\n      property,\n      specifications,\n      getState(annotation),\n      this.mode\n    );\n  }\n}\n\nAnnotationDisplayTool.toolName = 'AnnotationDisplayTool';\nexport default AnnotationDisplayTool;\n","import {\n  BaseVolumeViewport,\n  StackViewport,\n  cache,\n  getEnabledElement,\n  metaData,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec2 } from 'gl-matrix';\n\nimport AnnotationDisplayTool from './AnnotationDisplayTool';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  InteractionTypes,\n  ToolProps,\n  PublicToolProps,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**-q\n * Abstract class for tools which create and display annotations on the\n * cornerstone3D canvas. In addition, it provides a base class for segmentation\n * tools that require drawing an annotation before running the segmentation strategy\n * for instance threshold segmentation based on an area and a threshold.\n * Annotation tools make use of drawing utilities to draw SVG elements on the viewport.\n *\n * To create a new annotation tool, derive from this class and implement the\n * abstract methods.\n */\nabstract class AnnotationTool extends AnnotationDisplayTool {\n  static toolName;\n  // ===================================================================\n  // Abstract Methods - Must be implemented.\n  // ===================================================================\n\n  constructor(toolProps: PublicToolProps, defaultToolProps: ToolProps) {\n    super(toolProps, defaultToolProps);\n\n    if (toolProps.configuration?.getTextLines) {\n      this.configuration.getTextLines = toolProps.configuration.getTextLines;\n    }\n\n    if (toolProps.configuration?.statsCalculator) {\n      this.configuration.statsCalculator =\n        toolProps.configuration.statsCalculator;\n    }\n  }\n\n  /**\n   * @abstract addNewAnnotation Creates a new annotation based on the clicked mouse position\n   *\n   * @param evt - The normalized mouse event\n   * @param interactionType -  The interaction type used to add the annotation.\n   */\n  abstract addNewAnnotation(\n    evt: EventTypes.InteractionEventType,\n    interactionType: InteractionTypes\n  ): Annotation;\n\n  /**\n   * @abstract cancel Used to cancel the ongoing tool drawing and manipulation\n   *\n   */\n  abstract cancel(element: HTMLDivElement);\n\n  /**\n   * handleSelectedCallback Custom callback for when a handle is selected.\n   *\n   * @param evt - The normalized mouse event\n   * @param annotation - The annotation selected.\n   * @param handle - The selected handle (either Types.Point3 in space for annotations, or TextBoxHandle object for text boxes).\n   * @param interactionType - The interaction type the handle was selected with.\n   */\n  abstract handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    handle: ToolHandle,\n    interactionType: InteractionTypes\n  ): void;\n\n  /**\n   * Custom callback for when an annotation is selected\n   *\n   * @param evt - The normalized mouse event\n   * @param annotation - The `Annotation` to check.\n   * @param interactionType - The interaction type used to select the tool.\n   */\n  abstract toolSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes,\n    canvasCoords?: Types.Point2\n  ): void;\n\n  /**\n   * Returns true if the provided canvas coordinate tool is near the annotation\n   *\n   * @param element - The HTML element\n   * @param annotation - The annotation to check\n   * @param canvasCoords - The canvas coordinate to check\n   * @param proximity - The minimum proximity to consider the point near\n   * @param interactionType - The interaction type used to select the tool.\n   *\n   * @returns boolean if the point is near.\n   */\n  abstract isPointNearTool(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number,\n    interactionType: string\n  ): boolean;\n\n  /**\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  public mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredAnnotations?: Annotations\n  ): boolean => {\n    if (!filteredAnnotations) {\n      return false;\n    }\n\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let annotationsNeedToBeRedrawn = false;\n\n    for (const annotation of filteredAnnotations) {\n      // Do not do anything if the annotation is locked or hidden.\n      if (\n        isAnnotationLocked(annotation) ||\n        !isAnnotationVisible(annotation.annotationUID)\n      ) {\n        continue;\n      }\n\n      const { data } = annotation;\n      const activateHandleIndex = data.handles\n        ? data.handles.activeHandleIndex\n        : undefined;\n\n      // Perform tool specific imagePointNearToolOrHandle to determine if the mouse\n      // is near the tool or its handles or its textBox.\n      const near = this._imagePointNearToolOrHandle(\n        element,\n        annotation,\n        canvasCoords,\n        6 // Todo: This should come from the state\n      );\n\n      const nearToolAndNotMarkedActive = near && !annotation.highlighted;\n      const notNearToolAndMarkedActive = !near && annotation.highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !annotation.highlighted;\n        annotationsNeedToBeRedrawn = true;\n      } else if (\n        data.handles &&\n        data.handles.activeHandleIndex !== activateHandleIndex\n      ) {\n        // Active handle index has changed, re-render.\n        annotationsNeedToBeRedrawn = true;\n      }\n    }\n\n    return annotationsNeedToBeRedrawn;\n  };\n\n  /**\n   * It checks if the mouse click is near TextBoxHandle or AnnotationHandle itself, and\n   * return either it. It prioritize TextBoxHandle over AnnotationHandle. If\n   * the mouse click is not near any of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points, textBox } = data.handles;\n\n    if (textBox) {\n      const { worldBoundingBox } = textBox;\n      if (worldBoundingBox) {\n        const canvasBoundingBox = {\n          topLeft: viewport.worldToCanvas(worldBoundingBox.topLeft),\n          topRight: viewport.worldToCanvas(worldBoundingBox.topRight),\n          bottomLeft: viewport.worldToCanvas(worldBoundingBox.bottomLeft),\n          bottomRight: viewport.worldToCanvas(worldBoundingBox.bottomRight),\n        };\n\n        if (\n          canvasCoords[0] >= canvasBoundingBox.topLeft[0] &&\n          canvasCoords[0] <= canvasBoundingBox.bottomRight[0] &&\n          canvasCoords[1] >= canvasBoundingBox.topLeft[1] &&\n          canvasCoords[1] <= canvasBoundingBox.bottomRight[1]\n        ) {\n          data.handles.activeHandleIndex = null;\n          return textBox as ToolHandle;\n        }\n      }\n    }\n\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n      const near =\n        vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n      if (near === true) {\n        data.handles.activeHandleIndex = i;\n        return point;\n      }\n    }\n\n    data.handles.activeHandleIndex = null;\n  }\n\n  /**\n   * It returns the style for the text box\n   * @param styleSpecifier - An object containing the specifications such as viewportId,\n   * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n   * met (hierarchy is checked from most specific to least specific which is\n   * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n   * @param annotation - The annotation for the tool that is\n   * currently active.\n   * @returns An object of the style settings for the text box.\n   */\n  public getLinkedTextBoxStyle(\n    specifications: StyleSpecifier,\n    annotation?: Annotation\n  ): Record<string, unknown> {\n    // Todo: this function can be used to set different styles for different toolMode\n    // for the textBox.\n\n    return {\n      visibility: this.getStyle(\n        'textBoxVisibility',\n        specifications,\n        annotation\n      ),\n      fontFamily: this.getStyle(\n        'textBoxFontFamily',\n        specifications,\n        annotation\n      ),\n      fontSize: this.getStyle('textBoxFontSize', specifications, annotation),\n      color: this.getStyle('textBoxColor', specifications, annotation),\n      shadow: this.getStyle('textBoxShadow', specifications, annotation),\n      background: this.getStyle(\n        'textBoxBackground',\n        specifications,\n        annotation\n      ),\n      lineWidth: this.getStyle(\n        'textBoxLinkLineWidth',\n        specifications,\n        annotation\n      ),\n      lineDash: this.getStyle(\n        'textBoxLinkLineDash',\n        specifications,\n        annotation\n      ),\n    };\n  }\n\n  /**\n   * Returns true if the viewport is scaled to SUV units\n   * @param viewport - The viewport\n   * @param targetId - The annotation targetId\n   * @param imageId - The annotation imageId\n   * @returns\n   */\n  isSuvScaled(\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    targetId: string,\n    imageId?: string\n  ): boolean {\n    if (viewport instanceof BaseVolumeViewport) {\n      const volumeId = targetId.split('volumeId:')[1];\n      const volume = cache.getVolume(volumeId);\n      return volume.scaling?.PT !== undefined;\n    }\n    const scalingModule: Types.ScalingParameters | undefined =\n      imageId && metaData.get('scalingModule', imageId);\n    return typeof scalingModule?.suvbw === 'number';\n  }\n\n  /**\n   * Returns true if the `canvasCoords` are near a handle or selectable part of the tool\n   *\n   * @param element - The HTML element\n   * @param annotation - The annotation to check\n   * @param canvasCoords - The canvas coordinates to check\n   * @param proximity - The proximity to consider\n   *\n   * @returns If the point is near.\n   */\n  private _imagePointNearToolOrHandle(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean {\n    // Based on the tool instance type, check if the point is near the tool handles\n    const handleNearImagePoint = this.getHandleNearImagePoint(\n      element,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (handleNearImagePoint) {\n      return true;\n    }\n\n    // If the point is not near the handles, check if the point is near the tool\n    const toolNewImagePoint = this.isPointNearTool(\n      element,\n      annotation,\n      canvasCoords,\n      proximity,\n      'mouse'\n    );\n\n    if (toolNewImagePoint) {\n      return true;\n    }\n  }\n}\n\nAnnotationTool.toolName = 'AnnotationTool';\nexport default AnnotationTool;\n","import { Types } from '@cornerstonejs/core';\n\nfunction dist2(p1: Types.Point2, p2: Types.Point2): number {\n  return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);\n}\n\n/**\n * Calculates the distance-squared of a point to a line\n *\n * @param lineStart - x,y coordinates of the start of the line\n * @param lineEnd - x,y coordinates of the end of the line\n * @param point - x,y of the point\n * @returns distance-squared\n */\nexport default function distanceToPointSquared(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): number {\n  const d2 = dist2(lineStart, lineEnd);\n\n  if (d2 === 0) {\n    return dist2(point, lineStart);\n  }\n\n  const t =\n    ((point[0] - lineStart[0]) * (lineEnd[0] - lineStart[0]) +\n      (point[1] - lineStart[1]) * (lineEnd[1] - lineStart[1])) /\n    d2;\n\n  if (t < 0) {\n    return dist2(point, lineStart);\n  }\n  if (t > 1) {\n    return dist2(point, lineEnd);\n  }\n\n  const pt: Types.Point2 = [\n    lineStart[0] + t * (lineEnd[0] - lineStart[0]),\n    lineStart[1] + t * (lineEnd[1] - lineStart[1]),\n  ];\n\n  return dist2(point, pt);\n}\n","import distanceToPointSquared from './distanceToPointSquared';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the distance of a point to a line\n *\n * @param lineStart - x,y coordinates of the start of the line\n * @param lineEnd - x,y coordinates of the end of the line\n * @param point - x,y of the point\n * @returns distance\n */\nexport default function distanceToPoint(\n  lineStart: Types.Point2,\n  lineEnd: Types.Point2,\n  point: Types.Point2\n): number {\n  if (lineStart.length !== 2 || lineEnd.length !== 2 || point.length !== 2) {\n    throw Error(\n      'lineStart, lineEnd, and point should have 2 elements of [x, y]'\n    );\n  }\n\n  return Math.sqrt(distanceToPointSquared(lineStart, lineEnd, point));\n}\n","import type { Types } from '@cornerstonejs/core';\nimport * as lineSegment from '../line';\n\ntype rectLineSegments = {\n  top: Types.Point2[];\n  right: Types.Point2[];\n  bottom: Types.Point2[];\n  left: Types.Point2[];\n};\n\n/**\n * Given a rectangle left, top, width and height, return an object containing the\n * line segments that make up the rectangle's four sides\n * @param left - The x-coordinate of the left edge of the rectangle.\n * @param top - The y-coordinate of the top edge of the rectangle.\n * @param width - The width of the rectangle.\n * @param height - The height of the rectangle.\n * @returns An object with four keys, each of which contains an array of two\n * points.\n */\nfunction rectToLineSegments(\n  left: number,\n  top: number,\n  width: number,\n  height: number\n): rectLineSegments {\n  const topLineStart: Types.Point2 = [left, top];\n  const topLineEnd: Types.Point2 = [left + width, top];\n\n  const rightLineStart: Types.Point2 = [left + width, top];\n  const rightLineEnd: Types.Point2 = [left + width, top + height];\n\n  const bottomLineStart: Types.Point2 = [left + width, top + height];\n  const bottomLineEnd: Types.Point2 = [left, top + height];\n\n  const leftLineStart: Types.Point2 = [left, top + height];\n  const leftLineEnd: Types.Point2 = [left, top];\n\n  const lineSegments = {\n    top: [topLineStart, topLineEnd],\n    right: [rightLineStart, rightLineEnd],\n    bottom: [bottomLineStart, bottomLineEnd],\n    left: [leftLineStart, leftLineEnd],\n  };\n\n  return lineSegments;\n}\n\n/**\n * Calculates distance of the point to the rectangle. It calculates the minimum\n * distance between the point and each line segment of the rectangle.\n *\n * @param rect - coordinates of the rectangle [left, top, width, height]\n * @param point - [x,y] coordinates of a point\n * @returns\n */\nexport default function distanceToPoint(\n  rect: number[],\n  point: Types.Point2\n): number {\n  if (rect.length !== 4 || point.length !== 2) {\n    throw Error(\n      'rectangle:[left, top, width, height] or point: [x,y] not defined correctly'\n    );\n  }\n\n  const [left, top, width, height] = rect;\n\n  let minDistance = 655535;\n  const lineSegments = rectToLineSegments(left, top, width, height);\n\n  Object.keys(lineSegments).forEach((segment) => {\n    const [lineStart, lineEnd] = lineSegments[segment];\n    const distance = lineSegment.distanceToPoint(lineStart, lineEnd, point);\n\n    if (distance < minDistance) {\n      minDistance = distance;\n    }\n  });\n\n  return minDistance;\n}\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Determine the coordinates that will place the textbox to the right of the\n * annotation.\n *\n * @param annotationCanvasPoints - The canvas points of the annotation's handles.\n * @returns - The coordinates for default placement of the textbox.\n */\nexport default function getTextBoxCoordsCanvas(\n  annotationCanvasPoints: Array<Types.Point2>\n): Types.Point2 {\n  const corners = _determineCorners(annotationCanvasPoints);\n  const centerY = (corners.top[1] + corners.bottom[1]) / 2;\n  const textBoxCanvas = <Types.Point2>[corners.right[0], centerY];\n\n  return textBoxCanvas;\n}\n\n/**\n * Determine the handles that have the min/max x and y values.\n *\n * @param canvasPoints - The canvas points of the annotation's handles.\n * @returns - The top, left, bottom, and right handles.\n */\nfunction _determineCorners(canvasPoints: Array<Types.Point2>) {\n  const handlesLeftToRight = [canvasPoints[0], canvasPoints[1]].sort(_compareX);\n  const handlesTopToBottom = [canvasPoints[0], canvasPoints[1]].sort(_compareY);\n  const right = handlesLeftToRight[handlesLeftToRight.length - 1];\n  const top = handlesTopToBottom[0];\n  const bottom = handlesTopToBottom[handlesTopToBottom.length - 1];\n\n  return {\n    top,\n    bottom,\n    right,\n  };\n\n  function _compareX(a, b) {\n    return a[0] < b[0] ? -1 : 1;\n  }\n  function _compareY(a, b) {\n    return a[1] < b[1] ? -1 : 1;\n  }\n}\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Given two world positions and an orthogonal view to an `imageVolume` defined\n * by a `viewPlaneNormal` and a `viewUp`, get the width and height in world coordinates\n * of the rectangle defined by the two points. The implementation works both with orthogonal\n * non-orthogonal rectangles.\n *\n * @param viewPlaneNormal - The normal of the view.\n * @param viewUp - The up direction of the view.\n * @param imageVolume - The imageVolume to use to measure.\n * @param topLeftWorld - The first world position.\n * @param bottomRightWorld - The second world position.\n *\n * @returns The `worldWidth` and `worldHeight`.\n */\nexport default function getWorldWidthAndHeightFromCorners(\n  viewPlaneNormal: Types.Point3,\n  viewUp: Types.Point3,\n  topLeftWorld: Types.Point3,\n  bottomRightWorld: Types.Point3\n): { worldWidth: number; worldHeight: number } {\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n  const pos1 = vec3.fromValues(...topLeftWorld);\n  const pos2 = vec3.fromValues(...bottomRightWorld);\n\n  const diagonal = vec3.create();\n  vec3.subtract(diagonal, pos1, pos2);\n\n  const diagonalLength = vec3.length(diagonal);\n\n  // When the two points are very close to each other return width as 0\n  // to avoid NaN the cosTheta formula calculation\n  if (diagonalLength < 0.0001) {\n    return { worldWidth: 0, worldHeight: 0 };\n  }\n\n  const cosTheta =\n    vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n\n  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n\n  const worldWidth = sinTheta * diagonalLength;\n  const worldHeight = cosTheta * diagonalLength;\n\n  return { worldWidth, worldHeight };\n}\n","import { metaData } from '@cornerstonejs/core';\n\ntype ModalityUnitOptions = {\n  isPreScaled: boolean;\n  isSuvScaled: boolean;\n};\n\nfunction getModalityUnit(\n  modality: string,\n  imageId: string,\n  options: ModalityUnitOptions\n): string {\n  if (modality === 'CT') {\n    return 'HU';\n  } else if (modality === 'PT') {\n    return _handlePTModality(imageId, options);\n  } else {\n    return '';\n  }\n}\n\nfunction _handlePTModality(imageId: string, options: ModalityUnitOptions) {\n  if (!options.isPreScaled) {\n    return 'raw';\n  }\n\n  if (options.isSuvScaled) {\n    return 'SUV';\n  }\n\n  const generalSeriesModule = metaData.get('generalSeriesModule', imageId);\n\n  // it might be possible that the referenceImageId is not the one\n  // that is being displayed. So we need to get the modality from imageId again\n  if (generalSeriesModule?.modality === 'PT') {\n    const petSeriesModule = metaData.get('petSeriesModule', imageId);\n    return petSeriesModule?.units || 'unitless';\n  }\n}\n\nexport { getModalityUnit, ModalityUnitOptions };\n","import {\n  cache,\n  StackViewport,\n  Types,\n  BaseVolumeViewport,\n} from '@cornerstonejs/core';\n\nfunction isViewportPreScaled(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  targetId: string\n): boolean {\n  if (viewport instanceof BaseVolumeViewport) {\n    const targetIdTokens = targetId.split('volumeId:');\n    const volumeId =\n      targetIdTokens.length > 1 ? targetIdTokens[1] : targetIdTokens[0];\n    const volume = cache.getVolume(volumeId);\n    return !!volume?.scaling && Object.keys(volume.scaling).length > 0;\n  } else if (viewport instanceof StackViewport) {\n    const { preScale } = viewport.getImageData() || {};\n    return !!preScale?.scaled;\n  } else {\n    return false;\n  }\n}\n\nexport { isViewportPreScaled };\n","import { Statistics } from '../../../types';\n\nabstract class Calculator {\n  static run: ({ value }) => void;\n  static getStatistics: () => Statistics[];\n}\n\nexport default Calculator;\n","import { Statistics } from '../../../types';\nimport Calculator from './Calculator';\n\nexport default class BasicStatsCalculator extends Calculator {\n  private static max = [-Infinity];\n  private static sum = [0];\n  private static sumSquares = [0];\n  private static squaredDiffSum = [0];\n  private static count = 0;\n\n  /**\n   * This callback is used when we verify if the point is in the annotion drawn so we can get every point\n   * in the shape to calculate the statistics\n   * @param value of the point in the shape of the annotation\n   */\n  static statsCallback = ({ value: newValue }): void => {\n    if (\n      Array.isArray(newValue) &&\n      newValue.length > 1 &&\n      this.max.length === 1\n    ) {\n      this.max.push(this.max[0], this.max[0]);\n      this.sum.push(this.sum[0], this.sum[0]);\n      this.sumSquares.push(this.sumSquares[0], this.sumSquares[0]);\n      this.squaredDiffSum.push(this.squaredDiffSum[0], this.squaredDiffSum[0]);\n    }\n\n    const newArray = Array.isArray(newValue) ? newValue : [newValue];\n    this.count += 1;\n\n    this.max.forEach(\n      (it, idx) => (this.max[idx] = Math.max(it, newArray[idx]))\n    );\n    this.sum.map((it, idx) => (this.sum[idx] += newArray[idx]));\n    this.sumSquares.map(\n      (it, idx) => (this.sumSquares[idx] += newArray[idx] ** 2)\n    );\n    this.squaredDiffSum.map(\n      (it, idx) =>\n        (this.squaredDiffSum[idx] += Math.pow(\n          newArray[idx] - this.sum[idx] / this.count,\n          2\n        ))\n    );\n  };\n\n  /**\n   * Basic function that calculates statictics for a given array of points.\n   * @param points\n   * @returns An object that contains :\n   * max : The maximum value of the array\n   * mean : mean of the array\n   * stdDev : standard deviation of the array\n   * stdDevWithSumSquare : standard deviation of the array using sum²\n   */\n\n  static getStatistics = (): Statistics[] => {\n    const mean = this.sum.map((sum) => sum / this.count);\n    const stdDev = this.squaredDiffSum.map((squaredDiffSum) =>\n      Math.sqrt(squaredDiffSum / this.count)\n    );\n    const stdDevWithSumSquare = this.sumSquares.map((it, idx) =>\n      Math.sqrt(this.sumSquares[idx] / this.count - mean[idx] ** 2)\n    );\n    const currentMax = this.max;\n\n    this.max = [-Infinity];\n    this.sum = [0];\n    this.sumSquares = [0];\n    this.squaredDiffSum = [0];\n    this.count = 0;\n\n    return [\n      { name: 'max', value: singleArrayAsNumber(currentMax), unit: null },\n      { name: 'mean', value: singleArrayAsNumber(mean), unit: null },\n      { name: 'stdDev', value: singleArrayAsNumber(stdDev), unit: null },\n      {\n        name: 'stdDevWithSumSquare',\n        value: singleArrayAsNumber(stdDevWithSumSquare),\n        unit: null,\n      },\n    ];\n  };\n}\n\nfunction singleArrayAsNumber(val: number[]) {\n  return val.length === 1 ? val[0] : val;\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromCorners from '../../utilities/planar/getWorldWidthAndHeightFromCorners';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  ToolProps,\n  PublicToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { getModalityUnit } from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { pointInShapeCallback } from '../../utilities/';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * RectangleROIAnnotation let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of a Rectangular region of interest.\n * You can use RectangleROIAnnotation in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. RectangleROI tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(RectangleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(RectangleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(RectangleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass RectangleROITool extends AnnotationTool {\n  static toolName;\n\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a RectangleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): RectangleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: RectangleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasPoint1 = viewport.worldToCanvas(points[0]);\n    const canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    const rect = this._getRectangleImageCoordinates([\n      canvasPoint1,\n      canvasPoint2,\n    ]);\n\n    const point = [canvasCoords[0], canvasCoords[1]];\n    const { left, top, width, height } = rect;\n\n    const distanceToPoint = rectangle.distanceToPoint(\n      [left, top, width, height],\n      point as Types.Point2\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: RectangleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - Move the text boxes world position\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - Moving tool, so move all points by the world points delta\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { points } = data.handles;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Moving handle.\n      const { currentPoints } = eventDetail;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n\n      const { points } = data.handles;\n\n      // Move this handle.\n      points[handleIndex] = [...worldPos];\n\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          // Moving bottomLeft or topRight\n\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n\n          break;\n        case 1:\n        case 2:\n          // Moving bottomRight or topLeft\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n\n          bottomLeftCanvas = <Types.Point2>[\n            topLeftCanvas[0],\n            bottomRightCanvas[1],\n          ];\n          topRightCanvas = <Types.Point2>[\n            bottomRightCanvas[0],\n            topLeftCanvas[1],\n          ];\n\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n\n          break;\n      }\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Remove event handlers for the modify event loop, and enable default event propagation.\n   */\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewPlaneNormal,\n          viewUp,\n          renderingEngine,\n          enabledElement\n        );\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-rect`;\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _getRectangleImageCoordinates = (\n    points: Array<Types.Point2>\n  ): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  } => {\n    const [point0, point1] = points;\n\n    return {\n      left: Math.min(point0[0], point1[0]),\n      top: Math.min(point0[1], point1[1]),\n      width: Math.abs(point0[0] - point1[0]),\n      height: Math.abs(point0[1] - point1[1]),\n    };\n  };\n\n  /**\n   * _calculateCachedStats - For each volume in the frame of reference that a\n   * tool instance in particular viewport defines as its target volume, find the\n   * volume coordinates (i,j,k) being probed by the two corners. One of i,j or k\n   * will be constant across the two points. In the other two directions iterate\n   * over the voxels and calculate the first and second-order statistics.\n   *\n   * @param data - The annotation tool-specific data.\n   * @param viewPlaneNormal - The normal vector of the camera.\n   * @param viewUp - The viewUp vector of the camera.\n   */\n  _calculateCachedStats = (\n    annotation,\n    viewPlaneNormal,\n    viewUp,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const { data } = annotation;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[3];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        // Calculate index bounds to iterate over\n\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromCorners(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const scale = getCalibratedScale(image);\n\n        const area = Math.abs(worldWidth * worldHeight) / (scale * scale);\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          () => true,\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats[1]?.value,\n          stdDev: stats[2]?.value,\n          max: stats[0]?.value,\n          statsArray: stats,\n          pointsInShape: pointsInShape,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\n/**\n * _getTextLines - Returns the Area, mean and std deviation of the area of the\n * target volume enclosed by the rectangle.\n *\n * @param data - The annotation tool-specific data.\n * @param targetId - The volumeId of the volume to display the stats for.\n */\nfunction defaultGetTextLines(data, targetId: string): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, mean, max, stdDev, areaUnit, modalityUnit } = cachedVolumeStats;\n\n  if (mean === undefined) {\n    return;\n  }\n\n  const textLines: string[] = [];\n\n  textLines.push(`Area: ${roundNumber(area)} ${areaUnit}`);\n  textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n\n  return textLines;\n}\n\nRectangleROITool.toolName = 'RectangleROI';\nexport default RectangleROITool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { Events } from '../../enums';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\n/**\n * This tool is exactly the RectangleROITool but only draws a rectangle on the image,\n * and by using utility functions such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. This tool, however, does not calculate the statistics\n * as RectangleROITool does.\n */\nclass RectangleROIThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const targetId = this.getTargetId(viewport);\n    let referencedImageId, volumeId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    } else {\n      volumeId = targetId.split('volumeId:')[1];\n      const imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n    // Todo: how not to store enabledElement on the annotation, segmentationModule needs the element to\n    // decide on the active segmentIndex, active segmentationIndex etc.\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n      },\n      data: {\n        label: '',\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        segmentationId: null,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * it is used to draw the RectangleROI Threshold annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngineId } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as RectangleROIThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      // Todo: This is not correct way to add the event trigger,\n      // this will trigger on all mouse hover too. Problem is that we don't\n      // have a cached stats mechanism for this tool yet?\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId: viewport.id,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n}\n\nRectangleROIThresholdTool.toolName = 'RectangleROIThreshold';\nexport default RectangleROIThresholdTool;\n","import {\n  getEnabledElement,\n  cache,\n  StackViewport,\n  metaData,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport { addAnnotation, getAnnotations } from '../../stateManagement';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRect as drawRectSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport throttle from '../../utilities/throttle';\nimport { AnnotationModifiedEventDetail } from '../../types/EventTypes';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { RectangleROIStartEndThresholdAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport RectangleROITool from '../annotation/RectangleROITool';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * This tool is similar to the RectangleROIThresholdTool which\n * only draws a rectangle on the image, and by using utility functions\n * such as thresholdByRange and thresholdByROIStat it can be used to\n * create a segmentation. The only difference is that it only acts on the\n * acquisition plane and not the 3D volume, and accepts a start and end\n * slice, and renders a dashed rectangle on the image between the start and end\n * but a solid rectangle on start and end slice. Utility functions should be used\n * to modify the start and end slice.\n * // Todo: right now only the first slice has grabbable handles, need to make\n * // it so that the handles are grabbable on all slices.\n */\nclass RectangleROIStartEndThresholdTool extends RectangleROITool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        numSlicesToPropagate: 10,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStatsTool,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement it creates\n   * the edit data for the tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    let referencedImageId, imageVolume, volumeId;\n    if (viewport instanceof StackViewport) {\n      throw new Error('Stack Viewport Not implemented');\n    } else {\n      const targetId = this.getTargetId(viewport);\n      volumeId = targetId.split('volumeId:')[1];\n      imageVolume = cache.getVolume(volumeId);\n      referencedImageId = csUtils.getClosestImageId(\n        imageVolume,\n        worldPos,\n        viewPlaneNormal\n      );\n    }\n\n    if (!referencedImageId) {\n      throw new Error('This tool does not work on non-acquisition planes');\n    }\n\n    const startIndex = viewport.getCurrentImageIdIndex();\n    const spacingInNormal = csUtils.getSpacingInNormalDirection(\n      imageVolume,\n      viewPlaneNormal\n    );\n\n    // We cannot simply add numSlicesToPropagate to startIndex because\n    // the order of imageIds can be from top to bottom or bottom to top and\n    // we want to make sure it is always propagated in the direction of the\n    // view and also to make sure we don't go out of bounds.\n    const endIndex = this._getEndSliceIndex(\n      imageVolume,\n      worldPos,\n      spacingInNormal,\n      viewPlaneNormal\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        enabledElement,\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n        volumeId,\n        spacingInNormal,\n      },\n      data: {\n        label: '',\n        startSlice: startIndex,\n        endSlice: endIndex,\n        cachedStats: {\n          projectionPoints: [],\n          projectionPointsImageIds: [referencedImageId],\n        },\n        handles: {\n          // No need a textBox\n          textBox: {\n            hasMoved: false,\n            worldPosition: null,\n            worldBoundingBox: null,\n          },\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        labelmapUID: null,\n      },\n    };\n\n    // update the projection points in 3D space, since we are projecting\n    // the points to the slice plane, we need to make sure the points are\n    // computed for later export\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  // Todo: make it work for planes other than acquisition planes\n  _computeProjectionPoints(\n    annotation: RectangleROIStartEndThresholdAnnotation,\n    imageVolume: Types.IImageVolume\n  ): void {\n    const { data, metadata } = annotation;\n    const { viewPlaneNormal, spacingInNormal } = metadata;\n    const { imageData } = imageVolume;\n    const { startSlice, endSlice } = data;\n    const { points } = data.handles;\n\n    const startIJK = transformWorldToIndex(imageData, points[0]);\n\n    if (startIJK[2] !== startSlice) {\n      throw new Error('Start slice does not match');\n    }\n\n    // substitute the end slice index 2 with startIJK index 2\n    const endIJK = vec3.fromValues(startIJK[0], startIJK[1], endSlice);\n\n    const startWorld = vec3.create();\n    imageData.indexToWorldVec3(startIJK, startWorld);\n\n    const endWorld = vec3.create();\n    imageData.indexToWorldVec3(endIJK, endWorld);\n\n    // distance between start and end slice in the world coordinate\n    const distance = vec3.distance(startWorld, endWorld);\n\n    // for each point inside points, navigate in the direction of the viewPlaneNormal\n    // with amount of spacingInNormal, and calculate the next slice until we reach the distance\n    const newProjectionPoints = [];\n    for (let dist = 0; dist < distance; dist += spacingInNormal) {\n      newProjectionPoints.push(\n        points.map((point) => {\n          const newPoint = vec3.create();\n          vec3.scaleAndAdd(newPoint, point, viewPlaneNormal, dist);\n          return Array.from(newPoint);\n        })\n      );\n    }\n\n    data.cachedStats.projectionPoints = newProjectionPoints;\n\n    // Find the imageIds for the projection points\n    const projectionPointsImageIds = [];\n    for (const RectanglePoints of newProjectionPoints) {\n      const imageId = csUtils.getClosestImageId(\n        imageVolume,\n        RectanglePoints[0],\n        viewPlaneNormal\n      );\n      projectionPointsImageIds.push(imageId);\n    }\n\n    data.cachedStats.projectionPointsImageIds = projectionPointsImageIds;\n  }\n\n  _calculateCachedStatsTool(annotation, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const { cachedStats } = data;\n    const volumeId = this.getTargetId(viewport);\n    const imageVolume = cache.getVolume(volumeId.split('volumeId:')[1]);\n\n    // Todo: this shouldn't be here, this is a performance issue\n    // Since we are extending the RectangleROI class, we need to\n    // bring the logic for handle to some cachedStats calculation\n    this._computeProjectionPoints(annotation, imageVolume);\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  /**\n   * it is used to draw the rectangleROIStartEnd annotation in each\n   * request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const sliceIndex = viewport.getCurrentImageIdIndex();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[\n        i\n      ] as RectangleROIStartEndThresholdAnnotation;\n      const { annotationUID, data } = annotation;\n      const { startSlice, endSlice } = data;\n      const { points, activeHandleIndex } = data.handles;\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      // range of slices to render based on the start and end slice, like\n      // np.arange\n\n      // if indexIJK is outside the start/end slice, we don't render\n      if (\n        sliceIndex < Math.min(startSlice, endSlice) ||\n        sliceIndex > Math.max(startSlice, endSlice)\n      ) {\n        continue;\n      }\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n\n      if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(annotation, enabledElement);\n      }\n\n      // if it is inside the start/end slice, but not exactly the first or\n      // last slice, we render the line in dash, but not the handles\n      let firstOrLastSlice = false;\n      if (sliceIndex === startSlice || sliceIndex === endSlice) {\n        firstOrLastSlice = true;\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null &&\n        firstOrLastSlice\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      let lineDashToUse = lineDash;\n\n      if (!firstOrLastSlice) {\n        lineDashToUse = 2;\n      }\n\n      const rectangleUID = '0';\n      drawRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash: lineDashToUse,\n          lineWidth,\n        }\n      );\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  _getEndSliceIndex(\n    imageVolume: Types.IImageVolume,\n    worldPos: Types.Point3,\n    spacingInNormal: number,\n    viewPlaneNormal: Types.Point3\n  ): number | undefined {\n    const numSlicesToPropagate = this.configuration.numSlicesToPropagate;\n\n    // get end position by moving from worldPos in the direction of viewplaneNormal\n    // with amount of numSlicesToPropagate * spacingInNormal\n    const endPos = vec3.create();\n    vec3.scaleAndAdd(\n      endPos,\n      worldPos,\n      viewPlaneNormal,\n      numSlicesToPropagate * spacingInNormal\n    );\n\n    const halfSpacingInNormalDirection = spacingInNormal / 2;\n    // Loop through imageIds of the imageVolume and find the one that is closest to endPos\n    const { imageIds } = imageVolume;\n    let imageIdIndex;\n    for (let i = 0; i < imageIds.length; i++) {\n      const imageId = imageIds[i];\n\n      const { imagePositionPatient } = metaData.get(\n        'imagePlaneModule',\n        imageId\n      );\n\n      const dir = vec3.create();\n      vec3.sub(dir, endPos, imagePositionPatient);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        imageIdIndex = i;\n      }\n    }\n\n    return imageIdIndex;\n  }\n}\n\nRectangleROIStartEndThresholdTool.toolName = 'RectangleROIStartEndThreshold';\nexport default RectangleROIStartEndThresholdTool;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Uses the current bounds of the 2D rectangle and extends it in the view axis by numSlices\n * It compares min and max of each IJK to find the view axis (for axial, zMin === zMax) and\n * then calculates the extended range. It will assume the slice is relative to the\n * current slice and will add the given slices to the current max of the boundingBox.\n * @param boundsIJK - [[iMin, iMax], [jMin, jMax], [kMin, kMax]]\n * @param slices - number of slices to project before and after\n * @returns extended bounds\n */\nfunction extend2DBoundingBoxInViewAxis(\n  boundsIJK: [Types.Point2, Types.Point2, Types.Point2],\n  numSlicesToProject: number\n): [Types.Point2, Types.Point2, Types.Point2] {\n  // find which index in boundsIJK has the same first and last value\n  const sliceNormalIndex = boundsIJK.findIndex(([min, max]) => min === max);\n\n  if (sliceNormalIndex === -1) {\n    throw new Error('3D bounding boxes not supported in an oblique plane');\n  }\n\n  // get the index and subtract slices from the min and add to the max\n  boundsIJK[sliceNormalIndex][0] -= numSlicesToProject;\n  boundsIJK[sliceNormalIndex][1] += numSlicesToProject;\n  return boundsIJK;\n}\n\nexport default extend2DBoundingBoxInViewAxis;\n","import { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport getBoundingBoxAroundShape from '../boundingBox/getBoundingBoxAroundShape';\nimport extend2DBoundingBoxInViewAxis from '../boundingBox/extend2DBoundingBoxInViewAxis';\n\ntype Options = {\n  numSlicesToProject?: number;\n};\n\nfunction getBoundsIJKFromRectangleAnnotations(\n  annotations,\n  referenceVolume,\n  options = {} as Options\n) {\n  const AllBoundsIJK = [];\n  annotations.forEach((annotation) => {\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const { imageData, dimensions } = referenceVolume;\n\n    let pointsToUse = points;\n    // If the tool is a 2D tool but has projection points, use them\n    if (data.cachedStats?.projectionPoints) {\n      const { projectionPoints } = data.cachedStats;\n      pointsToUse = [].concat(...projectionPoints); // cannot use flat() because of typescript compiler right now\n    }\n\n    const rectangleCornersIJK = pointsToUse.map(\n      (world) => csUtils.transformWorldToIndex(imageData, world) as Types.Point3\n    );\n    let boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n    // If the tool is 2D but it is configured to project to X amount of slices\n    // Don't project the slices if projectionPoints have been used to define the extents\n    if (options.numSlicesToProject && !data.cachedStats?.projectionPoints) {\n      boundsIJK = extend2DBoundingBoxInViewAxis(\n        boundsIJK,\n        options.numSlicesToProject\n      );\n    }\n\n    AllBoundsIJK.push(boundsIJK);\n  });\n\n  if (AllBoundsIJK.length === 1) {\n    return AllBoundsIJK[0];\n  }\n\n  // Get the intersection of all the bounding boxes\n  // This is the bounding box that contains all the ROIs\n  const boundsIJK = AllBoundsIJK.reduce(\n    (accumulator, currentValue) => {\n      return {\n        iMin: Math.min(accumulator.iMin, currentValue.iMin),\n        jMin: Math.min(accumulator.jMin, currentValue.jMin),\n        kMin: Math.min(accumulator.kMin, currentValue.kMin),\n        iMax: Math.max(accumulator.iMax, currentValue.iMax),\n        jMax: Math.max(accumulator.jMax, currentValue.jMax),\n        kMax: Math.max(accumulator.kMax, currentValue.kMax),\n      };\n    },\n    {\n      iMin: Infinity,\n      jMin: Infinity,\n      kMin: Infinity,\n      iMax: -Infinity,\n      jMax: -Infinity,\n      kMax: -Infinity,\n    }\n  );\n\n  return boundsIJK;\n}\n\nexport default getBoundsIJKFromRectangleAnnotations;\n","import type { Types } from '@cornerstonejs/core';\nimport { state } from '../../stateManagement/annotation';\nimport {\n  RectangleROIStartEndThresholdTool,\n  RectangleROIThresholdTool,\n} from '../../tools';\n\nimport thresholdVolumeByRange from './thresholdVolumeByRange';\nimport getBoundsIJKFromRectangleAnnotations from '../rectangleROITool/getBoundsIJKFromRectangleAnnotations';\nimport { ThresholdInformation } from './utilities';\n\nexport type ThresholdOptions = {\n  numSlicesToProject?: number; // number of slices to project before and after current slice\n  overwrite: boolean;\n  overlapType?: number; // type of the voxel overlap\n};\n\nexport type AnnotationForThresholding = {\n  data: {\n    handles: {\n      points: Types.Point3[];\n    };\n    cachedStats?: {\n      projectionPoints?: Types.Point3[][];\n    };\n  };\n};\n\n/**\n * It uses the provided rectangleROI annotations (either RectangleROIThreshold, or\n * RectangleROIStartEndThreshold) to compute an ROI that is the intersection of\n * all the annotations. Then it uses the rectangleROIThreshold utility to threshold\n * the volume.\n * @param annotationUIDs - rectangleROI annotationsUIDs to use for ROI\n * @param segmentationVolume - the segmentation volume\n * @param thresholdVolumeInformation - object array containing the volume data and range threshold values\n * @param options - options for thresholding\n * @returns\n */\nfunction rectangleROIThresholdVolumeByRange(\n  annotationUIDs: string[],\n  segmentationVolume: Types.IImageVolume,\n  thresholdVolumeInformation: ThresholdInformation[],\n  options: ThresholdOptions\n): Types.IImageVolume {\n  const annotations = annotationUIDs.map((annotationUID) => {\n    return state.getAnnotation(annotationUID);\n  });\n\n  _validateAnnotations(annotations);\n\n  let boundsIJK;\n  for (let i = 0; i < thresholdVolumeInformation.length; i++) {\n    // make sure that the boundsIJK are generated by the correct volume\n    const volumeSize =\n      thresholdVolumeInformation[i].volume.getScalarData().length;\n    if (volumeSize === segmentationVolume.getScalarData().length || i === 0) {\n      boundsIJK = getBoundsIJKFromRectangleAnnotations(\n        annotations,\n        thresholdVolumeInformation[i].volume,\n        options\n      );\n    }\n  }\n\n  const outputSegmentationVolume = thresholdVolumeByRange(\n    segmentationVolume,\n    thresholdVolumeInformation,\n    { ...options, boundsIJK }\n  );\n\n  return outputSegmentationVolume;\n}\n\nfunction _validateAnnotations(annotations) {\n  const validToolNames = [\n    RectangleROIThresholdTool.toolName,\n    RectangleROIStartEndThresholdTool.toolName,\n  ];\n\n  for (const annotation of annotations) {\n    const name = annotation.metadata.toolName;\n    if (!validToolNames.includes(name)) {\n      throw new Error(\n        'rectangleROIThresholdVolumeByRange only supports RectangleROIThreshold and RectangleROIStartEndThreshold annotations'\n      );\n    }\n  }\n}\n\nexport default rectangleROIThresholdVolumeByRange;\n","import { Types } from '@cornerstonejs/core';\nimport { volumeLoader, utilities as csUtils } from '@cornerstonejs/core';\n\n/**\n * Given a list of labelmaps (with the possibility of overlapping regions), and\n * a segmentIndex it creates a new labelmap with the same dimensions as the input labelmaps,\n * but merges them into a single labelmap for the segmentIndex. It wipes out\n * all other segment Indices. This is useful for calculating statistics regarding\n * a specific segment when there are overlapping regions between labelmap (e.g. TMTV)\n *\n * @param labelmaps - Array of labelmaps\n * @param segmentIndex - The segment index to merge\n * @returns Merged labelmap\n */\nfunction createMergedLabelmapForIndex(\n  labelmaps: Array<Types.IImageVolume>,\n  segmentIndex = 1,\n  volumeId = 'mergedLabelmap'\n): Types.IImageVolume {\n  labelmaps.forEach(({ direction, dimensions, origin, spacing }) => {\n    if (\n      !csUtils.isEqual(dimensions, labelmaps[0].dimensions) ||\n      !csUtils.isEqual(direction, labelmaps[0].direction) ||\n      !csUtils.isEqual(spacing, labelmaps[0].spacing) ||\n      !csUtils.isEqual(origin, labelmaps[0].origin)\n    ) {\n      throw new Error('labelmaps must have the same size and shape');\n    }\n  });\n\n  const labelmap = labelmaps[0];\n\n  const arrayType = (labelmap.getScalarData() as any).constructor;\n  const outputData = new arrayType(labelmap.getScalarData().length);\n\n  labelmaps.forEach((labelmap) => {\n    const scalarData = labelmap.getScalarData();\n    for (let i = 0; i < scalarData.length; i++) {\n      if (scalarData[i] === segmentIndex) {\n        outputData[i] = segmentIndex;\n      }\n    }\n  });\n\n  const options = {\n    scalarData: outputData,\n    metadata: labelmap.metadata,\n    spacing: labelmap.spacing,\n    origin: labelmap.origin,\n    direction: labelmap.direction,\n    dimensions: labelmap.dimensions,\n  };\n\n  const preventCache = true;\n  // Todo: following should be async\n  const mergedVolume = volumeLoader.createLocalVolume(\n    options,\n    volumeId,\n    preventCache\n  );\n\n  return mergedVolume;\n}\n\nexport default createMergedLabelmapForIndex;\n","import { isValidLabelmapConfig } from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport SegmentationRepresentation from '../../enums/SegmentationRepresentations';\nimport { RepresentationConfig } from '../../types/SegmentationStateTypes';\n\n/**\n * Given a representation type and a configuration, return true if the\n * configuration is valid for that representation type\n * @param representationType - The type of segmentation representation\n * @param config - RepresentationConfig\n * @returns A boolean value.\n */\nexport default function isValidRepresentationConfig(\n  representationType: string,\n  config: RepresentationConfig\n): boolean {\n  switch (representationType) {\n    case SegmentationRepresentation.Labelmap:\n      return isValidLabelmapConfig(config);\n    default:\n      throw new Error(`Unknown representation type: ${representationType}`);\n  }\n}\n","import getDefaultLabelmapConfig from '../../tools/displayTools/Labelmap/labelmapConfig';\nimport SegmentationRepresentation from '../../enums/SegmentationRepresentations';\nimport { Segmentation } from '../../types/SegmentationStateTypes';\n\n/**\n * It returns a configuration object for the given representation type.\n * @param representationType - The type of segmentation representation\n * @returns A representation configuration object.\n */\nexport default function getDefaultRepresentationConfig(\n  segmentation: Segmentation\n) {\n  const { type: representationType } = segmentation;\n  switch (representationType) {\n    case SegmentationRepresentation.Labelmap:\n      return getDefaultLabelmapConfig();\n    default:\n      throw new Error(`Unknown representation type: ${representationType}`);\n  }\n}\n","import { _cloneDeep } from 'lodash.clonedeep';\nimport {\n  getEnabledElementByIds,\n  volumeLoader,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Create a new 3D segmentation volume from the default imageData presented in\n * the first actor of the viewport. It looks at the metadata of the imageData\n * to determine the volume dimensions and spacing if particular options are not provided.\n *\n * @param viewportId - The Id of the viewport from which to derive the volume from.\n * @param renderingEngineId - The Id of the rendering engine the viewport belongs to.\n * @param [segmentationId] - The Id to name the generated segmentation. Autogenerated if not given.\n * @param [options] - LabelmapOptions\n * @returns A promise that resolves to the Id of the new labelmap volume.\n */\nexport default async function createLabelmapVolumeForViewport(input: {\n  viewportId: string;\n  renderingEngineId: string;\n  segmentationId?: string;\n  options?: {\n    volumeId?: string;\n    scalarData?: Float32Array | Uint8Array | Uint16Array | Int16Array;\n    targetBuffer?: {\n      type: 'Float32Array' | 'Uint8Array' | 'Uint16Array' | 'Int8Array';\n    };\n    metadata?: any;\n    dimensions?: Types.Point3;\n    spacing?: Types.Point3;\n    origin?: Types.Point3;\n    direction?: Float32Array;\n  };\n}): Promise<string> {\n  const { viewportId, renderingEngineId, options } = input;\n  let { segmentationId } = input;\n  const enabledElement = getEnabledElementByIds(viewportId, renderingEngineId);\n\n  if (!enabledElement) {\n    throw new Error('element disabled');\n  }\n\n  const { viewport } = enabledElement;\n  if (!(viewport instanceof VolumeViewport)) {\n    throw new Error('Segmentation only supports VolumeViewport');\n  }\n\n  const { uid } = viewport.getDefaultActor();\n\n  if (segmentationId === undefined) {\n    // Name the segmentation volume with the viewport Id\n    segmentationId = `${uid}-based-segmentation-${\n      options?.volumeId ?? csUtils.uuidv4().slice(0, 8)\n    }`;\n  }\n\n  if (options) {\n    // create a new labelmap with its own properties\n    // This allows creation of a higher resolution labelmap vs reference volume\n    const properties = _cloneDeep(options);\n    await volumeLoader.createLocalVolume(properties, segmentationId);\n  } else {\n    // create a labelmap from a reference volume\n    const { uid: volumeId } = viewport.getDefaultActor();\n    await volumeLoader.createAndCacheDerivedVolume(volumeId, {\n      volumeId: segmentationId,\n    });\n  }\n\n  return segmentationId;\n}\n","import type {\n  FloodFillResult,\n  FloodFillGetter,\n  FloodFillOptions,\n} from '../../types';\nimport { Types } from '@cornerstonejs/core';\n\n/**\n * floodFill.js - Taken from MIT OSS lib - https://github.com/tuzz/n-dimensional-flood-fill\n * Refactored to ES6.\n *\n * @param {function} getter The getter to the elements of your data structure,\n *                          e.g. getter(x,y) for a 2D interprettation of your structure.\n * @param {number[]} seed The seed for your fill. The dimensionality is infered\n *                        by the number of dimensions of the seed.\n * @param {function} [options.onFlood] An optional callback to execute when each pixel is flooded.\n *                             e.g. onFlood(x,y).\n * @param {function} [options.onBoundary] An optional callback to execute whenever a boundary is reached.\n *                                a boundary could be another segmentIndex, or the edge of your\n *                                data structure (i.e. when your getter returns undefined).\n * @param {function} [options.equals] An optional equality method for your datastructure.\n *                            Default is simply value1 = value2.\n * @param {boolean} [options.diagonals] Whether you allow flooding through diagonals. Defaults to false.\n *\n * @returns {Object}\n */\nfunction floodFill(\n  getter: FloodFillGetter,\n  seed: Types.Point2 | Types.Point3,\n  options: FloodFillOptions = {}\n): FloodFillResult {\n  const onFlood = options.onFlood;\n  const onBoundary = options.onBoundary;\n  const equals = options.equals || defaultEquals;\n  const diagonals = options.diagonals || false;\n  const startNode = get(seed);\n  const permutations = prunedPermutations();\n  const stack = [];\n  const flooded = [];\n  const visits = {};\n  const bounds = {};\n\n  stack.push({ currentArgs: seed });\n\n  while (stack.length > 0) {\n    flood(stack.pop());\n  }\n\n  return {\n    flooded,\n    boundaries: boundaries(),\n  };\n\n  function flood(job) {\n    const getArgs = job.currentArgs;\n    const prevArgs = job.previousArgs;\n\n    if (visited(getArgs)) {\n      return;\n    }\n    markAsVisited(getArgs);\n\n    if (member(getArgs)) {\n      markAsFlooded(getArgs);\n      pushAdjacent(getArgs);\n    } else {\n      markAsBoundary(prevArgs);\n    }\n  }\n\n  function visited(key) {\n    return visits[key] === true;\n  }\n\n  function markAsVisited(key) {\n    visits[key] = true;\n  }\n\n  function member(getArgs) {\n    const node = safely(get, [getArgs]);\n\n    return safely(equals, [node, startNode]);\n  }\n\n  function markAsFlooded(getArgs) {\n    flooded.push(getArgs);\n    if (onFlood) {\n      //@ts-ignore\n      onFlood(...getArgs);\n    }\n  }\n\n  function markAsBoundary(prevArgs) {\n    bounds[prevArgs] = prevArgs;\n    if (onBoundary) {\n      //@ts-ignore\n      onBoundary(...prevArgs);\n    }\n  }\n\n  function pushAdjacent(getArgs) {\n    for (let i = 0; i < permutations.length; i += 1) {\n      const perm = permutations[i];\n      const nextArgs = getArgs.slice(0);\n\n      for (let j = 0; j < getArgs.length; j += 1) {\n        nextArgs[j] += perm[j];\n      }\n\n      stack.push({\n        currentArgs: nextArgs,\n        previousArgs: getArgs,\n      });\n    }\n  }\n\n  function get(getArgs) {\n    //@ts-ignore\n    return getter(...getArgs);\n  }\n\n  function safely(f, args) {\n    try {\n      return f(...args);\n    } catch (error) {\n      return;\n    }\n  }\n\n  function prunedPermutations() {\n    const permutations = permute(seed.length);\n\n    return permutations.filter(function (perm) {\n      const count = countNonZeroes(perm);\n\n      return count !== 0 && (count === 1 || diagonals);\n    });\n  }\n\n  function permute(length) {\n    const perms = [];\n\n    const permutation = function (string) {\n      return string.split('').map(function (c) {\n        return parseInt(c, 10) - 1;\n      });\n    };\n\n    for (let i = 0; i < Math.pow(3, length); i += 1) {\n      const string = lpad(i.toString(3), '0', length);\n\n      perms.push(permutation(string));\n    }\n\n    return perms;\n  }\n\n  function boundaries() {\n    const array = [];\n\n    for (const key in bounds) {\n      if (bounds[key] !== undefined) {\n        array.unshift(bounds[key]);\n      }\n    }\n\n    return array;\n  }\n}\n\nfunction defaultEquals(a, b) {\n  return a === b;\n}\n\nfunction countNonZeroes(array) {\n  let count = 0;\n\n  for (let i = 0; i < array.length; i += 1) {\n    if (array[i] !== 0) {\n      count += 1;\n    }\n  }\n\n  return count;\n}\n\nfunction lpad(string, character, length) {\n  const array = new Array(length + 1);\n  const pad = array.join(character);\n\n  return (pad + string).slice(-length);\n}\n\nexport default floodFill;\n","import { getToolGroup } from '../../store/ToolGroupManager';\nimport BrushTool from '../../tools/segmentation/BrushTool';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport getBrushToolInstances from './utilities';\n\n/**\n * Sets the brush size for all brush-based tools in a given tool group.\n * @param toolGroupId - The ID of the tool group to set the brush size for.\n * @param brushSize - The new brush size to set.\n * @param toolName - The name of the specific tool to set the brush size for (optional)\n * If not provided, all brush-based tools in the tool group will be affected.\n */\nexport function setBrushSizeForToolGroup(\n  toolGroupId: string,\n  brushSize: number,\n  toolName?: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n\n  brushBasedToolInstances.forEach((tool: BrushTool) => {\n    tool.configuration.brushSize = brushSize;\n\n    // Invalidate the brush being rendered so it can update.\n    tool.invalidateBrushCursor();\n  });\n\n  // Trigger an annotation render for any viewports on the toolgroup\n  const viewportsInfo = toolGroup.getViewportsInfo();\n\n  const viewportsInfoArray = Object.keys(viewportsInfo).map(\n    (key) => viewportsInfo[key]\n  );\n\n  if (!viewportsInfoArray.length) {\n    return;\n  }\n\n  const { renderingEngineId } = viewportsInfoArray[0];\n\n  // Use helper to get array of viewportIds, or we just end up doing this mapping\n  // ourselves here.\n  const viewportIds = toolGroup.getViewportIds();\n\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n}\n\n/**\n * Gets the brush size for the first brush-based tool instance in a given tool group.\n * @param toolGroupId - The ID of the tool group to get the brush size for.\n * @param toolName - The name of the specific tool to get the brush size for (Optional)\n * If not provided, the first brush-based tool instance in the tool group will be used.\n * @returns The brush size of the selected tool instance, or undefined if no brush-based tool instance is found.\n */\nexport function getBrushSizeForToolGroup(\n  toolGroupId: string,\n  toolName?: string\n): void {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId, toolName);\n\n  // one is enough as they share the same brush size\n  const brushToolInstance = brushBasedToolInstances[0];\n\n  if (!brushToolInstance) {\n    return;\n  }\n\n  // TODO -> Assumes the brush sizes are the same and set via these helpers.\n  return brushToolInstance.configuration.brushSize;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { getToolGroup } from '../../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../triggerAnnotationRenderForViewportIds';\nimport { getRenderingEngine } from '@cornerstonejs/core';\nimport getBrushToolInstances from './utilities';\n\nexport function setBrushThresholdForToolGroup(\n  toolGroupId: string,\n  threshold: Types.Point2\n) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n\n  brushBasedToolInstances.forEach((tool) => {\n    tool.configuration.strategySpecificConfiguration.THRESHOLD_INSIDE_CIRCLE.threshold =\n      threshold;\n  });\n\n  // Trigger an annotation render for any viewports on the toolgroup\n  const viewportsInfo = toolGroup.getViewportsInfo();\n\n  if (!viewportsInfo.length) {\n    return;\n  }\n\n  const { renderingEngineId } = viewportsInfo[0];\n\n  // Use helper to get array of viewportIds, or we just end up doing this mapping\n  // ourselves here.\n  const viewportIds = toolGroup.getViewportIds();\n\n  const renderingEngine = getRenderingEngine(renderingEngineId);\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIds);\n}\n\nexport function getBrushThresholdForToolGroup(toolGroupId: string) {\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (toolGroup === undefined) {\n    return;\n  }\n\n  const toolInstances = toolGroup._toolInstances;\n\n  if (!Object.keys(toolInstances).length) {\n    return;\n  }\n\n  const brushBasedToolInstances = getBrushToolInstances(toolGroupId);\n  const brushToolInstance = brushBasedToolInstances[0];\n\n  if (!brushToolInstance) {\n    return;\n  }\n\n  // TODO -> Assumes the\n  return brushToolInstance.configuration.strategySpecificConfiguration\n    .THRESHOLD_INSIDE_CIRCLE.threshold;\n}\n","import { Types } from '@cornerstonejs/core';\nimport { pointInShapeCallback } from '../../utilities';\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  getVoxelOverlap,\n  processVolumes,\n  ThresholdInformation,\n} from './utilities';\n\n/**\n * It thresholds a segmentation volume based on a set of threshold values with\n * respect to a list of volumes and respective threshold ranges.\n * @param segmentationVolume - the segmentation volume to be modified\n * @param segmentationIndex - the index of the segmentation to modify\n * @param thresholdVolumeInformation - array of objects containing volume data\n * and a range (lower and upper values) to threshold\n * @param overlapType - indicates if the user requires all voxels pass\n * (overlapType = 1) or any voxel pass (overlapType = 0)\n * @returns\n */\nfunction thresholdSegmentationByRange(\n  segmentationVolume: Types.IImageVolume,\n  segmentationIndex: number,\n  thresholdVolumeInformation: ThresholdInformation[],\n  overlapType: number\n): Types.IImageVolume {\n  const scalarData = segmentationVolume.getScalarData();\n\n  // prepare a list of volume information objects for callback functions\n  const { baseVolumeIdx, volumeInfoList } = processVolumes(\n    segmentationVolume,\n    thresholdVolumeInformation\n  );\n\n  /**\n   * This function will test all overlaps between a voxel in base volume\n   * (the reference for segmentation volume creation) and voxels in other\n   * volumes.\n   * If the segmentation volume and the image volume are the same size,\n   * checks if the scalar data at each point is within the threshold values.\n   * If the segmentation volume and the image volume are different sizes,\n   * checks the voxel overlap\n   */\n  volumeInfoList.forEach((volumeInfo) => {\n    const { volumeSize } = volumeInfo;\n\n    if (volumeSize === scalarData.length) {\n      _handleSameSizeVolume(scalarData, segmentationIndex, volumeInfo);\n    } else {\n      _handleDifferentSizeVolume(\n        scalarData,\n        segmentationIndex,\n        volumeInfo,\n        volumeInfoList,\n        baseVolumeIdx,\n        overlapType\n      );\n    }\n  });\n\n  triggerSegmentationDataModified(segmentationVolume.volumeId);\n\n  return segmentationVolume;\n}\n\nfunction _handleDifferentSizeVolume(\n  scalarData: Types.VolumeScalarData,\n  segmentationIndex: number,\n  volumeInfo: any,\n  volumeInfoList: any,\n  baseVolumeIdx: number,\n  overlapType: number\n) {\n  const { imageData, lower, upper, dimensions } = volumeInfo;\n\n  let total, overlaps, range;\n\n  for (let i = 0; i < scalarData.length; i++) {\n    if (scalarData[i] === segmentationIndex) {\n      const overlapBounds = getVoxelOverlap(\n        imageData,\n        dimensions,\n        volumeInfoList[baseVolumeIdx].spacing,\n        volumeInfoList[baseVolumeIdx].imageData.getPoint(i)\n      );\n\n      const callbackOverlap = ({ value }) => {\n        total = total + 1;\n        if (value >= range.lower && value <= range.upper) {\n          overlaps = overlaps + 1;\n        }\n      };\n\n      total = 0;\n      overlaps = 0;\n      range = { lower, upper };\n      let overlapTest = false;\n\n      // check all voxel overlaps\n      pointInShapeCallback(\n        imageData,\n        () => true,\n        callbackOverlap,\n        overlapBounds\n      );\n\n      overlapTest = overlapType === 0 ? overlaps > 0 : overlaps === total;\n      scalarData[i] = overlapTest ? segmentationIndex : 0;\n    }\n  }\n  return { total, range, overlaps };\n}\n\nfunction _handleSameSizeVolume(\n  scalarData: Types.VolumeScalarData,\n  segmentationIndex: number,\n  volumeInfo: any\n) {\n  const { referenceValues, lower, upper } = volumeInfo;\n\n  for (let i = 0; i < scalarData.length; i++) {\n    if (scalarData[i] === segmentationIndex) {\n      const value = referenceValues[i];\n      scalarData[i] = value >= lower && value <= upper ? segmentationIndex : 0;\n    }\n  }\n}\n\nexport default thresholdSegmentationByRange;\n","// Pulled from source: https://github.com/w8r/liang-barsky\n// MIT Licensed.\n\n/**\n * Fast, destructive implementation of Liang-Barsky line clipping algorithm.\n * It clips a 2D segment by a rectangle.\n * @author Alexander Milevski <info@w8r.name>\n * @license MIT\n */\n\nconst EPSILON = 1e-6;\nconst INSIDE = 1;\nconst OUTSIDE = 0;\n\nfunction clipT(num, denom, c) {\n  const [tE, tL] = c;\n  if (Math.abs(denom) < EPSILON) {\n    return num < 0;\n  }\n  const t = num / denom;\n\n  if (denom > 0) {\n    if (t > tL) {\n      return 0;\n    }\n    if (t > tE) {\n      c[0] = t;\n    }\n  } else {\n    if (t < tE) {\n      return 0;\n    }\n    if (t < tL) {\n      c[1] = t;\n    }\n  }\n  return 1;\n}\n\n/**\n * @param  {Point} a\n * @param  {Point} b\n * @param  {BoundingBox} box [xmin, ymin, xmax, ymax]\n * @param  {Point?} [da]\n * @param  {Point?} [db]\n * @return {number}\n */\nexport default function clip(a, b, box, da?, db?) {\n  const [x1, y1] = a;\n  const [x2, y2] = b;\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n\n  if (da === undefined || db === undefined) {\n    da = a;\n    db = b;\n  } else {\n    da[0] = a[0];\n    da[1] = a[1];\n    db[0] = b[0];\n    db[1] = b[1];\n  }\n\n  if (\n    Math.abs(dx) < EPSILON &&\n    Math.abs(dy) < EPSILON &&\n    x1 >= box[0] &&\n    x1 <= box[2] &&\n    y1 >= box[1] &&\n    y1 <= box[3]\n  ) {\n    return INSIDE;\n  }\n\n  const c = [0, 1];\n  if (\n    clipT(box[0] - x1, dx, c) &&\n    clipT(x1 - box[2], -dx, c) &&\n    clipT(box[1] - y1, dy, c) &&\n    clipT(y1 - box[3], -dy, c)\n  ) {\n    const [tE, tL] = c;\n    if (tL < 1) {\n      db[0] = x1 + tL * dx;\n      db[1] = y1 + tL * dy;\n    }\n    if (tE > 0) {\n      da[0] += tE * dx;\n      da[1] += tE * dy;\n    }\n    return INSIDE;\n  }\n  return OUTSIDE;\n}\n","import type { Types } from '@cornerstonejs/core';\n\n// Returns sign of number\nfunction sign(x: any) {\n  return typeof x === 'number'\n    ? x\n      ? x < 0\n        ? -1\n        : 1\n      : x === x\n      ? 0\n      : NaN\n    : NaN;\n}\n\n/**\n * Calculates the intersection point between two lines in the 2D plane\n *\n * @param line1Start - x,y coordinates of the start of the first line\n * @param line1End - x,y coordinates of the end of the first line\n * @param line2Start - x,y coordinates of the start of the second line\n * @param line2End - x,y coordinates of the end of the second line\n * @returns [x,y] - point x,y of the point\n */\n\nexport default function intersectLine(\n  line1Start: Types.Point2,\n  line1End: Types.Point2,\n  line2Start: Types.Point2,\n  line2End: Types.Point2\n): number[] {\n  const [x1, y1] = line1Start;\n  const [x2, y2] = line1End;\n  const [x3, y3] = line2Start;\n  const [x4, y4] = line2End;\n\n  // Compute a1, b1, c1, where line joining points 1 and 2 is \"a1 x  +  b1 y  +  c1  =  0\"\n  const a1 = y2 - y1;\n  const b1 = x1 - x2;\n  const c1 = x2 * y1 - x1 * y2;\n\n  // Compute r3 and r4\n  const r3 = a1 * x3 + b1 * y3 + c1;\n  const r4 = a1 * x4 + b1 * y4 + c1;\n\n  /* Check signs of r3 and r4.  If both point 3 and point 4 lie on\n   * same side of line 1, the line segments do not intersect.\n   */\n\n  if (r3 !== 0 && r4 !== 0 && sign(r3) === sign(r4)) {\n    return;\n  }\n\n  // Compute a2, b2, c2\n  const a2 = y4 - y3;\n  const b2 = x3 - x4;\n  const c2 = x4 * y3 - x3 * y4;\n\n  // Compute r1 and r2\n  const r1 = a2 * x1 + b2 * y1 + c2;\n  const r2 = a2 * x2 + b2 * y2 + c2;\n\n  /* Check signs of r1 and r2.  If both point 1 and point 2 lie\n   * on same side of second line segment, the line segments do\n   * not intersect.\n   */\n\n  if (r1 !== 0 && r2 !== 0 && sign(r1) === sign(r2)) {\n    return;\n  }\n\n  /* Line segments intersect: compute intersection point.\n   */\n\n  const denom = a1 * b2 - a2 * b1;\n  let num;\n\n  /* The denom/2 is to get rounding instead of truncating.  It\n   * is added or subtracted to the numerator, depending upon the\n   * sign of the numerator.\n   */\n\n  num = b1 * c2 - b2 * c1;\n  const x = num / denom;\n\n  num = a2 * c1 - a1 * c2;\n  const y = num / denom;\n\n  const intersectionPoint = [x, y];\n\n  return intersectionPoint;\n}\n","import { vec2 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Orientation algoritm to determine if two lines cross.\n * Credit and details: geeksforgeeks.org/check-if-two-given-line-segments-intersect/\n */\n\nfunction getAllIntersectionsWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2[] {\n  let initialI;\n  let j;\n  const intersections: Types.Point2[] = [];\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      intersections.push([j, i]);\n    }\n\n    j = i;\n  }\n\n  return intersections;\n}\n\n/**\n * Returns all intersections points\n * between a line and a polyline\n */\nfunction getIntersectionCoordinatesWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2[] {\n  const result = [];\n  const polylineIndexes = getAllIntersectionsWithPolyline(\n    points,\n    p1,\n    q1,\n    closed\n  );\n\n  for (let i = 0; i < polylineIndexes.length; i++) {\n    const p2 = points[polylineIndexes[i][0]];\n    const q2 = points[polylineIndexes[i][1]];\n    const intersection = getIntersection(p1, q1, p2, q2);\n    result.push(intersection);\n  }\n  return result;\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects any of the other lines in the\n * `points`, and returns the first value.\n */\nfunction getFirstIntersectionWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): Types.Point2 | undefined {\n  let initialI;\n  let j;\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      return [j, i];\n    }\n\n    j = i;\n  }\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects any of the other lines in the\n * `points`, and returns the closest value.\n */\nfunction getClosestIntersectionWithPolyline(\n  points: Types.Point2[],\n  p1: Types.Point2,\n  q1: Types.Point2,\n  closed = true\n): { segment: Types.Point2; distance: number } | undefined {\n  let initialI;\n  let j;\n\n  if (closed) {\n    j = points.length - 1;\n    initialI = 0;\n  } else {\n    j = 0;\n    initialI = 1;\n  }\n\n  const intersections = [];\n\n  for (let i = initialI; i < points.length; i++) {\n    const p2 = points[j];\n    const q2 = points[i];\n\n    if (doesIntersect(p1, q1, p2, q2)) {\n      intersections.push([j, i]);\n    }\n\n    j = i;\n  }\n\n  if (intersections.length === 0) {\n    return;\n  }\n\n  // Find intersection closest to the start point\n  const distances = [];\n\n  intersections.forEach((intersection) => {\n    const intersectionPoints = [\n      points[intersection[0]],\n      points[intersection[1]],\n    ];\n\n    const midpoint = [\n      (intersectionPoints[0][0] + intersectionPoints[1][0]) / 2,\n      (intersectionPoints[0][1] + intersectionPoints[1][1]) / 2,\n    ];\n\n    distances.push(vec2.distance(<vec2>midpoint, p1));\n  });\n\n  const minDistance = Math.min(...distances);\n  const indexOfMinDistance = distances.indexOf(minDistance);\n\n  return {\n    segment: intersections[indexOfMinDistance],\n    distance: minDistance,\n  };\n}\n\n/**\n * Checks whether the line (`p1`,`q1`) intersects the line (`p2`,`q2`) via an orientation algorithm.\n */\nfunction doesIntersect(\n  p1: Types.Point2,\n  q1: Types.Point2,\n  p2: Types.Point2,\n  q2: Types.Point2\n): boolean {\n  let result = false;\n\n  const orient = [\n    orientation(p1, q1, p2),\n    orientation(p1, q1, q2),\n    orientation(p2, q2, p1),\n    orientation(p2, q2, q1),\n  ];\n\n  // General Case\n  if (orient[0] !== orient[1] && orient[2] !== orient[3]) {\n    return true;\n  }\n\n  // Special Cases\n  if (orient[0] === 0 && onSegment(p1, p2, q1)) {\n    // If p1, q1 and p2 are colinear and p2 lies on segment p1q1\n    result = true;\n  } else if (orient[1] === 0 && onSegment(p1, q2, q1)) {\n    // If p1, q1 and p2 are colinear and q2 lies on segment p1q1\n    result = true;\n  } else if (orient[2] === 0 && onSegment(p2, p1, q2)) {\n    // If p2, q2 and p1 are colinear and p1 lies on segment p2q2\n    result = true;\n  } else if (orient[3] === 0 && onSegment(p2, q1, q2)) {\n    // If p2, q2 and q1 are colinear and q1 lies on segment p2q2\n    result = true;\n  }\n\n  return result;\n}\n\n/**\n * Checks the orientation of 3 points, returns a 0, 1 or 2 based on\n * the orientation of the points.\n */\nfunction orientation(\n  p: Types.Point2,\n  q: Types.Point2,\n  r: Types.Point2\n): number {\n  const orientationValue =\n    (q[1] - p[1]) * (r[0] - q[0]) - (q[0] - p[0]) * (r[1] - q[1]);\n\n  if (orientationValue === 0) {\n    return 0; // Colinear\n  }\n\n  return orientationValue > 0 ? 1 : 2;\n}\n\n/**\n * Checks if point `q` lies on the segment (`p`,`r`).\n */\nfunction onSegment(p: Types.Point2, q: Types.Point2, r: Types.Point2): boolean {\n  if (\n    q[0] <= Math.max(p[0], r[0]) &&\n    q[0] >= Math.min(p[0], r[0]) &&\n    q[1] <= Math.max(p[1], r[1]) &&\n    q[1] >= Math.min(p[1], r[1])\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Gets the intersection between the line (`p1`,`q1`) and the line (`p2`,`q2`)\n * http://jsfiddle.net/justin_c_rounds/Gd2S2/light/\n * https://en.wikipedia.org/wiki/Line%E2%80%93line_intersection#Given_two_points_on_each_line\n */\nfunction getIntersection(\n  p1: Types.Point2,\n  q1: Types.Point2,\n  p2: Types.Point2,\n  q2: Types.Point2\n): Types.Point2 {\n  const denominator =\n    (q2[1] - p2[1]) * (q1[0] - p1[0]) - (q2[0] - p2[0]) * (q1[1] - p1[1]);\n  if (denominator == 0) {\n    return;\n  }\n  let a = p1[1] - p2[1];\n  let b = p1[0] - p2[0];\n  const numerator1 = (q2[0] - p2[0]) * a - (q2[1] - p2[1]) * b;\n  const numerator2 = (q1[0] - p1[0]) * a - (q1[1] - p1[1]) * b;\n  a = numerator1 / denominator;\n  b = numerator2 / denominator;\n\n  const resultX = p1[0] + a * (q1[0] - p1[0]);\n  const resultY = p1[1] + a * (q1[1] - p1[1]);\n\n  return [resultX, resultY];\n}\n\nexport {\n  getAllIntersectionsWithPolyline,\n  getFirstIntersectionWithPolyline,\n  getClosestIntersectionWithPolyline,\n  getIntersectionCoordinatesWithPolyline,\n};\n","import { StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nconst EPSILON = 1e-3;\n\n/**\n * Gets the desired spacing for points in the polyline for the\n * `PlanarFreehandROITool` in the x and y canvas directions, as well as\n * returning these canvas directions in world space.\n *\n * @param viewport - The Cornerstone3D `StackViewport` or `VolumeViewport`.\n * @param subPixelResolution - The number to divide the image pixel spacing by\n * to get the sub pixel spacing. E.g. `10` will return spacings 10x smaller than\n * the native image spacing.\n * @returns The spacings of the X and Y directions, and the 3D directions of the\n * x and y directions.\n */\nconst getSubPixelSpacingAndXYDirections = (\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  subPixelResolution: number\n): { spacing: Types.Point2; xDir: Types.Point3; yDir: Types.Point3 } => {\n  let spacing;\n  let xDir;\n  let yDir;\n\n  if (viewport instanceof StackViewport) {\n    // Check XY directions\n    const imageData = viewport.getImageData();\n\n    xDir = imageData.direction.slice(0, 3);\n    yDir = imageData.direction.slice(3, 6);\n\n    spacing = imageData.spacing;\n  } else {\n    // Check volume directions\n    const imageData = viewport.getImageData();\n    const { direction, spacing: volumeSpacing } = imageData;\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    // Calculate size of spacing vector in normal direction\n    const iVector = direction.slice(0, 3) as Types.Point3;\n    const jVector = direction.slice(3, 6) as Types.Point3;\n    const kVector = direction.slice(6, 9) as Types.Point3;\n\n    const viewRight = vec3.create(); // Get the X direction of the viewport\n\n    vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n    const absViewRightDotI = Math.abs(vec3.dot(viewRight, iVector));\n    const absViewRightDotJ = Math.abs(vec3.dot(viewRight, jVector));\n    const absViewRightDotK = Math.abs(vec3.dot(viewRight, kVector));\n\n    // Get X spacing\n    let xSpacing;\n    if (Math.abs(1 - absViewRightDotI) < EPSILON) {\n      xSpacing = volumeSpacing[0];\n      xDir = iVector;\n    } else if (Math.abs(1 - absViewRightDotJ) < EPSILON) {\n      xSpacing = volumeSpacing[1];\n      xDir = jVector;\n    } else if (Math.abs(1 - absViewRightDotK) < EPSILON) {\n      xSpacing = volumeSpacing[2];\n      xDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n\n    const absViewUpDotI = Math.abs(vec3.dot(viewUp, iVector));\n    const absViewUpDotJ = Math.abs(vec3.dot(viewUp, jVector));\n    const absViewUpDotK = Math.abs(vec3.dot(viewUp, kVector));\n\n    // Get Y spacing\n    let ySpacing;\n    if (Math.abs(1 - absViewUpDotI) < EPSILON) {\n      ySpacing = volumeSpacing[0];\n      yDir = iVector;\n    } else if (Math.abs(1 - absViewUpDotJ) < EPSILON) {\n      ySpacing = volumeSpacing[1];\n      yDir = jVector;\n    } else if (Math.abs(1 - absViewUpDotK) < EPSILON) {\n      ySpacing = volumeSpacing[2];\n      yDir = kVector;\n    } else {\n      throw new Error('No support yet for oblique plane planar contours');\n    }\n\n    spacing = [xSpacing, ySpacing];\n  }\n\n  const subPixelSpacing: Types.Point2 = [\n    spacing[0] / subPixelResolution,\n    spacing[1] / subPixelResolution,\n  ];\n\n  return { spacing: subPixelSpacing, xDir, yDir };\n};\n\nexport default getSubPixelSpacingAndXYDirections;\n","import { vec2 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Returns true if points `p1` and `p2` are within `closeContourProximity`.\n */\nconst pointsAreWithinCloseContourProximity = (\n  p1: Types.Point2,\n  p2: Types.Point2,\n  closeContourProximity: number\n): boolean => {\n  return vec2.dist(p1, p2) < closeContourProximity;\n};\n\nexport default pointsAreWithinCloseContourProximity;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec2, vec3 } from 'gl-matrix';\nimport { PlanarFreehandROICommonData } from './planarFreehandROIInternalTypes';\n\n/**\n * Adds one or more points to the array at a resolution defined by the underlying image.\n */\nconst addCanvasPointsToArray = (\n  element: HTMLDivElement,\n  canvasPoints: Types.Point2[],\n  newCanvasPoint: Types.Point2,\n  commonData: PlanarFreehandROICommonData\n): number => {\n  const { xDir, yDir, spacing } = commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const lastWorldPos = viewport.canvasToWorld(\n    canvasPoints[canvasPoints.length - 1]\n  );\n  const newWorldPos = viewport.canvasToWorld(newCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, newWorldPos, lastWorldPos);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  const numPointsToAdd = Math.max(\n    Math.floor(xDist / spacing[0]),\n    Math.floor(yDist / spacing[0])\n  );\n\n  if (numPointsToAdd > 1) {\n    const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n\n    const canvasDist = vec2.dist(lastCanvasPoint, newCanvasPoint);\n\n    const canvasDir = vec2.create();\n\n    vec2.subtract(canvasDir, newCanvasPoint, lastCanvasPoint);\n\n    vec2.set(canvasDir, canvasDir[0] / canvasDist, canvasDir[1] / canvasDist);\n\n    const distPerPoint = canvasDist / numPointsToAdd;\n\n    for (let i = 1; i <= numPointsToAdd; i++) {\n      canvasPoints.push([\n        lastCanvasPoint[0] + distPerPoint * canvasDir[0] * i,\n        lastCanvasPoint[1] + distPerPoint * canvasDir[1] * i,\n      ]);\n    }\n  } else {\n    canvasPoints.push(newCanvasPoint);\n  }\n\n  return numPointsToAdd;\n};\n\nexport default addCanvasPointsToArray;\n","import type { Types } from '@cornerstonejs/core';\nimport { vec2 } from 'gl-matrix';\n\n/**\n * Returns `true` if the point `p` can project onto point (`p1`, `p2`), and if\n * this projected point is less than `proximity` units away.\n */\nconst pointCanProjectOnLine = (\n  p: Types.Point2,\n  p1: Types.Point2,\n  p2: Types.Point2,\n  proximity: number\n): boolean => {\n  // Perfom checks in order of computational complexity.\n  const p1p = [p[0] - p1[0], p[1] - p1[1]];\n  const p1p2 = [p2[0] - p1[0], p2[1] - p1[1]];\n\n  const dot = p1p[0] * p1p2[0] + p1p[1] * p1p2[1];\n\n  // Dot product needs to be positive to be a candidate for projection onto line segment.\n  if (dot < 0) {\n    return false;\n  }\n\n  const p1p2Mag = Math.sqrt(p1p2[0] * p1p2[0] + p1p2[1] * p1p2[1]);\n\n  if (p1p2Mag === 0) {\n    return false;\n  }\n\n  const projectionVectorMag = dot / p1p2Mag;\n  const p1p2UnitVector = [p1p2[0] / p1p2Mag, p1p2[1] / p1p2Mag];\n  const projectionVector = [\n    p1p2UnitVector[0] * projectionVectorMag,\n    p1p2UnitVector[1] * projectionVectorMag,\n  ];\n  const projectionPoint = <Types.Point2>[\n    p1[0] + projectionVector[0],\n    p1[1] + projectionVector[1],\n  ];\n\n  const distance = vec2.distance(p, projectionPoint);\n\n  if (distance > proximity) {\n    // point is too far away.\n    return false;\n  }\n\n  // Check projects onto line segment.\n  if (vec2.distance(p1, projectionPoint) > vec2.distance(p1, p2)) {\n    return false;\n  }\n\n  return true;\n};\n\nexport default pointCanProjectOnLine;\n","import type { Types } from '@cornerstonejs/core';\n\n/**\n * Calculates the area of an array of `Point2` points using the shoelace algorithm.\n *\n * The units of the area are in the same units as the points are in. E.g. if\n * the points are in canvas, then the result is in canvas pixels ^2; If they are\n * in mm, then the result is in mm^2; etc.\n */\nexport default function calculateAreaOfPoints(points: Types.Point2[]): number {\n  // Shoelace algorithm.\n  const n = points.length;\n  let area = 0.0;\n  let j = n - 1;\n\n  for (let i = 0; i < n; i++) {\n    area += (points[j][0] + points[i][0]) * (points[j][1] - points[i][1]);\n    j = i; // j is previous vertex to i\n  }\n\n  // Return absolute value of half the sum (half as summing up traingles).\n  return Math.abs(area / 2.0);\n}\n","import type { Types } from '@cornerstonejs/core';\n\ntype Point = Types.Point2 | Types.Point3;\n\n/**\n * Calculates the distance of a point to another point\n *\n * @param p1 - x,y or x,y,z of the point\n * @param p2 - x,y or x,y,z of the point\n * @returns distance\n */\nexport default function distanceToPoint(p1: Point, p2: Point): number {\n  if (p1.length !== p2.length) {\n    throw Error('Both points should have the same dimensionality');\n  }\n\n  const [x1, y1, z1 = 0] = p1;\n  const [x2, y2, z2 = 0] = p2;\n\n  return Math.sqrt(\n    Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2) + Math.pow(z1 - z2, 2)\n  );\n}\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n/**\n * Returns a point based on some criteria (e.g., minimum or maximum intensity) in\n * the line of sight (on the line between the passed worldPosition and camera position).\n * It iterated over the points with a step size on the line.\n *\n * @param viewport - Volume viewport\n * @param worldPos - World coordinates of the clicked location\n * @param targetVolumeId - target Volume ID in the viewport\n * @param criteriaFunction - A function that returns the point if it passes a certain\n * written logic, for instance, it can be a maxValue function that keeps the\n * records of all intensity values, and only return the point if its intensity\n * is greater than the maximum intensity of the points passed before.\n * @param stepsSize - Percentage of the spacing in the normal direction, default value\n * is 0.25 which means steps = 1/4 of the spacing in the normal direction.\n * @returns the World pos of the point that passes the criteriaFunction\n */\nexport default function getPointInLineOfSightWithCriteria(\n  viewport: Types.IVolumeViewport,\n  worldPos: Types.Point3,\n  targetVolumeId: string,\n  criteriaFunction: (intensity: number, point: Types.Point3) => Types.Point3,\n  stepSize = 0.25\n): Types.Point3 {\n  // 1. Getting the camera from the event details\n  const camera = viewport.getCamera();\n  const { position: cameraPosition } = camera;\n\n  // 2. Calculating the spacing in the normal direction, this will get\n  // used as the step size for iterating over the points in the line of sight\n  const { spacingInNormalDirection } =\n    csUtils.getTargetVolumeAndSpacingInNormalDir(\n      viewport,\n      camera,\n      targetVolumeId\n    );\n  // 2.1 Making sure, we are not missing any point\n  const step = spacingInNormalDirection * stepSize;\n\n  // 3. Getting the bounds of the viewports. Search for brightest point is\n  // limited to the visible bound\n  // Todo: this might be a problem since bounds will change to spatial bounds.\n  const bounds = viewport.getBounds();\n  const xMin = bounds[0];\n  const xMax = bounds[1];\n\n  // 5. Calculating the line, we use a parametric line definition\n  const vector = <Types.Point3>[0, 0, 0];\n\n  // 5.1 Point coordinate on the line\n  let point = <Types.Point3>[0, 0, 0];\n\n  // 5.2 Calculating the line direction, and storing in vector\n  vtkMath.subtract(worldPos, cameraPosition, vector);\n\n  let pickedPoint;\n\n  // 6. Iterating over the line from the lower bound to the upper bound, with the\n  // specified step size\n  for (let pointT = xMin; pointT <= xMax; pointT = pointT + step) {\n    // 6.1 Calculating the point x location\n    point = [pointT, 0, 0];\n    // 6.2 Calculating the point y,z location based on the line equation\n    const t = (pointT - cameraPosition[0]) / vector[0];\n    point[1] = t * vector[1] + cameraPosition[1];\n    point[2] = t * vector[2] + cameraPosition[2];\n\n    // 6.3 Checking if the points is inside the bounds\n    if (_inBounds(point, bounds)) {\n      // 6.4 Getting the intensity of the point\n      const intensity = viewport.getIntensityFromWorld(point);\n      // 6.5 Passing the intensity to the maximum value functions which decides\n      // whether the current point is of interest based on some criteria\n      const pointToPick = criteriaFunction(intensity, point);\n      if (pointToPick) {\n        pickedPoint = pointToPick;\n      }\n    }\n  }\n\n  return pickedPoint;\n}\n\n/**\n * Returns whether the point in the world is inside the bounds of the viewport\n * @param point - coordinates in the world\n * @returns boolean\n */\nconst _inBounds = function (\n  point: Types.Point3,\n  bounds: Array<number>\n): boolean {\n  const [xMin, xMax, yMin, yMax, zMin, zMax] = bounds;\n  return (\n    point[0] > xMin &&\n    point[0] < xMax &&\n    point[1] > yMin &&\n    point[1] < yMax &&\n    point[2] > zMin &&\n    point[2] < zMax\n  );\n};\n","import filterAnnotationsWithinSlice from './filterAnnotationsWithinSlice';\nimport getWorldWidthAndHeightFromCorners from './getWorldWidthAndHeightFromCorners';\nimport filterAnnotationsForDisplay from './filterAnnotationsForDisplay';\nimport getPointInLineOfSightWithCriteria from './getPointInLineOfSightWithCriteria';\n\nexport default {\n  filterAnnotationsWithinSlice,\n  getWorldWidthAndHeightFromCorners,\n  filterAnnotationsForDisplay,\n  getPointInLineOfSightWithCriteria,\n};\n\nexport {\n  filterAnnotationsWithinSlice,\n  getWorldWidthAndHeightFromCorners,\n  filterAnnotationsForDisplay,\n  getPointInLineOfSightWithCriteria,\n};\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Returns the orientation of the vector in the patient coordinate system.\n * @public\n *\n * @param vector - Input array\n * @returns The orientation in the patient coordinate system.\n */\nexport default function getOrientationStringLPS(vector: Types.Point3): string {\n  // Thanks to David Clunie\n  // https://sites.google.com/site/dicomnotes/\n\n  let orientation = '';\n  const orientationX = vector[0] < 0 ? 'R' : 'L';\n  const orientationY = vector[1] < 0 ? 'A' : 'P';\n  const orientationZ = vector[2] < 0 ? 'F' : 'H';\n\n  // Should probably make this a function vector3.abs\n  const abs = [Math.abs(vector[0]), Math.abs(vector[1]), Math.abs(vector[2])];\n\n  const MIN = 0.0001;\n\n  for (let i = 0; i < 3; i++) {\n    if (abs[0] > MIN && abs[0] > abs[1] && abs[0] > abs[2]) {\n      orientation += orientationX;\n      abs[0] = 0;\n    } else if (abs[1] > MIN && abs[1] > abs[0] && abs[1] > abs[2]) {\n      orientation += orientationY;\n      abs[1] = 0;\n    } else if (abs[2] > MIN && abs[2] > abs[0] && abs[2] > abs[1]) {\n      orientation += orientationZ;\n      abs[2] = 0;\n    } else if (abs[0] > MIN && abs[1] > MIN && abs[0] === abs[1]) {\n      orientation += orientationX + orientationY;\n      abs[0] = 0;\n      abs[1] = 0;\n    } else if (abs[0] > MIN && abs[2] > MIN && abs[0] === abs[2]) {\n      orientation += orientationX + orientationZ;\n      abs[0] = 0;\n      abs[2] = 0;\n    } else if (abs[1] > MIN && abs[2] > MIN && abs[1] === abs[2]) {\n      orientation += orientationY + orientationZ;\n      abs[1] = 0;\n      abs[2] = 0;\n    } else {\n      break;\n    }\n  }\n\n  return orientation;\n}\n","/**\n * Inverts an orientation string.\n * @public\n *\n * @param orientationString - The orientation.\n * @returns The inverted orientationString.\n */\nexport default function invertOrientationStringLPS(\n  orientationString: string\n): string {\n  let inverted = orientationString.replace('H', 'f');\n\n  inverted = inverted.replace('F', 'h');\n  inverted = inverted.replace('R', 'l');\n  inverted = inverted.replace('L', 'r');\n  inverted = inverted.replace('A', 'p');\n  inverted = inverted.replace('P', 'a');\n  inverted = inverted.toUpperCase();\n\n  return inverted;\n}\n","/**\n * CINE Tool Events\n */\nenum Events {\n  CLIP_STOPPED = 'CORNERSTONE_CINE_TOOL_STOPPED',\n  CLIP_STARTED = 'CORNERSTONE_CINE_TOOL_STARTED',\n}\n\nexport default Events;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { CINETypes } from '../../types';\n\nconst state: Record<string, CINETypes.ToolData> = {};\n\nfunction addToolState(element: HTMLDivElement, data: CINETypes.ToolData): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  state[viewportId] = data;\n}\n\nfunction getToolState(element: HTMLDivElement): CINETypes.ToolData | undefined {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  return state[viewportId];\n}\n\nexport { addToolState, getToolState };\n","import { glMatrix, vec3 } from 'gl-matrix';\nimport {\n  utilities as csUtils,\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  cache,\n  BaseVolumeViewport,\n  Enums,\n} from '@cornerstonejs/core';\n\nimport { Types } from '@cornerstonejs/core';\nimport CINE_EVENTS from './events';\nimport { addToolState, getToolState } from './state';\nimport { CINETypes } from '../../types';\nimport scroll from '../scroll';\n\nconst { ViewportStatus } = Enums;\nconst { triggerEvent } = csUtils;\n\nconst debounced = true;\nconst loop = true;\nconst dynamicVolumesPlayingMap = new Map();\n\n/**\n * Starts playing a clip or adjusts the frame rate of an already playing clip.  framesPerSecond is\n * optional and defaults to 30 if not specified.  A negative framesPerSecond will play the clip in reverse.\n * The element must be a stack of images\n * @param element - HTML Element\n * @param framesPerSecond - Number of frames per second\n */\nfunction playClip(\n  element: HTMLDivElement,\n  playClipOptions: CINETypes.PlayClipOptions\n): void {\n  let playClipTimeouts;\n  let playClipIsTimeVarying;\n\n  if (element === undefined) {\n    throw new Error('playClip: element must not be undefined');\n  }\n\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    throw new Error(\n      'playClip: element must be a valid Cornerstone enabled element'\n    );\n  }\n\n  // 4D Cine is enabled by default\n  playClipOptions.dynamicCineEnabled =\n    playClipOptions.dynamicCineEnabled ?? true;\n\n  const { viewport } = enabledElement;\n  const volume = _getVolumeFromViewport(viewport);\n  const playClipContext = _createCinePlayContext(viewport, playClipOptions);\n  let playClipData = getToolState(element);\n\n  const isDynamicCinePlaying =\n    playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume();\n\n  // If user is trying to play CINE for a 4D volume it first needs\n  // to stop CINE that has may be playing for any other viewport.\n  if (isDynamicCinePlaying) {\n    _stopDynamicVolumeCine(element);\n  }\n\n  if (!playClipData) {\n    playClipData = {\n      intervalId: undefined,\n      framesPerSecond: 30,\n      lastFrameTimeStamp: undefined,\n      ignoreFrameTimeVector: false,\n      usingFrameTimeVector: false,\n      frameTimeVector: playClipOptions.frameTimeVector ?? undefined,\n      speed: playClipOptions.frameTimeVectorSpeedMultiplier ?? 1,\n      reverse: playClipOptions.reverse ?? false,\n      loop: playClipOptions.loop ?? true,\n    };\n    addToolState(element, playClipData);\n  } else {\n    // Make sure the specified clip is not running before any property update.\n    // If a 3D CINE was playing it passes isDynamicCinePlaying as FALSE to\n    // prevent stopping a 4D CINE in case it is playing on another viewport.\n    _stopClip(element, isDynamicCinePlaying);\n  }\n\n  playClipData.dynamicCineEnabled = playClipOptions.dynamicCineEnabled;\n\n  // If a framesPerSecond is specified and is valid, update the playClipData now\n  if (\n    playClipOptions.framesPerSecond < 0 ||\n    playClipOptions.framesPerSecond > 0\n  ) {\n    playClipData.framesPerSecond = Number(playClipOptions.framesPerSecond);\n    playClipData.reverse = playClipData.framesPerSecond < 0;\n    // If framesPerSecond is given, frameTimeVector will be ignored...\n    playClipData.ignoreFrameTimeVector = true;\n  }\n\n  // Determine if frame time vector should be used instead of a fixed frame rate...\n  if (\n    playClipData.ignoreFrameTimeVector !== true &&\n    playClipData.frameTimeVector &&\n    playClipData.frameTimeVector.length === playClipContext.numScrollSteps &&\n    playClipContext.frameTimeVectorEnabled\n  ) {\n    const { timeouts, isTimeVarying } = _getPlayClipTimeouts(\n      playClipData.frameTimeVector,\n      playClipData.speed\n    );\n\n    playClipTimeouts = timeouts;\n    playClipIsTimeVarying = isTimeVarying;\n  }\n\n  // This function encapsulates the frame rendering logic...\n  const playClipAction = () => {\n    const { numScrollSteps, currentStepIndex } = playClipContext;\n    let newStepIndex = currentStepIndex + (playClipData.reverse ? -1 : 1);\n    const newStepIndexOutOfRange =\n      newStepIndex < 0 || newStepIndex >= numScrollSteps;\n\n    if (!loop && newStepIndexOutOfRange) {\n      // If a 3D CINE was playing it passes isDynamicCinePlaying as FALSE to\n      // prevent stopping a 4D CINE in case it is playing on another viewport.\n      _stopClip(element, isDynamicCinePlaying);\n\n      const eventDetail = { element };\n\n      triggerEvent(element, CINE_EVENTS.CLIP_STOPPED, eventDetail);\n      return;\n    }\n\n    // Loop around if newStepIndex is out of range\n    if (newStepIndex >= numScrollSteps) {\n      newStepIndex = 0;\n    } else if (newStepIndex < 0) {\n      newStepIndex = numScrollSteps - 1;\n    }\n\n    const delta = newStepIndex - currentStepIndex;\n\n    if (delta) {\n      playClipContext.scroll(delta);\n    }\n  };\n\n  if (isDynamicCinePlaying) {\n    dynamicVolumesPlayingMap.set(volume.volumeId, element);\n  }\n\n  // If playClipTimeouts array is available, not empty and its elements are NOT uniform ...\n  // ... (at least one timeout is different from the others), use alternate setTimeout implementation\n  if (\n    playClipTimeouts &&\n    playClipTimeouts.length > 0 &&\n    playClipIsTimeVarying\n  ) {\n    playClipData.usingFrameTimeVector = true;\n    playClipData.intervalId = window.setTimeout(\n      function playClipTimeoutHandler() {\n        playClipData.intervalId = window.setTimeout(\n          playClipTimeoutHandler,\n          playClipTimeouts[playClipContext.currentStepIndex]\n        );\n        playClipAction();\n      },\n      0\n    );\n  } else {\n    // ... otherwise user setInterval implementation which is much more efficient.\n    playClipData.usingFrameTimeVector = false;\n    playClipData.intervalId = window.setInterval(\n      playClipAction,\n      1000 / Math.abs(playClipData.framesPerSecond)\n    );\n  }\n\n  const eventDetail = {\n    element,\n  };\n\n  triggerEvent(element, CINE_EVENTS.CLIP_STARTED, eventDetail);\n}\n\n/**\n * Stops an already playing clip.\n * @param element - HTML Element\n */\nfunction stopClip(element: HTMLDivElement): void {\n  _stopClip(element, true);\n}\n\nfunction _stopClip(element: HTMLDivElement, stopDynamicCine: boolean): void {\n  const enabledElement = getEnabledElement(element);\n  if (!enabledElement) {\n    return;\n  }\n  const { viewport } = enabledElement;\n  const cineToolData = getToolState(viewport.element);\n\n  if (cineToolData) {\n    _stopClipWithData(cineToolData);\n  }\n\n  if (stopDynamicCine && viewport instanceof BaseVolumeViewport) {\n    _stopDynamicVolumeCine(element);\n  }\n}\n\n/**\n * [private] Stops any CINE playing for the dynamic volume loaded on this viewport\n * @param element - HTML Element\n */\nfunction _stopDynamicVolumeCine(element) {\n  const { viewport } = getEnabledElement(element);\n  const volume = _getVolumeFromViewport(viewport);\n\n  // If the current viewport has a 4D volume loaded it may be playing\n  // if it is also loaded on another viewport and user has started CINE\n  // for that one. This guarantees the other viewport will also be stopped.\n  if (volume?.isDynamicVolume()) {\n    const dynamicCineElement = dynamicVolumesPlayingMap.get(volume.volumeId);\n\n    dynamicVolumesPlayingMap.delete(volume.volumeId);\n\n    if (dynamicCineElement && dynamicCineElement !== element) {\n      stopClip(<HTMLDivElement>dynamicCineElement);\n    }\n  }\n}\n\n/**\n * [private] Turns a Frame Time Vector (0018,1065) array into a normalized array of timeouts. Each element\n * ... of the resulting array represents the amount of time each frame will remain on the screen.\n * @param vector - A Frame Time Vector (0018,1065) as specified in section C.7.6.5.1.2 of DICOM standard.\n * @param speed - A speed factor which will be applied to each element of the resulting array.\n * @returns An array with timeouts for each animation frame.\n */\nfunction _getPlayClipTimeouts(vector: number[], speed: number) {\n  let i;\n  let sample;\n  let delay;\n  let sum = 0;\n  const limit = vector.length;\n  const timeouts = [];\n\n  // Initialize time varying to false\n  let isTimeVarying = false;\n\n  if (typeof speed !== 'number' || speed <= 0) {\n    speed = 1;\n  }\n\n  // First element of a frame time vector must be discarded\n  for (i = 1; i < limit; i++) {\n    // eslint-disable-next-line no-bitwise\n    delay = (Number(vector[i]) / speed) | 0; // Integral part only\n    timeouts.push(delay);\n    if (i === 1) {\n      // Use first item as a sample for comparison\n      sample = delay;\n    } else if (delay !== sample) {\n      isTimeVarying = true;\n    }\n\n    sum += delay;\n  }\n\n  if (timeouts.length > 0) {\n    if (isTimeVarying) {\n      // If it's a time varying vector, make the last item an average...\n      // eslint-disable-next-line no-bitwise\n      delay = (sum / timeouts.length) | 0;\n    } else {\n      delay = timeouts[0];\n    }\n\n    timeouts.push(delay);\n  }\n\n  return { timeouts, isTimeVarying };\n}\n\n/**\n * [private] Performs the heavy lifting of stopping an ongoing animation.\n * @param element - HTML Element\n * @param playClipData - The data from playClip that needs to be stopped.\n */\nfunction _stopClipWithData(playClipData) {\n  const id = playClipData.intervalId;\n\n  if (typeof id !== 'undefined') {\n    playClipData.intervalId = undefined;\n    if (playClipData.usingFrameTimeVector) {\n      clearTimeout(id);\n    } else {\n      clearInterval(id);\n    }\n  }\n}\n\nfunction _getVolumesFromViewport(viewport): Types.IImageVolume[] {\n  return viewport\n    .getActors()\n    .map((actor) => cache.getVolume(actor.uid))\n    .filter((volume) => !!volume);\n}\n\nfunction _getVolumeFromViewport(viewport): Types.IImageVolume {\n  const volumes = _getVolumesFromViewport(viewport);\n  const dynamicVolume = volumes.find((volume) => volume.isDynamicVolume());\n\n  return dynamicVolume ?? volumes[0];\n}\n\nfunction _createStackViewportCinePlayContext(\n  viewport: StackViewport,\n  waitForRendered: number\n): CINETypes.CinePlayContext {\n  const imageIds = viewport.getImageIds();\n\n  return {\n    get numScrollSteps(): number {\n      return imageIds.length;\n    },\n    get currentStepIndex(): number {\n      return viewport.getTargetImageIdIndex();\n    },\n    get frameTimeVectorEnabled(): boolean {\n      // It is always in acquired orientation\n      return true;\n    },\n    waitForRenderedCount: 0,\n    scroll(delta: number): void {\n      if (\n        this.waitForRenderedCount <= waitForRendered &&\n        viewport.viewportStatus !== ViewportStatus.RENDERED\n      ) {\n        this.waitForRenderedCount++;\n        return;\n      }\n      this.waitForRenderedCount = 0;\n      scroll(viewport, { delta, debounceLoading: debounced });\n    },\n  };\n}\n\nfunction _createVolumeViewportCinePlayContext(\n  viewport: VolumeViewport,\n  volume: Types.IImageVolume\n): CINETypes.CinePlayContext {\n  const { volumeId } = volume;\n  const cachedScrollInfo = {\n    viewPlaneNormal: vec3.create(),\n    scrollInfo: null,\n  };\n\n  const getScrollInfo = () => {\n    const camera = viewport.getCamera();\n    const updateCache =\n      !cachedScrollInfo.scrollInfo ||\n      !vec3.equals(camera.viewPlaneNormal, cachedScrollInfo.viewPlaneNormal);\n\n    // Number of steps would change only after rotating the volume so it\n    // caches the result and recomputes only when necessary. Until it is\n    // rotated the current frame is updated locally\n    if (updateCache) {\n      const scrollInfo = csUtils.getVolumeViewportScrollInfo(\n        viewport,\n        volumeId\n      );\n\n      cachedScrollInfo.viewPlaneNormal = camera.viewPlaneNormal;\n      cachedScrollInfo.scrollInfo = scrollInfo;\n    }\n\n    return cachedScrollInfo.scrollInfo;\n  };\n\n  return {\n    get numScrollSteps(): number {\n      return getScrollInfo().numScrollSteps;\n    },\n    get currentStepIndex(): number {\n      return getScrollInfo().currentStepIndex;\n    },\n    get frameTimeVectorEnabled(): boolean {\n      const camera = viewport.getCamera();\n      const volumeViewPlaneNormal = volume.direction\n        .slice(6, 9)\n        .map((x) => -x) as Types.Point3;\n      const dot = vec3.dot(volumeViewPlaneNormal, camera.viewPlaneNormal);\n\n      // Check if the volume is in acquired orientation\n      // it may be flipped or rotated in plane\n      return glMatrix.equals(dot, 1);\n    },\n    scroll(delta: number): void {\n      getScrollInfo().currentStepIndex += delta;\n      scroll(viewport, { delta });\n    },\n  };\n}\n\nfunction _createDynamicVolumeViewportCinePlayContext(\n  volume: Types.IDynamicImageVolume\n): CINETypes.CinePlayContext {\n  return {\n    get numScrollSteps(): number {\n      return volume.numTimePoints;\n    },\n    get currentStepIndex(): number {\n      return volume.timePointIndex;\n    },\n    get frameTimeVectorEnabled(): boolean {\n      // Looping throught time does not uses frameTimeVector\n      return false;\n    },\n    scroll(delta: number): void {\n      // Updating this property (setter) makes it move to the desired time point\n      volume.timePointIndex += delta;\n    },\n  };\n}\n\nfunction _createCinePlayContext(\n  viewport,\n  playClipOptions: CINETypes.PlayClipOptions\n): CINETypes.CinePlayContext {\n  if (viewport instanceof StackViewport) {\n    return _createStackViewportCinePlayContext(\n      viewport,\n      playClipOptions.waitForRendered ?? 30\n    );\n  }\n\n  if (viewport instanceof VolumeViewport) {\n    const volume = _getVolumeFromViewport(viewport);\n\n    if (playClipOptions.dynamicCineEnabled && volume?.isDynamicVolume()) {\n      return _createDynamicVolumeViewportCinePlayContext(\n        <Types.IDynamicImageVolume>volume\n      );\n    }\n\n    return _createVolumeViewportCinePlayContext(viewport, volume);\n  }\n\n  throw new Error('Unknown viewport type');\n}\n\nexport { playClip, stopClip };\n","export function basis(t1, v0, v1, v2, v3) {\n  var t2 = t1 * t1, t3 = t2 * t1;\n  return ((1 - 3 * t1 + 3 * t2 - t3) * v0\n      + (4 - 6 * t2 + 3 * t3) * v1\n      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2\n      + t3 * v3) / 6;\n}\n\nexport default function(values) {\n  var n = values.length - 1;\n  return function(t) {\n    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),\n        v1 = values[i],\n        v2 = values[i + 1],\n        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,\n        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;\n    return basis((t - i / n) * n, v0, v1, v2, v3);\n  };\n}\n","export default function(interpolator, n) {\n  var samples = new Array(n);\n  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));\n  return samples;\n}\n","import min from \"./min.js\";\n\nexport default function transpose(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","import transpose from \"./transpose.js\";\n\nexport default function zip() {\n  return transpose(arguments);\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import { Types } from '@cornerstonejs/core';\nimport { interpolatePoints } from './algorithms/bspline';\n\n/**\n * Returns a list of uniform distributed values. This list contains the max amount of values which has at least a minimum distance between two consecutive values.\n * minDistributionDistance means the min distance between two consecutive distributed values.\n * Closed interval contains the min/max values.\n *\n * Formula for reference\n * For given {x ∈ R | x ≥ 0} and {minDis ∈ R | minDis ≥ 0}, ∃ D(x) where D(x) ≥ a and D(x) ≤ b  =>\n *         |\n * D(x)  = |                  (b - a)\n *         |  round( ------------------------ * x  )   + a\n *         |                (b - a + 1)\n *         |        round( -----------  )\n *         |                 minDis\n */\nfunction getContinuousUniformDistributionValues(\n  minDistributionDistance: number,\n  closedInterval: [number, number]\n): number[] {\n  const result = [];\n  const [intervalIni, intervalEnd] = closedInterval;\n\n  const intervalSize = intervalEnd - intervalIni + 1;\n  const intensity = Math.floor(intervalSize / minDistributionDistance);\n\n  let x = 0;\n  let continuosDistributionValue =\n    Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n\n  while (continuosDistributionValue <= intervalEnd) {\n    result.push(continuosDistributionValue);\n    x++;\n    continuosDistributionValue =\n      Math.round(((intervalSize - 1) / (intensity - 1)) * x) + intervalIni;\n  }\n\n  return result;\n}\n\n/**\n * Interpolates a segment of points from iniIndex until endIndex.\n * The process of interpolation considers the param knotsRatioPercentage as being the percentage of points from Segment that are likely to be considered.\n * By default it uses b-spline algorithm.\n * The result total of points is equal to original points.\n */\nexport default function interpolateSegmentPoints(\n  points: (Types.Point2 | Types.Point3)[],\n  iniIndex: number,\n  endIndex: number,\n  knotsRatioPercentage: number\n): (Types.Point2 | Types.Point3)[] {\n  const segmentSize = endIndex - iniIndex + 1;\n\n  const amountOfKnots =\n    Math.floor((knotsRatioPercentage / 100) * segmentSize) ?? 1;\n  const minKnotDistance = Math.floor(segmentSize / amountOfKnots) ?? 1;\n\n  if (isNaN(segmentSize) || !segmentSize || !minKnotDistance) {\n    return points;\n  }\n\n  // segment should be at least the double of desired minKnot distance. This will ensure at there will enough knots to interpolate.\n  if (segmentSize / minKnotDistance < 2) {\n    return points;\n  }\n\n  const interpolationIniIndex = Math.max(0, iniIndex);\n  const interpolationEndIndex = Math.min(points.length - 1, endIndex);\n  const segmentPointsUnchangedBeg = points.slice(0, interpolationIniIndex);\n\n  const segmentPointsUnchangedEnd = points.slice(\n    interpolationEndIndex + 1,\n    points.length\n  );\n\n  const knotsIndexes = getContinuousUniformDistributionValues(minKnotDistance, [\n    interpolationIniIndex,\n    interpolationEndIndex,\n  ]);\n\n  const interpolatedPoints = interpolatePoints(points, knotsIndexes);\n\n  return [\n    ...segmentPointsUnchangedBeg,\n    ...interpolatedPoints,\n    ...segmentPointsUnchangedEnd,\n  ];\n}\n","import {\n  interpolateBasis as d3InterpolateBasis,\n  quantize as d3Quantize,\n} from 'd3-interpolate';\nimport { zip as d3Zip } from 'd3-array';\nimport { Types } from '@cornerstonejs/core';\n\nfunction isPoints3D(\n  points: (Types.Point2 | Types.Point3)[]\n): points is Types.Point3[] {\n  return (points as Types.Point3[])[0]?.length === 3;\n}\n\n/**\n * Returns an array of the originalPoints length containing the interpolated data.\n * It interpolates a set of points indexed by knotsIndexes.\n * That is, it DISCARDS all points except those in knotsIndexes. Then, a new set of points is created by using a b-spline on the remaining points, in order to re-create a new set of points.\n */\nexport function interpolatePoints(\n  originalPoints: (Types.Point2 | Types.Point3)[],\n  knotsIndexes: number[]\n): (Types.Point2 | Types.Point3)[] {\n  if (\n    !knotsIndexes ||\n    knotsIndexes.length === 0 ||\n    knotsIndexes.length === originalPoints.length\n  ) {\n    return originalPoints;\n  }\n\n  const n = knotsIndexes[knotsIndexes.length - 1] - knotsIndexes[0] + 1;\n  const xInterpolator = d3InterpolateBasis(\n    knotsIndexes.map((k) => originalPoints[k][0])\n  );\n  const yInterpolator = d3InterpolateBasis(\n    knotsIndexes.map((k) => originalPoints[k][1])\n  );\n\n  if (isPoints3D(originalPoints)) {\n    const zInterpolator = d3InterpolateBasis(\n      knotsIndexes.map((k) => originalPoints[k][2])\n    );\n    return <Types.Point3[]>(\n      d3Zip(\n        d3Quantize(xInterpolator, n),\n        d3Quantize(yInterpolator, n),\n        d3Quantize(zInterpolator, n)\n      )\n    );\n  } else {\n    return <Types.Point2[]>(\n      d3Zip(d3Quantize(xInterpolator, n), d3Quantize(yInterpolator, n))\n    );\n  }\n}\n","import { Types } from '@cornerstonejs/core';\nimport { point } from '../math';\nimport interpolateSegmentPoints from './interpolation/interpolateSegmentPoints';\n\nexport function shouldInterpolate(configuration: Record<any, any>): boolean {\n  return (\n    configuration?.interpolation?.interpolateOnAdd === true ||\n    configuration?.interpolation?.interpolateOnEdit === true\n  );\n}\n\n/**\n * Tells whether two points are equal by proximity or not as far as interpolation goes.\n */\nfunction isEqualByProximity(pointA, pointB) {\n  return point.distanceToPoint(pointA, pointB) < 0.001;\n}\n\n/**\n * Tells whether two points are strictly equal or not as far as interpolation goes.\n */\nfunction isEqual(pointA, pointB) {\n  return point.distanceToPoint(pointA, pointB) === 0;\n}\n\n/**\n * Finds the indexes of points list and otherPoints list that points are identical.\n */\nfunction findMatchIndexes(\n  points: Types.Point2[],\n  otherPoints: Types.Point2[]\n): [number, number] | undefined {\n  for (let i = 0; i < points.length; i++) {\n    for (let j = 0; j < otherPoints.length; j++) {\n      if (isEqual(points[i], otherPoints[j])) {\n        return [i, j];\n      }\n    }\n  }\n}\n/**\n * Returns the following index value (on circular basis) of index param on the given direction.\n */\nfunction followingIndex(\n  index: number,\n  size: number,\n  direction: number\n): number {\n  return (index + size + direction) % size;\n}\n/**\n * Array of params to be used on circular find next index.\n * The values respresent start index, indexDelimiter, list of points\n */\ntype ListParamsType = [number, number, Types.Point2[]];\n\n/**\n * Circular finding that returns the next index for two list where the criteria is met.\n *\n * It can compare two lists out of sync considering it does a circular iteration over them.\n *\n * @example\n *\n * ```\n * const pointsA = [[0, 1], [1, 3], [1, 5], [1,2]];\n * const pointsB = [[1, 2], [1, 5], [1, 3], [0,0]];\n * let firstParam = [0, 0, pointsA]\n * let secondParam = [1, 1, pointsB]\n * const criteria = (pointA, pointB) => areSamePosition(pointA, pointB)\n * const direction = 1;\n * let result = circularFindNextIndexBy(firstParam, secondParam, criteria,direction);\n * console.log(result);\n * // prints [1, 2]\n * // use this result and find again\n * firstParam = [result[0]+1, result[0], pointsA]\n * secondParam = [result[1]+1, result[1], pointsB]\n * result = circularFindNextIndexBy(firstParam, secondParam, criteria,direction);\n * * // prints [3, 0]\n *\n */\nfunction circularFindNextIndexBy(\n  listParams: ListParamsType,\n  otherListParams: ListParamsType,\n  criteria: (pointA: Types.Point2, pointB: Types.Point2) => boolean,\n  direction: number\n): [number | undefined, number | undefined] {\n  const [, indexDelimiter, points] = listParams;\n  const [, otherIndexDelimiter, otherPoints] = otherListParams;\n\n  const pointsLength = points.length;\n  const otherPointsLength = otherPoints.length;\n\n  let startIndex = listParams[0];\n  let otherStartIndex = otherListParams[0];\n\n  if (\n    !points[startIndex] ||\n    !otherPoints[otherStartIndex] ||\n    !points[indexDelimiter] ||\n    !otherPoints[otherIndexDelimiter]\n  ) {\n    return [undefined, undefined];\n  }\n\n  while (\n    startIndex !== indexDelimiter &&\n    otherStartIndex !== otherIndexDelimiter\n  ) {\n    if (criteria(otherPoints[otherStartIndex], points[startIndex])) {\n      return [startIndex, otherStartIndex];\n    }\n\n    startIndex = followingIndex(startIndex, pointsLength, direction);\n    otherStartIndex = followingIndex(\n      otherStartIndex,\n      otherPointsLength,\n      direction\n    );\n  }\n\n  return [undefined, undefined];\n}\n\n/**\n * Given two list it will find the first and last index of segment from points that diverges from previousPoints\n */\nfunction findChangedSegment(\n  points: Types.Point2[],\n  previousPoints: Types.Point2[]\n): [number, number] {\n  const [firstMatchIndex, previousFirstMatchIndex] =\n    findMatchIndexes(points, previousPoints) || [];\n\n  const toBeNotEqualCriteria = (pointA, pointB) =>\n    isEqualByProximity(pointA, pointB) === false;\n\n  const [lowDiffIndex, lowOtherDiffIndex] = circularFindNextIndexBy(\n    [\n      followingIndex(firstMatchIndex, points.length, 1),\n      firstMatchIndex,\n      points,\n    ],\n    [\n      followingIndex(previousFirstMatchIndex, previousPoints.length, 1),\n      previousFirstMatchIndex,\n      previousPoints,\n    ],\n    toBeNotEqualCriteria,\n    1\n  );\n\n  const [highIndex] = circularFindNextIndexBy(\n    [followingIndex(lowDiffIndex, points.length, -1), lowDiffIndex, points],\n    [\n      followingIndex(lowOtherDiffIndex, previousPoints.length, -1),\n      lowOtherDiffIndex,\n      previousPoints,\n    ],\n    toBeNotEqualCriteria,\n    -1\n  );\n\n  return [lowDiffIndex, highIndex];\n}\n\n/**\n * Interpolates the given list of points. In case there is a pointsOfReference the interpolation will occur only on segment disjoint of two list. I.e list of points from param points that are not on list of points from param pointsOfReference.\n */\nexport function getInterpolatedPoints(\n  configuration: Record<any, any>,\n  points: Types.Point2[],\n  pointsOfReference?: Types.Point2[]\n): Types.Point2[] {\n  const { interpolation } = configuration;\n\n  const result = points;\n\n  if (interpolation) {\n    const {\n      knotsRatioPercentageOnAdd,\n      knotsRatioPercentageOnEdit,\n      interpolateOnAdd = false,\n      interpolateOnEdit = false,\n    } = interpolation;\n\n    const knotsRatioPercentage = pointsOfReference\n      ? knotsRatioPercentageOnEdit\n      : knotsRatioPercentageOnAdd;\n    const isEnabled = pointsOfReference ? interpolateOnEdit : interpolateOnAdd;\n\n    if (isEnabled) {\n      // partial or total interpolation\n      const [changedIniIndex, changedEndIndex] = pointsOfReference\n        ? findChangedSegment(points, pointsOfReference)\n        : [0, points.length - 1];\n\n      // do not interpolate if there is no valid segment\n      if (!points[changedIniIndex] || !points[changedEndIndex]) {\n        return points;\n      }\n\n      return <Types.Point2[]>(\n        interpolateSegmentPoints(\n          points,\n          changedIniIndex,\n          changedEndIndex,\n          knotsRatioPercentage\n        )\n      );\n    }\n  }\n\n  return result;\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport { vec2 } from 'gl-matrix';\n\n/**\n * Finds the length of the longest line from the midpoint of the line\n * that joins the start and end of the open contour, to the surface of the\n * open contour.\n */\nexport default function findOpenUShapedContourVectorToPeak(\n  canvasPoints: Types.Point2[],\n  viewport: Types.IStackViewport | Types.IVolumeViewport\n): Types.Point3[] {\n  // Find chord from first to last point.\n  const first = canvasPoints[0];\n  const last = canvasPoints[canvasPoints.length - 1];\n\n  const firstToLastUnitVector = vec2.create();\n\n  vec2.set(firstToLastUnitVector, last[0] - first[0], last[1] - first[1]);\n  vec2.normalize(firstToLastUnitVector, firstToLastUnitVector);\n\n  // Get the two possible normal vector to this vector\n  // Note: Use the identity that the perpendicular line must have a gradient of\n  // 1 / gradient of the line.\n\n  const normalVector1 = vec2.create();\n  const normalVector2 = vec2.create();\n\n  vec2.set(normalVector1, -firstToLastUnitVector[1], firstToLastUnitVector[0]);\n  vec2.set(normalVector2, firstToLastUnitVector[1], -firstToLastUnitVector[0]);\n\n  // Find the center of the chord.\n  const centerOfFirstToLast: Types.Point2 = [\n    (first[0] + last[0]) / 2,\n    (first[1] + last[1]) / 2,\n  ];\n\n  // Get furthest point.\n\n  const furthest = {\n    dist: 0,\n    index: null,\n  };\n\n  for (let i = 0; i < canvasPoints.length; i++) {\n    const canvasPoint = canvasPoints[i];\n\n    const distance = vec2.dist(canvasPoint, <vec2>centerOfFirstToLast);\n\n    if (distance > furthest.dist) {\n      furthest.dist = distance;\n      furthest.index = i;\n    }\n  }\n\n  const toFurthest: [Types.Point2, Types.Point2] = [\n    canvasPoints[furthest.index],\n    centerOfFirstToLast,\n  ];\n  const toFurthestWorld = toFurthest.map(viewport.canvasToWorld);\n\n  return toFurthestWorld;\n}\n\nexport function findOpenUShapedContourVectorToPeakOnRender(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): Types.Point3[] {\n  const { viewport } = enabledElement;\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  return findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n}\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport { Events } from '../../../enums';\nimport { EventTypes } from '../../../types';\nimport { state } from '../../../store';\nimport { vec3 } from 'gl-matrix';\nimport {\n  shouldInterpolate,\n  getInterpolatedPoints,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport findOpenUShapedContourVectorToPeak from './findOpenUShapedContourVectorToPeak';\nimport { polyline } from '../../../utilities/math';\nimport { removeAnnotation } from '../../../stateManagement/annotation/annotationState';\n\nconst {\n  addCanvasPointsToArray,\n  pointsAreWithinCloseContourProximity,\n  getFirstIntersectionWithPolyline,\n  getSubPixelSpacingAndXYDirections,\n} = polyline;\n\n/**\n * Activates the contour drawing event loop.\n */\nfunction activateDraw(\n  evt: EventTypes.InteractionEventType,\n  annotation: PlanarFreehandROIAnnotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isDrawing = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.drawData = {\n    canvasPoints: [canvasPos],\n    polylineIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.addEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  hideElementCursor(element);\n}\n/**\n * Dectivates and cleans up the contour drawing event loop.\n */\nfunction deactivateDraw(element: HTMLDivElement): void {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.removeEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.removeEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.removeEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to a set of preview canvas points of the contour being created.\n * Checks if crossing of lines means early completion and editing needs to be started.\n */\nfunction mouseDragDrawCallback(evt: EventTypes.InteractionEventType): void {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const {\n    annotation,\n    viewportIdsToRender,\n    xDir,\n    yDir,\n    spacing,\n    movingTextBox,\n  } = this.commonData;\n  const { polylineIndex, canvasPoints } = this.drawData;\n\n  const lastCanvasPoint = canvasPoints[canvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Check that we have moved at least one voxel in each direction.\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (movingTextBox) {\n    this.isDrawing = false;\n\n    // Drag mode - Move the text boxes world position\n    const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n    const worldPosDelta = deltaPoints.world;\n\n    const { textBox } = annotation.data.handles;\n    const { worldPosition } = textBox;\n\n    worldPosition[0] += worldPosDelta[0];\n    worldPosition[1] += worldPosDelta[1];\n    worldPosition[2] += worldPosDelta[2];\n\n    textBox.hasMoved = true;\n  } else {\n    const crossingIndex = this.findCrossingIndexDuringCreate(evt);\n\n    if (crossingIndex !== undefined) {\n      // If we have crossed our drawing line, create a closed contour and then\n      // start an edit.\n      this.applyCreateOnCross(evt, crossingIndex);\n    } else {\n      const numPointsAdded = addCanvasPointsToArray(\n        element,\n        canvasPoints,\n        canvasPos,\n        this.commonData\n      );\n\n      this.drawData.polylineIndex = polylineIndex + numPointsAdded;\n    }\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Completes the contour on mouse up. If the `allowOpenContours` configuration\n * option is `true`, checks if we should create an open or closed contour.\n * If the `allowOpenContours` configuration option is `false`, always creates a\n * closed contour.\n */\nfunction mouseUpDrawCallback(evt: EventTypes.InteractionEventType): void {\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n  const firstPoint = canvasPoints[0];\n  const lastPoint = canvasPoints[canvasPoints.length - 1];\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  if (\n    allowOpenContours &&\n    !pointsAreWithinCloseContourProximity(\n      firstPoint,\n      lastPoint,\n      this.configuration.closeContourProximity\n    )\n  ) {\n    this.completeDrawOpenContour(element);\n  } else {\n    this.completeDrawClosedContour(element);\n  }\n}\n\n/**\n * Completes the contour being drawn, creating a closed contour annotation. It will return true if contour is completed or false in case contour drawing is halted.\n */\nfunction completeDrawClosedContour(element: HTMLDivElement): boolean {\n  this.removeCrossedLinesOnCompleteDraw();\n  const { canvasPoints } = this.drawData;\n\n  // check and halt if necessary the drawing process, last chance to complete drawing and fire events.\n  if (this.haltDrawing(element, canvasPoints)) {\n    return false;\n  }\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  // Convert annotation to world coordinates\n  addCanvasPointsToArray(\n    element,\n    canvasPoints,\n    canvasPoints[0],\n    this.commonData\n  );\n  // Remove last point which will be a duplicate now.\n  canvasPoints.pop();\n\n  const updatedPoints = shouldInterpolate(this.configuration)\n    ? getInterpolatedPoints(this.configuration, canvasPoints)\n    : canvasPoints;\n\n  // Note: -> This is pretty expensive and may not scale well with hundreds of\n  // contours. A future optimisation if we use this for segmentation is to re-do\n  // this rendering with the GPU rather than SVG.\n  const worldPoints = updatedPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = false;\n  const { textBox } = annotation.data.handles;\n\n  if (!textBox.hasMoved) {\n    this.triggerAnnotationCompleted(annotation);\n  }\n\n  this.isDrawing = false;\n  this.drawData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateDraw(element);\n\n  return true;\n}\n\n/**\n * If lines are crossed during the draw loop, remove the points drawn over the\n * crossing.\n */\nfunction removeCrossedLinesOnCompleteDraw(): void {\n  const { canvasPoints } = this.drawData;\n  const numPoints = canvasPoints.length;\n\n  const endToStart = [canvasPoints[0], canvasPoints[numPoints - 1]];\n  const canvasPointsMinusEnds = canvasPoints.slice(0, -1).slice(1);\n\n  const lineSegment = getFirstIntersectionWithPolyline(\n    canvasPointsMinusEnds,\n    endToStart[0],\n    endToStart[1],\n    false\n  );\n\n  if (lineSegment) {\n    const indexToRemoveUpTo = lineSegment[1];\n\n    this.drawData.canvasPoints = canvasPoints.splice(0, indexToRemoveUpTo);\n  }\n}\n\n/**\n * Completes the contour being drawn, creating an open contour annotation. It will return true if contour is completed or false in case contour drawing is halted.\n */\nfunction completeDrawOpenContour(element: HTMLDivElement): boolean {\n  const { canvasPoints } = this.drawData;\n\n  // check and halt if necessary the drawing process, last chance to complete drawing and fire events.\n  if (this.haltDrawing(element, canvasPoints)) {\n    return false;\n  }\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const updatedPoints = shouldInterpolate(this.configuration)\n    ? getInterpolatedPoints(this.configuration, canvasPoints)\n    : canvasPoints;\n\n  // Note: -> This is pretty expensive and may not scale well with hundreds of\n  // contours. A future optimisation if we use this for segmentation is to re-do\n  // this rendering with the GPU rather than SVG.\n  const worldPoints = updatedPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  const { textBox } = annotation.data.handles;\n\n  // Add the first and last points to the list of handles. These means they\n  // will render handles on mouse hover.\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n\n  // If the annotation is an open U-shaped annotation, find the annotation vector.\n  if (annotation.data.isOpenUShapeContour) {\n    annotation.data.openUShapeContourVectorToPeak =\n      findOpenUShapedContourVectorToPeak(canvasPoints, viewport);\n  }\n\n  if (!textBox.hasMoved) {\n    this.triggerAnnotationCompleted(annotation);\n  }\n\n  this.isDrawing = false;\n  this.drawData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateDraw(element);\n\n  return true;\n}\n\n/**\n * Searches for a crossing of the contour during create. If found, returns the\n * index of the point just before the lines cross.\n */\nfunction findCrossingIndexDuringCreate(\n  evt: EventTypes.InteractionEventType\n): number | undefined {\n  // Note as we super sample the added points, we need to check the whole last mouse move, not the points\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n\n  const { canvasPoints } = this.drawData;\n  const pointsLessLastOne = canvasPoints.slice(0, -1);\n\n  const lineSegment = getFirstIntersectionWithPolyline(\n    pointsLessLastOne,\n    canvasPos,\n    lastCanvasPoint,\n    false\n  );\n\n  if (lineSegment === undefined) {\n    return;\n  }\n\n  const crossingIndex = lineSegment[0];\n\n  return crossingIndex;\n}\n\n/**\n * On crossing of the draw line, create a closed contour, and then start an edit\n * since this occurs during a mouse drag.\n */\nfunction applyCreateOnCross(\n  evt: EventTypes.InteractionEventType,\n  crossingIndex: number\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const { canvasPoints } = this.drawData;\n  const { annotation, viewportIdsToRender } = this.commonData;\n\n  // Add points between the end point and crossing point\n  addCanvasPointsToArray(\n    element,\n    canvasPoints,\n    canvasPoints[crossingIndex],\n    this.commonData\n  );\n  // Remove last point which will be a duplicate now.\n  canvasPoints.pop();\n\n  // Remove points up to just before the crossing index\n  for (let i = 0; i < crossingIndex; i++) {\n    canvasPoints.shift();\n  }\n\n  if (this.completeDrawClosedContour(element)) {\n    // pos complete operation\n    this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n  }\n}\n\n/**\n * Completes the contour on a cancel method call during the draw loop.\n */\nfunction cancelDrawing(element: HTMLElement) {\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n  const firstPoint = canvasPoints[0];\n  const lastPoint = canvasPoints[canvasPoints.length - 1];\n\n  if (\n    allowOpenContours &&\n    !pointsAreWithinCloseContourProximity(\n      firstPoint,\n      lastPoint,\n      this.configuration.closeContourProximity\n    )\n  ) {\n    this.completeDrawOpenContour(element);\n  } else {\n    this.completeDrawClosedContour(element);\n  }\n}\n\n/**\n * Tell whether a drawing should be halted or not. It will be true when canvas points is less than the minimum required.\n */\nfunction shouldHaltDrawing(\n  canvasPoints: any,\n  subPixelResolution: number\n): boolean {\n  const minPoints = Math.max(\n    /**\n     * The number of points to span 3 voxels in length, this is a realistically\n     * smallest open contour one could reasonably define (2 voxels should probably be a line).\n     */\n    subPixelResolution * 3,\n    /**\n     * Minimum 3 points, there are other annotations for one point (probe)\n     * or 2 points (line), so this comes only from a mistake in practice.\n     */\n    3\n  );\n  return canvasPoints.length < minPoints;\n}\n\n/**\n * Check and halt a drawing for a given event. It returns true in case drawing is halted, otherswise false.\n */\nfunction haltDrawing(element: HTMLDivElement, canvasPoints: any): boolean {\n  const { subPixelResolution } = this.configuration;\n\n  if (shouldHaltDrawing(canvasPoints, subPixelResolution)) {\n    // Remove annotation instead of completing it.\n    const { annotation, viewportIdsToRender } = this.commonData;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    removeAnnotation(annotation.annotationUID);\n\n    this.isDrawing = false;\n    this.drawData = undefined;\n    this.commonData = undefined;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.deactivateDraw(element);\n\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Registers the contour drawing loop to the tool instance.\n */\nfunction registerDrawLoop(toolInstance): void {\n  toolInstance.activateDraw = activateDraw.bind(toolInstance);\n  toolInstance.deactivateDraw = deactivateDraw.bind(toolInstance);\n\n  toolInstance.applyCreateOnCross = applyCreateOnCross.bind(toolInstance);\n  toolInstance.findCrossingIndexDuringCreate =\n    findCrossingIndexDuringCreate.bind(toolInstance);\n  toolInstance.completeDrawOpenContour =\n    completeDrawOpenContour.bind(toolInstance);\n  toolInstance.removeCrossedLinesOnCompleteDraw =\n    removeCrossedLinesOnCompleteDraw.bind(toolInstance);\n  toolInstance.mouseDragDrawCallback = mouseDragDrawCallback.bind(toolInstance);\n  toolInstance.mouseUpDrawCallback = mouseUpDrawCallback.bind(toolInstance);\n  toolInstance.completeDrawClosedContour =\n    completeDrawClosedContour.bind(toolInstance);\n  toolInstance.cancelDrawing = cancelDrawing.bind(toolInstance);\n  toolInstance.haltDrawing = haltDrawing.bind(toolInstance);\n}\n\nexport default registerDrawLoop;\n","import { Types } from '@cornerstonejs/core';\nimport { vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nimport { EventTypes } from '../../../types';\n\nconst { addCanvasPointsToArray, getFirstIntersectionWithPolyline } = polyline;\n\n/**\n * Check if the `editCanvasPoints` have crossed the `prevCanvasPoints` during\n * an edit.\n *\n * @privateRemarks The following tricks are required to make the UX smooth and\n * the editing not very picky on exactly where you click:\n * - If we don't cross after 2 points, but projecting the line backwards the\n * proximity distance means we cross, extend the line back.\n * - If we travel the full proximity in canvas points but don't cross a line, we\n * are likely drawing along the line, which is intuitive to the user. At this point\n * snap the start of the edit to the closest place on the `prevCanvasPoints`,\n * so that the edit can be executed in-line.\n */\nfunction checkForFirstCrossing(\n  evt: EventTypes.InteractionEventType,\n  isClosedContour: boolean\n): void {\n  const eventDetail = evt.detail;\n  const { element, currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const { editCanvasPoints, prevCanvasPoints } = this.editData;\n\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    prevCanvasPoints,\n    canvasPos,\n    lastCanvasPoint,\n    isClosedContour\n  );\n\n  if (crossedLineSegment) {\n    this.editData.startCrossingIndex = crossedLineSegment[0];\n\n    // On the first crossing, remove the first lines prior to the crossing\n    this.removePointsUpUntilFirstCrossing(isClosedContour);\n    // prevent continue if there are not the minimum of points for this op.\n  } else if (prevCanvasPoints.length >= 2) {\n    if (\n      editCanvasPoints.length >\n      this.configuration.checkCanvasEditFallbackProximity\n    ) {\n      // At this point, likely we are drawing along the line, we are past the proximity for grabbing.\n      // Search for nearest line segment to the start of the edit.\n      // Set the crossing index to the lower index of the segment.\n\n      const firstEditCanvasPoint = editCanvasPoints[0];\n\n      const distanceIndexPairs = [];\n\n      for (let i = 0; i < prevCanvasPoints.length; i++) {\n        const prevCanvasPoint = prevCanvasPoints[i];\n        const distance = vec2.distance(prevCanvasPoint, firstEditCanvasPoint);\n\n        distanceIndexPairs.push({ distance, index: i });\n      }\n\n      distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n\n      const twoClosestDistanceIndexPairs = [\n        distanceIndexPairs[0],\n        distanceIndexPairs[1],\n      ];\n\n      const lowestIndex = Math.min(\n        twoClosestDistanceIndexPairs[0].index,\n        twoClosestDistanceIndexPairs[1].index\n      );\n\n      this.editData.startCrossingIndex = lowestIndex;\n    } else {\n      // Check if extending a line back 6 (Proximity) canvas pixels would cross a line.\n\n      // Extend point back 6 canvas pixels from first point.\n      const dir = vec2.create();\n\n      vec2.subtract(dir, editCanvasPoints[1], editCanvasPoints[0]);\n      vec2.normalize(dir, dir);\n\n      const proximity = 6;\n\n      const extendedPoint: Types.Point2 = [\n        editCanvasPoints[0][0] - dir[0] * proximity,\n        editCanvasPoints[0][1] - dir[1] * proximity,\n      ];\n\n      const crossedLineSegmentFromExtendedPoint =\n        getFirstIntersectionWithPolyline(\n          prevCanvasPoints,\n          extendedPoint,\n          editCanvasPoints[0],\n          isClosedContour\n        );\n\n      if (crossedLineSegmentFromExtendedPoint) {\n        // Add points.\n        const pointsToPrepend = [extendedPoint];\n\n        addCanvasPointsToArray(\n          element,\n          pointsToPrepend,\n          editCanvasPoints[0],\n          this.commonData\n        );\n\n        editCanvasPoints.unshift(...pointsToPrepend);\n\n        this.removePointsUpUntilFirstCrossing(isClosedContour);\n\n        this.editData.editIndex = editCanvasPoints.length - 1;\n        this.editData.startCrossingIndex =\n          crossedLineSegmentFromExtendedPoint[0];\n      }\n    }\n  }\n}\n\n/**\n * Removes the points from the `editCanvasPoints` up until the first crossing of\n * the `prevCanvasPoints`. This is so we can just insert this line segment\n * into the contour.\n */\nfunction removePointsUpUntilFirstCrossing(isClosedContour: boolean): void {\n  const { editCanvasPoints, prevCanvasPoints } = this.editData;\n  let numPointsToRemove = 0;\n\n  for (let i = 0; i < editCanvasPoints.length - 1; i++) {\n    const firstLine = [editCanvasPoints[i], editCanvasPoints[i + 1]];\n\n    const didCrossLine = !!getFirstIntersectionWithPolyline(\n      prevCanvasPoints,\n      firstLine[0],\n      firstLine[1],\n      isClosedContour\n    );\n\n    // Remove last element\n    numPointsToRemove++;\n\n    if (didCrossLine) {\n      break;\n    }\n  }\n\n  // Remove the points\n  editCanvasPoints.splice(0, numPointsToRemove);\n\n  this.editData.editIndex = editCanvasPoints.length - 1;\n}\n\n/**\n * Returns `true` if the `editCanvasPoints` crosses the `prevCanvasPoints` a\n * second time.\n */\nfunction checkForSecondCrossing(\n  evt: EventTypes.InteractionEventType,\n  isClosedContour: boolean\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n  const { prevCanvasPoints } = this.editData;\n\n  // Note this method is looking for the first corssing found of\n  // *the lines given* to it. The parameters given to it are specified to search\n  // for the second crossing of the prevCanvasPoints, by checking if the last\n  // mouse drag crossed these. This class method is only called if the edit loop\n  // has already has a crossing earlier in the edit.\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    prevCanvasPoints,\n    canvasPos,\n    lastCanvasPoint,\n    isClosedContour\n  );\n\n  if (!crossedLineSegment) {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Removes the points from the `editCanvasPoints` after the second crossing of\n * the `prevCanvasPoints`. This is so we can just insert this line segment\n * into the contour.\n */\nfunction removePointsAfterSecondCrossing(isClosedContour: boolean): void {\n  const { prevCanvasPoints, editCanvasPoints } = this.editData;\n\n  // Remove points after the crossing\n  for (let i = editCanvasPoints.length - 1; i > 0; i--) {\n    const lastLine = [editCanvasPoints[i], editCanvasPoints[i - 1]];\n\n    const didCrossLine = !!getFirstIntersectionWithPolyline(\n      prevCanvasPoints,\n      lastLine[0],\n      lastLine[1],\n      isClosedContour\n    );\n\n    // Remove last element\n    editCanvasPoints.pop();\n\n    if (didCrossLine) {\n      break;\n    }\n  }\n}\n\n/**\n * During an edit, finds the index on the `prevCanvasPoints` that the\n * `editCanvasPoints` should snap to to create one continuous contour.\n *\n * Returns the index, but returns -1 if there is no index on the\n * `prevCanvasPoints` that can be snapped to with causing a crossing of the\n * `editCanvasPoints`.\n */\nfunction findSnapIndex(): number {\n  const { editCanvasPoints, prevCanvasPoints, startCrossingIndex } =\n    this.editData;\n\n  if (\n    startCrossingIndex === undefined // Haven't crossed line yet\n  ) {\n    return;\n  }\n\n  const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n\n  const distanceIndexPairs = [];\n\n  for (let i = 0; i < prevCanvasPoints.length; i++) {\n    const prevCanvasPoint = prevCanvasPoints[i];\n    const distance = vec2.distance(prevCanvasPoint, lastEditCanvasPoint);\n\n    distanceIndexPairs.push({ distance, index: i });\n  }\n\n  distanceIndexPairs.sort((a, b) => a.distance - b.distance);\n\n  // Search through from shortest distance and check which snap line doesn't\n  // Cross the edit line, in most cases the snap index will just be the first one.\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -1);\n\n  for (let i = 0; i < distanceIndexPairs.length; i++) {\n    const { index } = distanceIndexPairs[i];\n    const snapCanvasPosition = prevCanvasPoints[index];\n    const lastEditCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n\n    const crossedLineSegment = getFirstIntersectionWithPolyline(\n      editCanvasPointsLessLastOne,\n      snapCanvasPosition,\n      lastEditCanvasPoint,\n      false // The edit line is not a closed contour\n    );\n\n    if (!crossedLineSegment) {\n      return index;\n    }\n  }\n\n  // If all of the lines caused a crossing, this means we should start a new edit.\n  // Use -1 to signify this.\n  return -1;\n}\n\n/**\n * Checks if the `editCanvasPoints` cross themselves. If they do, remove the\n * region after the cross index, these removes isolated \"island\" loops that the\n * user can draw which make closed contours no longer simple polygons, or open\n * contours twisted.\n */\nfunction checkAndRemoveCrossesOnEditLine(\n  evt: EventTypes.InteractionEventType\n): number | undefined {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPoint = lastPoints.canvas;\n\n  const { editCanvasPoints } = this.editData;\n\n  const editCanvasPointsLessLastOne = editCanvasPoints.slice(0, -2);\n\n  const crossedLineSegment = getFirstIntersectionWithPolyline(\n    editCanvasPointsLessLastOne,\n    canvasPos,\n    lastCanvasPoint,\n    false\n  );\n\n  if (!crossedLineSegment) {\n    return;\n  }\n\n  // We have found a crossing, remove points after the crossing, cutting off\n  // the \"island\" loop drawn.\n\n  const editIndexCrossed = crossedLineSegment[0];\n  const numPointsToRemove = editCanvasPoints.length - editIndexCrossed;\n\n  for (let i = 0; i < numPointsToRemove; i++) {\n    editCanvasPoints.pop();\n  }\n}\n\n/**\n * Registers the contour drawing loop to the tool instance.\n */\nfunction registerEditLoopCommon(toolInstance) {\n  toolInstance.checkForFirstCrossing = checkForFirstCrossing.bind(toolInstance);\n  toolInstance.removePointsUpUntilFirstCrossing =\n    removePointsUpUntilFirstCrossing.bind(toolInstance);\n  toolInstance.checkForSecondCrossing =\n    checkForSecondCrossing.bind(toolInstance);\n  toolInstance.findSnapIndex = findSnapIndex.bind(toolInstance);\n  toolInstance.removePointsAfterSecondCrossing =\n    removePointsAfterSecondCrossing.bind(toolInstance);\n  toolInstance.checkAndRemoveCrossesOnEditLine =\n    checkAndRemoveCrossesOnEditLine.bind(toolInstance);\n}\n\nexport default registerEditLoopCommon;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport { EventTypes } from '../../../types';\nimport { polyline } from '../../../utilities/math';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport {\n  getInterpolatedPoints,\n  shouldInterpolate,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\n\nconst {\n  getSubPixelSpacingAndXYDirections,\n  addCanvasPointsToArray,\n  calculateAreaOfPoints,\n} = polyline;\n\n/**\n * Activates the closed contour edit event loop.\n */\nfunction activateClosedContourEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: PlanarFreehandROIAnnotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isEditingClosed = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.editData = {\n    prevCanvasPoints,\n    editCanvasPoints: [canvasPos],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  element.addEventListener(\n    Events.TOUCH_END,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  hideElementCursor(element);\n}\n\n/**\n * Dectivates and cleans up the closed contour edit event loop.\n */\nfunction deactivateClosedContourEdit(element: HTMLDivElement): void {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  element.removeEventListener(\n    Events.TOUCH_END,\n    this.mouseUpClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragClosedContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpClosedContourEditCallback\n  );\n\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to the edit line and calculates the preview of the edit to render.\n * Checks if an edit needs to be completed by crossing of lines, or by editing in\n * a way that requires a new edit to keep the contour a simple polygon.\n */\nfunction mouseDragClosedContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;\n  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;\n\n  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Check that we have moved at least one voxel in each direction.\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (startCrossingIndex !== undefined) {\n    // Edge case: If the edit line itself crosses, remove part of that edit line so we don't\n    // Get isolated regions.\n    this.checkAndRemoveCrossesOnEditLine(evt);\n  }\n\n  const numPointsAdded = addCanvasPointsToArray(\n    element,\n    editCanvasPoints,\n    canvasPos,\n    this.commonData\n  );\n\n  const currentEditIndex = editIndex + numPointsAdded;\n\n  this.editData.editIndex = currentEditIndex;\n\n  if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {\n    // If we haven't found the index of the first crossing yet,\n    // see if we can find it.\n    this.checkForFirstCrossing(evt, true);\n  }\n\n  this.editData.snapIndex = this.findSnapIndex();\n\n  if (this.editData.snapIndex === -1) {\n    // No point on the prevCanvasPoints for the editCanvasPoints line to\n    // snap to. Apply edit, and start a new edit as we've gone back on ourselves.\n    this.finishEditAndStartNewEdit(evt);\n    return;\n  }\n\n  this.editData.fusedCanvasPoints = this.fuseEditPointsWithClosedContour(evt);\n\n  if (\n    startCrossingIndex !== undefined &&\n    this.checkForSecondCrossing(evt, true)\n  ) {\n    // Crossed a second time, apply edit, and start a new edit from the crossing.\n    this.removePointsAfterSecondCrossing(true);\n    this.finishEditAndStartNewEdit(evt);\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Finish the current edit, and start a new one.\n */\nfunction finishEditAndStartNewEdit(evt: EventTypes.InteractionEventType): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, editCanvasPoints } = this.editData;\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = false;\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  const lastEditCanvasPoint = editCanvasPoints.pop();\n\n  this.editData = {\n    prevCanvasPoints: fusedCanvasPoints,\n    editCanvasPoints: [lastEditCanvasPoint],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n    snapIndex: undefined,\n  };\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a renderable preview of the\n * edit. Upon finishing the contour, the preview generated here is written back\n * into the contour state.\n *\n * @privateRemarks In this method we combine a few tricks to find the optimal\n * contour:\n * - As the contour is closed, our edit might stradle the boundary between the\n * last and 0th point of the contour, e.g. a small edit might go from e.g. index\n * 960 to index 4. We therefore calculate two possible contours, and find the\n * one with the biggest area, which will define the actual edit the user desired.\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsWithClosedContour(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } =\n    this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    return;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Augment the editCanvasPoints array, between the end of edit and the snap index.\n  const augmentedEditCanvasPoints = [...editCanvasPoints];\n\n  addCanvasPointsToArray(\n    element,\n    augmentedEditCanvasPoints,\n    prevCanvasPoints[snapIndex],\n    this.commonData\n  );\n\n  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {\n    // If any points added, remove the last point, which will be a clone of the snapIndex\n    augmentedEditCanvasPoints.pop();\n  }\n\n  // Calculate the distances between the first and last edit points and the origin of the\n  // Contour with the snap point. These will be used to see which way around the edit array should be\n  // Placed within the preview.\n  let lowIndex;\n  let highIndex;\n\n  if (startCrossingIndex > snapIndex) {\n    lowIndex = snapIndex;\n    highIndex = startCrossingIndex;\n  } else {\n    lowIndex = startCrossingIndex;\n    highIndex = snapIndex;\n  }\n\n  const distanceBetweenLowAndFirstPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenLowAndLastPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const distanceBetweenHighAndFirstPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenHighAndLastPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  // Generate two possible contours that could be intepreted from the edit:\n  //\n  // pointSet1 => 0 -> low -> edit -> high - max.\n  // pointSet2 => low -> high -> edit\n  //\n  // Depending on the placement of the edit and the origin, either of these could be the intended edit.\n  // We'll choose the one with the largest area, as edits are considered to be changes to the original area with\n  // A relative change of much less than unity.\n\n  // Point Set 1\n  const pointSet1 = [];\n\n  // Add points from the orignal contour origin up to the low index.\n  for (let i = 0; i < lowIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Check which orientation of the edit line minimizes the distance between the\n  // origial contour low/high points and the start/end nodes of the edit line.\n\n  let inPlaceDistance =\n    distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;\n\n  let reverseDistance =\n    distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  // Add points from the orignal contour's high index up to to its end point.\n  for (let i = highIndex; i < prevCanvasPoints.length; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet1.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Point Set 2\n  const pointSet2 = [];\n\n  for (let i = lowIndex; i < highIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  inPlaceDistance =\n    distanceBetweenHighAndFirstPoint + distanceBetweenLowAndLastPoint;\n\n  reverseDistance =\n    distanceBetweenHighAndLastPoint + distanceBetweenLowAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointSet2.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  const areaPointSet1 = calculateAreaOfPoints(pointSet1);\n  const areaPointSet2 = calculateAreaOfPoints(pointSet2);\n\n  const pointsToRender: Types.Point2[] =\n    areaPointSet1 > areaPointSet2 ? pointSet1 : pointSet2;\n\n  return pointsToRender;\n}\n\n/**\n * Completes the edit of the closed contour when the mouse button is released.\n */\nfunction mouseUpClosedContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  this.completeClosedContourEdit(element);\n}\n\n/**\n * Completes the edit of the closed contour when the mouse button is released.\n */\nfunction completeClosedContourEdit(element: HTMLDivElement) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints) {\n    const updatedPoints = shouldInterpolate(this.configuration)\n      ? getInterpolatedPoints(\n          this.configuration,\n          fusedCanvasPoints,\n          prevCanvasPoints\n        )\n      : fusedCanvasPoints;\n\n    const worldPoints = updatedPoints.map((canvasPoint) =>\n      viewport.canvasToWorld(canvasPoint)\n    );\n    annotation.data.polyline = worldPoints;\n    annotation.data.isOpenContour = false;\n\n    annotation.invalidated = true;\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n  }\n\n  this.isEditingClosed = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateClosedContourEdit(element);\n}\n\n/**\n * Completes the edit on a cancel method call during the closed\n * contour edit loop.\n */\nfunction cancelClosedContourEdit(element: HTMLDivElement) {\n  this.completeClosedContourEdit(element);\n}\n\n/**\n * Registers the closed contour edit loop to the tool instance.\n */\nfunction registerClosedContourEditLoop(toolInstance): void {\n  toolInstance.activateClosedContourEdit =\n    activateClosedContourEdit.bind(toolInstance);\n  toolInstance.deactivateClosedContourEdit =\n    deactivateClosedContourEdit.bind(toolInstance);\n  toolInstance.mouseDragClosedContourEditCallback =\n    mouseDragClosedContourEditCallback.bind(toolInstance);\n  toolInstance.mouseUpClosedContourEditCallback =\n    mouseUpClosedContourEditCallback.bind(toolInstance);\n  toolInstance.finishEditAndStartNewEdit =\n    finishEditAndStartNewEdit.bind(toolInstance);\n  toolInstance.fuseEditPointsWithClosedContour =\n    fuseEditPointsWithClosedContour.bind(toolInstance);\n  toolInstance.cancelClosedContourEdit =\n    cancelClosedContourEdit.bind(toolInstance);\n  toolInstance.completeClosedContourEdit =\n    completeClosedContourEdit.bind(toolInstance);\n}\n\nexport default registerClosedContourEditLoop;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../../cursors/elementCursor';\nimport type { EventTypes, Annotation } from '../../../types';\nimport { vec3, vec2 } from 'gl-matrix';\nimport { polyline } from '../../../utilities/math';\nimport {\n  shouldInterpolate,\n  getInterpolatedPoints,\n} from '../../../utilities/planarFreehandROITool/interpolatePoints';\nimport triggerAnnotationRenderForViewportIds from '../../../utilities/triggerAnnotationRenderForViewportIds';\nimport findOpenUShapedContourVectorToPeak from './findOpenUShapedContourVectorToPeak';\n\nconst { addCanvasPointsToArray, getSubPixelSpacingAndXYDirections } = polyline;\n\n/**\n * Activates the open contour edit event loop.\n */\nfunction activateOpenContourEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: Annotation,\n  viewportIdsToRender: string[]\n): void {\n  this.isEditingOpen = true;\n\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const prevCanvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  this.editData = {\n    prevCanvasPoints,\n    editCanvasPoints: [canvasPos],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox: false,\n  };\n\n  state.isInteractingWithTool = true;\n\n  element.addEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpOpenContourEditCallback\n  );\n\n  element.addEventListener(\n    Events.TOUCH_END,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.addEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpOpenContourEditCallback\n  );\n  hideElementCursor(element);\n}\n\n/**\n * Deactivates and cleans up the closed contour edit event loop.\n */\nfunction deactivateOpenContourEdit(element: HTMLDivElement) {\n  state.isInteractingWithTool = false;\n\n  element.removeEventListener(\n    Events.MOUSE_UP,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.MOUSE_CLICK,\n    this.mouseUpOpenContourEditCallback\n  );\n\n  element.removeEventListener(\n    Events.TOUCH_END,\n    this.mouseUpOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_DRAG,\n    this.mouseDragOpenContourEditCallback\n  );\n  element.removeEventListener(\n    Events.TOUCH_TAP,\n    this.mouseUpOpenContourEditCallback\n  );\n  resetElementCursor(element);\n}\n\n/**\n * Adds points to the edit line and calculates the preview of the edit to render.\n * Checks if an edit needs to be completed by crossing of lines, or by dragging\n * the edit line past the end of the open contour.\n */\nfunction mouseDragOpenContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, element } = eventDetail;\n  const worldPos = currentPoints.world;\n  const canvasPos = currentPoints.canvas;\n  const enabledElement = getEnabledElement(element);\n  const { renderingEngine, viewport } = enabledElement;\n\n  const { viewportIdsToRender, xDir, yDir, spacing } = this.commonData;\n  const { editIndex, editCanvasPoints, startCrossingIndex } = this.editData;\n\n  const lastCanvasPoint = editCanvasPoints[editCanvasPoints.length - 1];\n  const lastWorldPoint = viewport.canvasToWorld(lastCanvasPoint);\n\n  const worldPosDiff = vec3.create();\n\n  vec3.subtract(worldPosDiff, worldPos, lastWorldPoint);\n\n  const xDist = Math.abs(vec3.dot(worldPosDiff, xDir));\n  const yDist = Math.abs(vec3.dot(worldPosDiff, yDir));\n\n  // Get pixel spacing in the direction.\n  // Check that we have moved at least one voxel in each direction.\n\n  if (xDist <= spacing[0] && yDist <= spacing[1]) {\n    // Haven't changed world point enough, don't render\n    return;\n  }\n\n  if (startCrossingIndex !== undefined) {\n    // Edge case: If the edit line itself crosses, remove part of that edit line so we don't\n    // Get isolated regions.\n    this.checkAndRemoveCrossesOnEditLine(evt);\n  }\n\n  const numPointsAdded = addCanvasPointsToArray(\n    element,\n    editCanvasPoints,\n    canvasPos,\n    this.commonData\n  );\n\n  const currentEditIndex = editIndex + numPointsAdded;\n\n  this.editData.editIndex = currentEditIndex;\n\n  if (startCrossingIndex === undefined && editCanvasPoints.length > 1) {\n    this.checkForFirstCrossing(evt, false);\n  }\n\n  this.editData.snapIndex = this.findSnapIndex();\n\n  this.editData.fusedCanvasPoints = this.fuseEditPointsWithOpenContour(evt);\n\n  if (\n    startCrossingIndex !== undefined &&\n    this.checkForSecondCrossing(evt, false)\n  ) {\n    this.removePointsAfterSecondCrossing(false);\n    this.finishEditOpenOnSecondCrossing(evt);\n  } else if (this.checkIfShouldOverwriteAnEnd(evt)) {\n    this.openContourEditOverwriteEnd(evt);\n  }\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Overwrite the end of the contour with the edit, and then switch to the\n * open contour end edit loop.\n */\nfunction openContourEditOverwriteEnd(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const fusedCanvasPoints = this.fuseEditPointsForOpenContourEndEdit();\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  // Note: Contours generate from fusedCanvasPoints will be in the direction\n  // with the last point being the current mouse position\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n  annotation.data.handles.activeHandleIndex = 1;\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  this.isEditingOpen = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  // Jump to a normal line edit now.\n  this.deactivateOpenContourEdit(element);\n  this.activateOpenContourEndEdit(evt, annotation, viewportIdsToRender, null);\n}\n\n/**\n * Checks if we are moving the `editCanvasPoints` past the end of one of the\n * open contour's `prevCanvasPoint`s.\n */\nfunction checkIfShouldOverwriteAnEnd(\n  evt: EventTypes.InteractionEventType\n): boolean {\n  const eventDetail = evt.detail;\n  const { currentPoints, lastPoints } = eventDetail;\n  const canvasPos = currentPoints.canvas;\n  const lastCanvasPos = lastPoints.canvas;\n\n  const { snapIndex, prevCanvasPoints, startCrossingIndex } = this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    // Edit not started\n    return false;\n  }\n\n  // No snap index can be found, so contour is being edited away from line.\n  if (snapIndex === -1) {\n    return true;\n  }\n\n  if (snapIndex !== 0 && snapIndex !== prevCanvasPoints.length - 1) {\n    // Not snapping to final index\n    return false;\n  }\n\n  // Work out the angle between the last mouse move and\n  // And the current point to the snapped point.\n  const p1 = canvasPos;\n  const p2 = lastCanvasPos;\n  const p3 = prevCanvasPoints[snapIndex];\n\n  const a = vec2.create();\n  const b = vec2.create();\n\n  vec2.set(a, p1[0] - p2[0], p1[1] - p2[1]);\n  vec2.set(b, p1[0] - p3[0], p1[1] - p3[1]);\n\n  const aDotb = vec2.dot(a, b);\n  const magA = Math.sqrt(a[0] * a[0] + a[1] * a[1]);\n  const magB = Math.sqrt(b[0] * b[0] + b[1] * b[1]);\n\n  const theta = Math.acos(aDotb / (magA * magB));\n\n  if (theta < Math.PI / 2) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a single contour ready for\n * end editing.\n *\n * @privateRemarks In this method we use the following trick to find the\n * optimal contour:\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsForOpenContourEndEdit(): Types.Point2[] {\n  const { snapIndex, prevCanvasPoints, editCanvasPoints, startCrossingIndex } =\n    this.editData;\n\n  const newCanvasPoints = [];\n\n  // Note: Generated contours will both be in the direction with the\n  // last point being the current mouse position\n\n  if (snapIndex === 0) {\n    // end -> crossingpoint -> edit\n    // Add points from the end of the previous contour, to the crossing point.\n    for (let i = prevCanvasPoints.length - 1; i >= startCrossingIndex; i--) {\n      const canvasPoint = prevCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    // start -> crossingpoint -> edit\n    // Add points from the orignal contour origin up to the low index.\n    for (let i = 0; i < startCrossingIndex; i++) {\n      const canvasPoint = prevCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  const distanceBetweenCrossingIndexAndFirstPoint = vec2.distance(\n    prevCanvasPoints[startCrossingIndex],\n    editCanvasPoints[0]\n  );\n\n  const distanceBetweenCrossingIndexAndLastPoint = vec2.distance(\n    prevCanvasPoints[startCrossingIndex],\n    editCanvasPoints[editCanvasPoints.length - 1]\n  );\n\n  if (\n    distanceBetweenCrossingIndexAndFirstPoint <\n    distanceBetweenCrossingIndexAndLastPoint\n  ) {\n    // In order\n    for (let i = 0; i < editCanvasPoints.length; i++) {\n      const canvasPoint = editCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    // reverse\n    for (let i = editCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = editCanvasPoints[i];\n\n      newCanvasPoints.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  return newCanvasPoints;\n}\n\n/**\n * This method combines the contour before editing (prevCanvasPoints) with\n * the current edit (editCanvasPoints), to produce a renderable preview of the\n * edit. Upon finishing the contour, the preview generated here is written back\n * into the contour state.\n *\n * @privateRemarks In this method we use the following trick to find the\n * optimal contour:\n * - As the contour and the edit can be drawn with different chiralities, we find if\n * the edit line aligns better with the intended cross points in its current order\n * or reversed. We do this by minimising the distance between its ends and the\n * intended crossing points.\n */\nfunction fuseEditPointsWithOpenContour(\n  evt: EventTypes.InteractionEventType\n): Types.Point2[] {\n  const { prevCanvasPoints, editCanvasPoints, startCrossingIndex, snapIndex } =\n    this.editData;\n\n  if (startCrossingIndex === undefined || snapIndex === undefined) {\n    return undefined;\n  }\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  // Augment the editCanvasPoints array, between the end of edit and the snap index.\n  const augmentedEditCanvasPoints = [...editCanvasPoints];\n\n  addCanvasPointsToArray(\n    element,\n    augmentedEditCanvasPoints,\n    prevCanvasPoints[snapIndex],\n    this.commonData\n  );\n\n  if (augmentedEditCanvasPoints.length > editCanvasPoints.length) {\n    // If any points added, remove the last point, which will be a clone of the snapIndex\n    augmentedEditCanvasPoints.pop();\n  }\n\n  // Calculate the distances between the first and last edit points and the origin of the\n  // Contour with the snap point. These will be used to see which way around the edit array should be\n  // Placed within the preview.\n\n  let lowIndex;\n  let highIndex;\n\n  if (startCrossingIndex > snapIndex) {\n    lowIndex = snapIndex;\n    highIndex = startCrossingIndex;\n  } else {\n    lowIndex = startCrossingIndex;\n    highIndex = snapIndex;\n  }\n\n  const distanceBetweenLowAndFirstPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenLowAndLastPoint = vec2.distance(\n    prevCanvasPoints[lowIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const distanceBetweenHighAndFirstPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[0]\n  );\n\n  const distanceBetweenHighAndLastPoint = vec2.distance(\n    prevCanvasPoints[highIndex],\n    augmentedEditCanvasPoints[augmentedEditCanvasPoints.length - 1]\n  );\n\n  const pointsToRender = [];\n\n  // Add points from the orignal contour origin up to the low index.\n  for (let i = 0; i < lowIndex; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  // Check which orientation of the edit line minimizes the distance between the\n  // origial contour low/high points and the start/end nodes of the edit line.\n\n  const inPlaceDistance =\n    distanceBetweenLowAndFirstPoint + distanceBetweenHighAndLastPoint;\n\n  const reverseDistance =\n    distanceBetweenLowAndLastPoint + distanceBetweenHighAndFirstPoint;\n\n  if (inPlaceDistance < reverseDistance) {\n    for (let i = 0; i < augmentedEditCanvasPoints.length; i++) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  } else {\n    for (let i = augmentedEditCanvasPoints.length - 1; i >= 0; i--) {\n      const canvasPoint = augmentedEditCanvasPoints[i];\n\n      pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n    }\n  }\n\n  // Add points from the original contour's high index up to to its end point.\n  for (let i = highIndex; i < prevCanvasPoints.length; i++) {\n    const canvasPoint = prevCanvasPoints[i];\n\n    pointsToRender.push([canvasPoint[0], canvasPoint[1]]);\n  }\n\n  return pointsToRender;\n}\n\n/**\n * On a second crossing, apply edit, and start a new edit from the crossing.\n */\nfunction finishEditOpenOnSecondCrossing(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, editCanvasPoints } = this.editData;\n\n  const worldPoints = fusedCanvasPoints.map((canvasPoint) =>\n    viewport.canvasToWorld(canvasPoint)\n  );\n\n  annotation.data.polyline = worldPoints;\n  annotation.data.isOpenContour = true;\n  annotation.data.handles.points = [\n    worldPoints[0],\n    worldPoints[worldPoints.length - 1],\n  ];\n\n  this.triggerAnnotationModified(annotation, enabledElement);\n\n  const lastEditCanvasPoint = editCanvasPoints.pop();\n\n  this.editData = {\n    prevCanvasPoints: fusedCanvasPoints,\n    editCanvasPoints: [lastEditCanvasPoint],\n    startCrossingIndex: undefined,\n    editIndex: 0,\n  };\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n}\n\n/**\n * Completes the edit of the open contour when the mouse button is released.\n */\nfunction mouseUpOpenContourEditCallback(\n  evt: EventTypes.InteractionEventType\n): void {\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n\n  this.completeOpenContourEdit(element);\n}\n\n/**\n * Completes the edit of the open contour.\n */\nfunction completeOpenContourEdit(element: HTMLDivElement) {\n  const enabledElement = getEnabledElement(element);\n  const { viewport, renderingEngine } = enabledElement;\n\n  const { annotation, viewportIdsToRender } = this.commonData;\n  const { fusedCanvasPoints, prevCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints) {\n    const updatedPoints = shouldInterpolate(this.configuration)\n      ? getInterpolatedPoints(\n          this.configuration,\n          fusedCanvasPoints,\n          prevCanvasPoints\n        )\n      : fusedCanvasPoints;\n\n    const worldPoints = updatedPoints.map((canvasPoint) =>\n      viewport.canvasToWorld(canvasPoint)\n    );\n    annotation.data.polyline = worldPoints;\n    annotation.data.isOpenContour = true;\n    annotation.data.handles.points = [\n      worldPoints[0],\n      worldPoints[worldPoints.length - 1],\n    ];\n\n    // If the annotation is an open U-shaped annotation, find the annotation vector.\n    if (annotation.data.isOpenUShapeContour) {\n      annotation.data.openUShapeContourVectorToPeak =\n        findOpenUShapedContourVectorToPeak(fusedCanvasPoints, viewport);\n    }\n\n    annotation.invalidated = true;\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n  }\n\n  this.isEditingOpen = false;\n  this.editData = undefined;\n  this.commonData = undefined;\n\n  triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n  this.deactivateOpenContourEdit(element);\n}\n\n/**\n * Completes the edit on a cancel method call during the open\n * contour edit loop.\n */\nfunction cancelOpenContourEdit(element: HTMLDivElement) {\n  this.completeOpenContourEdit(element);\n}\n\n/**\n * Registers the open contour edit loop to the tool instance.\n */\nfunction registerOpenContourEditLoop(toolInstance) {\n  toolInstance.activateOpenContourEdit =\n    activateOpenContourEdit.bind(toolInstance);\n  toolInstance.deactivateOpenContourEdit =\n    deactivateOpenContourEdit.bind(toolInstance);\n  toolInstance.mouseDragOpenContourEditCallback =\n    mouseDragOpenContourEditCallback.bind(toolInstance);\n  toolInstance.mouseUpOpenContourEditCallback =\n    mouseUpOpenContourEditCallback.bind(toolInstance);\n  toolInstance.fuseEditPointsWithOpenContour =\n    fuseEditPointsWithOpenContour.bind(toolInstance);\n  toolInstance.finishEditOpenOnSecondCrossing =\n    finishEditOpenOnSecondCrossing.bind(toolInstance);\n  toolInstance.checkIfShouldOverwriteAnEnd =\n    checkIfShouldOverwriteAnEnd.bind(toolInstance);\n  toolInstance.fuseEditPointsForOpenContourEndEdit =\n    fuseEditPointsForOpenContourEndEdit.bind(toolInstance);\n  toolInstance.openContourEditOverwriteEnd =\n    openContourEditOverwriteEnd.bind(toolInstance);\n  toolInstance.cancelOpenContourEdit = cancelOpenContourEdit.bind(toolInstance);\n  toolInstance.completeOpenContourEdit =\n    completeOpenContourEdit.bind(toolInstance);\n}\n\nexport default registerOpenContourEditLoop;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { state } from '../../../store';\nimport { Events } from '../../../enums';\nimport { hideElementCursor } from '../../../cursors/elementCursor';\nimport type {\n  EventTypes,\n  Annotation,\n  ToolHandle,\n  TextBoxHandle,\n} from '../../../types';\nimport { polyline } from '../../../utilities/math';\n\nconst { getSubPixelSpacingAndXYDirections } = polyline;\n\n/**\n * Activates the open contour end edit. This actually just sets up the state so\n * that the tool thinks we are mid draw, and then jumps into the drawing loop.\n */\nfunction activateOpenContourEndEdit(\n  evt: EventTypes.InteractionEventType,\n  annotation: Annotation,\n  viewportIdsToRender: string[],\n  handle: ToolHandle | null\n): void {\n  this.isDrawing = true;\n\n  const eventDetail = evt.detail;\n  const { element } = eventDetail;\n  const enabledElement = getEnabledElement(element);\n  const { viewport } = enabledElement;\n\n  const { spacing, xDir, yDir } = getSubPixelSpacingAndXYDirections(\n    viewport,\n    this.configuration.subPixelResolution\n  );\n\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n  const handleIndexGrabbed = annotation.data.handles.activeHandleIndex;\n\n  // If 0, invert point direction, if 1, keep point direction the same.\n  // This is so we can just jump as into the state as if the annotation was just being drawn.\n  if (handleIndexGrabbed === 0) {\n    canvasPoints.reverse();\n  }\n\n  let movingTextBox = false;\n  if ((handle as TextBoxHandle).worldPosition) {\n    movingTextBox = true;\n  }\n\n  this.drawData = {\n    canvasPoints: canvasPoints,\n    polylineIndex: canvasPoints.length - 1,\n  };\n\n  this.commonData = {\n    annotation,\n    viewportIdsToRender,\n    spacing,\n    xDir,\n    yDir,\n    movingTextBox,\n  };\n\n  state.isInteractingWithTool = true;\n\n  // Jump into drawing loop.\n  element.addEventListener(Events.MOUSE_UP, this.mouseUpDrawCallback);\n  element.addEventListener(Events.MOUSE_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.MOUSE_CLICK, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_END, this.mouseUpDrawCallback);\n  element.addEventListener(Events.TOUCH_DRAG, this.mouseDragDrawCallback);\n  element.addEventListener(Events.TOUCH_TAP, this.mouseUpDrawCallback);\n\n  hideElementCursor(element);\n}\n\n/**\n * Registers the open contour end edit loop to the tool instance.\n */\nfunction registerOpenContourEndEditLoop(toolInstance): void {\n  toolInstance.activateOpenContourEndEdit =\n    activateOpenContourEndEdit.bind(toolInstance);\n}\n\nexport default registerOpenContourEndEditLoop;\n","import type { Types } from '@cornerstonejs/core';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawPolyline as drawPolylineSvg,\n} from '../../../drawingSvg';\nimport { polyline } from '../../../utilities/math';\nimport { findOpenUShapedContourVectorToPeakOnRender } from './findOpenUShapedContourVectorToPeak';\nimport { PlanarFreehandROIAnnotation } from '../../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\nimport { SVGDrawingHelper } from '../../../types';\n\nconst { pointsAreWithinCloseContourProximity } = polyline;\n\ntype PlanarFreehandROIRenderOptions = {\n  color?: string;\n  width?: number;\n  connectFirstToLast?: boolean;\n};\n\nfunction _getRenderingOptions(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): PlanarFreehandROIRenderOptions {\n  const styleSpecifier: StyleSpecifier = {\n    toolGroupId: this.toolGroupId,\n    toolName: this.getToolName(),\n    viewportId: enabledElement.viewport.id,\n    annotationUID: annotation.annotationUID,\n  };\n\n  const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n  const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n  const color = this.getStyle('color', styleSpecifier, annotation);\n\n  const isOpenContour = annotation.data.isOpenContour;\n\n  const options = {\n    color: color === undefined ? undefined : <string>color,\n    width: lineWidth === undefined ? undefined : <number>lineWidth,\n    lineDash: lineDash === undefined ? undefined : <number[]>lineDash,\n    connectLastToFirst: !isOpenContour,\n  };\n\n  return options;\n}\n\n/**\n * Renders a `PlanarFreehandROIAnnotation` that is not currently being drawn or edited.\n */\nfunction renderContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  // prevent drawing or further calculation in case viewport data is not ready yet\n  if (!enabledElement?.viewport?.getImageData()) {\n    return;\n  }\n  // Check if the contour is an open contour\n  if (annotation.data.isOpenContour) {\n    // If its an open contour, check i its a U-shaped contour\n    if (annotation.data.isOpenUShapeContour) {\n      calculateUShapeContourVectorToPeakIfNotPresent(\n        enabledElement,\n        annotation\n      );\n\n      this.renderOpenUShapedContour(\n        enabledElement,\n        svgDrawingHelper,\n        annotation\n      );\n    } else {\n      // If not a U-shaped contour, render standard open contour.\n      this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n    }\n  } else {\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n  }\n}\n\n/**\n * If the open U-shaped contour does not have a peak.\n */\nfunction calculateUShapeContourVectorToPeakIfNotPresent(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  if (!annotation.data.openUShapeContourVectorToPeak) {\n    // Annotation just been set to be an open U-shaped contour.\n    // calculate its peak vector here.\n    annotation.data.openUShapeContourVectorToPeak =\n      findOpenUShapedContourVectorToPeakOnRender(enabledElement, annotation);\n  }\n}\n\n/**\n * Renders an closed `PlanarFreehandROIAnnotation` annotation.\n */\nfunction renderClosedContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  // Its unfortunate that we have to do this for each annotation,\n  // Even if its unchanged. In the future we could cache the canvas points per\n  // element on the tool? That feels very weird also as we'd need to manage\n  // it/clean them up. Its a pre-optimisation for now and we can tackle it if it\n  // becomes a problem.\n  const canvasPoints = annotation.data.polyline.map((worldPos) =>\n    viewport.worldToCanvas(worldPos)\n  );\n\n  const polylineUID = '1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUID,\n    canvasPoints,\n    options\n  );\n}\n\n/**\n * Renders an open `PlanarFreehandROIAnnotation` annotation.\n */\nfunction renderOpenContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const canvasPoints = annotation.data.polyline.map((worldPos) =>\n    viewport.worldToCanvas(worldPos)\n  );\n\n  const polylineUID = '1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUID,\n    canvasPoints,\n    options\n  );\n\n  const activeHandleIndex = annotation.data.handles.activeHandleIndex;\n\n  if (this.configuration.alwaysRenderOpenContourHandles?.enabled === true) {\n    const radius = this.configuration.alwaysRenderOpenContourHandles.radius;\n\n    // Draw highlighted points\n    const handleGroupUID = '0';\n\n    // We already mapped all the points, so don't do the mapping again.\n    // The activeHandleIndex can only be one of two points.\n    const handlePoints = [\n      canvasPoints[0],\n      canvasPoints[canvasPoints.length - 1],\n    ];\n\n    // Don't render a hovered handle, as this will be rendered larger in\n    // the next block.\n    if (activeHandleIndex === 0) {\n      handlePoints.shift();\n    } else if (activeHandleIndex === 1) {\n      handlePoints.pop();\n    }\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotation.annotationUID,\n      handleGroupUID,\n      handlePoints,\n      {\n        color: options.color,\n        handleRadius: radius,\n      }\n    );\n  }\n\n  if (activeHandleIndex !== null) {\n    // Draw highlighted points\n    const handleGroupUID = '1';\n\n    // We already mapped all the points, so don't do the mapping again.\n    // The activeHandleIndex can only be one of two points.\n    const indexOfCanvasPoints =\n      activeHandleIndex === 0 ? 0 : canvasPoints.length - 1;\n\n    const handlePoint = canvasPoints[indexOfCanvasPoints];\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotation.annotationUID,\n      handleGroupUID,\n      [handlePoint],\n      { color: options.color }\n    );\n  }\n}\n\nfunction renderOpenUShapedContour(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { viewport } = enabledElement;\n  const { polyline, openUShapeContourVectorToPeak } = annotation.data;\n\n  this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n\n  // prevent rendering u shape in case openUShapeContourVectorToPeak is not set yet\n  if (!openUShapeContourVectorToPeak) {\n    return;\n  }\n\n  const firstCanvasPoint = viewport.worldToCanvas(polyline[0]);\n  const lastCanvasPoint = viewport.worldToCanvas(polyline[polyline.length - 1]);\n\n  const openUShapeContourVectorToPeakCanvas = [\n    viewport.worldToCanvas(openUShapeContourVectorToPeak[0]),\n    viewport.worldToCanvas(openUShapeContourVectorToPeak[1]),\n  ];\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  // Join first and last points\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    'first-to-last',\n    [firstCanvasPoint, lastCanvasPoint],\n    {\n      color: options.color,\n      width: options.width,\n      connectLastToFirst: false,\n      lineDash: '2,2',\n    }\n  );\n\n  // Render midpoint to open contour surface line\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    'midpoint-to-open-contour',\n    [\n      openUShapeContourVectorToPeakCanvas[0],\n      openUShapeContourVectorToPeakCanvas[1],\n    ],\n    {\n      color: options.color,\n      width: options.width,\n      connectLastToFirst: false,\n      lineDash: '2,2',\n    }\n  );\n}\n\n/**\n * Renders a new `PlanarFreehandROIAnnotation` annotation during\n * creation/drawing.\n */\nfunction renderContourBeingDrawn(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const { allowOpenContours } = this.configuration;\n  const { canvasPoints } = this.drawData;\n\n  // Override rendering whilst drawing the contour, we don't know if its open\n  // or closed yet\n  options.connectLastToFirst = false;\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    '1',\n    canvasPoints,\n    options\n  );\n\n  if (allowOpenContours) {\n    const firstPoint = canvasPoints[0];\n    const lastPoint = canvasPoints[canvasPoints.length - 1];\n\n    // Check if start and end are within close proximity\n    if (\n      pointsAreWithinCloseContourProximity(\n        firstPoint,\n        lastPoint,\n        this.configuration.closeContourProximity\n      )\n    ) {\n      // Preview join last points\n      drawPolylineSvg(\n        svgDrawingHelper,\n        annotation.annotationUID,\n        '2',\n        [lastPoint, firstPoint],\n        options\n      );\n    } else {\n      // Draw start point\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotation.annotationUID,\n        handleGroupUID,\n        [firstPoint],\n        { color: options.color, handleRadius: 2 }\n      );\n    }\n  }\n}\n\n/**\n * Renders a closed `PlanarFreehandROIAnnotation` being edited.\n */\nfunction renderClosedContourBeingEdited(\n  enabledElement,\n  svgDrawingHelper,\n  annotation\n): void {\n  const { fusedCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints === undefined) {\n    // No edit to render yet, render closed contour.\n    this.renderClosedContour(enabledElement, svgDrawingHelper, annotation);\n\n    return;\n  }\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const polylineUIDToRender = 'preview-1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUIDToRender,\n    fusedCanvasPoints,\n    options\n  );\n}\n\n/**\n * Renders an open `PlanarFreehandROIAnnotation` being edited.\n */\nfunction renderOpenContourBeingEdited(\n  enabledElement: Types.IEnabledElement,\n  svgDrawingHelper: SVGDrawingHelper,\n  annotation: PlanarFreehandROIAnnotation\n): void {\n  const { fusedCanvasPoints } = this.editData;\n\n  if (fusedCanvasPoints === undefined) {\n    // No edit to render yet, render closed contour.\n    this.renderOpenContour(enabledElement, svgDrawingHelper, annotation);\n\n    return;\n  }\n\n  const options = this._getRenderingOptions(enabledElement, annotation);\n\n  const polylineUIDToRender = 'preview-1';\n\n  drawPolylineSvg(\n    svgDrawingHelper,\n    annotation.annotationUID,\n    polylineUIDToRender,\n    fusedCanvasPoints,\n    options\n  );\n}\n\n/**\n * Registers the render methods of various contour states to the tool instance.\n */\nfunction registerRenderMethods(toolInstance) {\n  toolInstance.renderContour = renderContour.bind(toolInstance);\n  toolInstance.renderClosedContour = renderClosedContour.bind(toolInstance);\n  toolInstance.renderOpenContour = renderOpenContour.bind(toolInstance);\n  toolInstance.renderOpenUShapedContour =\n    renderOpenUShapedContour.bind(toolInstance);\n\n  toolInstance.renderContourBeingDrawn =\n    renderContourBeingDrawn.bind(toolInstance);\n\n  toolInstance.renderClosedContourBeingEdited =\n    renderClosedContourBeingEdited.bind(toolInstance);\n  toolInstance.renderOpenContourBeingEdited =\n    renderOpenContourBeingEdited.bind(toolInstance);\n  toolInstance._getRenderingOptions = _getRenderingOptions.bind(toolInstance);\n}\n\nexport default registerRenderMethods;\n","import {\n  CONSTANTS,\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  StackViewport,\n  VolumeViewport,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { vec3 } from 'gl-matrix';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { Events } from '../../enums';\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../../stateManagement/annotation/annotationState';\nimport { polyline } from '../../utilities/math';\nimport { filterAnnotationsForDisplay } from '../../utilities/planar';\nimport throttle from '../../utilities/throttle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport registerDrawLoop from './planarFreehandROITool/drawLoop';\nimport registerEditLoopCommon from './planarFreehandROITool/editLoopCommon';\nimport registerClosedContourEditLoop from './planarFreehandROITool/closedContourEditLoop';\nimport registerOpenContourEditLoop from './planarFreehandROITool/openContourEditLoop';\nimport registerOpenContourEndEditLoop from './planarFreehandROITool/openContourEndEditLoop';\nimport registerRenderMethods from './planarFreehandROITool/renderMethods';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport {\n  EventTypes,\n  ToolHandle,\n  Annotation,\n  Annotations,\n  AnnotationStyle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { drawLinkedTextBox } from '../../drawingSvg';\nimport { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport { PlanarFreehandROICommonData } from '../../utilities/math/polyline/planarFreehandROIInternalTypes';\n\nimport { getIntersectionCoordinatesWithPolyline } from '../../utilities/math/polyline/getIntersectionWithPolyline';\nimport pointInShapeCallback from '../../utilities/pointInShapeCallback';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { pointCanProjectOnLine } = polyline;\nconst { EPSILON } = CONSTANTS;\n\nconst PARALLEL_THRESHOLD = 1 - EPSILON;\n/**\n * PlanarFreehandROITool lets you draw annotations that define an arbitrarily drawn region.\n * You can use the PlanarFreehandROITool in all perpendicular views (axial, sagittal, coronal),\n * support for oblique views is possible, but not yet supported, due to the implementation of\n * `getSubPixelSpacingAndXYDirections`.\n *\n * The resulting annotation's data and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * PlanarFreehandROITool annotation can be smoothed on drawing completion. This is a configured based approach.\n * The interpolation process uses b-spline algorithm and consider 4 configurations properties:\n * - interpolation.interpolateOnAdd: to tell whether it should be interpolated or not (for editing it is considered the property interpolateOnEdit) (default: false)\n * - interpolation.interpolateOnEdit: to tell whether it should be interpolated or not when editing (default: false)\n * - interpolation.knotsRatioPercentageOnAdd: percentage of points from Segment that are likely to be considered knots during interpolation (for editing it is considered the property knotsRatioPercentageOnEdit) ( default: 40)\n * - interpolation.knotsRatioPercentageOnEdit: same as knotsRatioPercentageOnAdd but applicable only when editing the tool (default: 40)\n *\n * So, with that said the interpolation might occur when:\n * - drawing is done (i.e mouse is released) and interpolation.interpolateOnAdd is true. Interpolation algorithm uses knotsRatioPercentageOnAdd\n * - edit drawing is done (i.e mouse is released) and interpolation.interpolateOnEdit is true. Interpolation algorithm uses knotsRatioPercentageOnEdit and its only applied to changed segment\n * Interpolation does not occur when:\n * - interpolation.interpolateOnAdd is false and drawing is completed\n * - interpolation.interpolateOnEdit is false and edit is completed\n * - drawing still happening (editing or not)\n *\n * The result of interpolation will be a smoother set of segments.\n * Changing tool configuration (see below) you can fine-tune the interpolation process by changing knotsRatioPercentageOnAdd and knotsRatioPercentageOnEdit value, which smaller values produces a more agressive interpolation.\n * A smaller value of knotsRatioPercentageOnAdd/knotsRatioPercentageOnEdit produces a more agressive interpolation.\n *\n * ```js\n * cornerstoneTools.addTool(PlanarFreehandROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(PlanarFreehandROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(PlanarFreehandROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // set interpolation agressiveness while adding new annotation (ps: this does not change if interpolation is ON or OFF)\n * toolGroup.setToolConfiguration(PlanarFreehandROITool.toolName, {\n *   interpolation: { knotsRatioPercentageOnAdd: 30 },\n * });\n *\n * // set interpolation to be ON while editing only\n * toolGroup.setToolConfiguration(PlanarFreehandROITool.toolName, {\n *   interpolation: { interpolateOnAdd: false, interpolateOnEdit: true  },\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass PlanarFreehandROITool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  private commonData?: PlanarFreehandROICommonData;\n  isDrawing = false;\n  isEditingClosed = false;\n  isEditingOpen = false;\n\n  private activateDraw: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateClosedContourEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateOpenContourEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[]\n  ) => void;\n  private activateOpenContourEndEdit: (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    viewportIdsToRender: string[],\n    handle: ToolHandle | null\n  ) => void;\n  private cancelDrawing: (element: HTMLDivElement) => void;\n  private cancelClosedContourEdit: (element: HTMLDivElement) => void;\n  private cancelOpenContourEdit: (element: HTMLDivElement) => void;\n\n  private renderContour: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderContourBeingDrawn: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderClosedContourBeingEdited: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n  private renderOpenContourBeingEdited: (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper,\n    annotation: PlanarFreehandROIAnnotation\n  ) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        alwaysRenderOpenContourHandles: {\n          // When true, always render end points when you have an open contour, rather\n          // than just rendering a line.\n          enabled: false,\n          // When enabled, use this radius to draw the endpoints whilst not hovering.\n          radius: 2,\n        },\n        allowOpenContours: true,\n        // Proximity in canvas coordinates used to join contours.\n        closeContourProximity: 10,\n        // The proximity at which we fallback to the simplest grabbing logic for\n        // determining what index of the contour to start editing.\n        checkCanvasEditFallbackProximity: 6,\n        // The relative distance that points should be dropped along the polyline\n        // in units of the image pixel spacing. A value of 1 means that nodes must\n        // be placed no closed than the image spacing apart. A value of 4 means that 4\n        // nodes should be placed within the space of one image pixel size. A higher\n        // value gives more finese to the tool/smoother lines, but the value cannot\n        // be infinite as the lines become very computationally expensive to draw.\n        subPixelResolution: 4,\n        interpolation: {\n          interpolateOnAdd: false,\n          interpolateOnEdit: false, // used for edit only\n          knotsRatioPercentageOnAdd: 40,\n          knotsRatioPercentageOnEdit: 40,\n        },\n        calculateStats: false,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // Register event loops and rendering logic, which are stored in different\n    // Files due to their complexity/size.\n    registerDrawLoop(this);\n    registerEditLoopCommon(this);\n    registerClosedContourEditLoop(this);\n    registerOpenContourEditLoop(this);\n    registerOpenContourEndEditLoop(this);\n    registerRenderMethods(this);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current image, creates\n   * a `PlanarFreehandROIAnnotation` and stores it in the annotationManager.\n   *\n   * @param evt - `EventTypes.NormalizedMouseEventType`\n   * @returns The `PlanarFreehandROIAnnotation` object.\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): PlanarFreehandROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: PlanarFreehandROIAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          points: [], // Handle points for open contours\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        polyline: [<Types.Point3>[...worldPos]], // Polyline coordinates\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    this.activateDraw(evt, annotation, viewportIdsToRender);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * Begins an edit of an open contour, when the mouse has selected a handle\n   * (end) of the open contour.\n   *\n   * @param evt - `EventTypes.MouseDownEventType`\n   * @param annotation - `PlanarFreehandROIAnnotation` annotation.\n   * @param handle - The handle index, 0 for the start and 1 for the end.\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.activateOpenContourEndEdit(\n      evt,\n      annotation,\n      viewportIdsToRender,\n      handle\n    );\n  };\n\n  /**\n   * Edits the open or closed contour when the line is grabbed and dragged.\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: PlanarFreehandROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    if (annotation.data.isOpenContour) {\n      this.activateOpenContourEdit(evt, annotation, viewportIdsToRender);\n    } else {\n      this.activateClosedContourEdit(evt, annotation, viewportIdsToRender);\n    }\n  };\n\n  /**\n   * Returns if the canvas point is near the line of the given annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - The `PlanarFreehandROIAnnotation`.\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: PlanarFreehandROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const points = annotation.data.polyline;\n\n    // NOTE: It is implemented this way so that we do not double calculate\n    // points when number crunching adjacent line segments.\n    let previousPoint = viewport.worldToCanvas(points[0]);\n\n    for (let i = 1; i < points.length; i++) {\n      const p1 = previousPoint;\n      const p2 = viewport.worldToCanvas(points[i]);\n\n      const distance = pointCanProjectOnLine(canvasCoords, p1, p2, proximity);\n\n      if (distance === true) {\n        return true;\n      }\n\n      previousPoint = p2;\n    }\n\n    if (annotation.data.isOpenContour) {\n      // Contour is open, don't check last point to first point.\n      return false;\n    }\n\n    // check last point to first point\n    const pStart = viewport.worldToCanvas(points[0]);\n    const pEnd = viewport.worldToCanvas(points[points.length - 1]);\n\n    const distance = pointCanProjectOnLine(\n      canvasCoords,\n      pStart,\n      pEnd,\n      proximity\n    );\n\n    if (distance === true) {\n      return true;\n    }\n\n    return false;\n  };\n\n  cancel = (element: HTMLDivElement): void => {\n    const isDrawing = this.isDrawing;\n    const isEditingOpen = this.isEditingOpen;\n    const isEditingClosed = this.isEditingClosed;\n\n    if (isDrawing) {\n      this.cancelDrawing(element);\n    } else if (isEditingOpen) {\n      this.cancelOpenContourEdit(element);\n    } else if (isEditingClosed) {\n      this.cancelClosedContourEdit(element);\n    }\n  };\n\n  /**\n   * Triggers an annotation modified event.\n   */\n  triggerAnnotationModified = (\n    annotation: PlanarFreehandROIAnnotation,\n    enabledElement: Types.IEnabledElement\n  ): void => {\n    const { viewportId, renderingEngineId } = enabledElement;\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * Triggers an annotation completed event.\n   */\n  triggerAnnotationCompleted = (\n    annotation: PlanarFreehandROIAnnotation\n  ): void => {\n    const eventType = Events.ANNOTATION_COMPLETED;\n\n    const eventDetail: AnnotationCompletedEventDetail = {\n      annotation,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n  };\n\n  /**\n   * @override We need to override this method as the tool doesn't always have\n   * `handles`, which means `filterAnnotationsForDisplay` fails inside\n   * `filterAnnotationsWithinSlice`.\n   */\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations | undefined {\n    if (!annotations || !annotations.length) {\n      return;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let annotationsToDisplay;\n\n    if (viewport instanceof VolumeViewport) {\n      const camera = viewport.getCamera();\n\n      const { spacingInNormalDirection } =\n        csUtils.getTargetVolumeAndSpacingInNormalDir(viewport, camera);\n\n      // Get data with same normal and within the same slice\n      annotationsToDisplay = this.filterAnnotationsWithinSlice(\n        annotations,\n        camera,\n        spacingInNormalDirection\n      );\n    } else {\n      // Use the default `filterAnnotationsForDisplay` utility, as the stack\n      // path doesn't require handles.\n      annotationsToDisplay = filterAnnotationsForDisplay(viewport, annotations);\n    }\n\n    return annotationsToDisplay;\n  }\n\n  /**\n   * Altered version of the `utilities.planar.filterAnnotationsWithinSlice`,\n   * which uses the polyline position rather than the handle. As the polyline is\n   * always present.\n   */\n  private filterAnnotationsWithinSlice(\n    annotations: Annotations,\n    camera: Types.ICamera,\n    spacingInNormalDirection: number\n  ): Annotations {\n    const { viewPlaneNormal } = camera;\n\n    const annotationsWithParallelNormals = annotations.filter(\n      (td: Annotation) => {\n        const annotationViewPlaneNormal = td.metadata.viewPlaneNormal;\n\n        const isParallel =\n          Math.abs(vec3.dot(viewPlaneNormal, annotationViewPlaneNormal)) >\n          PARALLEL_THRESHOLD;\n\n        return annotationViewPlaneNormal && isParallel;\n      }\n    );\n\n    // No in plane annotations.\n    if (!annotationsWithParallelNormals.length) {\n      return [];\n    }\n\n    // Annotation should be within the slice, which means that it should be between\n    // camera's focalPoint +/- spacingInNormalDirection.\n\n    const halfSpacingInNormalDirection = spacingInNormalDirection / 2;\n    const { focalPoint } = camera;\n\n    const annotationsWithinSlice = [];\n\n    for (const annotation of annotationsWithParallelNormals) {\n      const data = annotation.data;\n      const point = data.polyline[0];\n\n      if (!annotation.isVisible) {\n        continue;\n      }\n\n      // A = point\n      // B = focal point\n      // P = normal\n\n      // B-A dot P  => Distance in the view direction.\n      // this should be less than half the slice distance.\n\n      const dir = vec3.create();\n\n      vec3.sub(dir, focalPoint, point);\n\n      const dot = vec3.dot(dir, viewPlaneNormal);\n\n      if (Math.abs(dot) < halfSpacingInNormalDirection) {\n        annotationsWithinSlice.push(annotation);\n      }\n    }\n\n    return annotationsWithinSlice;\n  }\n\n  /**\n   * Draws the `PlanarFreehandROIAnnotation`s at each request animation frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n\n    const targetId = this.getTargetId(viewport);\n\n    let annotations = <PlanarFreehandROIAnnotation[]>(\n      getAnnotations(this.getToolName(), element)\n    );\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as PlanarFreehandROIAnnotation[];\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const isDrawing = this.isDrawing;\n    const isEditingOpen = this.isEditingOpen;\n    const isEditingClosed = this.isEditingClosed;\n\n    if (!(isDrawing || isEditingOpen || isEditingClosed)) {\n      // No annotations are currently being modified, so we can just use the\n      // render contour method to render all of them\n      annotations.forEach((annotation) => {\n        this.renderContour(enabledElement, svgDrawingHelper, annotation);\n      });\n    } else {\n      // One of the annotations will need special rendering treatment, render all\n      // other annotations not being interacted with using the standard renderContour\n      // rendering path.\n      const activeAnnotationUID = this.commonData.annotation.annotationUID;\n\n      annotations.forEach((annotation) => {\n        if (annotation.annotationUID === activeAnnotationUID) {\n          if (isDrawing) {\n            this.renderContourBeingDrawn(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else if (isEditingClosed) {\n            this.renderClosedContourBeingEdited(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else if (isEditingOpen) {\n            this.renderOpenContourBeingEdited(\n              enabledElement,\n              svgDrawingHelper,\n              annotation\n            );\n          } else {\n            throw new Error(\n              `Unknown ${this.getToolName()} annotation rendering state`\n            );\n          }\n        } else {\n          this.renderContour(enabledElement, svgDrawingHelper, annotation);\n        }\n      });\n\n      // Todo: return boolean flag for each rendering route in the planar tool.\n      renderStatus = true;\n    }\n\n    if (!this.configuration.calculateStats) {\n      return;\n    }\n\n    annotations.forEach((annotation) => {\n      const activeAnnotationUID = this.commonData?.annotation.annotationUID;\n      if (\n        annotation.annotationUID === activeAnnotationUID &&\n        !this.commonData?.movingTextBox\n      ) {\n        return;\n      }\n\n      if (!this.commonData?.movingTextBox) {\n        const { data } = annotation;\n        if (\n          !data.cachedStats[targetId] ||\n          data.cachedStats[targetId].areaUnit == null\n        ) {\n          data.cachedStats[targetId] = {\n            Modality: null,\n            area: null,\n            max: null,\n            mean: null,\n            stdDev: null,\n            areaUnit: null,\n          };\n\n          this._calculateCachedStats(\n            annotation,\n            viewport,\n            renderingEngine,\n            enabledElement\n          );\n        } else if (annotation.invalidated) {\n          this._throttledCalculateCachedStats(\n            annotation,\n            viewport,\n            renderingEngine,\n            enabledElement\n          );\n        }\n      }\n\n      this._renderStats(annotation, viewport, enabledElement, svgDrawingHelper);\n    });\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const data = annotation.data;\n    const { cachedStats, polyline: points } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, metadata } = image;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // Using an arbitrary start point (canvasPoint), calculate the\n      // mm spacing for the canvas in the X and Y directions.\n      const canvasPoint = canvasCoordinates[0];\n      const originalWorldPoint = viewport.canvasToWorld(canvasPoint);\n      const deltaXPoint = viewport.canvasToWorld([\n        canvasPoint[0] + 1,\n        canvasPoint[1],\n      ]);\n      const deltaYPoint = viewport.canvasToWorld([\n        canvasPoint[0],\n        canvasPoint[1] + 1,\n      ]);\n\n      const deltaInX = vec3.distance(originalWorldPoint, deltaXPoint);\n      const deltaInY = vec3.distance(originalWorldPoint, deltaYPoint);\n\n      const scale = getCalibratedScale(image);\n      let area =\n        polyline.calculateAreaOfPoints(canvasCoordinates) / scale / scale;\n      // Convert from canvas_pixels ^2 to mm^2\n      area *= deltaInX * deltaInY;\n\n      const worldPosIndex = csUtils.transformWorldToIndex(imageData, points[0]);\n      worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n      worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n      worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n\n      let iMin = worldPosIndex[0];\n      let iMax = worldPosIndex[0];\n\n      let jMin = worldPosIndex[1];\n      let jMax = worldPosIndex[1];\n\n      let kMin = worldPosIndex[2];\n      let kMax = worldPosIndex[2];\n\n      for (let j = 1; j < points.length; j++) {\n        const worldPosIndex = csUtils.transformWorldToIndex(\n          imageData,\n          points[j]\n        );\n        worldPosIndex[0] = Math.floor(worldPosIndex[0]);\n        worldPosIndex[1] = Math.floor(worldPosIndex[1]);\n        worldPosIndex[2] = Math.floor(worldPosIndex[2]);\n        iMin = Math.min(iMin, worldPosIndex[0]);\n        iMax = Math.max(iMax, worldPosIndex[0]);\n\n        jMin = Math.min(jMin, worldPosIndex[1]);\n        jMax = Math.max(jMax, worldPosIndex[1]);\n\n        kMin = Math.min(kMin, worldPosIndex[2]);\n        kMax = Math.max(kMax, worldPosIndex[2]);\n      }\n\n      // Expand bounding box\n      const iDelta = 0.01 * (iMax - iMin);\n      const jDelta = 0.01 * (jMax - jMin);\n      const kDelta = 0.01 * (kMax - kMin);\n\n      iMin = Math.floor(iMin - iDelta);\n      iMax = Math.ceil(iMax + iDelta);\n      jMin = Math.floor(jMin - jDelta);\n      jMax = Math.ceil(jMax + jDelta);\n      kMin = Math.floor(kMin - kDelta);\n      kMax = Math.ceil(kMax + kDelta);\n\n      const boundsIJK = [\n        [iMin, iMax],\n        [jMin, jMax],\n        [kMin, kMax],\n      ] as [Types.Point2, Types.Point2, Types.Point2];\n\n      const worldPosEnd = imageData.indexToWorld([iMax, jMax, kMax]);\n      const canvasPosEnd = viewport.worldToCanvas(worldPosEnd);\n\n      let curRow = 0;\n      let intersections = [];\n      let intersectionCounter = 0;\n      const pointsInShape = pointInShapeCallback(\n        imageData,\n        (pointLPS, pointIJK) => {\n          let result = true;\n          const point = viewport.worldToCanvas(pointLPS);\n          if (point[1] != curRow) {\n            intersectionCounter = 0;\n            curRow = point[1];\n            intersections = getIntersectionCoordinatesWithPolyline(\n              canvasCoordinates,\n              point,\n              [canvasPosEnd[0], point[1]]\n            );\n            intersections.sort(\n              (function (index) {\n                return function (a, b) {\n                  return a[index] === b[index]\n                    ? 0\n                    : a[index] < b[index]\n                    ? -1\n                    : 1;\n                };\n              })(0)\n            );\n          }\n          if (intersections.length && point[0] > intersections[0][0]) {\n            intersections.shift();\n            intersectionCounter++;\n          }\n          if (intersectionCounter % 2 === 0) {\n            result = false;\n          }\n          return result;\n        },\n        this.configuration.statsCalculator.statsCallback,\n        boundsIJK\n      );\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      const modalityUnit = getModalityUnit(\n        metadata.Modality,\n        annotation.metadata.referencedImageId,\n        modalityUnitOptions\n      );\n\n      const stats = this.configuration.statsCalculator.getStatistics();\n\n      cachedStats[targetId] = {\n        Modality: metadata.Modality,\n        area,\n        mean: stats[1]?.value,\n        max: stats[0]?.value,\n        stdDev: stats[3]?.value,\n        statsArray: stats,\n        pointsInShape: pointsInShape,\n        areaUnit: getCalibratedAreaUnits(null, image),\n        modalityUnit,\n      };\n    }\n\n    this.triggerAnnotationModified(annotation, enabledElement);\n\n    annotation.invalidated = false;\n\n    return cachedStats;\n  };\n\n  _renderStats = (annotation, viewport, enabledElement, svgDrawingHelper) => {\n    const data = annotation.data;\n    const targetId = this.getTargetId(viewport);\n\n    const styleSpecifier: AnnotationStyle.StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n    if (!options.visibility) {\n      return;\n    }\n\n    const textLines = this.configuration.getTextLines(data, targetId);\n    if (!textLines || textLines.length === 0) {\n      return;\n    }\n\n    const canvasCoordinates = data.polyline.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n    if (!data.handles.textBox.hasMoved) {\n      const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n      data.handles.textBox.worldPosition =\n        viewport.canvasToWorld(canvasTextBoxCoords);\n    }\n\n    const textBoxPosition = viewport.worldToCanvas(\n      data.handles.textBox.worldPosition\n    );\n\n    const textBoxUID = '1';\n    const boundingBox = drawLinkedTextBox(\n      svgDrawingHelper,\n      annotation.annotationUID ?? '',\n      textBoxUID,\n      textLines,\n      textBoxPosition,\n      canvasCoordinates,\n      {},\n      options\n    );\n\n    const { x: left, y: top, width, height } = boundingBox;\n\n    data.handles.textBox.worldBoundingBox = {\n      topLeft: viewport.canvasToWorld([left, top]),\n      topRight: viewport.canvasToWorld([left + width, top]),\n      bottomLeft: viewport.canvasToWorld([left, top + height]),\n      bottomRight: viewport.canvasToWorld([left + width, top + height]),\n    };\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n    cachedVolumeStats;\n\n  const textLines: string[] = [];\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n    textLines.push(areaLine);\n  }\n\n  if (mean) {\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  }\n\n  if (max) {\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  }\n\n  if (stdDev) {\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nPlanarFreehandROITool.toolName = 'PlanarFreehandROI';\nexport default PlanarFreehandROITool;\n","import { Types } from '@cornerstonejs/core';\nimport { PlanarFreehandROITool } from '../../tools';\nimport { ToolGroupManager } from '../../store';\nimport { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport interpolateSegmentPoints from './interpolation/interpolateSegmentPoints';\n\nfunction shouldPreventInterpolation(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation,\n  knotsRatioPercentage: number\n): boolean {\n  if (!annotation?.data?.polyline || knotsRatioPercentage <= 0) {\n    return true;\n  }\n\n  if (!enabledElement.viewport) {\n    return true;\n  }\n\n  const { renderingEngineId, viewportId, FrameOfReferenceUID } = enabledElement;\n  const toolGroup = ToolGroupManager.getToolGroupForViewport(\n    viewportId,\n    renderingEngineId\n  );\n\n  if (annotation.metadata.FrameOfReferenceUID !== FrameOfReferenceUID) {\n    return true;\n  }\n\n  if (!toolGroup) {\n    return true;\n  }\n\n  const toolInstance = toolGroup.getToolInstance(annotation.metadata.toolName);\n\n  // strategy to prevent non PlanarFreehandTool\n  if (!(toolInstance instanceof PlanarFreehandROITool)) {\n    return true;\n  }\n\n  return (\n    toolInstance.isDrawing ||\n    toolInstance.isEditingOpen ||\n    toolInstance.isEditingClosed\n  );\n}\n/**\n * Interpolates a given annotation from a given enabledElement.\n * It mutates annotation param.\n * The param knotsRatioPercentage defines the percentage of points to be considered as knots on the interpolation process.\n * Interpolation will be skipped in case: annotation is not present in enabledElement (or there is no toolGroup associated with it), related tool is being modified.\n */\nexport default function interpolateAnnotation(\n  enabledElement: Types.IEnabledElement,\n  annotation: PlanarFreehandROIAnnotation,\n  knotsRatioPercentage: number\n): boolean {\n  // prevent running while there is any tool annotation being modified\n  if (\n    shouldPreventInterpolation(enabledElement, annotation, knotsRatioPercentage)\n  ) {\n    return false;\n  }\n\n  const { viewport } = enabledElement;\n  // use only 2 dimensions on interpolation (what visually matters),\n  // otherwise a 3d interpolation might have a totally different output as it consider one more dimension.\n  const canvasPoints = annotation.data.polyline.map(viewport.worldToCanvas);\n  const interpolatedCanvasPoints = <Types.Point2[]>(\n    interpolateSegmentPoints(\n      canvasPoints,\n      0,\n      canvasPoints.length,\n      knotsRatioPercentage\n    )\n  );\n\n  if (interpolatedCanvasPoints === canvasPoints) {\n    return false;\n  }\n\n  annotation.data.polyline = interpolatedCanvasPoints.map(\n    viewport.canvasToWorld\n  );\n\n  return true;\n}\n","import interpolateAnnotation from './interpolateAnnotation';\n\nexport default {\n  interpolateAnnotation,\n};\n\nexport { interpolateAnnotation };\n","import { getEnabledElement } from '@cornerstonejs/core';\n\nconst state: Record<number, any> = {};\n\nfunction addToolState(element: HTMLDivElement, data): void {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  state[viewportId] = data;\n}\n\nfunction getToolState(element: HTMLDivElement): any {\n  const enabledElement = getEnabledElement(element);\n  const { viewportId } = enabledElement;\n  return state[viewportId];\n}\n\nexport { addToolState, getToolState };\n","import { getEnabledElement, StackViewport, Enums } from '@cornerstonejs/core';\nimport { getToolState } from './state';\n\nexport const requestType = Enums.RequestType.Prefetch;\nexport const priority = 0;\n\nexport function range(lowEnd, highEnd) {\n  // Javascript version of Python's range function\n  // http://stackoverflow.com/questions/3895478/does-javascript-have-a-method-like-range-to-generate-an-array-based-on-suppl\n  lowEnd = Math.round(lowEnd) || 0;\n  highEnd = Math.round(highEnd) || 0;\n\n  const arr = [];\n  let c = highEnd - lowEnd + 1;\n\n  if (c <= 0) {\n    return arr;\n  }\n\n  while (c--) {\n    arr[c] = highEnd--;\n  }\n\n  return arr;\n}\n\nexport function nearestIndex(arr, x) {\n  // Return index of nearest values in array\n  // http://stackoverflow.com/questions/25854212/return-index-of-nearest-values-in-an-array\n  let low = 0;\n  let high = arr.length - 1;\n\n  arr.forEach((v, idx) => {\n    if (v < x) {\n      low = Math.max(idx, low);\n    } else if (v > x) {\n      high = Math.min(idx, high);\n    }\n  });\n\n  return { low, high };\n}\n\nexport function getStackData(element) {\n  const enabledElement = getEnabledElement(element);\n\n  if (!enabledElement) {\n    // Can be not valid if the data is changed part way through prefetch\n    return null;\n  }\n\n  const { viewport } = enabledElement;\n\n  if (!(viewport instanceof StackViewport)) {\n    throw new Error(\n      'stackPrefetch: element must be a StackViewport, VolumeViewport stackPrefetch not yet implemented'\n    );\n  }\n\n  return {\n    currentImageIdIndex: viewport.getCurrentImageIdIndex(),\n    imageIds: viewport.getImageIds(),\n  };\n}\n\nexport function getPromiseRemovedHandler(element) {\n  return function (e) {\n    const eventData = e.detail;\n\n    // When an imagePromise has been pushed out of the cache, re-add its index\n    // It to the indicesToRequest list so that it will be retrieved later if the\n    // CurrentImageIdIndex is changed to an image nearby\n    let stackData;\n\n    try {\n      // It will throw an exception in some cases (eg: thumbnails)\n      stackData = getStackData(element);\n    } catch (error) {\n      return;\n    }\n\n    if (!stackData || !stackData.imageIds || stackData.imageIds.length === 0) {\n      return;\n    }\n\n    const stack = stackData;\n    const imageIdIndex = stack.imageIds.indexOf(eventData.imageId);\n\n    // Make sure the image that was removed is actually in this stack\n    // Before adding it to the indicesToRequest array\n    if (imageIdIndex < 0) {\n      return;\n    }\n\n    const stackPrefetchData = getToolState(element);\n\n    if (\n      !stackPrefetchData ||\n      !stackPrefetchData.data ||\n      !stackPrefetchData.data.length\n    ) {\n      return;\n    }\n\n    stackPrefetchData.indicesToRequest.push(imageIdIndex);\n  };\n}\n\nexport const clearFromImageIds = (stack) => {\n  const imageIdSet = new Set<string>(stack.imageIds);\n  return (requestDetails) =>\n    requestDetails.type !== requestType ||\n    !imageIdSet.has(requestDetails.additionalDetails.imageId);\n};\n","import {\n  imageLoader,\n  Enums,\n  eventTarget,\n  imageLoadPoolManager,\n  cache,\n  getConfiguration as getCoreConfiguration,\n} from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport {\n  getStackData,\n  requestType,\n  priority,\n  getPromiseRemovedHandler,\n  nearestIndex,\n  range,\n} from './stackPrefetchUtils';\n\nlet configuration = {\n  maxImagesToPrefetch: Infinity,\n  // Preserving the existing pool should be the default behaviour, as there might\n  // be a volume of the same series already being loaded in the pool, and we don't want\n  // to cancel it middle of the way when the other stack viewport mounts. Worst case scenario\n  // there will be a few extra images in the pool but by the time that their turn comes\n  // we will have already loaded the volume and it will get read from the CACHE,\n  // so who cares\n  preserveExistingPool: true,\n};\n\nlet resetPrefetchTimeout;\nconst resetPrefetchDelay = 10;\n\nfunction prefetch(element) {\n  // Get the stackPrefetch tool data\n  const stackPrefetchData = getToolState(element);\n\n  if (!stackPrefetchData) {\n    return;\n  }\n\n  const stackPrefetch = stackPrefetchData || {};\n  const stack = getStackData(element);\n\n  if (!stack?.imageIds?.length) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  const { currentImageIdIndex } = stack;\n\n  // If all the requests are complete, disable the stackPrefetch tool\n  stackPrefetch.enabled &&= stackPrefetch.indicesToRequest?.length;\n\n  // Make sure the tool is still enabled\n  if (stackPrefetch.enabled === false) {\n    return;\n  }\n\n  // Remove an imageIdIndex from the list of indices to request\n  // This fires when the individual image loading deferred is resolved\n  function removeFromList(imageIdIndex) {\n    const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n\n    if (index > -1) {\n      // Don't remove last element if imageIdIndex not found\n      stackPrefetch.indicesToRequest.splice(index, 1);\n    }\n  }\n\n  // Remove all already cached images from the\n  // IndicesToRequest array\n  stackPrefetchData.indicesToRequest.sort((a, b) => a - b);\n  const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n\n  indicesToRequestCopy.forEach(function (imageIdIndex) {\n    const imageId = stack.imageIds[imageIdIndex];\n\n    if (!imageId) {\n      return;\n    }\n\n    const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n    // For nearby objects, ensure the last accessed time is updated\n    // by using getImageLoadObject.\n    // For more distant objects, just check if available, but dont\n    // change the access time.\n    // This allows throwing data that hasn't been accessed and is not\n    // nearby.\n    const imageCached =\n      distance < 6\n        ? cache.getImageLoadObject(imageId)\n        : cache.isLoaded(imageId);\n\n    if (imageCached) {\n      // Already in cache\n      removeFromList(imageIdIndex);\n    }\n  });\n\n  // Stop here if there are no images left to request\n  // After those in the cache have been removed\n  if (!stackPrefetch.indicesToRequest.length) {\n    return;\n  }\n\n  // Clear the requestPool of prefetch requests, if needed.\n  if (!configuration.preserveExistingPool) {\n    imageLoadPoolManager.clearRequestStack(requestType);\n  }\n\n  // Identify the nearest imageIdIndex to the currentImageIdIndex\n  const nearest = nearestIndex(\n    stackPrefetch.indicesToRequest,\n    stack.currentImageIdIndex\n  );\n\n  let imageId;\n  let nextImageIdIndex;\n  const preventCache = false;\n\n  function doneCallback(image) {\n    console.log('prefetch done: %s', image.imageId);\n    const imageIdIndex = stack.imageIds.indexOf(image.imageId);\n\n    removeFromList(imageIdIndex);\n  }\n\n  // Prefetch images around the current image (before and after)\n  let lowerIndex = nearest.low;\n  let higherIndex = nearest.high;\n  const imageIdsToPrefetch = [];\n\n  while (\n    lowerIndex >= 0 ||\n    higherIndex < stackPrefetch.indicesToRequest.length\n  ) {\n    const currentIndex = stack.currentImageIdIndex;\n    const shouldSkipLower =\n      currentIndex - stackPrefetch.indicesToRequest[lowerIndex] >\n      configuration.maxImagesToPrefetch;\n    const shouldSkipHigher =\n      stackPrefetch.indicesToRequest[higherIndex] - currentIndex >\n      configuration.maxImagesToPrefetch;\n\n    const shouldLoadLower = !shouldSkipLower && lowerIndex >= 0;\n    const shouldLoadHigher =\n      !shouldSkipHigher && higherIndex < stackPrefetch.indicesToRequest.length;\n\n    if (!shouldLoadHigher && !shouldLoadLower) {\n      break;\n    }\n\n    if (shouldLoadLower) {\n      nextImageIdIndex = stackPrefetch.indicesToRequest[lowerIndex--];\n      imageId = stack.imageIds[nextImageIdIndex];\n      imageIdsToPrefetch.push(imageId);\n    }\n\n    if (shouldLoadHigher) {\n      nextImageIdIndex = stackPrefetch.indicesToRequest[higherIndex++];\n      imageId = stack.imageIds[nextImageIdIndex];\n      imageIdsToPrefetch.push(imageId);\n    }\n  }\n\n  const requestFn = (imageId, options) =>\n    imageLoader.loadAndCacheImage(imageId, options);\n\n  const { useNorm16Texture } = getCoreConfiguration().rendering;\n\n  imageIdsToPrefetch.forEach((imageId) => {\n    // IMPORTANT: Request type should be passed if not the 'interaction'\n    // highest priority will be used for the request type in the imageRetrievalPool\n    const options = {\n      targetBuffer: {\n        type: useNorm16Texture ? undefined : 'Float32Array',\n      },\n      preScale: {\n        enabled: true,\n      },\n      requestType,\n    };\n\n    imageLoadPoolManager.addRequest(\n      requestFn.bind(null, imageId, options),\n      requestType,\n      // Additional details\n      {\n        imageId,\n      },\n      priority\n      // addToBeginning\n    );\n  });\n}\n\nfunction onImageUpdated(e) {\n  // Start prefetching again (after a delay)\n  // When the user has scrolled to a new image\n  clearTimeout(resetPrefetchTimeout);\n  resetPrefetchTimeout = setTimeout(function () {\n    const element = e.target;\n\n    // If playClip is enabled and the user loads a different series in the viewport\n    // An exception will be thrown because the element will not be enabled anymore\n    try {\n      prefetch(element);\n    } catch (error) {\n      return;\n    }\n  }, resetPrefetchDelay);\n}\n\nfunction enable(element) {\n  const stack = getStackData(element);\n\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  // Use the currentImageIdIndex from the stack as the initialImageIdIndex\n  const stackPrefetchData = {\n    indicesToRequest: range(0, stack.imageIds.length - 1),\n    enabled: true,\n    direction: 1,\n  };\n\n  // Remove the currentImageIdIndex from the list to request\n  const indexOfCurrentImage = stackPrefetchData.indicesToRequest.indexOf(\n    stack.currentImageIdIndex\n  );\n\n  stackPrefetchData.indicesToRequest.splice(indexOfCurrentImage, 1);\n\n  addToolState(element, stackPrefetchData);\n\n  prefetch(element);\n\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n  element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n  eventTarget.addEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n}\n\nfunction disable(element) {\n  clearTimeout(resetPrefetchTimeout);\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n\n  const stackPrefetchData = getToolState(element);\n  // If there is actually something to disable, disable it\n\n  if (stackPrefetchData && stackPrefetchData.indicesToRequest.length) {\n    stackPrefetchData.enabled = false;\n\n    // Clear current prefetch requests from the requestPool\n    imageLoadPoolManager.clearRequestStack(requestType);\n  }\n}\n\nfunction getConfiguration() {\n  return configuration;\n}\n\nfunction setConfiguration(config) {\n  configuration = config;\n}\n\nconst stackPrefetch = { enable, disable, getConfiguration, setConfiguration };\n\nexport default stackPrefetch;\n","import {\n  imageLoader,\n  Enums,\n  eventTarget,\n  imageLoadPoolManager,\n  cache,\n  getConfiguration as getCoreConfiguration,\n} from '@cornerstonejs/core';\nimport { addToolState, getToolState } from './state';\nimport {\n  getStackData,\n  requestType,\n  priority,\n  clearFromImageIds,\n  getPromiseRemovedHandler,\n} from './stackPrefetchUtils';\nimport roundNumber from '../roundNumber';\n\nlet configuration = {\n  maxImagesToPrefetch: Infinity,\n  // Fetch up to 2 image before and after\n  minBefore: 2,\n  maxAfter: 2,\n  // Increment the cache size by 10 images\n  directionExtraImages: 10,\n  preserveExistingPool: false,\n};\n\nlet resetPrefetchTimeout;\n// Starting the prefetch quickly isn't an issue as the main image is already being\n// loaded, so a 5 ms prefetch delay is fine\nconst resetPrefetchDelay = 5;\n\n/**\n * Call this to enable stack context sensitive prefetch.  Should be called\n * before stack data is set in order to start prefetch after load first image.\n * This will add a STACK_NEW_IMAGE to detect when a new image is displayed, and then\n * update the prefetch stack.  The context sensitive prefetch reacts to the\n * initial display, or significant moves, the already loaded images, the\n * cache size and the direction of navigation.  The behaviour is:\n *\n * 1. On navigating to a new image initially, or one that is at a different position:\n *  * Fetch the next/previous 2 images\n * 2. If the user is navigating forward/backward by less than 5 images, then\n *  * Prefetch additional images in the direction of navigation, up to 100\n * 3. If all the images in a given prefetch have completed, then:\n *  * Use the last prefetched image size as an image size for the stack\n *  * Fetch up to 1/4 of the cache size images near the current image\n *\n * This is designed to:\n *   * Get nearby images immediately so that they are available for navigation\n *     * Under the assumption that users might click and view an image, then\n *       navigate to next/previous image to see the exact image they want\n *   * Not interfere with loading other viewports if they are still loading\n *     * Load priority is prefetch, and minimal images are requested initially\n *   * Load an entire series if it will fit in memory\n *     * Allows navigating to other parts of the series and display images immediately\n *   * Have images available for CINE/navigation in one direction even when\n *     there is more image data than will fit in memory.\n *     * Up to 100 images in the direction of travel will be prefetched\n *\n * @param element - to prefetch on\n */\nconst enable = (element): void => {\n  const stack = getStackData(element);\n\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  updateToolState(element);\n\n  prefetch(element);\n\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n  element.addEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n  eventTarget.addEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n};\n\nfunction prefetch(element) {\n  const stack = getStackData(element);\n  if (!stack?.imageIds?.length) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  // Get the stackPrefetch tool data\n  const stackPrefetchData = getToolState(element);\n\n  if (!stackPrefetchData) {\n    return;\n  }\n\n  const stackPrefetch = stackPrefetchData || {};\n\n  // If all the requests are complete, disable the stackPrefetch tool\n  stackPrefetch.enabled &&= stackPrefetch.indicesToRequest?.length;\n\n  // Make sure the tool is still enabled\n  if (stackPrefetch.enabled === false) {\n    return;\n  }\n\n  // Remove an imageIdIndex from the list of indices to request\n  // This fires when the individual image loading deferred is resolved\n  function removeFromList(imageIdIndex) {\n    const index = stackPrefetch.indicesToRequest.indexOf(imageIdIndex);\n\n    if (index > -1) {\n      // Don't remove last element if imageIdIndex not found\n      stackPrefetch.indicesToRequest.splice(index, 1);\n    }\n  }\n\n  // Remove all already cached images from the\n  // IndicesToRequest array.\n  const indicesToRequestCopy = stackPrefetch.indicesToRequest.slice();\n  const { currentImageIdIndex } = stack;\n\n  indicesToRequestCopy.forEach((imageIdIndex) => {\n    const imageId = stack.imageIds[imageIdIndex];\n\n    if (!imageId) {\n      return;\n    }\n\n    const distance = Math.abs(currentImageIdIndex - imageIdIndex);\n    // For nearby objects, ensure the last accessed time is updated\n    // by using getImageLoadObject.\n    // For more distant objects, just check if available, but dont\n    // change the access time.\n    // This allows throwing data that hasn't been accessed and is not\n    // nearby.\n    const imageCached =\n      distance < 6\n        ? cache.getImageLoadObject(imageId)\n        : cache.isLoaded(imageId);\n\n    if (imageCached) {\n      // Already in cache\n      removeFromList(imageIdIndex);\n    }\n  });\n\n  // Stop here if there are no images left to request\n  // After those in the cache have been removed\n  if (!stackPrefetch.indicesToRequest.length) {\n    return;\n  }\n\n  // Clear the requestPool of prefetch requests, if needed.\n  if (!configuration.preserveExistingPool) {\n    imageLoadPoolManager.filterRequests(clearFromImageIds(stack));\n  }\n\n  function doneCallback(imageId) {\n    const imageIdIndex = stack.imageIds.indexOf(imageId);\n\n    removeFromList(imageIdIndex);\n    const image = cache.getCachedImageBasedOnImageURI(imageId);\n    const { stats } = stackPrefetch;\n    const decodeTimeInMS = image?.image?.decodeTimeInMS || 0;\n    if (decodeTimeInMS) {\n      stats.imageIds.set(imageId, decodeTimeInMS);\n      stats.decodeTimeInMS += decodeTimeInMS;\n      const loadTimeInMS = image?.image?.loadTimeInMS || 0;\n      stats.loadTimeInMS += loadTimeInMS;\n    }\n\n    if (!stackPrefetch.indicesToRequest.length) {\n      if (image?.sizeInBytes) {\n        const { sizeInBytes } = image;\n        const usage = cache.getMaxCacheSize() / 4 / sizeInBytes;\n        if (!stackPrefetch.cacheFill) {\n          stats.initialTime = Date.now() - stats.start;\n          stats.initialSize = stats.imageIds.size;\n          updateToolState(element, usage);\n          prefetch(element);\n        } else if (stats.imageIds.size) {\n          stats.fillTime = Date.now() - stats.start;\n          const { size } = stats.imageIds;\n          stats.fillSize = size;\n          console.log(\n            'Done cache fill',\n            stats.fillTime,\n            'ms',\n            size,\n            'items',\n            'average total time',\n            roundNumber(stats.fillTime / size),\n            'ms',\n            'average load',\n            roundNumber(stats.loadTimeInMS / size),\n            'ms',\n            'average decode',\n            roundNumber(stats.decodeTimeInMS / size),\n            'ms'\n          );\n        }\n      }\n    }\n  }\n\n  const requestFn = (imageId, options) =>\n    imageLoader\n      .loadAndCacheImage(imageId, options)\n      .then(() => doneCallback(imageId));\n\n  const { useNorm16Texture } = getCoreConfiguration().rendering;\n\n  indicesToRequestCopy.forEach((imageIdIndex) => {\n    const imageId = stack.imageIds[imageIdIndex];\n    // IMPORTANT: Request type should be passed if not the 'interaction'\n    // highest priority will be used for the request type in the imageRetrievalPool\n    const options = {\n      targetBuffer: {\n        type: useNorm16Texture ? undefined : 'Float32Array',\n      },\n      preScale: {\n        enabled: true,\n      },\n      requestType,\n    };\n\n    imageLoadPoolManager.addRequest(\n      requestFn.bind(null, imageId, options),\n      requestType,\n      // Additional details\n      {\n        imageId,\n      },\n      priority\n      // addToBeginning\n    );\n  });\n}\n\nfunction onImageUpdated(e) {\n  // Start prefetching again (after a delay)\n  // When the user has scrolled to a new image\n  clearTimeout(resetPrefetchTimeout);\n  resetPrefetchTimeout = setTimeout(function () {\n    const element = e.target;\n\n    // If playClip is enabled and the user loads a different series in the viewport\n    // An exception will be thrown because the element will not be enabled anymore\n    try {\n      updateToolState(element);\n      prefetch(element);\n    } catch (error) {\n      return;\n    }\n  }, resetPrefetchDelay);\n}\n\n// Not a full signum, but good enough for direction.\nconst signum = (x) => (x < 0 ? -1 : 1);\n\nconst updateToolState = (element, usage?: number) => {\n  const stack = getStackData(element);\n  if (!stack || !stack.imageIds || stack.imageIds.length === 0) {\n    console.warn('CornerstoneTools.stackPrefetch: No images in stack.');\n    return;\n  }\n\n  const { currentImageIdIndex } = stack;\n  let { maxAfter = 2, minBefore = 2 } = configuration;\n  const { directionExtraImages = 10 } = configuration;\n  // Use the currentImageIdIndex from the stack as the initialImageIdIndex\n  const stackPrefetchData = getToolState(element) || {\n    indicesToRequest: [],\n    currentImageIdIndex,\n    stackCount: 0,\n    enabled: true,\n    direction: 1,\n    stats: {\n      start: Date.now(),\n      imageIds: new Map(),\n      decodeTimeInMS: 0,\n      loadTimeInMS: 0,\n      totalBytes: 0,\n    },\n  };\n  const delta = currentImageIdIndex - stackPrefetchData.currentImageIdIndex;\n  stackPrefetchData.direction = signum(delta);\n  stackPrefetchData.currentImageIdIndex = currentImageIdIndex;\n  stackPrefetchData.enabled = true;\n\n  if (stackPrefetchData.stackCount < 100) {\n    stackPrefetchData.stackCount += directionExtraImages;\n  }\n\n  if (Math.abs(delta) > maxAfter || !delta) {\n    // Not incrementing by 1, so stop increasing the data size\n    // TODO - consider reversing the CINE playback\n    stackPrefetchData.stackCount = 0;\n    if (usage) {\n      // The usage of the cache that this stack can use\n      const positionFraction = currentImageIdIndex / stack.imageIds.length;\n      minBefore = Math.ceil(usage * positionFraction);\n      maxAfter = Math.ceil(usage * (1 - positionFraction));\n      stackPrefetchData.cacheFill = true;\n    } else {\n      stackPrefetchData.cacheFill = false;\n    }\n  } else if (delta < 0) {\n    minBefore += stackPrefetchData.stackCount;\n    maxAfter = 0;\n  } else {\n    maxAfter += stackPrefetchData.stackCount;\n    minBefore = 0;\n  }\n\n  const minIndex = Math.max(0, currentImageIdIndex - minBefore);\n\n  const maxIndex = Math.min(\n    stack.imageIds.length - 1,\n    currentImageIdIndex + maxAfter\n  );\n\n  // Order these correctly initially\n  const indicesToRequest = [];\n  for (let i = currentImageIdIndex + 1; i <= maxIndex; i++) {\n    indicesToRequest.push(i);\n  }\n  for (let i = currentImageIdIndex - 1; i >= minIndex; i--) {\n    indicesToRequest.push(i);\n  }\n  stackPrefetchData.indicesToRequest = indicesToRequest;\n\n  addToolState(element, stackPrefetchData);\n};\n\nfunction disable(element) {\n  clearTimeout(resetPrefetchTimeout);\n  element.removeEventListener(Enums.Events.STACK_NEW_IMAGE, onImageUpdated);\n\n  const promiseRemovedHandler = getPromiseRemovedHandler(element);\n\n  eventTarget.removeEventListener(\n    Enums.Events.IMAGE_CACHE_IMAGE_REMOVED,\n    promiseRemovedHandler\n  );\n\n  const stackPrefetchData = getToolState(element);\n  // If there is actually something to disable, disable it\n\n  if (stackPrefetchData && stackPrefetchData.data.length) {\n    stackPrefetchData.enabled = false;\n    // Don't worry about clearing the requests - there aren't that many too be bothersome\n  }\n}\n\nfunction getConfiguration() {\n  return configuration;\n}\n\nfunction setConfiguration(config) {\n  configuration = config;\n}\n\nconst stackContextPrefetch = {\n  enable,\n  disable,\n  getConfiguration,\n  setConfiguration,\n};\n\nexport default stackContextPrefetch;\n","import { VolumeViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { vec3 } from 'gl-matrix';\n\n// Todo: merge this utility functionality with Crosshair _jump\n/**\n * Uses the viewport's current camera to jump to a specific world coordinate\n * @param enabledElement - enabled element\n * @param jumpWorld - location in the world to jump to\n * @returns True if successful\n */\nexport default function jumpToWorld(\n  viewport: Types.IVolumeViewport,\n  jumpWorld: Types.Point3\n): true | undefined {\n  // if not instance of volumeViewport, return\n  if (!(viewport instanceof VolumeViewport)) {\n    return;\n  }\n\n  const { focalPoint } = viewport.getCamera();\n\n  const delta: Types.Point3 = [0, 0, 0];\n  vec3.sub(delta, jumpWorld, focalPoint);\n\n  _applyShift(viewport, delta);\n\n  return true;\n}\n\nfunction _applyShift(viewport, delta) {\n  const camera = viewport.getCamera();\n  const normal = camera.viewPlaneNormal;\n\n  const dotProd = vec3.dot(delta, normal);\n  const projectedDelta = vec3.fromValues(normal[0], normal[1], normal[2]);\n\n  vec3.scale(projectedDelta, projectedDelta, dotProd);\n\n  if (\n    Math.abs(projectedDelta[0]) > 1e-3 ||\n    Math.abs(projectedDelta[1]) > 1e-3 ||\n    Math.abs(projectedDelta[2]) > 1e-3\n  ) {\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newPosition: Types.Point3 = [0, 0, 0];\n\n    vec3.add(newFocalPoint, camera.focalPoint, projectedDelta);\n    vec3.add(newPosition, camera.position, projectedDelta);\n\n    viewport.setCamera({\n      focalPoint: newFocalPoint,\n      position: newPosition,\n    });\n    viewport.render();\n  }\n}\n","import { utilities, cache, Types } from '@cornerstonejs/core';\nimport { getVoxelOverlap } from '../segmentation/utilities';\nimport pointInShapeCallback from '../pointInShapeCallback';\n\n/**\n * Gets the scalar data for a series of time points for either a single\n * coordinate or a segmentation mask, it will return the an array of scalar\n * data for a single coordinate or an array of arrays for a segmentation.\n *\n * @param dynamicVolume - 4D volume to compute time point data from\n * @param options - frameNumbers: which frames to use as timepoints, if left\n * blank, gets data timepoints over all frames\n * maskVolumeId: segmentationId to get timepoint data of\n * imageCoordinate: world coordinate to get timepoint data of\n * @returns\n */\nfunction getDataInTime(\n  dynamicVolume: Types.IDynamicImageVolume,\n  options: {\n    frameNumbers?;\n    maskVolumeId?;\n    imageCoordinate?;\n  }\n): number[] | number[][] {\n  let dataInTime;\n\n  // if frameNumbers is not provided, all frames are selected\n  const frames = options.frameNumbers || [\n    ...Array(dynamicVolume.numTimePoints).keys(),\n  ];\n\n  // You only need to provide either maskVolumeId OR imageCoordinate.\n  // Throws error if neither maskVolumeId or imageCoordinate is given,\n  // throws error if BOTH maskVolumeId and imageCoordinate is given\n  if (!options.maskVolumeId && !options.imageCoordinate) {\n    throw new Error(\n      'You should provide either maskVolumeId or imageCoordinate'\n    );\n  }\n\n  if (options.maskVolumeId && options.imageCoordinate) {\n    throw new Error('You can only use one of maskVolumeId or imageCoordinate');\n  }\n\n  if (options.maskVolumeId) {\n    const segmentationVolume = cache.getVolume(options.maskVolumeId);\n\n    const [dataInTime, ijkCoords] = _getTimePointDataMask(\n      frames,\n      dynamicVolume,\n      segmentationVolume\n    );\n\n    return [dataInTime, ijkCoords];\n  }\n\n  if (options.imageCoordinate) {\n    const dataInTime = _getTimePointDataCoordinate(\n      frames,\n      options.imageCoordinate,\n      dynamicVolume\n    );\n\n    return dataInTime;\n  }\n\n  return dataInTime;\n}\n\nfunction _getTimePointDataCoordinate(frames, coordinate, volume) {\n  const { dimensions, imageData } = volume;\n  const index = imageData.worldToIndex(coordinate);\n\n  index[0] = Math.floor(index[0]);\n  index[1] = Math.floor(index[1]);\n  index[2] = Math.floor(index[2]);\n\n  if (!utilities.indexWithinDimensions(index, dimensions)) {\n    throw new Error('outside bounds');\n  }\n\n  // calculate offset for index\n  const yMultiple = dimensions[0];\n  const zMultiple = dimensions[0] * dimensions[1];\n  const allScalarData = volume.getScalarDataArrays();\n  const value = [];\n\n  frames.forEach((frame) => {\n    const activeScalarData = allScalarData[frame];\n    const scalarIndex = index[2] * zMultiple + index[1] * yMultiple + index[0];\n    value.push(activeScalarData[scalarIndex]);\n  });\n\n  return value;\n}\n\nfunction _getTimePointDataMask(frames, dynamicVolume, segmentationVolume) {\n  const { imageData: maskImageData } = segmentationVolume;\n  const segScalarData = segmentationVolume.getScalarData();\n\n  const len = segScalarData.length;\n\n  // Pre-allocate memory for array\n  const nonZeroVoxelIndices = [];\n  nonZeroVoxelIndices.length = len;\n  const ijkCoords = [];\n\n  const dimensions = segmentationVolume.dimensions;\n\n  // Get the index of every non-zero voxel in mask\n  let actualLen = 0;\n  for (let i = 0, len = segScalarData.length; i < len; i++) {\n    if (segScalarData[i] !== 0) {\n      ijkCoords.push([\n        i % dimensions[0],\n        Math.floor((i / dimensions[0]) % dimensions[1]),\n        Math.floor(i / (dimensions[0] * dimensions[1])),\n      ]);\n      nonZeroVoxelIndices[actualLen++] = i;\n    }\n  }\n\n  // Trim the array to actual size\n  nonZeroVoxelIndices.length = actualLen;\n\n  const dynamicVolumeScalarDataArray = dynamicVolume.getScalarDataArrays();\n  const values = [];\n  const isSameVolume =\n    dynamicVolumeScalarDataArray[0].length === len &&\n    JSON.stringify(dynamicVolume.spacing) ===\n      JSON.stringify(segmentationVolume.spacing);\n\n  // if the segmentation mask is the same size as the dynamic volume (one frame)\n  // means we can just return the scalar data for the non-zero voxels\n  if (isSameVolume) {\n    for (let i = 0; i < nonZeroVoxelIndices.length; i++) {\n      const indexValues = [];\n      frames.forEach((frame) => {\n        const activeScalarData = dynamicVolumeScalarDataArray[frame];\n        indexValues.push(activeScalarData[nonZeroVoxelIndices[i]]);\n      });\n      values.push(indexValues);\n    }\n\n    return [values, ijkCoords];\n  }\n\n  // In case that the segmentation mask is not the same size as the dynamic volume (one frame)\n  // then we need to consider each voxel in the segmentation mask and check if it\n  // overlaps with the other volume, and if so we need to average the values of the\n  // overlapping voxels.\n  const callback = ({\n    pointLPS: segPointLPS,\n    value: segValue,\n    pointIJK: segPointIJK,\n  }) => {\n    // see if the value is non-zero\n    if (segValue === 0) {\n      // not interested\n      return;\n    }\n\n    // Then for each non-zero voxel in the segmentation mask, we should\n    // again perform the pointInShapeCallback to run the averaging callback\n    // function to get the average value of the overlapping voxels.\n    const overlapIJKMinMax = getVoxelOverlap(\n      dynamicVolume.imageData,\n      dynamicVolume.dimensions,\n      dynamicVolume.spacing,\n      segPointLPS\n    );\n\n    // count represents the number of voxels of the dynamic volume that represents\n    // one voxel of the segmentation mask\n    let count = 0;\n    const perFrameSum = new Map();\n\n    // Pre-initialize the Map\n    frames.forEach((frame) => perFrameSum.set(frame, 0));\n\n    const averageCallback = ({ index }) => {\n      for (let i = 0; i < frames.length; i++) {\n        const value = dynamicVolumeScalarDataArray[i][index];\n        const frame = frames[i];\n        perFrameSum.set(frame, perFrameSum.get(frame) + value);\n      }\n      count++;\n    };\n\n    pointInShapeCallback(\n      dynamicVolume.imageData,\n      () => true,\n      averageCallback,\n      overlapIJKMinMax\n    );\n\n    // average the values\n    const averageValues = [];\n    perFrameSum.forEach((sum) => {\n      averageValues.push(sum / count);\n    });\n\n    ijkCoords.push(segPointIJK);\n    values.push(averageValues);\n  };\n\n  // Since we have the non-zero voxel indices of the segmentation mask,\n  // we theoretically can use them, however, we kind of need to compute the\n  // pointLPS for each of the non-zero voxel indices, which is a bit of a pain.\n  // Todo: consider using the nonZeroVoxelIndices to compute the pointLPS\n  pointInShapeCallback(maskImageData, () => true, callback);\n\n  return [values, ijkCoords];\n}\n\nexport default getDataInTime;\n","import { Enums, Types } from '@cornerstonejs/core';\n\n/**\n * Gets the scalar data for a series of time frames from a 4D volume, returns an\n * array of scalar data after performing AVERAGE, SUM or SUBTRACT to be used to\n * create a 3D volume\n *\n * @param dynamicVolume4D - volume to compute time frame data from\n * @param operation - operation to perform on time frame data, operations include\n * SUM, AVERAGE, and SUBTRACT (can only be used with 2 time frames provided)\n * @param frameNumbers - an array of frame indices to perform the operation on, if\n * left empty, all frames will be used\n * @returns\n */\nfunction generateImageFromTimeData(\n  dynamicVolume: Types.IDynamicImageVolume,\n  operation: string,\n  frameNumbers?: number[]\n) {\n  // If no time frames provided, use all time frames\n  const frames = frameNumbers || [...Array(dynamicVolume.numTimePoints).keys()];\n  const numFrames = frames.length;\n\n  if (frames.length <= 1) {\n    throw new Error('Please provide two or more time points');\n  }\n\n  // Gets scalar data for all time frames\n  const typedArrays = dynamicVolume.getScalarDataArrays();\n\n  const arrayLength = typedArrays[0].length;\n  const finalArray = new Float32Array(arrayLength);\n\n  if (operation === Enums.DynamicOperatorType.SUM) {\n    for (let i = 0; i < numFrames; i++) {\n      const currentArray = typedArrays[frames[i]];\n      for (let j = 0; j < arrayLength; j++) {\n        finalArray[j] += currentArray[j];\n      }\n    }\n    return finalArray;\n  }\n\n  if (operation === Enums.DynamicOperatorType.SUBTRACT) {\n    if (frames.length > 2) {\n      throw new Error('Please provide only 2 time points for subtraction.');\n    }\n    for (let j = 0; j < arrayLength; j++) {\n      finalArray[j] += typedArrays[frames[0]][j] - typedArrays[frames[1]][j];\n    }\n    return finalArray;\n  }\n\n  if (operation === Enums.DynamicOperatorType.AVERAGE) {\n    for (let i = 0; i < numFrames; i++) {\n      const currentArray = typedArrays[frames[i]];\n      for (let j = 0; j < arrayLength; j++) {\n        finalArray[j] += currentArray[j];\n      }\n    }\n    for (let k = 0; k < arrayLength; k++) {\n      finalArray[k] = finalArray[k] / numFrames;\n    }\n    return finalArray;\n  }\n}\n\nexport default generateImageFromTimeData;\n","import vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\n\n/**\n * Gets a point from an array of numbers given its index\n * @param points array of number, each point defined by three consecutive numbers\n * @param idx index of the point to retrieve\n * @returns\n */\nexport function getPoint(points, idx) {\n  if (idx < points.length / 3) {\n    return [points[idx * 3], points[idx * 3 + 1], points[idx * 3 + 2]];\n  }\n}\n\n/**\n * Extract contour point sets from the outline of a poly data actor\n * @param polyData - vtk polyData\n * @returns\n */\nexport function getPolyDataPointIndexes(polyData: vtkPolyData) {\n  const linesData = polyData.getLines().getData();\n  let idx = 0;\n  const lineSegments = new Map<number, number[]>();\n\n  // Populate lineSegments map\n  while (idx < linesData.length) {\n    const segmentSize = linesData[idx++];\n    const segment = [];\n    for (let i = 0; i < segmentSize; i++) {\n      segment.push(linesData[idx + i]);\n    }\n    lineSegments.set(segment[0], segment);\n    idx += segmentSize;\n  }\n\n  const contours = [];\n\n  // Function to find an available starting point\n  const findStartingPoint = (map) => {\n    for (const [key, value] of map.entries()) {\n      if (value !== undefined) {\n        return key;\n      }\n    }\n    return -1;\n  };\n\n  // Build contours\n  let startPoint = findStartingPoint(lineSegments);\n  while (startPoint !== -1) {\n    const contour = [startPoint];\n    while (lineSegments.has(startPoint)) {\n      const nextPoint = lineSegments.get(startPoint)[1];\n      if (lineSegments.has(nextPoint)) {\n        contour.push(nextPoint);\n      }\n      lineSegments.delete(startPoint);\n      startPoint = nextPoint;\n    }\n    contours.push(contour);\n    startPoint = findStartingPoint(lineSegments);\n  }\n\n  return contours.length ? contours : undefined;\n}\n\n/**\n * Extract contour points from a poly data object\n * @param polyData - vtk polyData\n * @returns\n */\nexport function getPolyDataPoints(polyData: vtkPolyData) {\n  const contoursIndexes = getPolyDataPointIndexes(polyData);\n  if (!contoursIndexes) {\n    return;\n  }\n\n  const rawPointsData = polyData.getPoints().getData();\n  return contoursIndexes.map((contourIndexes) =>\n    contourIndexes.map((index) => getPoint(rawPointsData, index))\n  );\n}\n","/**\n * Specify the position of the text/ticks.\n * Left/Right are the valid options for a vertical colorbars and Top/Bottom\n * for the horizontal ones.\n */\nexport enum ColorbarRangeTextPosition {\n  Top = 'top',\n  Left = 'left',\n  Bottom = 'bottom',\n  Right = 'right',\n}\n","import type { ColorbarImageRange } from '../types/ColorbarImageRange';\n\nconst isRangeValid = (range: ColorbarImageRange) => {\n  return range && range.upper > range.lower;\n};\n\nexport { isRangeValid as default, isRangeValid };\n","import type { ColorbarImageRange } from '../types/ColorbarImageRange';\n\nconst areColorbarRangesEqual = (\n  a: ColorbarImageRange,\n  b: ColorbarImageRange\n) => {\n  return !!a && !!b && a.lower === b.lower && a.upper === b.upper;\n};\n\nexport { areColorbarRangesEqual as default, areColorbarRangesEqual };\n","import type { ColorbarSize } from '../types/ColorbarSize';\n\nconst isColorbarSizeValid = (size: ColorbarSize) => {\n  return !!size && size.width > 0 && size.height > 0;\n};\n\nexport { isColorbarSizeValid as default, isColorbarSizeValid };\n","import type { ColorbarSize } from '../types/ColorbarSize';\n\nconst areColorbarSizesEqual = (a: ColorbarSize, b: ColorbarSize) => {\n  return !!a && !!b && a.width === b.width && a.height === b.height;\n};\n\nexport { areColorbarSizesEqual as default, areColorbarSizesEqual };\n","import { IColorMapPreset } from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport { utilities } from '@cornerstonejs/core';\nimport interpolateVec3 from '../../math/vec3/interpolateVec3';\nimport { ColorbarCanvasProps } from './types/ColorbarCanvasProps';\nimport type { ColorbarImageRange, ColorbarVOIRange } from './types';\nimport type { ColorbarSize } from './types/ColorbarSize';\nimport {\n  isRangeValid,\n  areColorbarRangesEqual,\n  isColorbarSizeValid,\n  areColorbarSizesEqual,\n} from './common';\n\nconst { clamp } = utilities;\n\n/**\n * Canvas referenced by the color bar where the colormap is rendered. It may\n * show the full image range or only the VOI range.\n */\nclass ColorbarCanvas {\n  private _canvas: HTMLCanvasElement;\n  private _imageRange: ColorbarImageRange;\n  private _voiRange: ColorbarVOIRange;\n  private _colormap: IColorMapPreset;\n  private _showFullImageRange: boolean;\n\n  constructor(props: ColorbarCanvasProps) {\n    ColorbarCanvas.validateProps(props);\n\n    const {\n      colormap,\n      size = { width: 20, height: 100 },\n      imageRange = { lower: 0, upper: 1 },\n      voiRange = { lower: 0, upper: 1 },\n      container,\n      showFullPixelValueRange = false,\n    } = props;\n\n    this._colormap = colormap;\n    this._imageRange = imageRange;\n    this._voiRange = voiRange;\n    this._showFullImageRange = showFullPixelValueRange;\n    this._canvas = this._createRootElement(size);\n\n    if (container) {\n      this.appendTo(container);\n    }\n  }\n\n  public get colormap(): IColorMapPreset {\n    return this._colormap;\n  }\n\n  public set colormap(colormap: IColorMapPreset) {\n    this._colormap = colormap;\n    this.render();\n  }\n\n  public get size(): ColorbarSize {\n    const { width, height } = this._canvas;\n    return { width, height };\n  }\n\n  public set size(size: ColorbarSize) {\n    const { _canvas: canvas } = this;\n\n    if (!isColorbarSizeValid(size) || areColorbarSizesEqual(canvas, size)) {\n      return;\n    }\n\n    this._setCanvasSize(canvas, size);\n    this.render();\n  }\n\n  public get imageRange(): ColorbarImageRange {\n    return { ...this._imageRange };\n  }\n\n  public set imageRange(imageRange: ColorbarImageRange) {\n    if (\n      !isRangeValid(imageRange) ||\n      areColorbarRangesEqual(imageRange, this._imageRange)\n    ) {\n      return;\n    }\n\n    this._imageRange = imageRange;\n    this.render();\n  }\n\n  public get voiRange(): ColorbarVOIRange {\n    return { ...this._voiRange };\n  }\n\n  public set voiRange(voiRange: ColorbarVOIRange) {\n    if (\n      !isRangeValid(voiRange) ||\n      areColorbarRangesEqual(voiRange, this._voiRange)\n    ) {\n      return;\n    }\n\n    this._voiRange = voiRange;\n    this.render();\n  }\n\n  public get showFullImageRange(): boolean {\n    return this._showFullImageRange;\n  }\n\n  public set showFullImageRange(showFullImageRange: boolean) {\n    if (showFullImageRange === this._showFullImageRange) {\n      return;\n    }\n\n    this._showFullImageRange = showFullImageRange;\n    this.render();\n  }\n\n  public appendTo(container: HTMLElement) {\n    container.appendChild(this._canvas);\n    this.render();\n  }\n\n  public dispose() {\n    const { _canvas: canvas } = this;\n    const { parentElement } = canvas;\n\n    parentElement?.removeChild(canvas);\n  }\n\n  private static validateProps(props: ColorbarCanvasProps) {\n    const { size, imageRange, voiRange } = props;\n\n    if (size && !isColorbarSizeValid(size)) {\n      throw new Error('Invalid \"size\"');\n    }\n\n    if (imageRange && !isRangeValid(imageRange)) {\n      throw new Error('Invalid \"imageRange\"');\n    }\n\n    if (voiRange && !isRangeValid(voiRange)) {\n      throw new Error('Invalid \"voiRange\"');\n    }\n  }\n\n  private _setCanvasSize(canvas: HTMLCanvasElement, size: ColorbarSize) {\n    const { width, height } = size;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    Object.assign(canvas.style, {\n      width: `${width}px`,\n      height: `${height}px`,\n    });\n  }\n\n  private _createRootElement(size: ColorbarSize) {\n    const canvas = document.createElement('canvas');\n\n    Object.assign(canvas.style, {\n      position: 'absolute',\n      top: '0',\n      left: '0',\n      pointerEvents: 'none',\n      boxSizing: 'border-box',\n    });\n\n    this._setCanvasSize(canvas, size);\n\n    return canvas;\n  }\n\n  private render(): void {\n    if (!this._canvas.isConnected) {\n      return;\n    }\n\n    const { _colormap: colormap } = this;\n    const { RGBPoints: rgbPoints } = colormap;\n    const colorsCount = rgbPoints.length / 4;\n\n    // Returns a color point from rgbPoints. Each point has position, red,\n    // green and blue components which means each point has an offset equal\n    // to `4 * index`\n    const getColorPoint = (index) => {\n      const offset = 4 * index;\n\n      // It can get out of bounds when `voiRange.upper` is smaller than\n      // `imageRange.upper`. It's also checking if is smaller than zero\n      // for safety only because that should never happens.\n      if (index < 0 || index >= colorsCount) {\n        return;\n      }\n\n      return {\n        index,\n        position: rgbPoints[offset],\n        color: [\n          rgbPoints[offset + 1],\n          rgbPoints[offset + 2],\n          rgbPoints[offset + 3],\n        ],\n      };\n    };\n\n    const { width, height } = this._canvas;\n    const canvasContext = this._canvas.getContext('2d');\n    const isHorizontal = width > height;\n    const maxValue = isHorizontal ? width : height;\n    const { _voiRange: voiRange } = this;\n    const range = this._showFullImageRange ? this._imageRange : { ...voiRange };\n\n    const { windowWidth } = utilities.windowLevel.toWindowLevel(\n      voiRange.lower,\n      voiRange.upper\n    );\n\n    let previousColorPoint = undefined;\n    let currentColorPoint = getColorPoint(0);\n\n    // Starts from `range.lower` incrementing by incRawPixelValue on each iteration\n    const incRawPixelValue = (range.upper - range.lower) / (maxValue - 1);\n    let rawPixelValue = range.lower;\n\n    for (let i = 0; i < maxValue; i++) {\n      const tVoiRange = (rawPixelValue - voiRange.lower) / windowWidth;\n\n      // Find the color in a linear way (O(n) complexity).\n      // currentColorPoint shall move to the next color until tVoiRange is smaller\n      // than or equal to next color position.\n      if (currentColorPoint) {\n        for (let i = currentColorPoint.index; i < colorsCount; i++) {\n          if (tVoiRange <= currentColorPoint.position) {\n            break;\n          }\n\n          previousColorPoint = currentColorPoint;\n          currentColorPoint = getColorPoint(i + 1);\n        }\n      }\n\n      let normColor;\n\n      // For:\n      //   - firstColorPoint = getColorPoint(0)\n      //   - secondColorPoint = getColorPoint(1)\n      //   - lastColorPoint = getColorPoint(colorsCount - 1)\n      // Then\n      //   - previousColorPoint shall be undefined when tVoiRange < firstColorPoint.position\n      //   - currentColorPoint shall be undefined when tVoiRange > lastColorPoint.position\n      //   - previousColorPoint and currentColorPoint will be defined when\n      //     currentColorPoint.position is between secondColorPoint.position and\n      //     lastColorPoint.position.\n      if (!previousColorPoint) {\n        normColor = [...currentColorPoint.color];\n      } else if (!currentColorPoint) {\n        normColor = [...previousColorPoint.color];\n      } else {\n        const tColorRange =\n          (tVoiRange - previousColorPoint.position) /\n          (currentColorPoint.position - previousColorPoint.position);\n\n        normColor = interpolateVec3(\n          previousColorPoint.color,\n          currentColorPoint.color,\n          tColorRange\n        );\n      }\n\n      const color = normColor.map((color) =>\n        clamp(Math.round(color * 255), 0, 255)\n      );\n\n      canvasContext.fillStyle = `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\n\n      if (isHorizontal) {\n        canvasContext.fillRect(i, 0, 1, height);\n      } else {\n        canvasContext.fillRect(0, height - i - 1, width, 1);\n      }\n\n      rawPixelValue += incRawPixelValue;\n    }\n  }\n}\n\nexport { ColorbarCanvas as default, ColorbarCanvas };\n","/**\n * Linear interpolation between two vec3.\n * Can be used, for example, to interpolate between two RGB colors.\n * @param a - First vec3\n * @param b - Second vec3\n * @param t - Time \"t\".\n *   - Vector A is returned for values smaller than or equel to 0.\n *   - Vector B is returned for values greater than or equal to 1.\n *   - An interpolation between vectors A and B is returned otherwise.\n * @returns\n */\nconst interpolateVec3 = (a, b, t) => {\n  return [\n    a[0] * (1 - t) + b[0] * t,\n    a[1] * (1 - t) + b[1] * t,\n    a[2] * (1 - t) + b[2] * t,\n  ];\n};\n\nexport { interpolateVec3 as default, interpolateVec3 };\n","import type {\n  ColorbarImageRange,\n  ColorbarVOIRange,\n  ColorbarSize,\n  ColorbarTicksProps,\n} from './types';\nimport {\n  isColorbarSizeValid,\n  isRangeValid,\n  areColorbarRangesEqual,\n  areColorbarSizesEqual,\n} from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\n\nconst DEFAULTS = {\n  FONT: '10px Arial',\n  COLOR: 'white',\n  TICK_SIZE: 5,\n  TICK_WIDTH: 1,\n  TICK_LABEL_MARGIN: 3,\n  MAX_NUM_TICKS: 8,\n\n  // Must start with 1 and end with 10\n  TICKS_STEPS: [1, 2.5, 5, 10],\n};\n\nclass ColorbarTicks {\n  private _canvas: HTMLCanvasElement;\n  private _imageRange: ColorbarImageRange;\n  private _voiRange: ColorbarVOIRange;\n  private _color: string;\n  private _tickSize: number;\n  private _tickWidth: number;\n  private _labelMargin: number;\n  private _maxNumTicks: number;\n  private _rangeTextPosition: ColorbarRangeTextPosition;\n  private _showFullPixelValueRange: boolean;\n  private _font: string;\n\n  constructor(props: ColorbarTicksProps) {\n    ColorbarTicks.validateProps(props);\n\n    const {\n      top = 0,\n      left = 0,\n      size = { width: 20, height: 100 },\n      imageRange = { lower: 0, upper: 1 },\n      voiRange = { lower: 0, upper: 1 },\n      ticks: ticksProps,\n      container,\n      showFullPixelValueRange = false,\n    } = props;\n\n    const { style: ticksStyle, position: rangeTextPosition } = ticksProps ?? {};\n\n    this._imageRange = imageRange;\n    this._voiRange = voiRange;\n    this._font = ticksStyle?.font ?? DEFAULTS.FONT;\n    this._color = ticksStyle?.color ?? DEFAULTS.COLOR;\n    this._tickSize = ticksStyle?.tickSize ?? DEFAULTS.TICK_SIZE;\n    this._tickWidth = ticksStyle?.tickWidth ?? DEFAULTS.TICK_WIDTH;\n    this._labelMargin = ticksStyle?.labelMargin ?? DEFAULTS.TICK_LABEL_MARGIN;\n    this._maxNumTicks = ticksStyle?.maxNumTicks ?? DEFAULTS.MAX_NUM_TICKS;\n    this._rangeTextPosition =\n      rangeTextPosition ?? ColorbarRangeTextPosition.Right;\n    this._showFullPixelValueRange = showFullPixelValueRange;\n    this._canvas = this._createCanvasElement(size, top, left);\n\n    if (container) {\n      this.appendTo(container);\n    }\n  }\n\n  public get size(): ColorbarSize {\n    const { width, height } = this._canvas;\n    return { width, height };\n  }\n\n  public set size(size: ColorbarSize) {\n    const { _canvas: canvas } = this;\n\n    if (!isColorbarSizeValid(size) || areColorbarSizesEqual(canvas, size)) {\n      return;\n    }\n\n    this._setCanvasSize(canvas, size);\n    this.render();\n  }\n\n  /**\n   * Canvas top position (pixels)\n   */\n  public get top(): number {\n    return Number.parseInt(this._canvas.style.top);\n  }\n\n  /**\n   * Change the canvas top position (pixels)\n   */\n  public set top(top: number) {\n    const { _canvas: canvas } = this;\n    const currentTop = this.top;\n\n    if (top === currentTop) {\n      return;\n    }\n\n    canvas.style.top = `${top}px`;\n    this.render();\n  }\n\n  /**\n   * Canvas left position (pixels)\n   */\n  public get left(): number {\n    return Number.parseInt(this._canvas.style.left);\n  }\n\n  /**\n   * Change the canvas left position (pixels)\n   */\n  public set left(left: number) {\n    const { _canvas: canvas } = this;\n    const currentLeft = this.left;\n\n    if (left === currentLeft) {\n      return;\n    }\n\n    canvas.style.left = `${left}px`;\n    this.render();\n  }\n\n  /**\n   * Image range\n   */\n  public get imageRange() {\n    return { ...this._imageRange };\n  }\n\n  /**\n   * Set the image range that should goes from minPixelValue to maxPixelValue\n   */\n  public set imageRange(imageRange: ColorbarVOIRange) {\n    if (\n      !isRangeValid(imageRange) ||\n      areColorbarRangesEqual(imageRange, this._imageRange)\n    ) {\n      return;\n    }\n\n    this._imageRange = imageRange;\n    this.render();\n  }\n\n  /**\n   * VOI range\n   * (lower: wc - ww / 2, upper: wc + ww / 2)\n   */\n  public get voiRange() {\n    return { ...this._voiRange };\n  }\n\n  /**\n   * Set the VOI Range\n   * (lower: wc - ww / 2, upper: wc + ww / 2)\n   */\n  public set voiRange(voiRange: ColorbarVOIRange) {\n    if (\n      !isRangeValid(voiRange) ||\n      areColorbarRangesEqual(voiRange, this._voiRange)\n    ) {\n      return;\n    }\n\n    this._voiRange = voiRange;\n    this.render();\n  }\n\n  /**\n   * Tick size (pixels)\n   */\n  public get tickSize(): number {\n    return this._tickSize;\n  }\n\n  /**\n   * Set the tick size\n   */\n  public set tickSize(tickSize: number) {\n    if (tickSize === this._tickSize) {\n      return;\n    }\n\n    this._tickSize = tickSize;\n    this.render();\n  }\n\n  /**\n   * Tick width (pixels)\n   */\n  public get tickWidth(): number {\n    return this._tickWidth;\n  }\n\n  /**\n   * Set the tick width. This width is used as `lineWidth` by CanvasRenderingContext2D.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth\n   */\n  public set tickWidth(tickWidth: number) {\n    if (tickWidth === this._tickWidth) {\n      return;\n    }\n\n    this._tickWidth = tickWidth;\n    this.render();\n  }\n\n  /**\n   * Color used for ticks and labels.\n   */\n  public get color(): string {\n    return this._color;\n  }\n\n  /**\n   * Set the color used for ticks and labels. This color is used as `strokeStyle`\n   * and `fillStyle` by CanvasRenderingContext2D.\n   *\n   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle\n   * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle\n   */\n  public set color(color: string) {\n    if (color === this._color) {\n      return;\n    }\n\n    this._color = color;\n    this.render();\n  }\n\n  /**\n   * Return `true` when the ticks displayed are in the range from `imageRange.lower`\n   * to `imageRange.upper` or `false` when they are in the range from `voiRange.lower`\n   * to `voiRange.upper`\n   */\n  public get showFullPixelValueRange(): boolean {\n    return this._showFullPixelValueRange;\n  }\n\n  /**\n   * Change which range should be used when rendering the ticks. Set it to `true`\n   * to show from `imageRange.lower` to `imageRange.upper` or `false` show from\n   * `voiRange.lower` to `voiRange.upper`.\n   */\n  public set showFullPixelValueRange(showFullRange: boolean) {\n    if (showFullRange === this._showFullPixelValueRange) {\n      return;\n    }\n\n    this._showFullPixelValueRange = showFullRange;\n    this.render();\n  }\n\n  /**\n   * Ticks visibility\n   */\n  public get visible() {\n    return this._canvas.style.display === 'block';\n  }\n\n  /**\n   * Show/Hide the ticks\n   */\n  public set visible(visible) {\n    if (visible === this.visible) {\n      return;\n    }\n\n    this._canvas.style.display = visible ? 'block' : 'none';\n\n    if (visible) {\n      this.render();\n    }\n  }\n\n  /**\n   * Append the canvas to its parent element\n   * @param container - HTML element where the canvas should be added to\n   */\n  public appendTo(container: HTMLElement) {\n    container.appendChild(this._canvas);\n    this.render();\n  }\n\n  private static validateProps(props: ColorbarTicksProps) {\n    const { size, imageRange, voiRange } = props;\n\n    if (size && !isColorbarSizeValid(size)) {\n      throw new Error('Invalid \"size\"');\n    }\n\n    if (imageRange && !isRangeValid(imageRange)) {\n      throw new Error('Invalid \"imageRange\"');\n    }\n\n    if (voiRange && !isRangeValid(voiRange)) {\n      throw new Error('Invalid \"voiRange\"');\n    }\n  }\n\n  private _setCanvasSize(canvas: HTMLCanvasElement, size: ColorbarSize) {\n    const { width, height } = size;\n\n    canvas.width = width;\n    canvas.height = height;\n\n    Object.assign(canvas.style, {\n      width: `${width}px`,\n      height: `${height}px`,\n    });\n  }\n\n  private _createCanvasElement(\n    size: ColorbarSize,\n    top: number,\n    left: number\n  ): HTMLCanvasElement {\n    const canvas = document.createElement('canvas');\n\n    Object.assign(canvas.style, {\n      display: 'none',\n      position: 'absolute',\n      boxSizing: 'border-box',\n      top: `${top}px`,\n      left: `${left}px`,\n    });\n\n    this._setCanvasSize(canvas, size);\n\n    return canvas;\n  }\n\n  /**\n   * Calculate how many ticks can be displayed on the screen based on the\n   * pre-defined steps (`TICKS_STEPS`) as follow:\n   *   1. Calculate what should be the step (`roughStep`) based on the range and\n   *   the number of desired steps (`maxNumTicks`).\n   *   2. Find a number power of 10 (eg: 0.1, 1, 10, 100, etc.) that can be used\n   *   to multiply `roughStep` and return a number between 1 and 10 which is\n   *   called `roughtStepNormalized`.\n   *   3. Find in the TICKS_STEPS array a number that is bigger than or equal to\n   *   the `roughtStepNormalized` value (`normalizedStep`).\n   *   4. Multiply the `normalizedStep` to move it to the real range.\n   *\n   * @param range - Range with \"lower\" and \"upper\" values\n   */\n  private _getTicks(range) {\n    const { lower, upper } = range;\n    const rangeValue = upper - lower;\n\n    // First approximation based on the max number of ticks\n    const roughStep = rangeValue / (this._maxNumTicks - 1);\n\n    // Normalize rough step to find the normalized one that fits best\n    const stepPower = Math.pow(\n      10,\n      -Math.floor(Math.log10(Math.abs(roughStep)))\n    );\n\n    // Get a number between 1 and 10\n    const roughtStepNormalized = roughStep * stepPower;\n\n    // Find a normalize step that is greater than or equal to `roughtStepNormalized`\n    const normalizedStep = DEFAULTS.TICKS_STEPS.find(\n      (n) => n >= roughtStepNormalized\n    );\n\n    // Move `normalizedStep` to the real range\n    const step = normalizedStep / stepPower;\n\n    // Determine the scale limits based on the chosen step.\n    const scaleMax = Math.ceil(upper / step) * step;\n    const scaleMin = Math.floor(lower / step) * step;\n\n    // Find a possible tick values for the `step` computed\n    const ticksCount = Math.round((scaleMax - scaleMin) / step) + 1;\n    const ticks = [];\n\n    for (let i = 0; i < ticksCount; i++) {\n      ticks.push(scaleMin + i * step);\n    }\n\n    return { scaleMin, scaleMax, step, ticks };\n  }\n\n  private _getLeftTickInfo({ position, labelMeasure }) {\n    const { width } = this._canvas;\n    const labelX =\n      width - this.tickSize - labelMeasure.width - this._labelMargin;\n    const labelPoint = [labelX, position];\n    const tickPoints = {\n      start: [width - this._tickSize, position],\n      end: [width, position],\n    };\n\n    return { labelPoint, tickPoints };\n  }\n\n  private _getRightTickInfo({ position }) {\n    const labelPoint = [this._tickSize + this._labelMargin, position];\n    const tickPoints = {\n      start: [0, position],\n      end: [this._tickSize, position],\n    };\n\n    return { labelPoint, tickPoints };\n  }\n\n  private _getTopTickInfo({ position, labelMeasure }) {\n    throw new Error('Not implemented');\n  }\n\n  private _getBottomTickInfo({ position, labelMeasure }) {\n    throw new Error('Not implemented');\n  }\n\n  private render() {\n    const { _canvas: canvas } = this;\n\n    if (!canvas.isConnected || !this.visible) {\n      return;\n    }\n\n    const { width, height } = canvas;\n    const isHorizontal = width >= height;\n    const maxCanvasPixelValue = isHorizontal ? width : height;\n    const canvasContext = canvas.getContext('2d');\n    const { _voiRange: voiRange } = this;\n    const range = this._showFullPixelValueRange\n      ? this._imageRange\n      : { ...voiRange };\n    const rangeWidth = range.upper - range.lower;\n    const { ticks } = this._getTicks(range);\n\n    canvasContext.clearRect(0, 0, width, height);\n    canvasContext.font = this._font;\n    canvasContext.textBaseline = 'middle';\n    canvasContext.fillStyle = this._color;\n    canvasContext.strokeStyle = this._color;\n    canvasContext.lineWidth = this.tickWidth;\n\n    ticks.forEach((tick) => {\n      let position = Math.round(\n        maxCanvasPixelValue * ((tick - range.lower) / rangeWidth)\n      );\n\n      // Zero at the bottom and max at the top on vertical colorbars\n      if (!isHorizontal) {\n        position = height - position;\n      }\n\n      if (position < 0 || position > maxCanvasPixelValue) {\n        return;\n      }\n\n      const label = tick.toString();\n      const labelMeasure = canvasContext.measureText(label);\n      let tickInfo;\n\n      if (isHorizontal) {\n        if (this._rangeTextPosition === ColorbarRangeTextPosition.Top) {\n          tickInfo = this._getTopTickInfo({ position, labelMeasure });\n        } else {\n          tickInfo = this._getBottomTickInfo({ position, labelMeasure });\n        }\n      } else {\n        if (this._rangeTextPosition === ColorbarRangeTextPosition.Left) {\n          tickInfo = this._getLeftTickInfo({ position, labelMeasure });\n        } else {\n          tickInfo = this._getRightTickInfo({ position });\n        }\n      }\n\n      const { labelPoint, tickPoints } = tickInfo;\n      const { start: tickStart, end: tickEnd } = tickPoints;\n\n      canvasContext.beginPath();\n      canvasContext.moveTo(tickStart[0], tickStart[1]);\n      canvasContext.lineTo(tickEnd[0], tickEnd[1]);\n      canvasContext.fillText(label, labelPoint[0], labelPoint[1]);\n      canvasContext.stroke();\n\n      return position;\n    });\n  }\n}\n\nexport { ColorbarTicks as default, ColorbarTicks };\n","import type { WidgetProps, WidgetSize } from './types';\n\n/**\n * Base class for any widget that can be added to cornerstone. Currently it is\n * responsible only for holding the `rootElement`, contains a method that allows\n * adding it to the DOM and it also listens to container's size changes when the\n * widget is already added to the DOM. `dispose` must be called to destroy the\n * widget because it removes the widget from the DOM and stop listening to\n * container changes.\n *\n * You can apply some styles to widgets using the widget id or the `widget` class.\n *\n * Example:\n *   type ColorPickerProps = WidgetProps & {\n *     selectedColor: string;\n *   }\n *\n *   class ColorPicker extends Widget {\n *     constructor(props: ColorPickerProps) {\n *       super(props);\n *       // [code]\n *     }\n *\n *     public show() {\n *       console.log('Show color picker');\n *     }\n *\n *     protected containerResized() {\n *       console.log('New container size: ', this.containerSize);\n *     }\n *   }\n *\n *   const colorPicker = new ColorPicker({\n *     container: document.body,\n *     selectedColor: '#000';\n *   });\n *\n *   // another way to add the color picker to the DOM\n *   colorPicker.appendTo(document.body)\n *\n *   // Show color picker\n *   colorPicker.show();\n */\nabstract class Widget {\n  private _id: string;\n  private _rootElement: HTMLElement;\n  private _containerSize: WidgetSize;\n  private _containerResizeObserver: ResizeObserver;\n\n  constructor({ id, container }: WidgetProps) {\n    this._id = id;\n    this._containerSize = { width: 0, height: 0 };\n    this._rootElement = this.createRootElement(id);\n    this._containerResizeObserver = new ResizeObserver(\n      this._containerResizeCallback\n    );\n\n    if (container) {\n      this.appendTo(container);\n    }\n  }\n\n  /**\n   * Widget id\n   */\n  public get id() {\n    return this._id;\n  }\n\n  /**\n   * Widget's root element\n   */\n  public get rootElement(): HTMLElement {\n    return this._rootElement;\n  }\n\n  /**\n   * Append the widget to a parent element\n   * @param container - HTML element where the widget should be added to\n   */\n  public appendTo(container: HTMLElement) {\n    const {\n      _rootElement: rootElement,\n      _containerResizeObserver: resizeObserver,\n    } = this;\n    const { parentElement: currentContainer } = rootElement;\n\n    if (!container || container === currentContainer) {\n      return;\n    }\n\n    if (currentContainer) {\n      resizeObserver.unobserve(currentContainer);\n    }\n\n    container.appendChild(rootElement);\n    resizeObserver.observe(container);\n  }\n\n  /**\n   * Removes the widget from the DOM and stop listening to DOM events\n   */\n  public destroy() {\n    const {\n      _rootElement: rootElement,\n      _containerResizeObserver: resizeObserver,\n    } = this;\n    const { parentElement } = rootElement;\n\n    parentElement?.removeChild(rootElement);\n    resizeObserver.disconnect();\n  }\n\n  protected get containerSize(): WidgetSize {\n    // Returns a copy to prevent any external change\n    return { ...this._containerSize };\n  }\n\n  /**\n   * Creates the root element which is a div by default\n   * @param id - Root element id\n   * @returns A new HTML element where all other elements should be added to\n   */\n  protected createRootElement(id: string): HTMLElement {\n    const rootElement = document.createElement('div');\n\n    rootElement.id = id;\n    rootElement.classList.add('widget');\n\n    Object.assign(rootElement.style, {\n      width: '100%',\n      height: '100%',\n    });\n\n    return rootElement;\n  }\n\n  /**\n   * Method called every time widget's container is resize giving the\n   * opportunity to children classes to act when that happens.\n   */\n  protected onContainerResize() {\n    // no-op\n  }\n\n  private _containerResizeCallback = (entries: ResizeObserverEntry[]): void => {\n    let width;\n    let height;\n\n    const { contentRect, contentBoxSize } = entries[0];\n\n    // `contentRect` is better supported than `borderBoxSize` or `contentBoxSize`,\n    // but it is left over from an earlier implementation of the Resize Observer API\n    // and may be deprecated in future versions.\n    // https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserverEntry/contentRect\n    if (contentRect) {\n      width = contentRect.width;\n      height = contentRect.height;\n    } else if (contentBoxSize?.length) {\n      width = contentBoxSize[0].inlineSize;\n      height = contentBoxSize[0].blockSize;\n    }\n\n    this._containerSize = { width, height };\n    this.onContainerResize();\n  };\n}\n\nexport { Widget as default, Widget };\n","import { IColorMapPreset } from '@kitware/vtk.js/Rendering/Core/ColorTransferFunction/ColorMaps';\nimport { vec2 } from 'gl-matrix';\nimport { utilities as csUtils, Types } from '@cornerstonejs/core';\nimport type { ColorbarProps, ColorbarVOIRange } from './types';\nimport { isRangeValid, areColorbarRangesEqual } from './common';\nimport { ColorbarRangeTextPosition } from './enums/ColorbarRangeTextPosition';\nimport { ColorbarCanvas } from './ColorbarCanvas';\nimport { ColorbarTicks } from './ColorbarTicks';\nimport isRangeTextPositionValid from './common/isRangeTextPositionValid';\nimport Widget from '../../../widgets/Widget';\n\nconst DEFAULTS = {\n  MULTIPLIER: 1,\n  RANGE_TEXT_POSITION: ColorbarRangeTextPosition.Right,\n  TICKS_BAR_SIZE: 50,\n};\n\ntype ColorbarPoints = {\n  page: Types.Point2;\n  client: Types.Point2;\n  local: Types.Point2;\n};\n\n/**\n * A base colorbar class that is not associated with any viewport. It is\n * possible to click and drag to change the VOI range, shows the ticks during\n * interaction and it can show full image range or VOI range.\n */\nclass Colorbar extends Widget {\n  private _colormaps: Map<string, IColorMapPreset>;\n  private _activeColormapName: string;\n  private _eventListenersManager: csUtils.eventListener.MultiTargetEventListenerManager;\n  private _canvas: ColorbarCanvas;\n  private _ticksBar: ColorbarTicks;\n  private _rangeTextPosition: ColorbarRangeTextPosition;\n\n  private _isMouseOver = false;\n  private _isInteracting = false;\n\n  constructor(props: ColorbarProps) {\n    super(props);\n\n    this._eventListenersManager =\n      new csUtils.eventListener.MultiTargetEventListenerManager();\n    this._colormaps = Colorbar.getColormapsMap(props);\n    this._activeColormapName = Colorbar.getInitialColormapName(props);\n    this._canvas = this._createCanvas(props);\n    this._ticksBar = this._createTicksBar(props);\n    this._rangeTextPosition =\n      props.ticks?.position ?? DEFAULTS.RANGE_TEXT_POSITION;\n\n    this._canvas.appendTo(this.rootElement);\n    this._ticksBar.appendTo(this.rootElement);\n\n    this._addRootElementEventListeners();\n  }\n\n  /**\n   * Returns the active LUT name\n   */\n  public get activeColormapName() {\n    return this._activeColormapName;\n  }\n\n  /**\n   * Set the current active LUT name and re-renders the color bar\n   */\n  public set activeColormapName(colormapName: string) {\n    if (colormapName === this._activeColormapName) {\n      return;\n    }\n\n    const colormap = this._colormaps.get(colormapName);\n\n    if (!colormap) {\n      console.warn(`Invalid colormap name (${colormapName})`);\n      return;\n    }\n\n    this._activeColormapName = colormapName;\n    this._canvas.colormap = colormap;\n  }\n\n  public get imageRange() {\n    return this._canvas.imageRange;\n  }\n\n  public set imageRange(imageRange: ColorbarVOIRange) {\n    this._canvas.imageRange = imageRange;\n    this._ticksBar.imageRange = imageRange;\n  }\n\n  public get voiRange() {\n    return this._canvas.voiRange;\n  }\n\n  public set voiRange(voiRange: ColorbarVOIRange) {\n    const { voiRange: currentVoiRange } = this._canvas;\n\n    if (\n      !isRangeValid(voiRange) ||\n      areColorbarRangesEqual(voiRange, currentVoiRange)\n    ) {\n      return;\n    }\n\n    this._canvas.voiRange = voiRange;\n    this._ticksBar.voiRange = voiRange;\n    this.onVoiChange(voiRange);\n  }\n\n  public get showFullImageRange() {\n    return this._canvas.showFullImageRange;\n  }\n\n  public set showFullImageRange(value: boolean) {\n    this._canvas.showFullImageRange = value;\n    this._ticksBar.showFullPixelValueRange = value;\n  }\n\n  public destroy() {\n    super.destroy();\n    this._eventListenersManager.reset();\n  }\n\n  protected createRootElement(): HTMLElement {\n    const rootElement = document.createElement('div');\n\n    Object.assign(rootElement.style, {\n      position: 'relative',\n      fontSize: '0',\n      width: '100%',\n      height: '100%',\n    });\n\n    return rootElement;\n  }\n\n  protected onContainerResize() {\n    super.onContainerResize();\n    this.updateTicksBar();\n    this._canvas.size = this.containerSize;\n  }\n\n  protected getVOIMultipliers(): [number, number] {\n    return [DEFAULTS.MULTIPLIER, DEFAULTS.MULTIPLIER];\n  }\n\n  protected onVoiChange(voiRange: ColorbarVOIRange) {\n    // no-op\n  }\n\n  protected showTicks() {\n    this.updateTicksBar();\n    this._ticksBar.visible = true;\n  }\n\n  protected hideTicks() {\n    if (this._isInteracting || this._isMouseOver) {\n      return;\n    }\n\n    this._ticksBar.visible = false;\n  }\n\n  private static getColormapsMap(props: ColorbarProps) {\n    const { colormaps } = props;\n\n    return colormaps.reduce(\n      (items, item) => items.set(item.Name, item),\n      new Map<string, IColorMapPreset>()\n    );\n  }\n\n  private static getInitialColormapName(props: ColorbarProps) {\n    const { activeColormapName, colormaps } = props;\n    const colormapExists =\n      !!activeColormapName &&\n      colormaps.some((cm) => cm.Name === activeColormapName);\n\n    return colormapExists ? activeColormapName : colormaps[0].Name;\n  }\n\n  private _createCanvas(props: ColorbarProps) {\n    const { imageRange, voiRange, showFullPixelValueRange } = props;\n    const colormap = this._colormaps.get(this._activeColormapName);\n\n    return new ColorbarCanvas({\n      colormap,\n      imageRange,\n      voiRange: voiRange,\n      showFullPixelValueRange,\n    });\n  }\n\n  public _createTicksBar(props: ColorbarProps): ColorbarTicks {\n    const ticksProps = props.ticks;\n\n    return new ColorbarTicks({\n      imageRange: props.imageRange,\n      voiRange: props.voiRange,\n      ticks: ticksProps,\n      showFullPixelValueRange: props.showFullPixelValueRange,\n    });\n  }\n\n  private _getPointsFromMouseEvent(evt: MouseEvent): ColorbarPoints {\n    const { rootElement: element } = this;\n    const clientPoint: Types.Point2 = [evt.clientX, evt.clientY];\n    const pagePoint: Types.Point2 = [evt.pageX, evt.pageY];\n    const rect = element.getBoundingClientRect();\n    const localPoints: Types.Point2 = [\n      pagePoint[0] - rect.left - window.pageXOffset,\n      pagePoint[1] - rect.top - window.pageYOffset,\n    ];\n\n    return { client: clientPoint, page: pagePoint, local: localPoints };\n  }\n\n  private updateTicksBar() {\n    const { width: containerWidth, height: containerHeight } =\n      this.containerSize;\n\n    // ResizeObserver have not triggered any event when this happen\n    if (containerWidth === 0 && containerHeight === 0) {\n      return;\n    }\n\n    const { _ticksBar: ticksBar, _rangeTextPosition: rangeTextPosition } = this;\n    const isHorizontal = containerWidth >= containerHeight;\n    const width = isHorizontal ? containerWidth : DEFAULTS.TICKS_BAR_SIZE;\n    const height = isHorizontal ? DEFAULTS.TICKS_BAR_SIZE : containerHeight;\n\n    if (\n      !isRangeTextPositionValid(\n        containerWidth,\n        containerHeight,\n        rangeTextPosition\n      )\n    ) {\n      throw new Error(\n        'Invalid rangeTextPosition value for the current colobar orientation'\n      );\n    }\n\n    let ticksBarTop;\n    let ticksBarLeft;\n\n    ticksBar.size = { width, height };\n\n    if (isHorizontal) {\n      ticksBarLeft = 0;\n      ticksBarTop =\n        rangeTextPosition === ColorbarRangeTextPosition.Top\n          ? -height\n          : containerHeight;\n    } else {\n      ticksBarTop = 0;\n      ticksBarLeft =\n        rangeTextPosition === ColorbarRangeTextPosition.Left\n          ? -width\n          : containerWidth;\n    }\n\n    ticksBar.top = ticksBarTop;\n    ticksBar.left = ticksBarLeft;\n  }\n\n  private _mouseOverCallback = (evt) => {\n    this._isMouseOver = true;\n    this.showTicks();\n    evt.stopPropagation();\n  };\n\n  private _mouseOutCallback = (evt) => {\n    this._isMouseOver = false;\n    this.hideTicks();\n    evt.stopPropagation();\n  };\n\n  private _mouseDownCallback = (evt: MouseEvent) => {\n    this._isInteracting = true;\n    this.showTicks();\n    this._addVOIEventListeners(evt);\n    evt.stopPropagation();\n  };\n\n  private _mouseDragCallback = (evt, initialState) => {\n    const multipliers = this.getVOIMultipliers();\n    const currentPoints = this._getPointsFromMouseEvent(evt);\n    const { points: startPoints, voiRange: startVOIRange } = initialState;\n    const canvasDelta = vec2.sub(\n      vec2.create(),\n      currentPoints.local,\n      startPoints.local\n    );\n\n    const wwDelta = canvasDelta[0] * multipliers[0];\n    const wcDelta = canvasDelta[1] * multipliers[1];\n\n    if (!wwDelta && !wcDelta) {\n      return;\n    }\n\n    const { lower: voiLower, upper: voiUpper } = startVOIRange;\n    let { windowWidth, windowCenter } = csUtils.windowLevel.toWindowLevel(\n      voiLower,\n      voiUpper\n    );\n\n    windowWidth = Math.max(windowWidth + wwDelta, 1);\n    windowCenter += wcDelta;\n\n    const newVoiRange = csUtils.windowLevel.toLowHighRange(\n      windowWidth,\n      windowCenter\n    );\n\n    this.voiRange = newVoiRange;\n    evt.stopPropagation();\n    evt.preventDefault();\n  };\n\n  private _mouseUpCallback = (evt) => {\n    this._isInteracting = false;\n    this.hideTicks();\n    this._removeVOIEventListeners();\n    evt.stopPropagation();\n  };\n\n  private _addRootElementEventListeners() {\n    const { _eventListenersManager: manager } = this;\n    const { rootElement: element } = this;\n\n    manager.addEventListener(element, 'mouseover', this._mouseOverCallback);\n    manager.addEventListener(element, 'mouseout', this._mouseOutCallback);\n    manager.addEventListener(\n      element,\n      'mousedown',\n      this._mouseDownCallback as EventListener\n    );\n  }\n\n  private _addVOIEventListeners(evt: MouseEvent) {\n    const { _eventListenersManager: manager } = this;\n    const points = this._getPointsFromMouseEvent(evt);\n    const voiRange = { ...this._canvas.voiRange };\n    const initialDragState = { points, voiRange };\n\n    this._removeVOIEventListeners();\n\n    manager.addEventListener(document, 'voi.mouseup', this._mouseUpCallback);\n    manager.addEventListener(document, 'voi.mousemove', (evt) =>\n      this._mouseDragCallback(evt, initialDragState)\n    );\n  }\n\n  private _removeVOIEventListeners() {\n    const { _eventListenersManager: manager } = this;\n\n    manager.removeEventListener(document, 'voi.mouseup');\n    manager.removeEventListener(document, 'voi.mousemove');\n  }\n}\n\nexport { Colorbar as default, Colorbar };\n","import { ColorbarRangeTextPosition } from '../enums';\n\nfunction isRangeTextPositionValid(\n  colorbarWidth: number,\n  colorbarHeight: number,\n  rangeTextPosition: ColorbarRangeTextPosition\n) {\n  const isHorizontal = colorbarWidth >= colorbarHeight;\n  const validRangeTextPositions = isHorizontal\n    ? [ColorbarRangeTextPosition.Top, ColorbarRangeTextPosition.Bottom]\n    : [ColorbarRangeTextPosition.Left, ColorbarRangeTextPosition.Right];\n\n  return validRangeTextPositions.includes(rangeTextPosition);\n}\n\nexport { isRangeTextPositionValid as default, isRangeTextPositionValid };\n","import {\n  eventTarget,\n  VolumeViewport,\n  StackViewport,\n  Types,\n  Enums,\n  utilities,\n  getEnabledElement,\n} from '@cornerstonejs/core';\nimport { Colorbar } from './Colorbar';\nimport type { ViewportColorbarProps, ColorbarVOIRange } from './types';\nimport { getVOIMultipliers } from '../../getVOIMultipliers';\n\nconst { Events } = Enums;\nconst defaultImageRange = { lower: -1000, upper: 1000 };\n/**\n * A colorbar associated with a viewport that updates automatically when the\n * viewport VOI changes or when the stack/volume are updated..\n */\nclass ViewportColorbar extends Colorbar {\n  private _element: HTMLDivElement;\n  private _volumeId: string;\n\n  private _hideTicksTime: number;\n  private _hideTicksTimeoutId: number;\n\n  constructor(props: ViewportColorbarProps) {\n    const { element, volumeId } = props;\n    const imageRange = ViewportColorbar._getImageRange(element, volumeId);\n    const voiRange = ViewportColorbar._getVOIRange(element, volumeId);\n\n    super({ ...props, imageRange, voiRange });\n\n    this._element = element;\n    this._volumeId = volumeId;\n\n    this._addCornerstoneEventListener();\n  }\n\n  public get element() {\n    return this._element;\n  }\n\n  public get enabledElement() {\n    return getEnabledElement(this._element);\n  }\n\n  protected getVOIMultipliers(): [number, number] {\n    const { viewport } = this.enabledElement;\n    return getVOIMultipliers(viewport, this._volumeId);\n  }\n\n  protected onVoiChange(voiRange: ColorbarVOIRange) {\n    super.onVoiChange(voiRange);\n\n    const { viewport } = this.enabledElement;\n\n    if (viewport instanceof StackViewport) {\n      viewport.setProperties({\n        voiRange: voiRange,\n      });\n      viewport.render();\n    } else if (viewport instanceof VolumeViewport) {\n      const { _volumeId: volumeId } = this;\n      const viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(\n        volumeId,\n        viewport.renderingEngineId\n      );\n\n      viewport.setProperties({ voiRange }, volumeId);\n      viewportsContainingVolumeUID.forEach((vp) => vp.render());\n    }\n  }\n\n  private static _getImageRange(element, volumeId?) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const actor = volumeId\n      ? viewport.getActor(volumeId)\n      : viewport.getDefaultActor();\n\n    if (!actor) {\n      return defaultImageRange;\n    }\n\n    const imageData = actor.actor.getMapper().getInputData();\n    const imageRange = imageData.getPointData().getScalars().getRange();\n\n    return imageRange[0] === 0 && imageRange[1] === 0\n      ? defaultImageRange\n      : { lower: imageRange[0], upper: imageRange[1] };\n  }\n\n  private static _getVOIRange(element, volumeId) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const volumeActor = volumeId\n      ? viewport.getActor(volumeId)\n      : viewport.getDefaultActor();\n\n    if (!volumeActor || !utilities.isImageActor(volumeActor)) {\n      return defaultImageRange;\n    }\n\n    const voiRange = (volumeActor.actor as Types.ImageActor)\n      .getProperty()\n      .getRGBTransferFunction(0)\n      .getRange();\n\n    return voiRange[0] === 0 && voiRange[1] === 0\n      ? defaultImageRange\n      : { lower: voiRange[0], upper: voiRange[1] };\n  }\n\n  private autoHideTicks = () => {\n    // Avoiding calling setTimeout multiple times when manipulating the VOI\n    // via WindowLevel tool for better performance\n    if (this._hideTicksTimeoutId) {\n      return;\n    }\n\n    const timeLeft = this._hideTicksTime - Date.now();\n\n    if (timeLeft <= 0) {\n      this.hideTicks();\n    } else {\n      this._hideTicksTimeoutId = window.setTimeout(() => {\n        // Recursive call until there is no more time left\n        this._hideTicksTimeoutId = 0;\n        this.autoHideTicks();\n      }, timeLeft);\n    }\n  };\n\n  private showAndAutoHideTicks(interval = 1000) {\n    this._hideTicksTime = Date.now() + interval;\n    this.showTicks();\n    this.autoHideTicks();\n  }\n\n  private _stackNewImageCallback = () => {\n    this.imageRange = ViewportColorbar._getImageRange(this._element);\n  };\n\n  private _imageVolumeModifiedCallback = (\n    evt: Types.EventTypes.ImageVolumeModifiedEvent\n  ) => {\n    const { volumeId } = evt.detail.imageVolume;\n\n    if (volumeId !== this._volumeId) {\n      return;\n    }\n\n    const { _element: element } = this;\n    this.imageRange = ViewportColorbar._getImageRange(element, volumeId);\n  };\n\n  private _viewportVOIModifiedCallback = (\n    evt: Types.EventTypes.VoiModifiedEvent\n  ) => {\n    const { viewportId, volumeId, range: voiRange } = evt.detail;\n    const { viewport } = this.enabledElement;\n\n    if (viewportId !== viewport.id || volumeId !== this._volumeId) {\n      return;\n    }\n\n    this.voiRange = voiRange;\n    this.showAndAutoHideTicks();\n  };\n\n  private _addCornerstoneEventListener() {\n    const { _element: element } = this;\n\n    eventTarget.addEventListener(\n      Events.IMAGE_VOLUME_MODIFIED,\n      this._imageVolumeModifiedCallback\n    );\n\n    element.addEventListener(\n      Events.STACK_NEW_IMAGE,\n      this._stackNewImageCallback\n    );\n\n    element.addEventListener(\n      Events.VOI_MODIFIED,\n      this._viewportVOIModifiedCallback as EventListener\n    );\n  }\n}\n\nexport { ViewportColorbar as default, ViewportColorbar };\n","import { Types, utilities as csUtils } from '@cornerstonejs/core';\nimport { isViewportPreScaled } from './viewport';\n\nconst DEFAULT_MULTIPLIER = 4;\n\nfunction getVOIMultipliers(\n  viewport: Types.IStackViewport | Types.IVolumeViewport,\n  volumeId?: string,\n  options?: {\n    fixedPTWindowWidth?: boolean;\n  }\n): [number, number] {\n  const modality = csUtils.getViewportModality(viewport, volumeId);\n\n  if (modality === 'PT') {\n    const { clientWidth, clientHeight } = viewport.element;\n    const ptMultiplier = 5 / Math.max(clientWidth, clientHeight);\n    const isPreScaled = isViewportPreScaled(viewport, volumeId);\n    const { fixedPTWindowWidth = true } = options ?? {};\n\n    // Set the \"X\" multiplier equal to zero in order to do not allow\n    // any change to the window width (0 * cursorDeltaX = 0)\n    const xMultiplier = fixedPTWindowWidth ? 0 : ptMultiplier;\n\n    return isPreScaled\n      ? [xMultiplier, ptMultiplier]\n      : [xMultiplier, DEFAULT_MULTIPLIER];\n  }\n\n  return [DEFAULT_MULTIPLIER, DEFAULT_MULTIPLIER];\n}\n\nexport { getVOIMultipliers as default, getVOIMultipliers };\n","import { setElementCursor } from './elementCursor';\nimport MouseCursor from './MouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\n\n/**\n * Set the cursor for an HTML element. cursorNames can be either\n * cornerstone3DTools cursors or standard cursors.\n *\n * @param element - The element to set the cursor on.\n * @param cursorName - The name of the cursor to set. This can be\n * any cursor name either Cornerstone-specific cursor names or the standard\n * CSS cursor names.\n */\nfunction setCursorForElement(\n  element: HTMLDivElement,\n  cursorName: string\n): void {\n  let cursor = SVGMouseCursor.getDefinedCursor(cursorName, true);\n  if (!cursor) {\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  if (!cursor) {\n    console.log(\n      `Cursor ${cursorName} is not defined either as SVG or as a standard cursor.`\n    );\n    cursor = MouseCursor.getDefinedCursor(cursorName);\n  }\n\n  setElementCursor(element, cursor);\n}\n\nexport default setCursorForElement;\n","import MouseCursor, { standardCursorNames } from './MouseCursor';\nimport ImageMouseCursor from './ImageMouseCursor';\nimport SVGMouseCursor from './SVGMouseCursor';\nimport * as elementCursor from './elementCursor';\nimport setCursorForElement from './setCursorForElement';\nimport {\n  registerCursor,\n  svgCursorNames,\n  CursorSVG,\n} from './SVGCursorDescriptor';\n\n// Todo: this should be enum\nconst CursorNames = [...svgCursorNames, ...standardCursorNames];\n\nexport {\n  MouseCursor,\n  ImageMouseCursor,\n  SVGMouseCursor,\n  elementCursor,\n  registerCursor,\n  CursorNames,\n  CursorSVG,\n  setCursorForElement,\n};\n","import { ToolModes, AnnotationStyleStates } from '../../../enums';\nimport { getStyleProperty } from './helpers';\nimport { StyleSpecifier } from '../../../types/AnnotationStyle';\n\n/**\n * getFont - Returns a font string of the form \"{fontSize}px fontName\" used by `canvas`.\n * @param styleSpecifier - An object containing the specifications such as viewportId,\n * toolGroupId, toolName and annotationUID which are used to get the style if the level of specificity is\n * met (hierarchy is checked from most specific to least specific which is\n * annotationLevel -> viewportLevel -> toolGroupLevel -> default.\n * @param state - An optional state to determine the final property name\n * @param mode - An optional mode to determine the final property name\n * @returns The font string.\n */\nfunction getFont(\n  styleSpecifier: StyleSpecifier,\n  state?: AnnotationStyleStates,\n  mode?: ToolModes\n): string {\n  const fontSize = getStyleProperty(\n    'textBoxFontSize',\n    styleSpecifier,\n    state,\n    mode\n  );\n  const fontFamily = getStyleProperty(\n    'textBoxFontFamily',\n    styleSpecifier,\n    state,\n    mode\n  );\n\n  return `${fontSize}px ${fontFamily}`;\n}\n\nexport default getFont;\n","import { eventTarget, triggerEvent } from '@cornerstonejs/core';\nimport Events from '../../enums/Events';\nimport { getAnnotation } from './annotationState';\n\nexport type BaseEventDetail = {\n  viewportId: string;\n  renderingEngineId: string;\n};\n\n/**\n * An annotation group\n */\n\nexport default class AnnotationGroup {\n  private annotationUIDs = new Set<string>();\n  private _isVisible = true;\n\n  public visibleFilter: (uid: string) => boolean;\n\n  constructor() {\n    this.visibleFilter = this.unboundVisibleFilter.bind(this);\n  }\n\n  /**\n   * Returns true if other groups are free to hide this annotation.\n   * That is, if the annotation is not a member or is hidden.\n   */\n  protected unboundVisibleFilter(uid: string): boolean {\n    return !this._isVisible || !this.annotationUIDs.has(uid);\n  }\n\n  public has(uid: string): boolean {\n    return this.annotationUIDs.has(uid);\n  }\n  /**\n   * Sets whether annotations belonging to this group are visible or not.\n   * If there are multiple groups, then the set visible false should be called\n   * before before re-enabling the other groups with setVisible true.\n   */\n  public setVisible(\n    isVisible = true,\n    baseEvent: BaseEventDetail,\n    filter?: (annotationUID: string) => boolean\n  ) {\n    if (this._isVisible === isVisible) {\n      return;\n    }\n    this._isVisible = isVisible;\n    this.annotationUIDs.forEach((uid) => {\n      const annotation = getAnnotation(uid);\n      if (!annotation) {\n        this.annotationUIDs.delete(uid);\n        return;\n      }\n      if (annotation.isVisible === isVisible) {\n        return;\n      }\n      if (!isVisible && filter?.(uid) === false) {\n        return;\n      }\n      annotation.isVisible = isVisible;\n      const eventDetail = {\n        ...baseEvent,\n        annotation,\n      };\n      triggerEvent(eventTarget, Events.ANNOTATION_MODIFIED, eventDetail);\n    });\n  }\n\n  public get isVisible() {\n    return this._isVisible;\n  }\n\n  /** Finds the nearby/next annotation in the given direction */\n  public findNearby(uid: string, direction: 1) {\n    const uids = [...this.annotationUIDs];\n    if (uids.length === 0) {\n      return null;\n    }\n    if (!uid) {\n      return uids[direction === 1 ? 0 : uids.length - 1];\n    }\n    const index = uids.indexOf(uid);\n    if (\n      index === -1 ||\n      index + direction < 0 ||\n      index + direction >= uids.length\n    ) {\n      return null;\n    }\n    return uids[index + direction];\n  }\n\n  /**\n   * Adds the annotation to the group\n   * Does NOT change the visibility status of the annotation.\n   */\n  public add(...annotationUIDs: string[]) {\n    annotationUIDs.forEach((annotationUID) =>\n      this.annotationUIDs.add(annotationUID)\n    );\n  }\n\n  /**\n   * Removes the annotation from the group.\n   * Does not affect the visibility status of the annotation.\n   */\n  public remove(...annotationUIDs: string[]) {\n    annotationUIDs.forEach((annotationUID) =>\n      this.annotationUIDs.delete(annotationUID)\n    );\n  }\n\n  /**\n   * Removes everything from the group.\n   */\n  public clear() {\n    this.annotationUIDs.clear();\n  }\n}\n","import { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport { cache } from '@cornerstonejs/core';\nimport { LabelmapSegmentationData } from '../../../types/LabelmapTypes';\n\nfunction validate(segmentationInput: SegmentationPublicInput): void {\n  if (!segmentationInput.representation.data) {\n    throw new Error(\n      'The segmentationInput.representationData.data is undefined, please provide a valid representationData.data'\n    );\n  }\n\n  const representationData = segmentationInput.representation\n    .data as LabelmapSegmentationData;\n\n  if (!representationData.volumeId) {\n    throw new Error(\n      'The segmentationInput.representationData.volumeId is undefined, please provide a valid representationData.volumeId'\n    );\n  }\n\n  const cachedVolume = cache.getVolume(representationData.volumeId);\n\n  if (!cachedVolume) {\n    throw new Error(\n      `volumeId of ${representationData.volumeId} not found in cache, you should load and cache volume before adding segmentation`\n    );\n  }\n}\n\nexport default validate;\n","import * as Enums from '../../../enums';\nimport { SegmentationPublicInput } from '../../../types/SegmentationStateTypes';\nimport validateLabelmap from '../../../tools/displayTools/Labelmap/validateRepresentationData';\n\n/**\n * Checks if the segmentationInputArray is valid meaning it contains\n * correct representationProps for the representation type that is being used.\n *\n * @param segmentationInputArray - Array of segmentation inputs\n * @internal\n */\nfunction validateSegmentationInput(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  if (!segmentationInputArray || !segmentationInputArray.length) {\n    throw new Error('The segmentationInputArray is undefined or empty array');\n  }\n\n  segmentationInputArray.forEach((segmentationInput) => {\n    if (segmentationInput.segmentationId === undefined) {\n      throw new Error(\n        'The segmentationInput.segmentationId is undefined, please provide a valid segmentationId'\n      );\n    }\n\n    if (segmentationInput.representation === undefined) {\n      throw new Error(\n        'The segmentationInput.representation is undefined, please provide a valid representation'\n      );\n    }\n\n    if (\n      segmentationInput.representation.type ===\n      Enums.SegmentationRepresentations.Labelmap\n    ) {\n      validateLabelmap(segmentationInput);\n    }\n  });\n}\n\nexport default validateSegmentationInput;\n","import _cloneDeep from 'lodash.clonedeep';\nimport { SegmentationPublicInput } from '../../types/SegmentationStateTypes';\nimport { validateSegmentationInput } from './helpers';\nimport { addSegmentation as addSegmentationToState } from './segmentationState';\n/**\n * Adds the segmentation to the cornerstone3D segmentation state. It should be\n * noted that segmentations are not added to any toolGroup's viewports. In order to\n * do so, you should add a \"representation\" of the segmentation to the toolGroup\n * using addSegmentationRepresentations helper. The reason for this is that there\n * can be multiple representations of the same segmentation (e.g. Labelmap and\n * Contour, etc. - Currently only Labelmap representations is supported).\n * @param segmentationInputArray - The array of segmentation input, each of which\n * defining the segmentationId and the main representation data for the segmentation.\n */\nfunction addSegmentations(\n  segmentationInputArray: SegmentationPublicInput[]\n): void {\n  validateSegmentationInput(segmentationInputArray);\n\n  segmentationInputArray.map((segInput) => {\n    const segmentationInput = _cloneDeep(segInput);\n\n    addSegmentationToState(segmentationInput);\n  });\n}\n\nexport default addSegmentations;\n","import _cloneDeep from 'lodash.clonedeep';\nimport {\n  SegmentationRepresentationConfig,\n  RepresentationPublicInput,\n} from '../../types/SegmentationStateTypes';\nimport Representations from '../../enums/SegmentationRepresentations';\nimport { getToolGroup } from '../../store/ToolGroupManager';\n\nimport { labelmapDisplay } from '../../tools/displayTools/Labelmap';\nimport { contourDisplay } from '../../tools/displayTools/Contour';\nimport { surfaceDisplay } from '../../tools/displayTools/Surface';\n\n/**\n * Set the specified segmentation representations on the viewports of the specified\n * toolGroup. It accepts a second argument which is a toolGroup specific representation\n * configuration.\n *\n * @param toolGroupId - The Id of the toolGroup to add the segmentation representations to\n * @param representationInputArray - An array of segmentation representations to add to the toolGroup\n * @param toolGroupSpecificRepresentationConfig - The toolGroup specific configuration\n * for the segmentation representations\n */\nasync function addSegmentationRepresentations(\n  toolGroupId: string,\n  representationInputArray: RepresentationPublicInput[],\n  toolGroupSpecificRepresentationConfig?: SegmentationRepresentationConfig\n): Promise<string[]> {\n  // Check if there exists a toolGroup with the toolGroupId\n  const toolGroup = getToolGroup(toolGroupId);\n\n  if (!toolGroup) {\n    throw new Error(`No tool group found for toolGroupId: ${toolGroupId}`);\n  }\n\n  const promises = representationInputArray.map((representationInput) => {\n    return _addSegmentationRepresentation(\n      toolGroupId,\n      representationInput,\n      toolGroupSpecificRepresentationConfig\n    );\n  });\n\n  const segmentationRepresentationUIDs = await Promise.all(promises);\n\n  return segmentationRepresentationUIDs;\n}\n\nasync function _addSegmentationRepresentation(\n  toolGroupId: string,\n  representationInput: RepresentationPublicInput,\n  toolGroupSpecificRepresentationConfig?: SegmentationRepresentationConfig\n): Promise<string> {\n  let segmentationRepresentationUID;\n\n  if (representationInput.type === Representations.Labelmap) {\n    segmentationRepresentationUID =\n      await labelmapDisplay.addSegmentationRepresentation(\n        toolGroupId,\n        representationInput,\n        toolGroupSpecificRepresentationConfig\n      );\n  } else if (representationInput.type === Representations.Contour) {\n    segmentationRepresentationUID =\n      await contourDisplay.addSegmentationRepresentation(\n        toolGroupId,\n        representationInput,\n        toolGroupSpecificRepresentationConfig\n      );\n  } else if (representationInput.type === Representations.Surface) {\n    segmentationRepresentationUID =\n      await surfaceDisplay.addSegmentationRepresentation(\n        toolGroupId,\n        representationInput,\n        toolGroupSpecificRepresentationConfig\n      );\n  } else {\n    throw new Error(\n      `The representation type ${representationInput.type} is not supported`\n    );\n  }\n\n  return segmentationRepresentationUID;\n}\n\nexport default addSegmentationRepresentations;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * Tool that pans the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass PanTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nPanTool.toolName = 'Pan';\nexport default PanTool;\n","import vtkMath from '@kitware/vtk.js/Common/Core/Math';\n\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { BaseTool } from './base';\n\n/**\n * Tool that rotates the camera in the plane defined by the viewPlaneNormal and the viewUp.\n */\nclass TrackballRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        rotateIncrementDegrees: 2,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  rotateCamera = (viewport, centerWorld, axis, angle) => {\n    const vtkCamera = viewport.getVtkActiveCamera();\n    const viewUp = vtkCamera.getViewUp();\n    const focalPoint = vtkCamera.getFocalPoint();\n    const position = vtkCamera.getPosition();\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, centerWorld);\n    mat4.rotate(transform, transform, angle, axis);\n    mat4.translate(transform, transform, [\n      -centerWorld[0],\n      -centerWorld[1],\n      -centerWorld[2],\n    ]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, axis);\n    vec3.transformMat4(newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n  };\n\n  // pseudocode inspired from\n  // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js\n  _dragCallback(evt: EventTypes.InteractionEventType): void {\n    const { element, currentPoints, lastPoints } = evt.detail;\n    const currentPointsCanvas = currentPoints.canvas;\n    const lastPointsCanvas = lastPoints.canvas;\n    const { rotateIncrementDegrees } = this.configuration;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const normalizedPosition = [\n      currentPointsCanvas[0] / width,\n      currentPointsCanvas[1] / height,\n    ];\n\n    const normalizedPreviousPosition = [\n      lastPointsCanvas[0] / width,\n      lastPointsCanvas[1] / height,\n    ];\n\n    const center: Types.Point2 = [width * 0.5, height * 0.5];\n    // NOTE: centerWorld corresponds to the focal point in cornerstone3D\n    const centerWorld = viewport.canvasToWorld(center);\n    const normalizedCenter = [0.5, 0.5];\n\n    const radsq = (1.0 + Math.abs(normalizedCenter[0])) ** 2.0;\n    const op = [normalizedPreviousPosition[0], 0, 0];\n    const oe = [normalizedPosition[0], 0, 0];\n\n    const opsq = op[0] ** 2;\n    const oesq = oe[0] ** 2;\n\n    const lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);\n    const loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);\n\n    const nop: Types.Point3 = [op[0], 0, lop];\n    vtkMath.normalize(nop);\n    const noe: Types.Point3 = [oe[0], 0, loe];\n    vtkMath.normalize(noe);\n\n    const dot = vtkMath.dot(nop, noe);\n    if (Math.abs(dot) > 0.0001) {\n      const angleX =\n        -2 *\n        Math.acos(vtkMath.clampValue(dot, -1.0, 1.0)) *\n        Math.sign(normalizedPosition[0] - normalizedPreviousPosition[0]) *\n        rotateIncrementDegrees;\n\n      const upVec = camera.viewUp;\n      const atV = camera.viewPlaneNormal;\n      const rightV: Types.Point3 = [0, 0, 0];\n      const forwardV: Types.Point3 = [0, 0, 0];\n\n      vtkMath.cross(upVec, atV, rightV);\n      vtkMath.normalize(rightV);\n\n      vtkMath.cross(atV, rightV, forwardV);\n      vtkMath.normalize(forwardV);\n      vtkMath.normalize(upVec);\n\n      this.rotateCamera(viewport, centerWorld, forwardV, angleX);\n\n      const angleY =\n        (normalizedPreviousPosition[1] - normalizedPosition[1]) *\n        rotateIncrementDegrees;\n\n      this.rotateCamera(viewport, centerWorld, rightV, angleY);\n\n      viewport.render();\n    }\n  }\n}\n\nTrackballRotateTool.toolName = 'TrackballRotate';\nexport default TrackballRotateTool;\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { vec2 } from 'gl-matrix';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport roundNumber from '../../utilities/roundNumber';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * ProbeTool let you get the underlying voxel value by putting a probe in that\n * location. It will give index of the location and value of the voxel.\n * You can use ProbeTool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Probe tool's text box are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * To use the ProbeTool, you first need to add it to cornerstoneTools, then create\n * a toolGroup and add the ProbeTool to it. Finally, setToolActive on the toolGroup\n *\n * ```js\n * cornerstoneTools.addTool(ProbeTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(ProbeTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(ProbeTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n *\n */\n\nclass ProbeTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  // Not necessary for this tool but needs to be defined since it's an abstract\n  // method from the parent class.\n  isPointNearTool(): boolean {\n    return false;\n  }\n\n  toolSelectedCallback() {}\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Probe Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It checks if the mouse click is near ProveTool, it overwrites the baseAnnotationTool\n   * getHandleNearImagePoint method.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: ProbeAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const point = data.handles.points[0];\n    const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n\n    const near =\n      vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity;\n\n    if (near === true) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ProbeAnnotation\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    // Find viewports to render on drag.\n\n    this.editData = {\n      //handle, // This would be useful for other tools with more than one handle\n      annotation,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { viewportId } = enabledElement;\n    this.eventDispatchDetail = {\n      viewportId,\n      renderingEngineId: renderingEngine.id,\n    };\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragCallback = (evt) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points[0] = [...worldPos];\n    annotation.invalidated = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the probe annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ProbeAnnotation;\n      const annotationUID = annotation.annotationUID;\n      const data = annotation.data;\n      const point = data.handles.points[0];\n      const canvasCoordinates = viewport.worldToCanvas(point);\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].value == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          index: null,\n          value: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related stackViewports data if\n        // they are not at the referencedImageId, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const handleGroupUID = '0';\n\n      drawHandlesSvg(\n        svgDrawingHelper,\n        annotationUID,\n        handleGroupUID,\n        [canvasCoordinates],\n        { color }\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (textLines) {\n        const textCanvasCoordinates = [\n          canvasCoordinates[0] + 6,\n          canvasCoordinates[1] - 6,\n        ];\n\n        const textUID = '0';\n        drawTextBoxSvg(\n          svgDrawingHelper,\n          annotationUID,\n          textUID,\n          textLines,\n          [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n          options\n        );\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId, viewport } = enabledElement;\n\n    const worldPos = data.handles.points[0];\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const modalityUnitOptions = {\n        isPreScaled: isViewportPreScaled(viewport, targetId),\n        isSuvScaled: this.isSuvScaled(\n          viewport,\n          targetId,\n          annotation.metadata.referencedImageId\n        ),\n      };\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata } = image;\n      const scalarData =\n        'getScalarData' in image ? image.getScalarData() : image.scalarData;\n\n      const modality = metadata.Modality;\n      const index = transformWorldToIndex(imageData, worldPos);\n\n      index[0] = Math.round(index[0]);\n      index[1] = Math.round(index[1]);\n      index[2] = Math.round(index[2]);\n\n      const samplesPerPixel =\n        scalarData.length / dimensions[2] / dimensions[1] / dimensions[0];\n\n      if (csUtils.indexWithinDimensions(index, dimensions)) {\n        this.isHandleOutsideImage = false;\n        const yMultiple = dimensions[0] * samplesPerPixel;\n        const zMultiple = dimensions[0] * dimensions[1] * samplesPerPixel;\n\n        const baseIndex =\n          index[2] * zMultiple +\n          index[1] * yMultiple +\n          index[0] * samplesPerPixel;\n        const value =\n          samplesPerPixel > 2\n            ? [\n                scalarData[baseIndex],\n                scalarData[baseIndex + 1],\n                scalarData[baseIndex + 2],\n              ]\n            : scalarData[baseIndex];\n\n        // Index[2] for stackViewport is always 0, but for visualization\n        // we reset it to be imageId index\n        if (targetId.startsWith('imageId:')) {\n          const imageId = targetId.split('imageId:')[1];\n          const imageURI = csUtils.imageIdToURI(imageId);\n          const viewports = csUtils.getViewportsWithImageURI(\n            imageURI,\n            renderingEngineId\n          );\n\n          const viewport = viewports[0];\n\n          index[2] = viewport.getCurrentImageIdIndex();\n        }\n\n        const modalityUnit = getModalityUnit(\n          modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        cachedStats[targetId] = {\n          index,\n          value,\n          Modality: modality,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetId] = {\n          index,\n          Modality: modality,\n        };\n      }\n\n      annotation.invalidated = false;\n\n      // Dispatching annotation modified\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    return cachedStats;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { index, value, modalityUnit } = cachedVolumeStats;\n\n  if (value === undefined) {\n    return;\n  }\n\n  const textLines = [];\n\n  textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n\n  textLines.push(`${roundNumber(value)} ${modalityUnit}`);\n\n  return textLines;\n}\n\nProbeTool.toolName = 'Probe';\nexport default ProbeTool;\n","/* eslint-disable @typescript-eslint/no-empty-function */\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { hideElementCursor } from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  PublicToolProps,\n  SVGDrawingHelper,\n  ToolProps,\n} from '../../types';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport ProbeTool from './ProbeTool';\nimport { ProbeAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\n\nclass DragProbeTool extends ProbeTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    newAnnotation?: boolean;\n  } | null;\n  eventDispatchDetail: {\n    viewportId: string;\n    renderingEngineId: string;\n  };\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  postMouseDownCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation: ProbeAnnotation = {\n      invalidated: true,\n      highlighted: true,\n      isVisible: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: { points: [<Types.Point3>[...worldPos]] },\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      newAnnotation: true,\n      viewportIdsToRender,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  postTouchStartCallback = (\n    evt: EventTypes.InteractionEventType\n  ): ProbeAnnotation => {\n    return this.postMouseDownCallback(evt);\n  };\n\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const annotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      [this.editData.annotation]\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const annotation = this.editData.annotation;\n    const annotationUID = annotation.annotationUID;\n    const data = annotation.data;\n    const point = data.handles.points[0];\n    const canvasCoordinates = viewport.worldToCanvas(point);\n\n    styleSpecifier.annotationUID = annotationUID;\n\n    const color = this.getStyle('color', styleSpecifier, annotation);\n\n    const modalityUnitOptions = {\n      isPreScaled: isViewportPreScaled(viewport, targetId),\n\n      isSuvScaled: this.isSuvScaled(\n        viewport,\n        targetId,\n        annotation.metadata.referencedImageId\n      ),\n    };\n\n    if (\n      !data.cachedStats[targetId] ||\n      data.cachedStats[targetId].value == null\n    ) {\n      data.cachedStats[targetId] = {\n        Modality: null,\n        index: null,\n        value: null,\n      };\n\n      this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n    } else if (annotation.invalidated) {\n      this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n    }\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const handleGroupUID = '0';\n\n    drawHandlesSvg(\n      svgDrawingHelper,\n      annotationUID,\n      handleGroupUID,\n      [canvasCoordinates],\n      { color }\n    );\n\n    renderStatus = true;\n\n    const textLines = this.configuration.getTextLines(data, targetId);\n    if (textLines) {\n      const textCanvasCoordinates = [\n        canvasCoordinates[0] + 6,\n        canvasCoordinates[1] - 6,\n      ];\n\n      const textUID = '0';\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textUID,\n        textLines,\n        [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n        this.getLinkedTextBoxStyle(styleSpecifier, annotation)\n      );\n    }\n\n    return renderStatus;\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { index, value, modalityUnit } = cachedVolumeStats;\n\n  if (value === undefined) {\n    return;\n  }\n\n  const textLines = [];\n\n  textLines.push(`(${index[0]}, ${index[1]}, ${index[2]})`);\n\n  textLines.push(`${value.toFixed(2)} ${modalityUnit}`);\n\n  return textLines;\n}\n\nDragProbeTool.toolName = 'DragProbe';\nexport default DragProbeTool;\n","import { BaseTool } from './base';\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  StackViewport,\n  utilities,\n  cache,\n  Types,\n} from '@cornerstonejs/core';\nimport { EventTypes } from '../types';\n\n// Todo: should move to configuration\nconst DEFAULT_MULTIPLIER = 4;\nconst DEFAULT_IMAGE_DYNAMIC_RANGE = 1024;\nconst PT = 'PT';\n\n/**\n * WindowLevel tool manipulates the windowLevel applied to a viewport. It\n * provides a way to set the windowCenter and windowWidth of a viewport\n * by dragging mouse over the image.\n *\n */\nclass WindowLevelTool extends BaseTool {\n  static toolName;\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this.mouseDragCallback(evt);\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    let volumeId,\n      lower,\n      upper,\n      modality,\n      newRange,\n      viewportsContainingVolumeUID;\n    let isPreScaled = false;\n\n    const properties = viewport.getProperties();\n    if (viewport instanceof VolumeViewport) {\n      const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n      volumeId = targetId.split('volumeId:')[1];\n      viewportsContainingVolumeUID = utilities.getViewportsWithVolumeId(\n        volumeId,\n        renderingEngine.id\n      );\n      ({ lower, upper } = properties.voiRange);\n      const volume = cache.getVolume(volumeId);\n      if (!volume) {\n        throw new Error('Volume not found ' + volumeId);\n      }\n      modality = volume.metadata.Modality;\n      isPreScaled = volume.scaling && Object.keys(volume.scaling).length > 0;\n    } else if (properties.voiRange) {\n      modality = (viewport as any).modality;\n      ({ lower, upper } = properties.voiRange);\n      const { preScale = { scaled: false } } = viewport.getImageData?.() || {};\n      isPreScaled =\n        preScale.scaled && preScale.scalingParameters?.suvbw !== undefined;\n    } else {\n      throw new Error('Viewport is not a valid type');\n    }\n\n    // If modality is PT, treat it special to not include the canvas delta in\n    // the x direction. For other modalities, use the canvas delta in both\n    // directions, and if the viewport is a volumeViewport, the multiplier\n    // is calculate using the volume min and max.\n    if (modality === PT) {\n      newRange = this.getPTScaledNewRange({\n        deltaPointsCanvas: deltaPoints.canvas,\n        lower,\n        upper,\n        clientHeight: element.clientHeight,\n        isPreScaled,\n        viewport,\n        volumeId,\n      });\n    } else {\n      newRange = this.getNewRange({\n        viewport,\n        deltaPointsCanvas: deltaPoints.canvas,\n        volumeId,\n        lower,\n        upper,\n      });\n    }\n\n    viewport.setProperties({\n      voiRange: newRange,\n    });\n\n    viewport.render();\n\n    if (viewport instanceof VolumeViewport) {\n      viewportsContainingVolumeUID.forEach((vp) => {\n        if (viewport !== vp) {\n          vp.render();\n        }\n      });\n      return;\n    }\n  }\n\n  getPTScaledNewRange({\n    deltaPointsCanvas,\n    lower,\n    upper,\n    clientHeight,\n    viewport,\n    volumeId,\n    isPreScaled,\n  }) {\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (isPreScaled) {\n      multiplier = 5 / clientHeight;\n    } else {\n      multiplier =\n        this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n        DEFAULT_MULTIPLIER;\n    }\n\n    const deltaY = deltaPointsCanvas[1];\n    const wcDelta = deltaY * multiplier;\n\n    upper -= wcDelta;\n    upper = isPreScaled ? Math.max(upper, 0.1) : upper;\n\n    return { lower, upper };\n  }\n\n  getNewRange({ viewport, deltaPointsCanvas, volumeId, lower, upper }) {\n    const multiplier =\n      this._getMultiplierFromDynamicRange(viewport, volumeId) ||\n      DEFAULT_MULTIPLIER;\n\n    const wwDelta = deltaPointsCanvas[0] * multiplier;\n    const wcDelta = deltaPointsCanvas[1] * multiplier;\n\n    let { windowWidth, windowCenter } = utilities.windowLevel.toWindowLevel(\n      lower,\n      upper\n    );\n\n    windowWidth += wwDelta;\n    windowCenter += wcDelta;\n\n    windowWidth = Math.max(windowWidth, 1);\n\n    // Convert back to range\n    return utilities.windowLevel.toLowHighRange(windowWidth, windowCenter);\n  }\n\n  _getMultiplierFromDynamicRange(viewport, volumeId) {\n    let imageDynamicRange;\n\n    if (volumeId) {\n      const imageVolume = cache.getVolume(volumeId);\n      const { dimensions } = imageVolume;\n      const scalarData = imageVolume.getScalarData();\n      const calculatedDynamicRange = this._getImageDynamicRangeFromMiddleSlice(\n        scalarData,\n        dimensions\n      );\n      const BitsStored = imageVolume?.metadata?.BitsStored;\n      const metadataDynamicRange = BitsStored ? 2 ** BitsStored : Infinity;\n      // Burned in Pixels often use pixel values above the BitsStored.\n      // This results in a multiplier which is way higher than what you would\n      // want in practice. Thus we take the min between the metadata dynamic\n      // range and actual middel slice dynamic range.\n      imageDynamicRange = Math.min(\n        calculatedDynamicRange,\n        metadataDynamicRange\n      );\n    } else {\n      imageDynamicRange = this._getImageDynamicRangeFromViewport(viewport);\n    }\n\n    const ratio = imageDynamicRange / DEFAULT_IMAGE_DYNAMIC_RANGE;\n\n    let multiplier = DEFAULT_MULTIPLIER;\n\n    if (ratio > 1) {\n      multiplier = Math.round(ratio);\n    }\n    return multiplier;\n  }\n\n  _getImageDynamicRangeFromViewport(viewport) {\n    const { imageData } = viewport.getImageData();\n    const dimensions = imageData.getDimensions();\n\n    if (imageData.getRange) {\n      return imageData.getRange();\n    }\n    let scalarData;\n    // if getScalarData is a method on imageData\n    if (imageData.getScalarData) {\n      scalarData = imageData.getScalarData();\n    } else {\n      scalarData = imageData.getPointData().getScalars();\n    }\n\n    if (dimensions[2] !== 1) {\n      return this._getImageDynamicRangeFromMiddleSlice(scalarData, dimensions);\n    }\n\n    let range;\n    if (scalarData.getRange) {\n      range = scalarData.getRange();\n    } else {\n      const { min, max } = this._getMinMax(scalarData, scalarData.length);\n      range = [min, max];\n    }\n\n    return range[1] - range[0];\n  }\n\n  _getImageDynamicRangeFromMiddleSlice = (scalarData, dimensions) => {\n    const middleSliceIndex = Math.floor(dimensions[2] / 2);\n\n    const frameLength = dimensions[0] * dimensions[1];\n    let bytesPerVoxel;\n    let TypedArrayConstructor;\n\n    if (scalarData instanceof Float32Array) {\n      bytesPerVoxel = 4;\n      TypedArrayConstructor = Float32Array;\n    } else if (scalarData instanceof Uint8Array) {\n      bytesPerVoxel = 1;\n      TypedArrayConstructor = Uint8Array;\n    } else if (scalarData instanceof Uint16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Uint16Array;\n    } else if (scalarData instanceof Int16Array) {\n      bytesPerVoxel = 2;\n      TypedArrayConstructor = Int16Array;\n    }\n\n    const buffer = scalarData.buffer;\n    const byteOffset = middleSliceIndex * frameLength * bytesPerVoxel;\n    const frame = new TypedArrayConstructor(buffer, byteOffset, frameLength);\n\n    const { max, min } = this._getMinMax(frame, frameLength);\n\n    return max - min;\n  };\n\n  private _getMinMax(frame: Uint8Array | Float32Array, frameLength: number) {\n    let min = Infinity;\n    let max = -Infinity;\n\n    for (let i = 0; i < frameLength; i++) {\n      const voxel = frame[i];\n\n      if (voxel < min) {\n        min = voxel;\n      }\n\n      if (voxel > max) {\n        max = voxel;\n      }\n    }\n    return { max, min };\n  }\n}\n\nWindowLevelTool.toolName = 'WindowLevel';\nexport default WindowLevelTool;\n","import { vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport { getEnabledElement, Types } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\n\n/**\n * ZoomTool tool manipulates the camera zoom applied to a viewport. It\n * provides a way to set the zoom of a viewport by dragging mouse over the image.\n *\n */\nclass ZoomTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  mouseDragCallback: (evt: EventTypes.InteractionEventType) => void;\n  initialMousePosWorld: Types.Point3;\n  dirVec: Types.Point3;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        // whether zoom to the center of the image OR zoom to the mouse position\n        zoomToCenter: false,\n        minZoomScale: 0.1,\n        maxZoomScale: 30,\n        pinchToZoom: true,\n        pan: true,\n        invert: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.initialMousePosWorld = [0, 0, 0];\n    this.dirVec = [0, 0, 0];\n    if (this.configuration.pinchToZoom) {\n      this.touchDragCallback = this._pinchCallback.bind(this);\n    } else {\n      this.touchDragCallback = this._dragCallback.bind(this);\n    }\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventData = evt.detail;\n    const { element, currentPoints } = eventData;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint } = camera;\n\n    this.initialMousePosWorld = worldPos;\n\n    // The direction vector from the clicked location to the focal point\n    // which would act as the vector to translate the image (if zoomToCenter is false)\n    let dirVec = vec3.fromValues(\n      focalPoint[0] - worldPos[0],\n      focalPoint[1] - worldPos[1],\n      focalPoint[2] - worldPos[2]\n    );\n\n    dirVec = vec3.normalize(vec3.create(), dirVec);\n\n    this.dirVec = dirVec as Types.Point3;\n\n    // we should not return true here, returning true in the preMouseDownCallback\n    // means that the event is handled by the tool and no other methods\n    // can claim the event, which will result in a bug where having Zoom on primary\n    // and clicking on an annotation will not manipulate the annotation, but will\n    // instead zoom the image (which is not what we want), so we return false here\n    return false;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    if (!this.configuration.pinchToZoom) {\n      return this.preMouseDownCallback(evt);\n    }\n  };\n\n  _pinchCallback(evt: EventTypes.InteractionEventType) {\n    const pointsList = (evt as EventTypes.TouchStartEventType).detail\n      .currentPointsList;\n\n    if (pointsList.length > 1) {\n      const { element, currentPoints } = evt.detail;\n      const enabledElement = getEnabledElement(element);\n      const { viewport } = enabledElement;\n      const camera = viewport.getCamera();\n      const worldPos = currentPoints.world;\n      const { focalPoint } = camera;\n      this.initialMousePosWorld = worldPos;\n      // The direction vector from the clicked location to the focal point\n      // which would act as the vector to translate the image (if zoomToCenter is false)\n      let dirVec = vec3.fromValues(\n        focalPoint[0] - worldPos[0],\n        focalPoint[1] - worldPos[1],\n        focalPoint[2] - worldPos[2]\n      );\n      dirVec = vec3.normalize(vec3.create(), dirVec);\n\n      this.dirVec = dirVec as Types.Point3;\n      if (camera.parallelProjection) {\n        this._dragParallelProjection(evt, viewport, camera, true);\n      } else {\n        this._dragPerspectiveProjection(evt, viewport, camera, true);\n      }\n      viewport.render();\n    }\n\n    if (this.configuration.pan) {\n      this._panCallback(evt);\n    }\n  }\n\n  // Takes ICornerstoneEvent, Mouse or Touch\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n\n    if (camera.parallelProjection) {\n      this._dragParallelProjection(evt, viewport, camera);\n    } else {\n      this._dragPerspectiveProjection(evt, viewport, camera);\n    }\n\n    viewport.render();\n  }\n\n  _dragParallelProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { parallelScale, focalPoint, position } = camera;\n\n    const zoomScale = 5 / size[1];\n    const k = deltaY * zoomScale * (this.configuration.invert ? -1 : 1);\n\n    const parallelScaleToSet = (1.0 - k) * parallelScale;\n\n    let focalPointToSet = focalPoint;\n    let positionToSet = position;\n\n    // if we're not zooming to the center, we need to adjust the focal point\n    // and position to set the focal point and position to the value that\n    // would simulate the zoom to the mouse position\n    if (!this.configuration.zoomToCenter) {\n      // Distance of the initial mouse position (world) to the focal point\n      // which is always the center of the canvas.\n      const distanceToCanvasCenter = vec3.distance(\n        focalPoint,\n        this.initialMousePosWorld\n      );\n\n      positionToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        position,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n\n      focalPointToSet = vec3.scaleAndAdd(\n        vec3.create(),\n        focalPoint,\n        this.dirVec,\n        -distanceToCanvasCenter * k\n      ) as Types.Point3;\n    }\n\n    // If it is a regular GPU accelerated viewport, then parallel scale\n    // has a physical meaning and we can use that to determine the threshold\n    // Added spacing preset in case there is no imageData on viewport\n    const imageData = viewport.getImageData();\n    let spacing = [1, 1, 1];\n    if (imageData) {\n      spacing = imageData.spacing;\n    }\n\n    const { minZoomScale, maxZoomScale } = this.configuration;\n\n    const t = element.clientHeight * spacing[1] * 0.5;\n    const scale = t / parallelScaleToSet;\n\n    let cappedParallelScale = parallelScaleToSet;\n    let thresholdExceeded = false;\n\n    if (imageData) {\n      if (scale < minZoomScale) {\n        cappedParallelScale = t / minZoomScale;\n        thresholdExceeded = true;\n      } else if (scale >= maxZoomScale) {\n        cappedParallelScale = t / maxZoomScale;\n        thresholdExceeded = true;\n      }\n    }\n\n    viewport.setCamera({\n      parallelScale: cappedParallelScale,\n      focalPoint: thresholdExceeded ? focalPoint : focalPointToSet,\n      position: thresholdExceeded ? position : positionToSet,\n    });\n  };\n\n  _dragPerspectiveProjection = (\n    evt: EventTypes.InteractionEventType,\n    viewport: Types.IStackViewport | Types.IVolumeViewport,\n    camera: Types.ICamera,\n    pinch = false\n  ): void => {\n    const { element, deltaPoints } = evt.detail;\n    const deltaY = pinch\n      ? (evt as EventTypes.TouchDragEventType).detail.deltaDistance.canvas\n      : deltaPoints.canvas[1];\n\n    const size = [element.clientWidth, element.clientHeight];\n    const { position, focalPoint, viewPlaneNormal } = camera;\n\n    const distance = vtkMath.distance2BetweenPoints(position, focalPoint);\n    const zoomScale = Math.sqrt(distance) / size[1];\n\n    const directionOfProjection = [\n      -viewPlaneNormal[0],\n      -viewPlaneNormal[1],\n      -viewPlaneNormal[2],\n    ];\n\n    const k = this.configuration.invert\n      ? deltaY / zoomScale\n      : deltaY * zoomScale;\n\n    let tmp = k * directionOfProjection[0];\n    position[0] += tmp;\n    focalPoint[0] += tmp;\n\n    tmp = k * directionOfProjection[1];\n    position[1] += tmp;\n    focalPoint[1] += tmp;\n\n    tmp = k * directionOfProjection[2];\n    position[2] += tmp;\n    focalPoint[2] += tmp;\n\n    viewport.setCamera({ position, focalPoint });\n  };\n\n  _panCallback(evt: EventTypes.InteractionEventType) {\n    const { element, deltaPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n\n    const deltaPointsWorld = deltaPoints.world;\n    const camera = enabledElement.viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    enabledElement.viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n    enabledElement.viewport.render();\n  }\n}\n\nZoomTool.toolName = 'Zoom';\nexport default ZoomTool;\n","import { getEnabledElementByIds, VolumeViewport } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { scroll } from '../utilities';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The StackScrollTool is a tool that allows the user to scroll through a\n * stack of images by pressing the mouse click and dragging\n */\nclass StackScrollTool extends BaseTool {\n  static toolName;\n  deltaY: number;\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.deltaY = 1;\n  }\n\n  mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n  touchDragCallback(evt: EventTypes.InteractionEventType) {\n    this._dragCallback(evt);\n  }\n\n  _dragCallback(evt: EventTypes.InteractionEventType) {\n    const { deltaPoints, viewportId, renderingEngineId } = evt.detail;\n    const { viewport } = getEnabledElementByIds(viewportId, renderingEngineId);\n\n    const targetId = this.getTargetId(viewport);\n    const { debounceIfNotLoaded, invert, loop } = this.configuration;\n\n    const deltaPointY = deltaPoints.canvas[1];\n    let volumeId;\n    if (viewport instanceof VolumeViewport) {\n      volumeId = targetId.split('volumeId:')[1];\n    }\n\n    const pixelsPerImage = this._getPixelPerImage(viewport);\n    const deltaY = deltaPointY + this.deltaY;\n\n    if (!pixelsPerImage) {\n      return;\n    }\n\n    if (Math.abs(deltaY) >= pixelsPerImage) {\n      const imageIdIndexOffset = Math.round(deltaY / pixelsPerImage);\n\n      scroll(viewport, {\n        delta: invert ? -imageIdIndexOffset : imageIdIndexOffset,\n        volumeId,\n        debounceLoading: debounceIfNotLoaded,\n        loop: loop,\n      });\n\n      this.deltaY = deltaY % pixelsPerImage;\n    } else {\n      this.deltaY = deltaY;\n    }\n  }\n\n  _getPixelPerImage(viewport) {\n    const { element } = viewport;\n    const numberOfSlices = viewport.getNumberOfSlices();\n\n    // The Math.max here makes it easier to mouseDrag-scroll small or really large image stacks\n    return Math.max(2, element.offsetHeight / Math.max(numberOfSlices, 8));\n  }\n}\n\nStackScrollTool.toolName = 'StackScroll';\nexport default StackScrollTool;\n","import type { Types } from '@cornerstonejs/core';\nimport { vec2, vec3 } from 'gl-matrix';\n\ntype Line2D = [Types.Point2, Types.Point2];\ntype Line3D = [Types.Point3, Types.Point3];\ntype Line = Line2D | Line3D;\n\n/**\n * Calculates the angle between two 3D lines.\n */\nfunction angleBetween3DLines(line1: Line3D, line2: Line3D): number {\n  const [p1, p2] = line1;\n  const [p3, p4] = line2;\n\n  const v1 = vec3.sub(vec3.create(), p2, p1);\n  const v2 = vec3.sub(vec3.create(), p3, p4);\n\n  const dot = vec3.dot(v1, v2);\n\n  const v1Length = vec3.length(v1);\n  const v2Length = vec3.length(v2);\n\n  const cos = dot / (v1Length * v2Length);\n\n  const radian = Math.acos(cos);\n\n  return (radian * 180) / Math.PI;\n}\n\n/**\n * Calculates the angle between two 2D lines.\n */\nfunction angleBetween2DLines(line1: Line2D, line2: Line2D): number {\n  const [p1, p2] = line1;\n  const [p3, p4] = line2;\n\n  const v1 = vec2.sub(vec2.create(), p2, p1);\n  const v2 = vec2.sub(vec2.create(), p3, p4);\n\n  const dot = vec2.dot(v1, v2);\n  const v1Length = vec2.length(v1);\n  const v2Length = vec2.length(v2);\n\n  const cos = dot / (v1Length * v2Length);\n  return Math.acos(cos) * (180 / Math.PI);\n}\n\n/**\n * Returns the angle between two lines in degrees.\n * The angle measured is that between the vectors\n * line1[1]->line1[0] AND line2[0]->line2[1].\n * @param line1 - Line = [p1, p2]\n * @param line2 - Line = [p3, p4]\n * @returns The angle between two lines in degrees.\n */\nexport default function angleBetweenLines(line1: Line, line2: Line): number {\n  const is3D = line1[0].length === 3;\n  return is3D\n    ? angleBetween3DLines(line1 as Line3D, line2 as Line3D)\n    : angleBetween2DLines(line1 as Line2D, line2 as Line2D);\n}\n","import {\n  BaseVolumeViewport,\n  getEnabledElement,\n  Types,\n} from '@cornerstonejs/core';\nimport { mat4, vec3 } from 'gl-matrix';\nimport { BaseTool } from './base';\nimport angleBetweenLines from '../utilities/math/angle/angleBetweenLines';\nimport { PublicToolProps, ToolProps, EventTypes } from '../types';\n\n/**\n * The PlanarRotateTool is a tool that allows the user to rotate\n * the image by pressing the mouse click and dragging\n */\nclass PlanarRotateTool extends BaseTool {\n  static toolName;\n  touchDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n  mouseDragCallback: (evt: EventTypes.MouseDragEventType) => void;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this.touchDragCallback = this._dragCallback.bind(this);\n    this.mouseDragCallback = this._dragCallback.bind(this);\n  }\n\n  _dragCallback(evt: EventTypes.MouseDragEventType) {\n    const { element, currentPoints, startPoints } = evt.detail;\n    const currentPointWorld = currentPoints.world;\n    const startPointWorld = startPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n\n    const centerCanvas: Types.Point2 = [width * 0.5, height * 0.5];\n    const centerWorld = viewport.canvasToWorld(centerCanvas);\n\n    let angle = angleBetweenLines(\n      [startPointWorld, centerWorld],\n      [centerWorld, currentPointWorld]\n    );\n\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const v1 = vec3.sub(vec3.create(), centerWorld, startPointWorld);\n    const v2 = vec3.sub(vec3.create(), centerWorld, currentPointWorld);\n    const cross = vec3.cross(vec3.create(), v1, v2);\n    if (vec3.dot(viewPlaneNormal, cross) > 0) {\n      angle = -angle;\n    }\n\n    if (Number.isNaN(angle)) {\n      return;\n    }\n\n    if (viewport instanceof BaseVolumeViewport) {\n      const rotAngle = (angle * Math.PI) / 180;\n      const rotMat = mat4.identity(new Float32Array(16));\n      mat4.rotate(rotMat, rotMat, rotAngle, viewPlaneNormal);\n      const rotatedViewUp = vec3.transformMat4(vec3.create(), viewUp, rotMat);\n      viewport.setCamera({ viewUp: rotatedViewUp as Types.Point3 });\n    } else {\n      const { rotation } = (viewport as Types.IStackViewport).getProperties();\n      viewport.setProperties({ rotation: rotation + angle });\n    }\n\n    viewport.render();\n  }\n}\n\nPlanarRotateTool.toolName = 'PlanarRotate';\nexport default PlanarRotateTool;\n","import { getEnabledElement } from '@cornerstonejs/core';\nimport { BaseTool } from './base';\nimport { MouseWheelEventType } from '../types/EventTypes';\nimport scroll from '../utilities/scroll';\n\n/**\n * The StackScrollMouseWheelTool is a tool that allows the user to scroll through a\n * stack of images using the mouse wheel\n */\nclass StackScrollMouseWheelTool extends BaseTool {\n  static toolName;\n\n  _configuration: any;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        invert: false,\n        debounceIfNotLoaded: true,\n        loop: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType): void {\n    const { wheel, element } = evt.detail;\n    const { direction } = wheel;\n    const { invert } = this.configuration;\n    const { viewport } = getEnabledElement(element);\n    const delta = direction * (invert ? -1 : 1);\n\n    const targetId = this.getTargetId(viewport);\n    const volumeId = targetId.split('volumeId:')[1];\n\n    scroll(viewport, {\n      delta,\n      debounceLoading: this.configuration.debounceIfNotLoaded,\n      loop: this.configuration.loop,\n      volumeId,\n    });\n  }\n}\n\nStackScrollMouseWheelTool.toolName = 'StackScrollMouseWheel';\nexport default StackScrollMouseWheelTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { mat4, vec3 } from 'gl-matrix';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { MouseWheelEventType } from '../types/EventTypes';\n\nconst DIRECTIONS = {\n  X: [1, 0, 0],\n  Y: [0, 1, 0],\n  Z: [0, 0, 1],\n  CUSTOM: [],\n};\n\n/**\n * Tool that rotates the camera on mouse wheel.\n * It rotates the camera around the focal point, and around a defined axis. Default\n * axis is set to be Z axis, but it can be configured to any custom normalized axis.\n *\n */\nclass VolumeRotateMouseWheelTool extends BaseTool {\n  static toolName;\n  _configuration: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        direction: DIRECTIONS.Z,\n        rotateIncrementDegrees: 0.5,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  mouseWheelCallback(evt: MouseWheelEventType) {\n    // https://github.com/kitware/vtk-js/blob/HEAD/Sources/Interaction/Manipulators/MouseCameraUnicamRotateManipulator/index.js#L73\n    const { element, wheel } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { direction, rotateIncrementDegrees } = this.configuration;\n\n    const camera = viewport.getCamera();\n    const { viewUp, position, focalPoint } = camera;\n\n    const { direction: deltaY } = wheel;\n\n    const [cx, cy, cz] = focalPoint;\n    const [ax, ay, az] = direction;\n\n    const angle = deltaY * rotateIncrementDegrees;\n\n    // position[3] = 1.0\n    // focalPoint[3] = 1.0\n    // viewUp[3] = 0.0\n\n    const newPosition: Types.Point3 = [0, 0, 0];\n    const newFocalPoint: Types.Point3 = [0, 0, 0];\n    const newViewUp: Types.Point3 = [0, 0, 0];\n\n    const transform = mat4.identity(new Float32Array(16));\n    mat4.translate(transform, transform, [cx, cy, cz]);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    mat4.translate(transform, transform, [-cx, -cy, -cz]);\n    vec3.transformMat4(newPosition, position, transform);\n    vec3.transformMat4(newFocalPoint, focalPoint, transform);\n\n    mat4.identity(transform);\n    mat4.rotate(transform, transform, angle, [ax, ay, az]);\n    vec3.transformMat4(<Types.Point3>newViewUp, viewUp, transform);\n\n    viewport.setCamera({\n      position: newPosition,\n      viewUp: newViewUp,\n      focalPoint: newFocalPoint,\n    });\n\n    viewport.render();\n  }\n}\n\nVolumeRotateMouseWheelTool.toolName = 'VolumeRotateMouseWheel';\nexport default VolumeRotateMouseWheelTool;\n","import { BaseTool } from './base';\nimport { getEnabledElement, VolumeViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { getPointInLineOfSightWithCriteria } from '../utilities/planar';\nimport jumpToWorld from '../utilities/viewport/jumpToWorld';\nimport { PublicToolProps, ToolProps } from '../types';\nimport { getToolGroupForViewport } from '../store/ToolGroupManager';\n\n/**\n * On a Maximum Intensity Projection (MIP) viewport, MIPJumpToClickTool allows the\n * user to click on a point in the MIP and the targetViewportIdS (provided in the\n * tool configuration) will be scrolled (jumped) to the location of the point with\n * the highest intensity value in the MIP.\n */\nclass MIPJumpToClickTool extends BaseTool {\n  static toolName;\n\n  _bounds: any;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        targetViewportIds: [],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Handles the click event, and move the camera's focal point the brightest\n   * point that is in the line of sight of camera. This function 1) search for the\n   * brightest point in the line of sight, 2) move the camera to that point,\n   * this triggers a cameraModified event which then 4) moves all other synced\n   * viewports and their crosshairs.\n   *\n   * @param evt - click event\n   */\n  mouseClickCallback(evt): void {\n    const { element, currentPoints } = evt.detail;\n\n    // 1. Getting the enabled element\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    // 2. Getting the target volume that is clicked on\n    const targetId = this.getTargetId(viewport as Types.IVolumeViewport);\n\n    if (!targetId.startsWith('volumeId')) {\n      throw new Error(\n        `MIPJumpToClickTool: targetId is not a volumeId, you should only use MIPJumpToClickTool with a volumeId as the targetId`\n      );\n    }\n\n    const volumeId = targetId.split('volumeId:')[1];\n\n    // 3. Criteria function to search for the point (maximum intensity)\n    let maxIntensity = -Infinity;\n    const maxFn = (intensity, point) => {\n      if (intensity > maxIntensity) {\n        maxIntensity = intensity;\n        return point;\n      }\n    };\n\n    // 4. Search for the brightest point location in the line of sight\n    const brightestPoint = getPointInLineOfSightWithCriteria(\n      viewport as Types.IVolumeViewport,\n      currentPoints.world,\n      volumeId,\n      maxFn\n    );\n\n    if (!brightestPoint || !brightestPoint.length) {\n      return;\n    }\n\n    const { targetViewportIds, toolGroupId } = this.configuration;\n    // TODO - consider making this a utility\n    const viewports = renderingEngine.getViewports().filter((vp) => {\n      if (targetViewportIds?.indexOf(vp.id) >= 0) {\n        return true;\n      }\n      const foundToolGroup = getToolGroupForViewport(vp.id, renderingEngine.id);\n      if (toolGroupId && toolGroupId === foundToolGroup?.id) {\n        return true;\n      }\n      return false;\n    });\n\n    // 6. Update all the targetedViewports to jump\n    viewports.forEach((viewport) => {\n      // Todo: current limitation is that we cannot jump in viewports\n      // that don't belong to the renderingEngine of the source clicked viewport\n      if (viewport instanceof VolumeViewport) {\n        jumpToWorld(viewport, brightestPoint);\n      } else {\n        console.warn(\n          'Cannot jump to specified world coordinates for a viewport that is not a VolumeViewport'\n        );\n      }\n    });\n  }\n}\n\nMIPJumpToClickTool.toolName = 'MIPJumpToClickTool';\nexport default MIPJumpToClickTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { LengthAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * LengthTool let you draw annotations that measures the length of two drawing\n * points on a slice. You can use the LengthTool in all imaging planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(LengthTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(LengthTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(LengthTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n\n */\n\nclass LengthTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): LengthAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: LengthAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: LengthAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as LengthAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      // Todo: move these into annotationTool class\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit == null\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-line`;\n      const lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        dataId\n      );\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      // Need to update to sync with annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    // TODO clean up, this doesn't need a length per volume, it has no stats derived from volumes.\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n      const scale = getCalibratedScale(image);\n\n      const length = this._calculateLength(worldPos1, worldPos2) / scale;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n\n      this._isInsideVolume(index1, index2, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      // TODO -> Do we instead want to clip to the bounds of the volume and only include that portion?\n      // Seems like a lot of work for an unrealistic case. At the moment bail out of stat calculation if either\n      // corner is off the canvas.\n\n      // todo: add insideVolume calculation, for removing tool if outside\n      cachedStats[targetId] = {\n        length,\n        unit: getCalibratedLengthUnits(null, image),\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { length, unit } = cachedVolumeStats;\n\n  // Can be null on load\n  if (length === undefined || length === null || isNaN(length)) {\n    return;\n  }\n\n  const textLines = [`${roundNumber(length)} ${unit}`];\n\n  return textLines;\n}\n\nLengthTool.toolName = 'Length';\nexport default LengthTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport vtkMatrixBuilder from '@kitware/vtk.js/Common/Core/MatrixBuilder';\n\nimport { AnnotationTool } from './base';\n\nimport {\n  getEnabledElementByIds,\n  getEnabledElement,\n  utilities as csUtils,\n  Enums,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getToolGroup,\n  getToolGroupForViewport,\n} from '../store/ToolGroupManager';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../stateManagement/annotation/annotationState';\n\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n} from '../drawingSvg';\nimport { state } from '../store';\nimport { Events } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../cursors/elementCursor';\nimport liangBarksyClip from '../utilities/math/vec2/liangBarksyClip';\n\nimport * as lineSegment from '../utilities/math/line';\nimport {\n  Annotation,\n  Annotations,\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../types';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { CONSTANTS } from '@cornerstonejs/core';\n\nconst { RENDERING_DEFAULTS } = CONSTANTS;\n\n// TODO: nested config is weird\ninterface ToolConfiguration {\n  configuration?: {\n    getReferenceLineColor?: (viewportId: string) => string;\n    getReferenceLineControllable?: (viewportId: string) => boolean;\n    getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n    getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n    referenceLinesCenterGapRadius?: number;\n    shadow?: boolean;\n    autopan?: {\n      enabled: boolean;\n      panSize: number;\n    };\n    mobile?: {\n      enabled: boolean;\n      opacity: number;\n      handleRadius: number;\n    };\n  };\n}\n\ninterface CrosshairsAnnotation extends Annotation {\n  data: {\n    handles: {\n      rotationPoints: any[]; // rotation handles, used for rotation interactions\n      slabThicknessPoints: any[]; // slab thickness handles, used for setting the slab thickness\n      activeOperation: number | null; // 0 translation, 1 rotation handles, 2 slab thickness handles\n      toolCenter: Types.Point3;\n    };\n    activeViewportIds: string[]; // a list of the viewport ids connected to the reference lines being translated\n    viewportId: string;\n  };\n}\n\nfunction defaultReferenceLineColor() {\n  return 'rgb(0, 200, 0)';\n}\n\nfunction defaultReferenceLineControllable() {\n  return true;\n}\n\nfunction defaultReferenceLineDraggableRotatable() {\n  return true;\n}\n\nfunction defaultReferenceLineSlabThicknessControlsOn() {\n  return true;\n}\n\nconst OPERATION = {\n  DRAG: 1,\n  ROTATE: 2,\n  SLAB: 3,\n};\n\nconst EPSILON = 1e-3;\n\n/**\n * CrosshairsTool is a tool that provides reference lines between different viewports\n * of a toolGroup. Using crosshairs, you can jump to a specific location in one\n * viewport and the rest of the viewports in the toolGroup will be aligned to that location.\n * Crosshairs have grababble handles that can be used to rotate and translate the\n * reference lines. They can also be used to set the slab thickness of the viewports\n * by modifying the slab thickness handles.\n *\n */\nclass CrosshairsTool extends AnnotationTool {\n  static toolName;\n\n  toolCenter: Types.Point3 = [0, 0, 0]; // NOTE: it is assumed that all the active/linked viewports share the same crosshair center.\n  // This because the rotation operation rotates also all the other active/intersecting reference lines of the same angle\n  _getReferenceLineColor?: (viewportId: string) => string;\n  _getReferenceLineControllable?: (viewportId: string) => boolean;\n  _getReferenceLineDraggableRotatable?: (viewportId: string) => boolean;\n  _getReferenceLineSlabThicknessControlsOn?: (viewportId: string) => boolean;\n  editData: {\n    annotation: any;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse'],\n      configuration: {\n        shadow: true,\n        // renders a colored circle on top right of the viewports whose color\n        // matches the color of the reference line\n        viewportIndicators: true,\n        // Auto pan is a configuration which will update pan\n        // other viewports in the toolGroup if the center of the crosshairs\n        // is outside of the viewport. This might be useful for the case\n        // when the user is scrolling through an image (usually in the zoomed view)\n        // and the crosshairs will eventually get outside of the viewport for\n        // the other viewports.\n        autoPan: {\n          enabled: false,\n          panSize: 10,\n        },\n        // radius of the area around the intersection of the planes, in which\n        // the reference lines will not be rendered. This is only used when\n        // having 3 viewports in the toolGroup.\n        referenceLinesCenterGapRadius: 20,\n        // actorUIDs for slabThickness application, if not defined, the slab thickness\n        // will be applied to all actors of the viewport\n        filterActorUIDsToSetSlabThickness: [],\n        // blend mode for slabThickness modifications\n        slabThicknessBlendMode: Enums.BlendModes.MAXIMUM_INTENSITY_BLEND,\n        mobile: {\n          enabled: false,\n          opacity: 0.8,\n          handleRadius: 9,\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._getReferenceLineColor =\n      toolProps.configuration?.getReferenceLineColor ||\n      defaultReferenceLineColor;\n    this._getReferenceLineControllable =\n      toolProps.configuration?.getReferenceLineControllable ||\n      defaultReferenceLineControllable;\n    this._getReferenceLineDraggableRotatable =\n      toolProps.configuration?.getReferenceLineDraggableRotatable ||\n      defaultReferenceLineDraggableRotatable;\n    this._getReferenceLineSlabThicknessControlsOn =\n      toolProps.configuration?.getReferenceLineSlabThicknessControlsOn ||\n      defaultReferenceLineSlabThicknessControlsOn;\n  }\n\n  /**\n   * Gets the camera from the viewport, and adds crosshairs annotation for the viewport\n   * to the annotationManager. If any annotation is found in the annotationManager, it\n   * overwrites it.\n   * @param viewportInfo - The viewportInfo for the viewport to add the crosshairs\n   * @returns viewPlaneNormal and center of viewport canvas in world space\n   */\n  initializeViewport = ({\n    renderingEngineId,\n    viewportId,\n  }: Types.IViewportId): {\n    normal: Types.Point3;\n    point: Types.Point3;\n  } => {\n    const enabledElement = getEnabledElementByIds(\n      viewportId,\n      renderingEngineId\n    );\n    const { FrameOfReferenceUID, viewport } = enabledElement;\n    const { element } = viewport;\n    const { position, focalPoint, viewPlaneNormal } = viewport.getCamera();\n\n    // Check if there is already annotation for this viewport\n    let annotations = this._getAnnotations(enabledElement);\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (annotations.length) {\n      // If found, it will override it by removing the annotation and adding it later\n      removeAnnotation(annotations[0].annotationUID);\n    }\n\n    const annotation = {\n      highlighted: false,\n      metadata: {\n        cameraPosition: <Types.Point3>[...position],\n        cameraFocalPoint: <Types.Point3>[...focalPoint],\n        FrameOfReferenceUID,\n        toolName: this.getToolName(),\n      },\n      data: {\n        handles: {\n          rotationPoints: [], // rotation handles, used for rotation interactions\n          slabThicknessPoints: [], // slab thickness handles, used for setting the slab thickness\n          toolCenter: this.toolCenter,\n        },\n        activeOperation: null, // 0 translation, 1 rotation handles, 2 slab thickness handles\n        activeViewportIds: [], // a list of the viewport ids connected to the reference lines being translated\n        viewportId,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    return {\n      normal: viewPlaneNormal,\n      point: viewport.canvasToWorld([\n        viewport.canvas.clientWidth / 2,\n        viewport.canvas.clientHeight / 2,\n      ]),\n    };\n  };\n\n  _getViewportsInfo = () => {\n    const viewports = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    return viewports;\n  };\n\n  onSetToolActive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    // Upon new setVolumes on viewports we need to update the crosshairs\n    // reference points in the new space, so we subscribe to the event\n    // and update the reference points accordingly.\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n    this._subscribeToViewportNewVolumeSet(viewportsInfo);\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolPassive() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolEnabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this.computeToolCenter(viewportsInfo);\n  }\n\n  onSetToolDisabled() {\n    const viewportsInfo = this._getViewportsInfo();\n\n    this._unsubscribeToViewportNewVolumeSet(viewportsInfo);\n\n    // Crosshairs annotations in the state\n    // has no value when the tool is disabled\n    // since viewports can change (zoom, pan, scroll)\n    // between disabled and enabled/active states.\n    // so we just remove the annotations from the state\n    viewportsInfo.forEach(({ renderingEngineId, viewportId }) => {\n      const enabledElement = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n\n      if (!enabledElement) {\n        return;\n      }\n\n      const annotations = this._getAnnotations(enabledElement);\n\n      if (annotations?.length) {\n        annotations.forEach((annotation) => {\n          removeAnnotation(annotation.annotationUID);\n        });\n      }\n    });\n  }\n\n  /**\n   * When activated, it initializes the crosshairs. It begins by computing\n   * the intersection of viewports associated with the crosshairs instance.\n   * When all three views are accessible, the intersection (e.g., crosshairs tool centre)\n   * will be an exact point in space; however, with two viewports, because the\n   * intersection of two planes is a line, it assumes the last view is between the centre\n   * of the two rendering viewports.\n   * @param viewportsInfo Array of viewportInputs which each item containing {viewportId, renderingEngineId}\n   */\n  computeToolCenter = (viewportsInfo): void => {\n    if (!viewportsInfo.length || viewportsInfo.length === 1) {\n      throw new Error(\n        'For crosshairs to operate, at least two viewports must be given.'\n      );\n    }\n\n    // Todo: handle two same view viewport, or more than 3 viewports\n    const [firstViewport, secondViewport, thirdViewport] = viewportsInfo;\n\n    // Initialize first viewport\n    const { normal: normal1, point: point1 } =\n      this.initializeViewport(firstViewport);\n\n    // Initialize second viewport\n    const { normal: normal2, point: point2 } =\n      this.initializeViewport(secondViewport);\n\n    let normal3 = <Types.Point3>[0, 0, 0];\n    let point3 = vec3.create();\n\n    // If there are three viewports\n    if (thirdViewport) {\n      ({ normal: normal3, point: point3 } =\n        this.initializeViewport(thirdViewport));\n    } else {\n      // If there are only two views (viewport) associated with the crosshairs:\n      // In this situation, we don't have a third information to find the\n      // exact intersection, and we \"assume\" the third view is looking at\n      // a location in between the first and second view centers\n      vec3.add(point3, point1, point2);\n      vec3.scale(point3, point3, 0.5);\n      vec3.cross(normal3, normal1, normal2);\n    }\n\n    // Planes of each viewport\n    const firstPlane = csUtils.planar.planeEquation(normal1, point1);\n    const secondPlane = csUtils.planar.planeEquation(normal2, point2);\n    const thirdPlane = csUtils.planar.planeEquation(normal3, point3);\n\n    // Calculating the intersection of 3 planes\n    // prettier-ignore\n    this.toolCenter = csUtils.planar.threePlaneIntersection(firstPlane, secondPlane, thirdPlane)\n\n    // assuming all viewports are in the same rendering engine\n    const { renderingEngine } = getEnabledElementByIds(\n      viewportsInfo[0].viewportId,\n      viewportsInfo[0].renderingEngineId\n    );\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  /**\n   * addNewAnnotation acts as jump for the crosshairs tool. It is called when\n   * the user clicks on the image. It does not store the annotation in the stateManager though.\n   *\n   * @param evt - The mouse event\n   * @param interactionType - The type of interaction (e.g., mouse, touch, etc.)\n   * @returns Crosshairs annotation\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CrosshairsAnnotation => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { currentPoints } = eventDetail;\n    const jumpWorld = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    this._jump(enabledElement, jumpWorld);\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredAnnotations = this.filterInteractableAnnotationsForElement(\n      viewport.element,\n      annotations\n    );\n\n    // viewport Annotation\n    const { data } = filteredAnnotations[0];\n\n    const { rotationPoints } = data.handles;\n    const viewportIdArray = [];\n    // put all the draggable reference lines in the viewportIdArray\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n      viewportIdArray.push(otherViewport.id);\n      // rotation handles are two per viewport\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n    // set translation operation\n    data.handles.activeOperation = OPERATION.DRAG;\n\n    evt.preventDefault();\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n    return filteredAnnotations[0];\n  };\n\n  cancel = () => {\n    console.log('Not implemented yet');\n  };\n\n  /**\n   * It checks if the mouse click is near crosshairs handles, if yes\n   * it returns the handle location. If the mouse click is not near any\n   * of the handles, it does not return anything.\n   *\n   * @param element - The element that the tool is attached to.\n   * @param annotation - The annotation object associated with the annotation\n   * @param canvasCoords - The coordinates of the mouse click on canvas\n   * @param proximity - The distance from the mouse cursor to the point\n   * that is considered \"near\".\n   * @returns The handle that is closest to the cursor, or null if the cursor\n   * is not near any of the handles.\n   */\n  getHandleNearImagePoint(\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): ToolHandle | undefined {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    let point = this._getRotationHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n\n    point = this._getSlabThicknessHandleNearImagePoint(\n      viewport,\n      annotation,\n      canvasCoords,\n      proximity\n    );\n\n    if (point !== null) {\n      return point;\n    }\n  }\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n\n    // NOTE: handle index or coordinates are not used when dragging.\n    // This because the handle points are actually generated in the renderTool and they are a derivative\n    // from the camera variables of the viewports and of the slab thickness variable.\n    // Remember that the translation and rotation operations operate on the camera\n    // variables and not really on the handles. Similar for the slab thickness.\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * It returns if the canvas point is near the provided crosshairs annotation in the\n   * provided element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CrosshairsAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    if (this._pointNearTool(element, annotation, canvasCoords, 6)) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    interactionType: InteractionTypes\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    annotation.highlighted = true;\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  onCameraModified = (evt) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const viewport = enabledElement.viewport as Types.IVolumeViewport;\n\n    const annotations = this._getAnnotations(enabledElement);\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport that the camera modified is originating from\n    const viewportAnnotation =\n      filteredToolAnnotations[0] as CrosshairsAnnotation;\n\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    // -- Update the camera of other linked viewports containing the same volumeId that\n    //    have the same camera in case of translation\n    // -- Update the crosshair center in world coordinates in annotation.\n    // This is necessary because other tools can modify the position of the slices,\n    // e.g. stackScroll tool at wheel scroll. So we update the coordinates of the center always here.\n    // NOTE: rotation and slab thickness handles are created/updated in renderTool.\n    const currentCamera = viewport.getCamera();\n    const oldCameraPosition = viewportAnnotation.metadata.cameraPosition;\n    const deltaCameraPosition: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.position,\n      oldCameraPosition,\n      deltaCameraPosition\n    );\n\n    const oldCameraFocalPoint = viewportAnnotation.metadata.cameraFocalPoint;\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(\n      currentCamera.focalPoint,\n      oldCameraFocalPoint,\n      deltaCameraFocalPoint\n    );\n\n    // updated cached \"previous\" camera position and focal point\n    viewportAnnotation.metadata.cameraPosition = [...currentCamera.position];\n    viewportAnnotation.metadata.cameraFocalPoint = [\n      ...currentCamera.focalPoint,\n    ];\n\n    const viewportControllable = this._getReferenceLineControllable(\n      viewport.id\n    );\n    const viewportDraggableRotatable = this._getReferenceLineDraggableRotatable(\n      viewport.id\n    );\n    if (\n      !csUtils.isEqual(currentCamera.position, oldCameraPosition, 1e-3) &&\n      viewportControllable &&\n      viewportDraggableRotatable\n    ) {\n      // Is camera Modified a TRANSLATION or ROTATION?\n      let isRotation = false;\n\n      // This is guaranteed to be the same diff for both position and focal point\n      // if the camera is modified by pan, zoom, or scroll BUT for rotation of\n      // crosshairs handles it will be different.\n      const cameraModifiedSameForPosAndFocalPoint = csUtils.isEqual(\n        deltaCameraPosition,\n        deltaCameraFocalPoint,\n        1e-3\n      );\n\n      // NOTE: it is a translation if the the focal point and camera position shifts are the same\n      if (!cameraModifiedSameForPosAndFocalPoint) {\n        isRotation = true;\n      }\n\n      const cameraModifiedInPlane =\n        Math.abs(\n          vtkMath.dot(deltaCameraPosition, currentCamera.viewPlaneNormal)\n        ) < 1e-2;\n\n      // TRANSLATION\n      // NOTE1: if the camera modified is a result of a pan or zoom don't update the crosshair center\n      // NOTE2: rotation handles are updates in renderTool\n      if (!isRotation && !cameraModifiedInPlane) {\n        this.toolCenter[0] += deltaCameraPosition[0];\n        this.toolCenter[1] += deltaCameraPosition[1];\n        this.toolCenter[2] += deltaCameraPosition[2];\n      }\n    }\n\n    // AutoPan modification\n    if (this.configuration.autoPan?.enabled) {\n      const toolGroup = getToolGroupForViewport(\n        viewport.id,\n        renderingEngine.id\n      );\n\n      const otherViewportIds = toolGroup\n        .getViewportIds()\n        .filter((id) => id !== viewport.id);\n\n      otherViewportIds.forEach((viewportId) => {\n        this._autoPanViewportIfNecessary(viewportId, renderingEngine);\n      });\n    }\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  mouseMoveCallback = (\n    evt: EventTypes.MouseMoveEventType,\n    filteredToolAnnotations: Annotations\n  ): boolean => {\n    const { element, currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n    let imageNeedsUpdate = false;\n\n    for (let i = 0; i < filteredToolAnnotations.length; i++) {\n      const annotation = filteredToolAnnotations[i] as CrosshairsAnnotation;\n\n      if (isAnnotationLocked(annotation)) {\n        continue;\n      }\n\n      const { data, highlighted } = annotation;\n      if (!data.handles) {\n        continue;\n      }\n\n      const previousActiveOperation = data.handles.activeOperation;\n      const previousActiveViewportIds =\n        data.activeViewportIds && data.activeViewportIds.length > 0\n          ? [...data.activeViewportIds]\n          : [];\n\n      // This init are necessary, because when we move the mouse they are not cleaned by _endCallback\n      data.activeViewportIds = [];\n      data.handles.activeOperation = null;\n\n      const handleNearImagePoint = this.getHandleNearImagePoint(\n        element,\n        annotation,\n        canvasCoords,\n        6\n      );\n\n      let near = false;\n      if (handleNearImagePoint) {\n        near = true;\n      } else {\n        near = this._pointNearTool(element, annotation, canvasCoords, 6);\n      }\n\n      const nearToolAndNotMarkedActive = near && !highlighted;\n      const notNearToolAndMarkedActive = !near && highlighted;\n      if (nearToolAndNotMarkedActive || notNearToolAndMarkedActive) {\n        annotation.highlighted = !highlighted;\n        imageNeedsUpdate = true;\n      } else if (\n        data.handles.activeOperation !== previousActiveOperation ||\n        !this._areViewportIdArraysEqual(\n          data.activeViewportIds,\n          previousActiveViewportIds\n        )\n      ) {\n        imageNeedsUpdate = true;\n      }\n    }\n\n    return imageNeedsUpdate;\n  };\n\n  filterInteractableAnnotationsForElement = (element, annotations) => {\n    if (!annotations || !annotations.length) {\n      return [];\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId } = enabledElement;\n\n    const viewportUIDSpecificCrosshairs = annotations.filter(\n      (annotation) => annotation.data.viewportId === viewportId\n    );\n\n    return viewportUIDSpecificCrosshairs;\n  };\n\n  /**\n   * renders the crosshairs lines and handles in the requestAnimationFrame callback\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, renderingEngine } = enabledElement;\n    const { element } = viewport;\n    const annotations = this._getAnnotations(enabledElement);\n    const camera = viewport.getCamera();\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!annotations?.length || !viewportAnnotation?.data) {\n      // No annotations yet, and didn't just create it as we likely don't have a FrameOfReference/any data loaded yet.\n      return renderStatus;\n    }\n\n    const annotationUID = viewportAnnotation.annotationUID;\n\n    // Get cameras/canvases for each of these.\n    // -- Get two world positions for this canvas in this line (e.g. the diagonal)\n    // -- Convert these world positions to this canvas.\n    // -- Extend/confine this line to fit in this canvas.\n    // -- Render this line.\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const canvasMinDimensionLength = Math.min(clientWidth, clientHeight);\n\n    const data = viewportAnnotation.data;\n    const crosshairCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    const otherViewportAnnotations =\n      this._filterAnnotationsByUniqueViewportOrientations(\n        enabledElement,\n        annotations\n      );\n\n    const referenceLines = [];\n\n    // get canvas information for points and lines (canvas box, canvas horizontal distances)\n    const canvasBox = [0, 0, clientWidth, clientHeight];\n\n    otherViewportAnnotations.forEach((annotation) => {\n      const { data } = annotation;\n\n      data.handles.toolCenter = this.toolCenter;\n\n      const otherViewport = renderingEngine.getViewport(\n        data.viewportId\n      ) as Types.IVolumeViewport;\n\n      const otherCamera = otherViewport.getCamera();\n\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const otherViewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      const otherViewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      // get coordinates for the reference line\n      const { clientWidth, clientHeight } = otherViewport.canvas;\n      const otherCanvasDiagonalLength = Math.sqrt(\n        clientWidth * clientWidth + clientHeight * clientHeight\n      );\n      const otherCanvasCenter: Types.Point2 = [\n        clientWidth * 0.5,\n        clientHeight * 0.5,\n      ];\n      const otherViewportCenterWorld =\n        otherViewport.canvasToWorld(otherCanvasCenter);\n\n      const direction: Types.Point3 = [0, 0, 0];\n      vtkMath.cross(\n        camera.viewPlaneNormal,\n        otherCamera.viewPlaneNormal,\n        direction\n      );\n      vtkMath.normalize(direction);\n      vtkMath.multiplyScalar(\n        <Types.Point3>direction,\n        otherCanvasDiagonalLength\n      );\n\n      const pointWorld0: Types.Point3 = [0, 0, 0];\n      vtkMath.add(otherViewportCenterWorld, direction, pointWorld0);\n\n      const pointWorld1: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(otherViewportCenterWorld, direction, pointWorld1);\n\n      const pointCanvas0 = viewport.worldToCanvas(pointWorld0);\n\n      const otherViewportCenterCanvas = viewport.worldToCanvas(\n        otherViewportCenterWorld\n      );\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        pointCanvas0,\n        otherViewportCenterCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      // Graphic:\n      // Mid -> SlabThickness handle\n      // Short -> Rotation handle\n      //                           Long\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      // Long --- Mid--- Short--- Center --- Short --- Mid --- Long\n      //                            |\n      //                            |\n      //                            |\n      //                          Short\n      //                            |\n      //                            |\n      //                            |\n      //                           Mid\n      //                            |\n      //                            |\n      //                            |\n      //                           Long\n      const canvasVectorFromCenterLong = vec2.create();\n\n      vec2.scale(\n        canvasVectorFromCenterLong,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 100\n      );\n      const canvasVectorFromCenterMid = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterMid,\n        canvasUnitVectorFromCenter,\n        // to maximize the visibility of the controls, they need to be\n        // placed at most at half the length of the shortest side of the canvas.\n        // Chosen 0.4 to have some margin to the edge.\n        canvasMinDimensionLength * 0.4\n      );\n      const canvasVectorFromCenterShort = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterShort,\n        canvasUnitVectorFromCenter,\n        // Chosen 0.2 because is half of 0.4.\n        canvasMinDimensionLength * 0.2\n      );\n      const canvasVectorFromCenterStart = vec2.create();\n      const centerGap = this.configuration.referenceLinesCenterGapRadius;\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        // Don't put a gap if the the third view is missing\n        otherViewportAnnotations.length === 2 ? centerGap : 0\n      );\n\n      // Computing Reference start and end (4 lines per viewport in case of 3 view MPR)\n      const refLinePointOne = vec2.create();\n      const refLinePointTwo = vec2.create();\n      const refLinePointThree = vec2.create();\n      const refLinePointFour = vec2.create();\n\n      let refLinesCenter = vec2.clone(crosshairCenterCanvas);\n      if (!otherViewportDraggableRotatable || !otherViewportControllable) {\n        refLinesCenter = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      vec2.add(refLinePointOne, refLinesCenter, canvasVectorFromCenterStart);\n      vec2.add(refLinePointTwo, refLinesCenter, canvasVectorFromCenterLong);\n      vec2.subtract(\n        refLinePointThree,\n        refLinesCenter,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        refLinePointFour,\n        refLinesCenter,\n        canvasVectorFromCenterLong\n      );\n\n      // Clipping lines to be only included in a box (canvas), we don't want\n      // the lines goes beyond canvas\n      liangBarksyClip(refLinePointOne, refLinePointTwo, canvasBox);\n      liangBarksyClip(refLinePointThree, refLinePointFour, canvasBox);\n\n      // Computing rotation handle positions\n      const rotHandleOne = vec2.create();\n      vec2.subtract(\n        rotHandleOne,\n        crosshairCenterCanvas,\n        canvasVectorFromCenterMid\n      );\n\n      const rotHandleTwo = vec2.create();\n      vec2.add(rotHandleTwo, crosshairCenterCanvas, canvasVectorFromCenterMid);\n\n      // Computing SlabThickness (st below) position\n\n      // SlabThickness center in canvas\n      let stHandlesCenterCanvas = vec2.clone(crosshairCenterCanvas);\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterCanvas = vec2.clone(otherViewportCenterCanvas);\n      }\n\n      // SlabThickness center in world\n      let stHandlesCenterWorld: Types.Point3 = [...this.toolCenter];\n      if (\n        !otherViewportDraggableRotatable &&\n        otherViewportSlabThicknessControlsOn\n      ) {\n        stHandlesCenterWorld = [...otherViewportCenterWorld];\n      }\n\n      const worldUnitVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vtkMath.subtract(pointWorld0, pointWorld1, worldUnitVectorFromCenter);\n      vtkMath.normalize(worldUnitVectorFromCenter);\n\n      const { viewPlaneNormal } = camera;\n      // @ts-ignore // Todo: fix after vtk pr merged\n      const { matrix } = vtkMatrixBuilder\n        .buildFromDegree()\n        // @ts-ignore fix after vtk pr merged\n        .rotate(90, viewPlaneNormal);\n\n      const worldUnitOrthoVectorFromCenter: Types.Point3 = [0, 0, 0];\n      vec3.transformMat4(\n        worldUnitOrthoVectorFromCenter,\n        worldUnitVectorFromCenter,\n        matrix\n      );\n\n      const slabThicknessValue = otherViewport.getSlabThickness();\n      const worldOrthoVectorFromCenter: Types.Point3 = [\n        ...worldUnitOrthoVectorFromCenter,\n      ];\n      vtkMath.multiplyScalar(worldOrthoVectorFromCenter, slabThicknessValue);\n\n      const worldVerticalRefPoint: Types.Point3 = [0, 0, 0];\n      vtkMath.add(\n        stHandlesCenterWorld,\n        worldOrthoVectorFromCenter,\n        worldVerticalRefPoint\n      );\n\n      // convert vertical world distances in canvas coordinates\n      const canvasVerticalRefPoint = viewport.worldToCanvas(\n        worldVerticalRefPoint\n      );\n\n      // points for slab thickness lines\n      const canvasOrthoVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasOrthoVectorFromCenter,\n        stHandlesCenterCanvas,\n        canvasVerticalRefPoint\n      );\n\n      const stLinePointOne = vec2.create();\n      vec2.subtract(\n        stLinePointOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointOne, stLinePointOne, canvasOrthoVectorFromCenter);\n\n      const stLinePointTwo = vec2.create();\n      vec2.add(\n        stLinePointTwo,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.add(stLinePointTwo, stLinePointTwo, canvasOrthoVectorFromCenter);\n\n      liangBarksyClip(stLinePointOne, stLinePointTwo, canvasBox);\n\n      const stLinePointThree = vec2.create();\n      vec2.add(\n        stLinePointThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointThree,\n        stLinePointThree,\n        canvasOrthoVectorFromCenter\n      );\n\n      const stLinePointFour = vec2.create();\n      vec2.subtract(\n        stLinePointFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterLong\n      );\n      vec2.subtract(\n        stLinePointFour,\n        stLinePointFour,\n        canvasOrthoVectorFromCenter\n      );\n\n      liangBarksyClip(stLinePointThree, stLinePointFour, canvasBox);\n\n      // points for slab thickness handles\n      const stHandleOne = vec2.create();\n      const stHandleTwo = vec2.create();\n      const stHandleThree = vec2.create();\n      const stHandleFour = vec2.create();\n\n      vec2.subtract(\n        stHandleOne,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.add(stHandleOne, stHandleOne, canvasOrthoVectorFromCenter);\n      vec2.add(stHandleTwo, stHandlesCenterCanvas, canvasVectorFromCenterShort);\n      vec2.add(stHandleTwo, stHandleTwo, canvasOrthoVectorFromCenter);\n      vec2.subtract(\n        stHandleThree,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleThree, stHandleThree, canvasOrthoVectorFromCenter);\n      vec2.add(\n        stHandleFour,\n        stHandlesCenterCanvas,\n        canvasVectorFromCenterShort\n      );\n      vec2.subtract(stHandleFour, stHandleFour, canvasOrthoVectorFromCenter);\n\n      referenceLines.push([\n        otherViewport,\n        refLinePointOne,\n        refLinePointTwo,\n        refLinePointThree,\n        refLinePointFour,\n        stLinePointOne,\n        stLinePointTwo,\n        stLinePointThree,\n        stLinePointFour,\n        rotHandleOne,\n        rotHandleTwo,\n        stHandleOne,\n        stHandleTwo,\n        stHandleThree,\n        stHandleFour,\n      ]);\n    });\n\n    const newRtpoints = [];\n    const newStpoints = [];\n    const viewportColor = this._getReferenceLineColor(viewport.id);\n    const color =\n      viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n    referenceLines.forEach((line, lineIndex) => {\n      // get color for the reference line\n      const otherViewport = line[0];\n      const viewportColor = this._getReferenceLineColor(otherViewport.id);\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id) ||\n        this.configuration.mobile?.enabled;\n      const selectedViewportId = data.activeViewportIds.find(\n        (id) => id === otherViewport.id\n      );\n\n      let color =\n        viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n      let lineWidth = 1;\n\n      const lineActive =\n        data.handles.activeOperation !== null &&\n        data.handles.activeOperation === OPERATION.DRAG &&\n        selectedViewportId;\n\n      if (lineActive) {\n        lineWidth = 2.5;\n      }\n\n      let lineUID = `${lineIndex}`;\n      if (viewportControllable && viewportDraggableRotatable) {\n        lineUID = `${lineIndex}One`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[1],\n          line[2],\n          {\n            color,\n            lineWidth,\n          }\n        );\n\n        lineUID = `${lineIndex}Two`;\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[3],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      } else {\n        drawLineSvg(\n          svgDrawingHelper,\n          annotationUID,\n          lineUID,\n          line[2],\n          line[4],\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      if (viewportControllable) {\n        color =\n          viewportColor !== undefined ? viewportColor : 'rgb(200, 200, 200)';\n\n        const rotHandlesActive =\n          data.handles.activeOperation === OPERATION.ROTATE;\n        const rotationHandles = [line[9], line[10]];\n\n        const rotHandleWorldOne = [\n          viewport.canvasToWorld(line[9]),\n          otherViewport,\n          line[1],\n          line[2],\n        ];\n        const rotHandleWorldTwo = [\n          viewport.canvasToWorld(line[10]),\n          otherViewport,\n          line[3],\n          line[4],\n        ];\n        newRtpoints.push(rotHandleWorldOne, rotHandleWorldTwo);\n\n        const slabThicknessHandlesActive =\n          data.handles.activeOperation === OPERATION.SLAB;\n        const slabThicknessHandles = [line[11], line[12], line[13], line[14]];\n\n        const slabThicknessHandleWorldOne = [\n          viewport.canvasToWorld(line[11]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldTwo = [\n          viewport.canvasToWorld(line[12]),\n          otherViewport,\n          line[5],\n          line[6],\n        ];\n        const slabThicknessHandleWorldThree = [\n          viewport.canvasToWorld(line[13]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        const slabThicknessHandleWorldFour = [\n          viewport.canvasToWorld(line[14]),\n          otherViewport,\n          line[7],\n          line[8],\n        ];\n        newStpoints.push(\n          slabThicknessHandleWorldOne,\n          slabThicknessHandleWorldTwo,\n          slabThicknessHandleWorldThree,\n          slabThicknessHandleWorldFour\n        );\n\n        if (\n          (lineActive || this.configuration.mobile?.enabled) &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw all handles inactive (rotation and slab thickness)\n          let handleUID = `${lineIndex}One`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n          handleUID = `${lineIndex}Two`;\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (\n          lineActive &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportDraggableRotatable\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw rotation handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'circle',\n            }\n          );\n        } else if (\n          selectedViewportId &&\n          !rotHandlesActive &&\n          !slabThicknessHandlesActive &&\n          viewportSlabThicknessControlsOn\n        ) {\n          const handleUID = `${lineIndex}`;\n          // draw slab thickness handles inactive\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.handleRadius\n                : 3,\n              opacity: this.configuration.mobile?.enabled\n                ? this.configuration.mobile?.opacity\n                : 1,\n              type: 'rect',\n            }\n          );\n        } else if (rotHandlesActive && viewportDraggableRotatable) {\n          const handleUID = `${lineIndex}`;\n          // draw all rotation handles as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            handleUID,\n            rotationHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'circle',\n            }\n          );\n        } else if (\n          slabThicknessHandlesActive &&\n          selectedViewportId &&\n          viewportSlabThicknessControlsOn\n        ) {\n          // draw only the slab thickness handles for the active viewport as active\n          drawHandlesSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            slabThicknessHandles,\n            {\n              color,\n              handleRadius: 2,\n              fill: color,\n              type: 'rect',\n            }\n          );\n        }\n        const slabThicknessValue = otherViewport.getSlabThickness();\n        if (slabThicknessValue > 0.5 && viewportSlabThicknessControlsOn) {\n          // draw slab thickness reference lines\n          lineUID = `${lineIndex}STOne`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[5],\n            line[6],\n            {\n              color,\n              width: 1,\n              lineDash: [2, 3],\n            }\n          );\n\n          lineUID = `${lineIndex}STTwo`;\n          drawLineSvg(\n            svgDrawingHelper,\n            annotationUID,\n            lineUID,\n            line[7],\n            line[8],\n            {\n              color,\n              width: line,\n              lineDash: [2, 3],\n            }\n          );\n        }\n      }\n    });\n\n    renderStatus = true;\n\n    // Save new handles points in annotation\n    data.handles.rotationPoints = newRtpoints;\n    data.handles.slabThicknessPoints = newStpoints;\n\n    if (this.configuration.viewportIndicators) {\n      // render a circle to pin point the viewport color\n      // TODO: This should not be part of the tool, and definitely not part of the renderAnnotation loop\n      const referenceColorCoordinates = [\n        clientWidth * 0.95,\n        clientHeight * 0.05,\n      ] as Types.Point2;\n      const circleRadius = canvasDiagonalLength * 0.01;\n\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        referenceColorCoordinates,\n        circleRadius,\n        { color, fill: color }\n      );\n    }\n\n    return renderStatus;\n  };\n\n  _getAnnotations = (enabledElement: Types.IEnabledElement) => {\n    const { viewport } = enabledElement;\n    const annotations =\n      getAnnotations(this.getToolName(), viewport.element) || [];\n    const viewportIds = this._getViewportsInfo().map(\n      ({ viewportId }) => viewportId\n    );\n\n    // filter the annotations to only keep that are for this toolGroup\n    const toolGroupAnnotations = annotations.filter((annotation) => {\n      const { data } = annotation;\n      return viewportIds.includes(data.viewportId);\n    });\n\n    return toolGroupAnnotations;\n  };\n\n  _onNewVolume = (e: any) => {\n    const viewportsInfo = this._getViewportsInfo();\n    this.computeToolCenter(viewportsInfo);\n  };\n\n  _unsubscribeToViewportNewVolumeSet(viewportsInfo) {\n    viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.removeEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _subscribeToViewportNewVolumeSet(viewports) {\n    viewports.forEach(({ viewportId, renderingEngineId }) => {\n      const { viewport } = getEnabledElementByIds(\n        viewportId,\n        renderingEngineId\n      );\n      const { element } = viewport;\n\n      element.addEventListener(\n        Enums.Events.VOLUME_VIEWPORT_NEW_VOLUME,\n        this._onNewVolume\n      );\n    });\n  }\n\n  _autoPanViewportIfNecessary(\n    viewportId: string,\n    renderingEngine: Types.IRenderingEngine\n  ): void {\n    // 1. Check if the toolCenter is outside the viewport\n    // 2. If it is outside, pan the viewport to fit in the toolCenter\n\n    const viewport = renderingEngine.getViewport(viewportId);\n    const { clientWidth, clientHeight } = viewport.canvas;\n\n    const toolCenterCanvas = viewport.worldToCanvas(this.toolCenter);\n\n    // pan the viewport to fit the toolCenter in the direction\n    // that is out of bounds\n    const pan = this.configuration.autoPan.panSize;\n\n    const visiblePointCanvas = <Types.Point2>[\n      toolCenterCanvas[0],\n      toolCenterCanvas[1],\n    ];\n\n    if (toolCenterCanvas[0] < 0) {\n      visiblePointCanvas[0] = pan;\n    } else if (toolCenterCanvas[0] > clientWidth) {\n      visiblePointCanvas[0] = clientWidth - pan;\n    }\n\n    if (toolCenterCanvas[1] < 0) {\n      visiblePointCanvas[1] = pan;\n    } else if (toolCenterCanvas[1] > clientHeight) {\n      visiblePointCanvas[1] = clientHeight - pan;\n    }\n\n    if (\n      visiblePointCanvas[0] === toolCenterCanvas[0] &&\n      visiblePointCanvas[1] === toolCenterCanvas[1]\n    ) {\n      return;\n    }\n\n    const visiblePointWorld = viewport.canvasToWorld(visiblePointCanvas);\n\n    const deltaPointsWorld = [\n      visiblePointWorld[0] - this.toolCenter[0],\n      visiblePointWorld[1] - this.toolCenter[1],\n      visiblePointWorld[2] - this.toolCenter[2],\n    ];\n\n    const camera = viewport.getCamera();\n    const { focalPoint, position } = camera;\n\n    const updatedPosition = <Types.Point3>[\n      position[0] - deltaPointsWorld[0],\n      position[1] - deltaPointsWorld[1],\n      position[2] - deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] - deltaPointsWorld[0],\n      focalPoint[1] - deltaPointsWorld[1],\n      focalPoint[2] - deltaPointsWorld[2],\n    ];\n\n    viewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    viewport.render();\n  }\n\n  _areViewportIdArraysEqual = (viewportIdArrayOne, viewportIdArrayTwo) => {\n    if (viewportIdArrayOne.length !== viewportIdArrayTwo.length) {\n      return false;\n    }\n\n    viewportIdArrayOne.forEach((id) => {\n      let itemFound = false;\n      for (let i = 0; i < viewportIdArrayTwo.length; ++i) {\n        if (id === viewportIdArrayTwo[i]) {\n          itemFound = true;\n          break;\n        }\n      }\n      if (itemFound === false) {\n        return false;\n      }\n    });\n\n    return true;\n  };\n\n  // It filters the viewports with crosshairs and only return viewports\n  // that have different camera.\n  _getAnnotationsForViewportsWithDifferentCameras = (\n    enabledElement,\n    annotations\n  ) => {\n    const { viewportId, renderingEngine, viewport } = enabledElement;\n\n    const otherViewportAnnotations = annotations.filter(\n      (annotation) => annotation.data.viewportId !== viewportId\n    );\n\n    if (!otherViewportAnnotations || !otherViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, position } = camera;\n\n    const viewportsWithDifferentCameras = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { viewportId } = annotation.data;\n        const targetViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfTarget = targetViewport.getCamera();\n\n        return !(\n          csUtils.isEqual(\n            cameraOfTarget.viewPlaneNormal,\n            viewPlaneNormal,\n            1e-2\n          ) && csUtils.isEqual(cameraOfTarget.position, position, 1)\n        );\n      }\n    );\n\n    return viewportsWithDifferentCameras;\n  };\n\n  _filterViewportWithSameOrientation = (\n    enabledElement,\n    referenceAnnotation,\n    annotations\n  ) => {\n    const { renderingEngine } = enabledElement;\n    const { data } = referenceAnnotation;\n    const viewport = renderingEngine.getViewport(data.viewportId);\n\n    const linkedViewportAnnotations = annotations.filter((annotation) => {\n      const { data } = annotation;\n      const otherViewport = renderingEngine.getViewport(data.viewportId);\n      const otherViewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n\n      return otherViewportControllable === true;\n    });\n\n    if (!linkedViewportAnnotations || !linkedViewportAnnotations.length) {\n      return [];\n    }\n\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherViewportsAnnotationsWithSameCameraDirection =\n      linkedViewportAnnotations.filter((annotation) => {\n        const { viewportId } = annotation.data;\n        const otherViewport = renderingEngine.getViewport(viewportId);\n        const otherCamera = otherViewport.getCamera();\n        const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n        vtkMath.normalize(otherViewPlaneNormal);\n\n        return (\n          csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) &&\n          csUtils.isEqual(camera.viewUp, otherCamera.viewUp, 1e-2)\n        );\n      });\n\n    return otherViewportsAnnotationsWithSameCameraDirection;\n  };\n\n  _filterAnnotationsByUniqueViewportOrientations = (\n    enabledElement,\n    annotations\n  ) => {\n    const { renderingEngine, viewport } = enabledElement;\n    const camera = viewport.getCamera();\n    const viewPlaneNormal = camera.viewPlaneNormal;\n    vtkMath.normalize(viewPlaneNormal);\n\n    const otherLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable === true\n        );\n      }\n    );\n\n    const otherViewportsAnnotationsWithUniqueCameras = [];\n    // Iterate first on other viewport from the same scene linked\n    for (\n      let i = 0;\n      i < otherLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    const otherNonLinkedViewportAnnotationsFromSameScene = annotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const otherViewportControllable = this._getReferenceLineControllable(\n          otherViewport.id\n        );\n\n        return (\n          viewport !== otherViewport &&\n          // scene === otherScene &&\n          otherViewportControllable !== true\n        );\n      }\n    );\n\n    // Iterate second on other viewport from the same scene non linked\n    for (\n      let i = 0;\n      i < otherNonLinkedViewportAnnotationsFromSameScene.length;\n      ++i\n    ) {\n      const annotation = otherNonLinkedViewportAnnotationsFromSameScene[i];\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    // Iterate on all the viewport\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    for (let i = 0; i < otherViewportAnnotations.length; ++i) {\n      const annotation = otherViewportAnnotations[i];\n      if (\n        otherViewportsAnnotationsWithUniqueCameras.some(\n          (element) => element === annotation\n        )\n      ) {\n        continue;\n      }\n\n      const { viewportId } = annotation.data;\n      const otherViewport = renderingEngine.getViewport(viewportId);\n      const otherCamera = otherViewport.getCamera();\n      const otherViewPlaneNormal = otherCamera.viewPlaneNormal;\n      vtkMath.normalize(otherViewPlaneNormal);\n\n      if (\n        csUtils.isEqual(viewPlaneNormal, otherViewPlaneNormal, 1e-2) ||\n        csUtils.isOpposite(viewPlaneNormal, otherViewPlaneNormal, 1e-2)\n      ) {\n        continue;\n      }\n\n      let cameraFound = false;\n      for (\n        let jj = 0;\n        jj < otherViewportsAnnotationsWithUniqueCameras.length;\n        ++jj\n      ) {\n        const annotation = otherViewportsAnnotationsWithUniqueCameras[jj];\n        const { viewportId } = annotation.data;\n        const stockedViewport = renderingEngine.getViewport(viewportId);\n        const cameraOfStocked = stockedViewport.getCamera();\n\n        if (\n          csUtils.isEqual(\n            cameraOfStocked.viewPlaneNormal,\n            otherCamera.viewPlaneNormal,\n            1e-2\n          ) &&\n          csUtils.isEqual(cameraOfStocked.position, otherCamera.position, 1)\n        ) {\n          cameraFound = true;\n        }\n      }\n\n      if (!cameraFound) {\n        otherViewportsAnnotationsWithUniqueCameras.push(annotation);\n      }\n    }\n\n    return otherViewportsAnnotationsWithUniqueCameras;\n  };\n\n  _checkIfViewportsRenderingSameScene = (viewport, otherViewport) => {\n    const actors = viewport.getActors();\n    const otherViewportActors = otherViewport.getActors();\n\n    let sameScene = true;\n\n    actors.forEach((actor) => {\n      if (\n        actors.length !== otherViewportActors.length ||\n        otherViewportActors.find(({ uid }) => uid === actor.uid) === undefined\n      ) {\n        sameScene = false;\n      }\n    });\n\n    return sameScene;\n  };\n\n  _jump = (enabledElement, jumpWorld) => {\n    state.isInteractingWithTool = true;\n    const { viewport, renderingEngine } = enabledElement;\n\n    const annotations = this._getAnnotations(enabledElement);\n\n    const delta: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(jumpWorld, this.toolCenter, delta);\n\n    // TRANSLATION\n    // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n    const otherViewportAnnotations =\n      this._getAnnotationsForViewportsWithDifferentCameras(\n        enabledElement,\n        annotations\n      );\n\n    const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n      (annotation) => {\n        const { data } = annotation;\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n\n        const sameScene = this._checkIfViewportsRenderingSameScene(\n          viewport,\n          otherViewport\n        );\n\n        return (\n          this._getReferenceLineControllable(otherViewport.id) &&\n          this._getReferenceLineDraggableRotatable(otherViewport.id) &&\n          sameScene\n        );\n      }\n    );\n\n    if (viewportsAnnotationsToUpdate.length === 0) {\n      state.isInteractingWithTool = false;\n      return false;\n    }\n\n    this._applyDeltaShiftToSelectedViewportCameras(\n      renderingEngine,\n      viewportsAnnotationsToUpdate,\n      delta\n    );\n\n    state.isInteractingWithTool = false;\n\n    return true;\n  };\n\n  _activateModify = (element) => {\n    // mobile sometimes has lingering interaction even when touchEnd triggers\n    // this check allows for multiple handles to be active which doesn't affect\n    // tool usage.\n    state.isInteractingWithTool = !this.configuration.mobile?.enabled;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    this.editData.annotation.data.handles.activeOperation = null;\n    this.editData.annotation.data.activeViewportIds = [];\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    this.editData = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const requireSameOrientation = false;\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      requireSameOrientation\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const delta = eventDetail.deltaPoints.world;\n\n    if (\n      Math.abs(delta[0]) < 1e-3 &&\n      Math.abs(delta[1]) < 1e-3 &&\n      Math.abs(delta[2]) < 1e-3\n    ) {\n      return;\n    }\n\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const annotations = this._getAnnotations(\n      enabledElement\n    ) as CrosshairsAnnotation[];\n    const filteredToolAnnotations =\n      this.filterInteractableAnnotationsForElement(element, annotations);\n\n    // viewport Annotation\n    const viewportAnnotation = filteredToolAnnotations[0];\n    if (!viewportAnnotation) {\n      return;\n    }\n\n    const { handles } = viewportAnnotation.data;\n    const { currentPoints } = evt.detail;\n    const canvasCoords = currentPoints.canvas;\n\n    if (handles.activeOperation === OPERATION.DRAG) {\n      // TRANSLATION\n      // get the annotation of the other viewport which are parallel to the delta shift and are of the same scene\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      this._applyDeltaShiftToSelectedViewportCameras(\n        renderingEngine,\n        viewportsAnnotationsToUpdate,\n        delta\n      );\n    } else if (handles.activeOperation === OPERATION.ROTATE) {\n      // ROTATION\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const viewportsAnnotationsToUpdate = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportDraggableRotatable =\n            this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportDraggableRotatable === true\n          );\n        }\n      );\n\n      const dir1 = vec2.create();\n      const dir2 = vec2.create();\n\n      const center: Types.Point3 = [\n        this.toolCenter[0],\n        this.toolCenter[1],\n        this.toolCenter[2],\n      ];\n\n      const centerCanvas = viewport.worldToCanvas(center);\n\n      const finalPointCanvas = eventDetail.currentPoints.canvas;\n      const originalPointCanvas = vec2.create();\n      vec2.sub(\n        originalPointCanvas,\n        finalPointCanvas,\n        eventDetail.deltaPoints.canvas\n      );\n      vec2.sub(dir1, originalPointCanvas, <vec2>centerCanvas);\n      vec2.sub(dir2, finalPointCanvas, <vec2>centerCanvas);\n\n      let angle = vec2.angle(dir1, dir2);\n\n      if (\n        this._isClockWise(centerCanvas, originalPointCanvas, finalPointCanvas)\n      ) {\n        angle *= -1;\n      }\n\n      // Rounding the angle to allow rotated handles to be undone\n      // If we don't round and rotate handles clockwise by 0.0131233 radians,\n      // there's no assurance that the counter-clockwise rotation occurs at\n      // precisely -0.0131233, resulting in the drawn annotations being lost.\n      angle = Math.round(angle * 100) / 100;\n\n      const rotationAxis = viewport.getCamera().viewPlaneNormal;\n      // @ts-ignore : vtkjs incorrect typing\n      const { matrix } = vtkMatrixBuilder\n        .buildFromRadian()\n        .translate(center[0], center[1], center[2])\n        // @ts-ignore\n        .rotate(angle, rotationAxis) //todo: why we are passing\n        .translate(-center[0], -center[1], -center[2]);\n\n      const otherViewportsIds = [];\n      // update camera for the other viewports.\n      // NOTE: The lines then are rendered by the onCameraModified\n      viewportsAnnotationsToUpdate.forEach((annotation) => {\n        const { data } = annotation;\n        data.handles.toolCenter = center;\n\n        const otherViewport = renderingEngine.getViewport(data.viewportId);\n        const camera = otherViewport.getCamera();\n        const { viewUp, position, focalPoint } = camera;\n\n        viewUp[0] += position[0];\n        viewUp[1] += position[1];\n        viewUp[2] += position[2];\n\n        vec3.transformMat4(focalPoint, focalPoint, matrix);\n        vec3.transformMat4(position, position, matrix);\n        vec3.transformMat4(viewUp, viewUp, matrix);\n\n        viewUp[0] -= position[0];\n        viewUp[1] -= position[1];\n        viewUp[2] -= position[2];\n\n        otherViewport.setCamera({\n          position,\n          viewUp,\n          focalPoint,\n        });\n        otherViewportsIds.push(otherViewport.id);\n      });\n      renderingEngine.renderViewports(otherViewportsIds);\n    } else if (handles.activeOperation === OPERATION.SLAB) {\n      // SLAB THICKNESS\n      // this should be just the active one under the mouse,\n      const otherViewportAnnotations =\n        this._getAnnotationsForViewportsWithDifferentCameras(\n          enabledElement,\n          annotations\n        );\n\n      const referenceAnnotations = otherViewportAnnotations.filter(\n        (annotation) => {\n          const { data } = annotation;\n          const otherViewport = renderingEngine.getViewport(data.viewportId);\n          const otherViewportControllable = this._getReferenceLineControllable(\n            otherViewport.id\n          );\n          const otherViewportSlabThicknessControlsOn =\n            this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n          return (\n            otherViewportControllable === true &&\n            otherViewportSlabThicknessControlsOn === true &&\n            viewportAnnotation.data.activeViewportIds.find(\n              (id) => id === otherViewport.id\n            )\n          );\n        }\n      );\n\n      if (referenceAnnotations.length === 0) {\n        return;\n      }\n      const viewportsAnnotationsToUpdate =\n        this._filterViewportWithSameOrientation(\n          enabledElement,\n          referenceAnnotations[0],\n          annotations\n        );\n\n      const viewportsIds = [];\n      viewportsIds.push(viewport.id);\n      viewportsAnnotationsToUpdate.forEach(\n        (annotation: CrosshairsAnnotation) => {\n          const { data } = annotation;\n\n          const otherViewport = renderingEngine.getViewport(\n            data.viewportId\n          ) as Types.IVolumeViewport;\n          const camera = otherViewport.getCamera();\n          const normal = camera.viewPlaneNormal;\n\n          const dotProd = vtkMath.dot(delta, normal);\n          const projectedDelta: Types.Point3 = [...normal];\n          vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n          if (\n            Math.abs(projectedDelta[0]) > 1e-3 ||\n            Math.abs(projectedDelta[1]) > 1e-3 ||\n            Math.abs(projectedDelta[2]) > 1e-3\n          ) {\n            const mod = Math.sqrt(\n              projectedDelta[0] * projectedDelta[0] +\n                projectedDelta[1] * projectedDelta[1] +\n                projectedDelta[2] * projectedDelta[2]\n            );\n\n            const currentPoint = eventDetail.lastPoints.world;\n            const direction: Types.Point3 = [0, 0, 0];\n\n            const currentCenter: Types.Point3 = [\n              this.toolCenter[0],\n              this.toolCenter[1],\n              this.toolCenter[2],\n            ];\n\n            // use this.toolCenter only if viewportDraggableRotatable\n            const viewportDraggableRotatable =\n              this._getReferenceLineDraggableRotatable(otherViewport.id);\n            if (!viewportDraggableRotatable) {\n              const { rotationPoints } = this.editData.annotation.data.handles;\n              // Todo: what is a point uid?\n              const otherViewportRotationPoints = rotationPoints.filter(\n                (point) => point[1].uid === otherViewport.id\n              );\n              if (otherViewportRotationPoints.length === 2) {\n                const point1 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[0][3]\n                );\n                const point2 = viewport.canvasToWorld(\n                  otherViewportRotationPoints[1][3]\n                );\n                vtkMath.add(point1, point2, currentCenter);\n                vtkMath.multiplyScalar(<Types.Point3>currentCenter, 0.5);\n              }\n            }\n\n            vtkMath.subtract(currentPoint, currentCenter, direction);\n            const dotProdDirection = vtkMath.dot(direction, normal);\n            const projectedDirection: Types.Point3 = [...normal];\n            vtkMath.multiplyScalar(projectedDirection, dotProdDirection);\n            const normalizedProjectedDirection: Types.Point3 = [\n              projectedDirection[0],\n              projectedDirection[1],\n              projectedDirection[2],\n            ];\n            vec3.normalize(\n              normalizedProjectedDirection,\n              normalizedProjectedDirection\n            );\n            const normalizedProjectedDelta: Types.Point3 = [\n              projectedDelta[0],\n              projectedDelta[1],\n              projectedDelta[2],\n            ];\n            vec3.normalize(normalizedProjectedDelta, normalizedProjectedDelta);\n\n            let slabThicknessValue = otherViewport.getSlabThickness();\n            if (\n              csUtils.isOpposite(\n                normalizedProjectedDirection,\n                normalizedProjectedDelta,\n                1e-3\n              )\n            ) {\n              slabThicknessValue -= mod;\n            } else {\n              slabThicknessValue += mod;\n            }\n\n            slabThicknessValue = Math.abs(slabThicknessValue);\n            slabThicknessValue = Math.max(\n              RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS,\n              slabThicknessValue\n            );\n\n            const near = this._pointNearReferenceLine(\n              viewportAnnotation,\n              canvasCoords,\n              6,\n              otherViewport\n            );\n\n            if (near) {\n              slabThicknessValue = RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS;\n            }\n\n            // We want to set the slabThickness for the viewport's actors but\n            // since the crosshairs tool instance has configuration regarding which\n            // actorUIDs (in case of volume -> actorUID = volumeIds) to set the\n            // slabThickness for, we need to delegate the slabThickness setting\n            // to the crosshairs tool instance of the toolGroup since configurations\n            // exist on the toolInstance and each toolGroup has its own crosshairs\n            // tool instance (Otherwise, we would need to set this filterActorUIDsToSetSlabThickness at\n            // the viewport level which makes tool and viewport state convoluted).\n            const toolGroup = getToolGroupForViewport(\n              otherViewport.id,\n              renderingEngine.id\n            );\n            const crosshairsInstance = toolGroup.getToolInstance(\n              this.getToolName()\n            );\n            crosshairsInstance.setSlabThickness(\n              otherViewport,\n              slabThicknessValue\n            );\n\n            viewportsIds.push(otherViewport.id);\n          }\n        }\n      );\n      renderingEngine.renderViewports(viewportsIds);\n    }\n  };\n\n  setSlabThickness(viewport, slabThickness) {\n    let actorUIDs;\n    const { filterActorUIDsToSetSlabThickness } = this.configuration;\n    if (\n      filterActorUIDsToSetSlabThickness &&\n      filterActorUIDsToSetSlabThickness.length > 0\n    ) {\n      actorUIDs = filterActorUIDsToSetSlabThickness;\n    }\n\n    let blendModeToUse = this.configuration.slabThicknessBlendMode;\n    if (slabThickness === RENDERING_DEFAULTS.MINIMUM_SLAB_THICKNESS) {\n      blendModeToUse = Enums.BlendModes.COMPOSITE;\n    }\n\n    const immediate = false;\n    viewport.setBlendMode(blendModeToUse, actorUIDs, immediate);\n    viewport.setSlabThickness(slabThickness, actorUIDs);\n  }\n\n  _isClockWise(a, b, c) {\n    // return true if the rotation is clockwise\n    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]) > 0;\n  }\n\n  _applyDeltaShiftToSelectedViewportCameras(\n    renderingEngine,\n    viewportsAnnotationsToUpdate,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    viewportsAnnotationsToUpdate.forEach((annotation) => {\n      this._applyDeltaShiftToViewportCamera(renderingEngine, annotation, delta);\n    });\n  }\n\n  _applyDeltaShiftToViewportCamera(\n    renderingEngine: Types.IRenderingEngine,\n    annotation,\n    delta\n  ) {\n    // update camera for the other viewports.\n    // NOTE1: The lines then are rendered by the onCameraModified\n    // NOTE2: crosshair center are automatically updated in the onCameraModified event\n    const { data } = annotation;\n\n    const viewport = renderingEngine.getViewport(data.viewportId);\n    const camera = viewport.getCamera();\n    const normal = camera.viewPlaneNormal;\n\n    // Project delta over camera normal\n    // (we don't need to pan, we need only to scroll the camera as in the wheel stack scroll tool)\n    const dotProd = vtkMath.dot(delta, normal);\n    const projectedDelta: Types.Point3 = [...normal];\n    vtkMath.multiplyScalar(projectedDelta, dotProd);\n\n    if (\n      Math.abs(projectedDelta[0]) > 1e-3 ||\n      Math.abs(projectedDelta[1]) > 1e-3 ||\n      Math.abs(projectedDelta[2]) > 1e-3\n    ) {\n      const newFocalPoint: Types.Point3 = [0, 0, 0];\n      const newPosition: Types.Point3 = [0, 0, 0];\n\n      vtkMath.add(camera.focalPoint, projectedDelta, newFocalPoint);\n      vtkMath.add(camera.position, projectedDelta, newPosition);\n\n      viewport.setCamera({\n        focalPoint: newFocalPoint,\n        position: newPosition,\n      });\n      viewport.render();\n    }\n  }\n\n  _pointNearReferenceLine = (\n    annotation,\n    canvasCoords,\n    proximity,\n    lineViewport\n  ) => {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      if (otherViewport.id !== lineViewport.id) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        return true;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    return false;\n  };\n\n  _getRotationHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { rotationPoints } = data.handles;\n\n    for (let i = 0; i < rotationPoints.length; i++) {\n      const point = rotationPoints[i][0];\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n      if (!viewportDraggableRotatable) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.ROTATE;\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _getSlabThicknessHandleNearImagePoint(\n    viewport,\n    annotation,\n    canvasCoords,\n    proximity\n  ) {\n    const { data } = annotation;\n    const { slabThicknessPoints } = data.handles;\n\n    for (let i = 0; i < slabThicknessPoints.length; i++) {\n      const point = slabThicknessPoints[i][0];\n      const otherViewport = slabThicknessPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      if (!viewportControllable) {\n        continue;\n      }\n\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n      if (!viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const annotationCanvasCoordinate = viewport.worldToCanvas(point);\n      if (vec2.distance(canvasCoords, annotationCanvasCoordinate) < proximity) {\n        data.handles.activeOperation = OPERATION.SLAB;\n\n        data.activeViewportIds = [otherViewport.id];\n\n        this.editData = {\n          annotation,\n        };\n\n        return point;\n      }\n    }\n\n    return null;\n  }\n\n  _pointNearTool(element, annotation, canvasCoords, proximity) {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { clientWidth, clientHeight } = viewport.canvas;\n    const canvasDiagonalLength = Math.sqrt(\n      clientWidth * clientWidth + clientHeight * clientHeight\n    );\n    const { data } = annotation;\n\n    const { rotationPoints } = data.handles;\n    const { slabThicknessPoints } = data.handles;\n    const viewportIdArray = [];\n\n    for (let i = 0; i < rotationPoints.length - 1; ++i) {\n      const otherViewport = rotationPoints[i][1];\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportDraggableRotatable =\n        this._getReferenceLineDraggableRotatable(otherViewport.id);\n\n      if (!viewportControllable || !viewportDraggableRotatable) {\n        continue;\n      }\n\n      const lineSegment1 = {\n        start: {\n          x: rotationPoints[i][2][0],\n          y: rotationPoints[i][2][1],\n        },\n        end: {\n          x: rotationPoints[i][3][0],\n          y: rotationPoints[i][3][1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: rotationPoints[i + 1][2][0],\n          y: rotationPoints[i + 1][2][1],\n        },\n        end: {\n          x: rotationPoints[i + 1][3][0],\n          y: rotationPoints[i + 1][3][1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id);\n        data.handles.activeOperation = OPERATION.DRAG;\n      }\n\n      // rotation handles are two for viewport\n      i++;\n    }\n\n    for (let i = 0; i < slabThicknessPoints.length - 1; ++i) {\n      const otherViewport = slabThicknessPoints[i][1];\n      if (viewportIdArray.find((id) => id === otherViewport.id)) {\n        continue;\n      }\n\n      const viewportControllable = this._getReferenceLineControllable(\n        otherViewport.id\n      );\n      const viewportSlabThicknessControlsOn =\n        this._getReferenceLineSlabThicknessControlsOn(otherViewport.id);\n\n      if (!viewportControllable || !viewportSlabThicknessControlsOn) {\n        continue;\n      }\n\n      const stPointLineCanvas1 = slabThicknessPoints[i][2];\n      const stPointLineCanvas2 = slabThicknessPoints[i][3];\n\n      const centerCanvas = vec2.create();\n      vec2.add(centerCanvas, stPointLineCanvas1, stPointLineCanvas2);\n      vec2.scale(centerCanvas, centerCanvas, 0.5);\n\n      const canvasUnitVectorFromCenter = vec2.create();\n      vec2.subtract(\n        canvasUnitVectorFromCenter,\n        stPointLineCanvas1,\n        centerCanvas\n      );\n      vec2.normalize(canvasUnitVectorFromCenter, canvasUnitVectorFromCenter);\n\n      const canvasVectorFromCenterStart = vec2.create();\n      vec2.scale(\n        canvasVectorFromCenterStart,\n        canvasUnitVectorFromCenter,\n        canvasDiagonalLength * 0.05\n      );\n\n      const stPointLineCanvas1Start = vec2.create();\n      const stPointLineCanvas2Start = vec2.create();\n      vec2.add(\n        stPointLineCanvas1Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n      vec2.subtract(\n        stPointLineCanvas2Start,\n        centerCanvas,\n        canvasVectorFromCenterStart\n      );\n\n      const lineSegment1 = {\n        start: {\n          x: stPointLineCanvas1Start[0],\n          y: stPointLineCanvas1Start[1],\n        },\n        end: {\n          x: stPointLineCanvas1[0],\n          y: stPointLineCanvas1[1],\n        },\n      };\n\n      const distanceToPoint1 = lineSegment.distanceToPoint(\n        [lineSegment1.start.x, lineSegment1.start.y],\n        [lineSegment1.end.x, lineSegment1.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      const lineSegment2 = {\n        start: {\n          x: stPointLineCanvas2Start[0],\n          y: stPointLineCanvas2Start[1],\n        },\n        end: {\n          x: stPointLineCanvas2[0],\n          y: stPointLineCanvas2[1],\n        },\n      };\n\n      const distanceToPoint2 = lineSegment.distanceToPoint(\n        [lineSegment2.start.x, lineSegment2.start.y],\n        [lineSegment2.end.x, lineSegment2.end.y],\n        [canvasCoords[0], canvasCoords[1]]\n      );\n\n      if (distanceToPoint1 <= proximity || distanceToPoint2 <= proximity) {\n        viewportIdArray.push(otherViewport.id); // we still need this to draw inactive slab thickness handles\n        data.handles.activeOperation = null; // no operation\n      }\n\n      // slab thickness handles are in couples\n      i++;\n    }\n\n    data.activeViewportIds = [...viewportIdArray];\n\n    this.editData = {\n      annotation,\n    };\n\n    return data.handles.activeOperation === OPERATION.DRAG ? true : false;\n  }\n}\n\nCrosshairsTool.toolName = 'Crosshairs';\nexport default CrosshairsTool;\n","import { vec3 } from 'gl-matrix';\nimport {\n  getRenderingEngines,\n  CONSTANTS,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { addAnnotation } from '../stateManagement/annotation/annotationState';\n\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { PublicToolProps, ToolProps, SVGDrawingHelper } from '../types';\nimport { ReferenceLineAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\n\nconst { EPSILON } = CONSTANTS;\n\n/**\n * @public\n */\n\nclass ReferenceLines extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    sourceViewport: any;\n    annotation: ReferenceLineAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        sourceViewportId: '',\n        showFullDimension: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    // this._throttledCalculateCachedStats = throttle(\n    //   this._calculateCachedStats,\n    //   100,\n    //   { trailing: true }\n    // );\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    // Todo: handle this case where it is too soon to get the rendering engine\n    if (!renderingEngine) {\n      return;\n    }\n\n    let viewports = renderingEngine.getViewports();\n    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n\n    const sourceViewport = renderingEngine.getViewport(\n      this.configuration.sourceViewportId\n    ) as Types.IVolumeViewport;\n\n    if (!sourceViewport || !sourceViewport.getImageData()) {\n      return;\n    }\n\n    const { element } = sourceViewport;\n    const { viewUp, viewPlaneNormal } = sourceViewport.getCamera();\n\n    const sourceViewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(sourceViewport);\n\n    let annotation = this.editData.annotation;\n    const FrameOfReferenceUID = sourceViewport.getFrameOfReferenceUID();\n\n    if (!annotation) {\n      const newAnnotation: ReferenceLineAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: sourceViewportCanvasCornersInWorld,\n          },\n        },\n      };\n\n      addAnnotation(newAnnotation, element);\n      annotation = newAnnotation;\n    } else {\n      this.editData.annotation.data.handles.points =\n        sourceViewportCanvasCornersInWorld;\n    }\n\n    this.editData = {\n      sourceViewport,\n      renderingEngine,\n      annotation,\n    };\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewports\n        .filter((viewport) => viewport.id !== sourceViewport.id)\n        .map((viewport) => viewport.id)\n    );\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the reference lines\n    // we really don't care which viewport triggered the\n    // camera modification, since we want to update all of them\n    // with respect to the targetViewport\n    this._init();\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const { viewport: targetViewport } = enabledElement;\n    const { annotation, sourceViewport } = this.editData;\n\n    let renderStatus = false;\n\n    if (!sourceViewport) {\n      return renderStatus;\n    }\n\n    if (sourceViewport.id === targetViewport.id) {\n      // If the source viewport is the same as the current viewport, we don't need to render\n      return renderStatus;\n    }\n\n    if (!annotation || !annotation?.data?.handles?.points) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // top left world, top right world, bottom right world, bottom left world\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const { focalPoint, viewPlaneNormal, viewUp } = targetViewport.getCamera();\n    const { viewPlaneNormal: sourceViewPlaneNormal } =\n      sourceViewport.getCamera();\n\n    if (this.isParallel(viewPlaneNormal, sourceViewPlaneNormal)) {\n      // If the source and target viewports are parallel, we don't need to render\n      return renderStatus;\n    }\n\n    const targetViewportPlane = csUtils.planar.planeEquation(\n      viewPlaneNormal,\n      focalPoint\n    );\n\n    // check if the topLeft and bottomLeft line is parallel to the viewUp\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n    const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n\n    let pointSetToUse = pointSet1;\n\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet1[0], pointSet1[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet1[2], pointSet1[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const newNormal = vec3.cross(\n      vec3.create(),\n      topBottomVec,\n      topRightVec\n    ) as Types.Point3;\n\n    if (this.isParallel(newNormal, viewPlaneNormal)) {\n      return renderStatus;\n    }\n\n    // check if it is perpendicular to the viewPlaneNormal which means\n    // the line does not intersect the viewPlaneNormal\n    if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n      // 'use pointSet2';\n      pointSetToUse = pointSet2;\n    }\n\n    const lineStartWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[0],\n      pointSetToUse[1],\n      targetViewportPlane\n    );\n\n    const lineEndWorld = csUtils.planar.linePlaneIntersection(\n      pointSetToUse[2],\n      pointSetToUse[3],\n      targetViewportPlane\n    );\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    let canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) =>\n      targetViewport.worldToCanvas(world)\n    );\n\n    if (this.configuration.showFullDimension) {\n      canvasCoordinates = this.handleFullDimension(\n        targetViewport,\n        lineStartWorld,\n        viewPlaneNormal,\n        viewUp,\n        lineEndWorld,\n        canvasCoordinates\n      );\n    }\n\n    const dataId = `${annotationUID}-line`;\n    const lineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      lineUID,\n      canvasCoordinates[0],\n      canvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      dataId\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n\n  isPerpendicular = (vec1: Types.Point3, vec2: Types.Point3): boolean => {\n    const dot = vec3.dot(vec1, vec2);\n    return Math.abs(dot) < EPSILON;\n  };\n\n  private handleFullDimension(\n    targetViewport: Types.IStackViewport | Types.IVolumeViewport,\n    lineStartWorld: Types.Point3,\n    viewPlaneNormal: Types.Point3,\n    viewUp: Types.Point3,\n    lineEndWorld: Types.Point3,\n    canvasCoordinates: Types.Point2[]\n  ) {\n    const renderingEngine = targetViewport.getRenderingEngine();\n    const targetId = this.getTargetId(targetViewport);\n    const targetImage = this.getTargetIdImage(targetId, renderingEngine);\n\n    const referencedImageId = this.getReferencedImageId(\n      targetViewport,\n      lineStartWorld,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    if (referencedImageId && targetImage) {\n      try {\n        const { imageData, dimensions } = targetImage;\n\n        // Calculate bound image coordinates\n        const [\n          topLeftImageCoord,\n          topRightImageCoord,\n          bottomRightImageCoord,\n          bottomLeftImageCoord,\n        ] = [\n          imageData.indexToWorld([0, 0, 0]) as Types.Point3,\n          imageData.indexToWorld([dimensions[0] - 1, 0, 0]) as Types.Point3,\n          imageData.indexToWorld([\n            dimensions[0] - 1,\n            dimensions[1] - 1,\n            0,\n          ]) as Types.Point3,\n          imageData.indexToWorld([0, dimensions[1] - 1, 0]) as Types.Point3,\n        ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n\n        // Calculate line start and end image coordinates\n        const [lineStartImageCoord, lineEndImageCoord] = [\n          lineStartWorld,\n          lineEndWorld,\n        ].map((world) => csUtils.worldToImageCoords(referencedImageId, world));\n\n        // Calculate intersection points between line and image bounds\n        canvasCoordinates = [\n          [topLeftImageCoord, topRightImageCoord],\n          [topRightImageCoord, bottomRightImageCoord],\n          [bottomLeftImageCoord, bottomRightImageCoord],\n          [topLeftImageCoord, bottomLeftImageCoord],\n        ]\n          .map(([start, end]) =>\n            this.intersectInfiniteLines(\n              start,\n              end,\n              lineStartImageCoord,\n              lineEndImageCoord\n            )\n          )\n          .filter((point) => point && this.isInBound(point, dimensions))\n          .map((point) => {\n            const world = csUtils.imageToWorldCoords(\n              referencedImageId,\n              point as Types.Point2\n            );\n            return targetViewport.worldToCanvas(world);\n          });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    return canvasCoordinates;\n  }\n\n  // get the intersection point between two infinite lines, not line segments\n  intersectInfiniteLines(\n    line1Start: Types.Point2,\n    line1End: Types.Point2,\n    line2Start: Types.Point2,\n    line2End: Types.Point2\n  ) {\n    const [x1, y1] = line1Start;\n    const [x2, y2] = line1End;\n    const [x3, y3] = line2Start;\n    const [x4, y4] = line2End;\n\n    // Compute a1, b1, c1, where line joining points 1 and 2 is \"a1 x  +  b1 y  +  c1  =  0\"\n    const a1 = y2 - y1;\n    const b1 = x1 - x2;\n    const c1 = x2 * y1 - x1 * y2;\n\n    // Compute a2, b2, c2\n    const a2 = y4 - y3;\n    const b2 = x3 - x4;\n    const c2 = x4 * y3 - x3 * y4;\n\n    if (Math.abs(a1 * b2 - a2 * b1) < EPSILON) {\n      return;\n    }\n\n    const x = (b1 * c2 - b2 * c1) / (a1 * b2 - a2 * b1);\n    const y = (a2 * c1 - a1 * c2) / (a1 * b2 - a2 * b1);\n\n    return [x, y];\n  }\n\n  isParallel(vec1: Types.Point3, vec2: Types.Point3): boolean {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n\n  isInBound(point: number[], dimensions: Types.Point3): boolean {\n    return (\n      point[0] >= 0 &&\n      point[0] <= dimensions[0] &&\n      point[1] >= 0 &&\n      point[1] <= dimensions[1]\n    );\n  }\n}\n\nReferenceLines.toolName = 'ReferenceLines';\nexport default ReferenceLines;\n","import { vec3 } from 'gl-matrix';\nimport {\n  metaData,\n  CONSTANTS,\n  getRenderingEngine,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\n\nimport { getToolGroup } from '../store/ToolGroupManager';\n\nimport { drawLine as drawLineSvg } from '../drawingSvg';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\n\nimport {\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n} from '../types';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\n\nconst { EPSILON } = CONSTANTS;\n\nexport interface OverlayGridAnnotation extends Annotation {\n  data: {\n    viewportData: Map<string, object>;\n    pointSets: Array<object>;\n  };\n}\n\n/**\n * @public\n */\nclass OverlayGridTool extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        sourceImageIds: [],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onSetToolActive = (): void => {\n    this._init();\n  };\n\n  _init = (): void => {\n    const sourceImageIds = this.configuration.sourceImageIds;\n    if (!sourceImageIds?.length) {\n      console.warn(\n        'OverlayGridTool: No sourceImageIds provided in configuration'\n      );\n      return;\n    }\n\n    const imagePlaneModule = metaData.get(\n      'imagePlaneModule',\n      sourceImageIds[0]\n    );\n\n    if (!imagePlaneModule) {\n      console.warn(\n        'OverlayGridTool: No imagePlaneModule found for sourceImageIds'\n      );\n      return;\n    }\n\n    const { frameOfReferenceUID } = imagePlaneModule;\n\n    const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportsInfo?.length) {\n      console.warn('OverlayGridTool: No viewports found');\n      return;\n    }\n\n    const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n\n    if (!annotations?.length) {\n      const pointSets = sourceImageIds.map((id) => {\n        // check if pointSets for the imageId was calculated. If not calculate and store\n        return this.calculateImageIdPointSets(id);\n      });\n\n      const newAnnotation: OverlayGridAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          FrameOfReferenceUID: frameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          viewportData: new Map(),\n          pointSets,\n        },\n      };\n\n      addAnnotation(newAnnotation, frameOfReferenceUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      getRenderingEngine(viewportsInfo[0].renderingEngineId),\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  /**\n   * Calculates the point sets based on the image corners relative to an imageId\n   * @param imageId - The imageId to calculate the point sets for\n   * @returns\n   */\n  calculateImageIdPointSets = (imageId: string) => {\n    const {\n      imagePositionPatient,\n      rows,\n      columns,\n      rowCosines,\n      columnCosines,\n      rowPixelSpacing,\n      columnPixelSpacing,\n    } = metaData.get('imagePlaneModule', imageId);\n\n    // top left world, top right world, bottom right world, bottom left world\n    const topLeft = <Types.Point3>[...imagePositionPatient];\n    const topRight = <Types.Point3>[...imagePositionPatient];\n    const bottomLeft = <Types.Point3>[...imagePositionPatient];\n    const bottomRight = <Types.Point3>[...imagePositionPatient];\n\n    vec3.scaleAndAdd(\n      topRight,\n      imagePositionPatient,\n      columnCosines,\n      columns * columnPixelSpacing\n    );\n    vec3.scaleAndAdd(\n      bottomLeft,\n      imagePositionPatient,\n      rowCosines,\n      rows * rowPixelSpacing\n    );\n\n    vec3.scaleAndAdd(\n      bottomRight,\n      bottomLeft,\n      columnCosines,\n      columns * columnPixelSpacing\n    );\n\n    // check if the topLeft and bottomLeft line is parallel to the viewUp\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n    const pointSet2 = [topLeft, topRight, bottomLeft, bottomRight];\n\n    return { pointSet1, pointSet2 };\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const sourceImageIds = this.configuration.sourceImageIds;\n\n    let renderStatus = false;\n    if (!sourceImageIds?.length) {\n      return renderStatus;\n    }\n\n    const { viewport: targetViewport, FrameOfReferenceUID } = enabledElement;\n    const targetImageIds = targetViewport.getImageIds();\n    if (targetImageIds.length < 2) {\n      return renderStatus;\n    }\n\n    const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n    const annotation = annotations[0];\n    const { annotationUID } = annotation;\n\n    const { focalPoint, viewPlaneNormal } = targetViewport.getCamera();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n    const imageIdNormal = <Types.Point3>(\n      this.getImageIdNormal(sourceImageIds[0])\n    );\n\n    if (this.isParallel(viewPlaneNormal, imageIdNormal)) {\n      // If the source and target viewports are parallel, we don't need to render\n      return renderStatus;\n    }\n\n    const targetViewportPlane = csUtils.planar.planeEquation(\n      viewPlaneNormal,\n      focalPoint\n    );\n\n    const pointSets = annotation.data.pointSets;\n    const viewportData = annotation.data.viewportData;\n    for (let i = 0; i < sourceImageIds.length; i++) {\n      // check if pointSets for the imageId was calculated. If not calculate and store\n      const { pointSet1, pointSet2 } = pointSets[i];\n\n      const targetData =\n        viewportData.get(targetViewport.id) ||\n        this.initializeViewportData(viewportData, targetViewport.id);\n\n      // check if pointSetToUse was calculated. If not calculate and store\n      if (!targetData.pointSetsToUse[i]) {\n        let pointSetToUse = pointSet1;\n\n        let topBottomVec = vec3.subtract(\n          vec3.create(),\n          pointSet1[0],\n          pointSet1[1]\n        );\n        topBottomVec = vec3.normalize(\n          vec3.create(),\n          topBottomVec\n        ) as Types.Point3;\n\n        // check if it is perpendicular to the viewPlaneNormal which means\n        // the line does not intersect the viewPlaneNormal\n        if (this.isPerpendicular(topBottomVec, viewPlaneNormal)) {\n          // 'use pointSet2';\n          pointSetToUse = pointSet2;\n        }\n\n        targetData.pointSetsToUse[i] = pointSetToUse;\n\n        targetData.lineStartsWorld[i] = csUtils.planar.linePlaneIntersection(\n          pointSetToUse[0],\n          pointSetToUse[1],\n          targetViewportPlane\n        );\n\n        targetData.lineEndsWorld[i] = csUtils.planar.linePlaneIntersection(\n          pointSetToUse[2],\n          pointSetToUse[3],\n          targetViewportPlane\n        );\n      }\n\n      const lineStartWorld = targetData.lineStartsWorld[i];\n      const lineEndWorld = targetData.lineEndsWorld[i];\n\n      styleSpecifier.annotationUID = annotationUID;\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      const canvasCoordinates = [lineStartWorld, lineEndWorld].map((world) =>\n        targetViewport.worldToCanvas(world)\n      );\n\n      const dataId = `${annotationUID}-line`;\n      const lineUID = `${i}`;\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        dataId\n      );\n    }\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n\n  private initializeViewportData = (viewportData, id) => {\n    viewportData.set(id, {\n      pointSetsToUse: [],\n      lineStartsWorld: [],\n      lineEndsWorld: [],\n    });\n\n    return viewportData.get(id);\n  };\n\n  private isPerpendicular = (\n    vec1: Types.Point3,\n    vec2: Types.Point3\n  ): boolean => {\n    const dot = vec3.dot(vec1, vec2);\n    return Math.abs(dot) < EPSILON;\n  };\n\n  private isParallel(vec1: Types.Point3, vec2: Types.Point3): boolean {\n    return Math.abs(vec3.dot(vec1, vec2)) > 1 - EPSILON;\n  }\n\n  private getImageIdNormal(imageId: string): vec3 {\n    const { imageOrientationPatient } = metaData.get(\n      'imagePlaneModule',\n      imageId\n    );\n    const rowCosineVec = vec3.fromValues(\n      imageOrientationPatient[0],\n      imageOrientationPatient[1],\n      imageOrientationPatient[2]\n    );\n    const colCosineVec = vec3.fromValues(\n      imageOrientationPatient[3],\n      imageOrientationPatient[4],\n      imageOrientationPatient[5]\n    );\n    return vec3.cross(vec3.create(), rowCosineVec, colCosineVec);\n  }\n}\n\nOverlayGridTool.toolName = 'OverlayGrid';\nexport default OverlayGridTool;\n","import { getRenderingEngine } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { drawPolyline } from '../drawingSvg';\nimport { getToolGroup } from '../store/ToolGroupManager';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { PublicToolProps, ToolProps, SVGDrawingHelper } from '../types';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { Annotation } from '../types';\nimport { distanceToPoint } from '../utilities/math/point';\nimport { pointToString } from '../utilities/pointToString';\nimport { polyDataUtils } from '../utilities';\n\nexport interface SegmentationIntersectionAnnotation extends Annotation {\n  data: {\n    actorsWorldPointsMap: Map<string, Map<string, object>>;\n  };\n}\n\nclass SegmentationIntersectionTool extends AnnotationDisplayTool {\n  static toolName;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        opacity: 0.5,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Initialize the annotation data and calculates surface intersections\n   * @returns\n   */\n  _init = (): void => {\n    const viewportsInfo = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportsInfo?.length) {\n      console.warn(this.getToolName() + 'Tool: No viewports found');\n      return;\n    }\n\n    const firstViewport = getRenderingEngine(\n      viewportsInfo[0].renderingEngineId\n    )?.getViewport(viewportsInfo[0].viewportId);\n\n    if (!firstViewport) {\n      return;\n    }\n    const frameOfReferenceUID = firstViewport.getFrameOfReferenceUID();\n    const annotations = getAnnotations(this.getToolName(), frameOfReferenceUID);\n\n    if (!annotations?.length) {\n      const actorsWorldPointsMap = new Map();\n      calculateSurfaceSegmentationIntersections(\n        actorsWorldPointsMap,\n        viewportsInfo\n      );\n      const newAnnotation: SegmentationIntersectionAnnotation = {\n        highlighted: true,\n        invalidated: true,\n        metadata: {\n          toolName: this.getToolName(),\n          FrameOfReferenceUID: frameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          actorsWorldPointsMap,\n        },\n      };\n\n      addAnnotation(newAnnotation, frameOfReferenceUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      getRenderingEngine(viewportsInfo[0].renderingEngineId),\n      viewportsInfo.map(({ viewportId }) => viewportId)\n    );\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    this._init();\n  };\n\n  /**\n   * Renders the surface intersections\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const { viewport, FrameOfReferenceUID } = enabledElement;\n\n    let renderStatus = false;\n\n    const annotations = getAnnotations(this.getToolName(), FrameOfReferenceUID);\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n    const annotation = annotations[0];\n    const { annotationUID } = annotation;\n    const actorsWorldPointsMap = annotation.data.actorsWorldPointsMap;\n\n    calculateSurfaceSegmentationIntersectionsForViewport(\n      actorsWorldPointsMap,\n      viewport\n    );\n\n    const actorEntries = viewport.getActors();\n    const cacheId = getCacheId(viewport);\n\n    actorEntries.forEach((actorEntry) => {\n      if (!actorEntry?.clippingFilter) {\n        return;\n      }\n      const actorWorldPointMap = actorsWorldPointsMap.get(actorEntry.uid);\n      if (!actorWorldPointMap) {\n        return;\n      }\n      if (!actorWorldPointMap.get(cacheId)) {\n        return;\n      }\n      let polyLineIdx = 1;\n      const { worldPointsSet, color } = actorWorldPointMap.get(cacheId);\n      for (let i = 0; i < worldPointsSet.length; i++) {\n        const worldPoints = worldPointsSet[i];\n        const canvasPoints = worldPoints.map((point) =>\n          viewport.worldToCanvas(point)\n        );\n\n        const options = {\n          color: color,\n          fillColor: color,\n          fillOpacity: this.configuration.opacity,\n          connectLastToFirst: true,\n        };\n\n        const polyLineUID = actorEntry.uid + '#' + polyLineIdx;\n        drawPolyline(\n          svgDrawingHelper,\n          annotationUID,\n          polyLineUID,\n          canvasPoints,\n          options\n        );\n        polyLineIdx++;\n      }\n    });\n\n    renderStatus = true;\n    return renderStatus;\n  };\n}\n\n/**\n * Calculates surface intersections points for all surface actors in a list of viewports\n * @param actorWorldPointsMap\n * @param viewportsInfo\n */\nfunction calculateSurfaceSegmentationIntersections(\n  actorsWorldPointsMap,\n  viewportsInfo\n) {\n  viewportsInfo.forEach(({ viewportId, renderingEngineId }) => {\n    const viewport =\n      getRenderingEngine(renderingEngineId)?.getViewport(viewportId);\n    calculateSurfaceSegmentationIntersectionsForViewport(\n      actorsWorldPointsMap,\n      viewport\n    );\n  });\n}\n\n/**\n * Calculates surface intersections points for all surface actors in a viewport\n * generating a set of polyline points for each actor\n * @param actorWorldPointsMap\n * @param viewport\n */\nfunction calculateSurfaceSegmentationIntersectionsForViewport(\n  actorsWorldPointsMap,\n  viewport\n) {\n  const actorEntries = viewport.getActors();\n\n  // we should not use the focalPoint here, since the pan and zoom updates it,\n  // imageIndex is reliable enough\n  const cacheId = getCacheId(viewport);\n\n  actorEntries.forEach((actorEntry) => {\n    if (!actorEntry?.clippingFilter) {\n      return;\n    }\n\n    let actorWorldPointsMap = actorsWorldPointsMap.get(actorEntry.uid);\n    if (!actorWorldPointsMap) {\n      actorWorldPointsMap = new Map();\n      actorsWorldPointsMap.set(actorEntry.uid, actorWorldPointsMap);\n    }\n    if (!actorWorldPointsMap.get(cacheId)) {\n      const polyData = actorEntry.clippingFilter.getOutputData();\n      const worldPointsSet = polyDataUtils.getPolyDataPoints(polyData);\n      if (!worldPointsSet) {\n        return;\n      }\n\n      // worldPointsSet = removeExtraPoints(viewport, worldPointsSet);\n      const colorArray = actorEntry.actor.getProperty().getColor();\n      const color = colorToString(colorArray);\n      actorWorldPointsMap.set(cacheId, { worldPointsSet, color });\n    }\n  });\n}\n\nfunction getCacheId(viewport) {\n  const { viewPlaneNormal } = viewport.getCamera();\n  const imageIndex = viewport.getCurrentImageIdIndex();\n  return `${viewport.id}-${pointToString(viewPlaneNormal)}-${imageIndex}`;\n}\n\n/**\n * Transform a color array into a string\n * @param colorArray\n * @returns\n */\nfunction colorToString(colorArray): string {\n  function colorComponentToString(component) {\n    let componentString = Math.floor(component * 255).toString(16);\n    if (componentString.length === 1) {\n      componentString = '0' + componentString;\n    }\n    return componentString;\n  }\n  return (\n    '#' +\n    colorComponentToString(colorArray[0]) +\n    colorComponentToString(colorArray[1]) +\n    colorComponentToString(colorArray[2])\n  );\n}\n\n/**\n * Remove duplicate and unnecessary points\n * @param worldPoints\n * @param canvasPoints\n * @returns\n */\nfunction removeExtraPoints(viewport, worldPointsSet) {\n  return worldPointsSet.map((worldPoints) => {\n    const canvasPoints = worldPoints.map((point) => {\n      const canvasPoint = viewport.worldToCanvas(point);\n      return [Math.floor(canvasPoint[0]), Math.floor(canvasPoint[1])];\n    });\n\n    let lastPoint;\n    const newWorldPoints = [];\n    let newCanvasPoints = [];\n    // removing duplicate points\n    for (let i = 0; i < worldPoints.length; i++) {\n      if (lastPoint) {\n        if (distanceToPoint(lastPoint, canvasPoints[i]) > 0) {\n          newWorldPoints.push(worldPoints[i]);\n          newCanvasPoints.push(canvasPoints[i]);\n        }\n      }\n      lastPoint = canvasPoints[i];\n    }\n\n    // checking if a middle point is near the start\n    const firstPoint = newCanvasPoints[0];\n    for (\n      let j = Math.min(30, newCanvasPoints.length);\n      j < newCanvasPoints.length;\n      j++\n    ) {\n      if (distanceToPoint(firstPoint, newCanvasPoints[j]) < 0.5) {\n        newCanvasPoints = newCanvasPoints.slice(0, j);\n        return newWorldPoints.slice(0, j);\n      }\n    }\n    return newWorldPoints;\n  });\n}\n\nSegmentationIntersectionTool.toolName = 'SegmentationIntersection';\nexport default SegmentationIntersectionTool;\n","import { vec3 } from 'gl-matrix';\nimport type { Types } from '@cornerstonejs/core';\n\n/**\n * Given two world positions and an orthogonal view to an `imageVolume` defined by\n * a `viewPlaneNormal` and a `viewUp`, get the width and height in world coordinates of the rectangle\n * defined by the two points. The implementation works both with orthogonal\n * non-orthogonal rectangles.\n *\n * @param viewPlaneNormal - The normal of the view.\n * @param viewUp - The up direction of the view.\n * @param imageVolume - The imageVolume to use to measure.\n * @param worldPos1 - The first world position.\n * @param worldPos2 - The second world position.\n *\n * @returns The `worldWidth` and `worldHeight`.\n */\nexport default function getWorldWidthAndHeightFromTwoPoints(\n  viewPlaneNormal: Types.Point3,\n  viewUp: Types.Point3,\n  worldPos1: Types.Point3,\n  worldPos2: Types.Point3\n): { worldWidth: number; worldHeight: number } {\n  const viewRight = vec3.create();\n\n  vec3.cross(viewRight, <vec3>viewUp, <vec3>viewPlaneNormal);\n\n  const pos1 = vec3.fromValues(...worldPos1);\n  const pos2 = vec3.fromValues(...worldPos2);\n\n  const diagonal = vec3.create();\n  vec3.subtract(diagonal, pos1, pos2);\n\n  const diagonalLength = vec3.length(diagonal);\n\n  // When the two points are very close to each other return width as 0\n  // to avoid NaN the cosTheta formula calculation\n  if (diagonalLength < 0.0001) {\n    return { worldWidth: 0, worldHeight: 0 };\n  }\n\n  const cosTheta =\n    vec3.dot(diagonal, viewRight) / (diagonalLength * vec3.length(viewRight));\n\n  const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);\n\n  const worldWidth = sinTheta * diagonalLength;\n  const worldHeight = cosTheta * diagonalLength;\n\n  return { worldWidth, worldHeight };\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawEllipse as drawEllipseSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  pointInEllipse,\n  getCanvasEllipseCorners,\n} from '../../utilities/math/ellipse';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { EllipticalROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities/';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * EllipticalROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use EllipticalROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Elliptical tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(EllipticalROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(EllipticalROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(EllipticalROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(EllipticalROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass EllipticalROITool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    centerWorld?: Array<number>;\n    canvasWidth?: number;\n    canvasHeight?: number;\n    originalHandleCanvas?: Array<number>;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the ellipse.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a EllipticalROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): EllipticalROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n            [...worldPos],\n          ] as [Types.Point3, Types.Point3, Types.Point3, Types.Point3],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        initialRotation: viewport.getRotation(),\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      centerWorld: worldPos,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: EllipticalROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2,\n      Types.Point2,\n      Types.Point2\n    ];\n    const canvasCorners = getCanvasEllipseCorners(canvasCoordinates);\n\n    const [canvasPoint1, canvasPoint2] = canvasCorners;\n\n    const minorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) + proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) + proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) - proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) - proximity,\n    };\n\n    const majorEllipse = {\n      left: Math.min(canvasPoint1[0], canvasPoint2[0]) - proximity / 2,\n      top: Math.min(canvasPoint1[1], canvasPoint2[1]) - proximity / 2,\n      width: Math.abs(canvasPoint1[0] - canvasPoint2[0]) + proximity,\n      height: Math.abs(canvasPoint1[1] - canvasPoint2[1]) + proximity,\n    };\n\n    const pointInMinorEllipse = this._pointInEllipseCanvas(\n      minorEllipse,\n      canvasCoords\n    );\n    const pointInMajorEllipse = this._pointInEllipseCanvas(\n      majorEllipse,\n      canvasCoords\n    );\n\n    if (pointInMajorEllipse && !pointInMinorEllipse) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: EllipticalROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    let centerCanvas;\n    let centerWorld;\n    let canvasWidth;\n    let canvasHeight;\n    let originalHandleCanvas;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n      const { viewport } = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = viewport;\n\n      handleIndex = points.findIndex((p) => p === handle);\n\n      const pointsCanvas = points.map(worldToCanvas);\n\n      originalHandleCanvas = pointsCanvas[handleIndex];\n\n      canvasWidth = Math.abs(pointsCanvas[2][0] - pointsCanvas[3][0]);\n      canvasHeight = Math.abs(pointsCanvas[0][1] - pointsCanvas[1][1]);\n\n      centerCanvas = [\n        (pointsCanvas[2][0] + pointsCanvas[3][0]) / 2,\n        (pointsCanvas[0][1] + pointsCanvas[1][1]) / 2,\n      ];\n\n      centerWorld = canvasToWorld(centerCanvas);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      canvasWidth,\n      canvasHeight,\n      centerWorld,\n      originalHandleCanvas,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Elliptical ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the ellipse,\n    // and they are by definition not in the ellipse on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerWorld } = this.editData;\n    const centerCanvas = viewport.worldToCanvas(centerWorld as Types.Point3);\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n\n    // Todo: why bottom is -dY, it should be +dY\n    const bottomCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] - dY];\n    const topCanvas = <Types.Point2>[centerCanvas[0], centerCanvas[1] + dY];\n    const leftCanvas = <Types.Point2>[centerCanvas[0] - dX, centerCanvas[1]];\n    const rightCanvas = <Types.Point2>[centerCanvas[0] + dX, centerCanvas[1]];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { viewport } = getEnabledElement(element);\n    const { canvasToWorld, worldToCanvas } = viewport;\n\n    const {\n      annotation,\n      canvasWidth,\n      canvasHeight,\n      handleIndex,\n      centerWorld,\n      originalHandleCanvas,\n    } = this.editData;\n    const centerCanvas = viewport.worldToCanvas(centerWorld as Types.Point3);\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0 || handleIndex === 1) {\n      // Dragging top or bottom point\n      const dYCanvas = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - dYCanvas,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n\n      const dXCanvas = currentCanvasPoints[0] - originalHandleCanvas[0];\n      const newHalfCanvasWidth = canvasWidth / 2 + dXCanvas;\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + newHalfCanvasWidth,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n    } else {\n      // Dragging left or right point\n      const dXCanvas = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n      const canvasLeft = <Types.Point2>[\n        centerCanvas[0] - dXCanvas,\n        centerCanvas[1],\n      ];\n      const canvasRight = <Types.Point2>[\n        centerCanvas[0] + dXCanvas,\n        centerCanvas[1],\n      ];\n\n      points[2] = canvasToWorld(canvasLeft);\n      points[3] = canvasToWorld(canvasRight);\n\n      const dYCanvas = currentCanvasPoints[1] - originalHandleCanvas[1];\n      const newHalfCanvasHeight = canvasHeight / 2 + dYCanvas;\n      const canvasBottom = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] - newHalfCanvasHeight,\n      ];\n      const canvasTop = <Types.Point2>[\n        centerCanvas[0],\n        centerCanvas[1] + newHalfCanvasHeight,\n      ];\n\n      points[0] = canvasToWorld(canvasBottom);\n      points[1] = canvasToWorld(canvasTop);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the ellipticalROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as EllipticalROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2, Types.Point2, Types.Point2];\n\n      const rotation = Math.abs(\n        viewport.getRotation() - (data.initialRotation || 0)\n      );\n      let canvasCorners;\n\n      if (rotation == 90 || rotation == 270) {\n        canvasCorners = <Array<Types.Point2>>getCanvasEllipseCorners([\n          canvasCoordinates[2], // bottom\n          canvasCoordinates[3], // top\n          canvasCoordinates[0], // left\n          canvasCoordinates[1], // right\n        ]);\n      } else {\n        canvasCorners = <Array<Types.Point2>>(\n          getCanvasEllipseCorners(canvasCoordinates) // bottom, top, left, right, keep as is\n        );\n      }\n\n      const { centerPointRadius } = this.configuration;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-ellipse`;\n      const ellipseUID = '0';\n      drawEllipseSvg(\n        svgDrawingHelper,\n        annotationUID,\n        ellipseUID,\n        canvasCorners[0],\n        canvasCorners[1],\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        const minRadius = Math.min(\n          Math.abs(canvasCorners[0][0] - canvasCorners[1][0]) / 2, // horizontal radius\n          Math.abs(canvasCorners[0][1] - canvasCorners[1][1]) / 2 // vertical radius\n        );\n        if (minRadius > 3 * centerPointRadius) {\n          const centerPoint = this._getCanvasEllipseCenter(canvasCoordinates);\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${ellipseUID}-center`,\n            centerPoint,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasEllipseCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const scale = getCalibratedScale(image);\n        const area =\n          Math.abs(Math.PI * (worldWidth / 2) * (worldHeight / 2)) /\n          scale /\n          scale;\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats[1]?.value,\n          max: stats[0]?.value,\n          stdDev: stats[2]?.value,\n          statsArray: stats,\n          pointsInShape: pointsInShape,\n          isEmptyArea,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n\n  /**\n   * This is a temporary function to use the old ellipse's canvas-based\n   * calculation for isPointNearTool, we should move the the world-based\n   * calculation to the tool's isPointNearTool function.\n   *\n   * @param ellipse - The ellipse object\n   * @param location - The location to check\n   * @returns True if the point is inside the ellipse\n   */\n  _pointInEllipseCanvas(ellipse, location: Types.Point2): boolean {\n    const xRadius = ellipse.width / 2;\n    const yRadius = ellipse.height / 2;\n\n    if (xRadius <= 0.0 || yRadius <= 0.0) {\n      return false;\n    }\n\n    const center = [ellipse.left + xRadius, ellipse.top + yRadius];\n    const normalized = [location[0] - center[0], location[1] - center[1]];\n\n    const inEllipse =\n      (normalized[0] * normalized[0]) / (xRadius * xRadius) +\n        (normalized[1] * normalized[1]) / (yRadius * yRadius) <=\n      1.0;\n\n    return inEllipse;\n  }\n\n  /**\n   * It takes the canvas coordinates of the ellipse corners and returns the center point of it\n   *\n   * @param ellipseCanvasPoints - The coordinates of the ellipse in the canvas.\n   * @returns center point.\n   */\n  _getCanvasEllipseCenter(ellipseCanvasPoints: Types.Point2[]): Types.Point2 {\n    const [bottom, top, left, right] = ellipseCanvasPoints;\n    const topLeft = [left[0], top[1]];\n    const bottomRight = [right[0], bottom[1]];\n    return [\n      (topLeft[0] + bottomRight[0]) / 2,\n      (topLeft[1] + bottomRight[1]) / 2,\n    ] as Types.Point2;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { area, mean, stdDev, max, isEmptyArea, areaUnit, modalityUnit } =\n    cachedVolumeStats;\n\n  const textLines: string[] = [];\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n    textLines.push(areaLine);\n  }\n\n  if (mean) {\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  }\n\n  if (max) {\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  }\n\n  if (stdDev) {\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nEllipticalROITool.toolName = 'EllipticalROI';\nexport default EllipticalROITool;\n","import { distanceToPoint } from '../point';\nimport { canvasCoordinates } from './_types';\n\n/**\n * It takes the canvas coordinates of the circle corners and returns the top left and bottom right\n * corners of it\n *\n * @param circleCanvasPoints - The coordinates of the circle in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasCircleRadius(\n  circleCanvasPoints: canvasCoordinates\n): number {\n  const [center, end] = circleCanvasPoints;\n  return distanceToPoint(center, end);\n}\n","import type { Types } from '@cornerstonejs/core';\nimport { distanceToPoint } from '../point';\nimport { canvasCoordinates } from './_types';\n\n/**\n * It takes the canvas coordinates of the circle corners (wrapping square rectangle)\n * and returns the top left and bottom right\n * corners of it\n *\n * @param circleCanvasPoints - The coordinates of the circle in the canvas.\n * @returns An array of two points.\n */\nexport default function getCanvasCircleCorners(\n  circleCanvasPoints: canvasCoordinates\n): Array<Types.Point2> {\n  const [center, end] = circleCanvasPoints;\n  const radius = distanceToPoint(center, end);\n\n  const topLeft = <Types.Point2>[center[0] - radius, center[1] - radius];\n  const bottomRight = <Types.Point2>[center[0] + radius, center[1] + radius];\n\n  return [topLeft, bottomRight];\n}\n","import { AnnotationTool } from '../base';\n\nimport {\n  getEnabledElement,\n  VolumeViewport,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedAreaUnits,\n  getCalibratedScale,\n  getCalibratedAspect,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CircleROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { pointInShapeCallback } from '../../utilities';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport {\n  ModalityUnitOptions,\n  getModalityUnit,\n} from '../../utilities/getModalityUnit';\nimport { isViewportPreScaled } from '../../utilities/viewport/isViewportPreScaled';\nimport {\n  getCanvasCircleCorners,\n  getCanvasCircleRadius,\n} from '../../utilities/math/circle';\nimport { pointInEllipse } from '../../utilities/math/ellipse';\nimport { BasicStatsCalculator } from '../../utilities/math/basic';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * CircleROITool let you draw annotations that measures the statistics\n * such as area, max, mean and stdDev of an elliptical region of interest.\n * You can use CircleROITool in all perpendicular views (axial, sagittal, coronal).\n * Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference. Circle tool's text box lines are dynamically\n * generated based on the viewport's underlying Modality. For instance, if\n * the viewport is displaying CT, the text box will shown the statistics in Hounsfield units,\n * and if the viewport is displaying PET, the text box will show the statistics in\n * SUV units.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * Changing tool configuration (see below) you can make the tool to draw the center\n * point circle with a given radius.\n *\n * ```js\n * cornerstoneTools.addTool(CircleROITool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(CircleROITool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(CircleROITool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n *\n * // draw a circle at the center point with 4px radius.\n * toolGroup.setToolConfiguration(CircleROITool.toolName, {\n *   centerPointRadius: 4,\n * });\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass CircleROITool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        // Radius of the circle to draw  at the center point of the circle.\n        // Set this zero(0) in order not to draw the circle.\n        centerPointRadius: 0,\n        getTextLines: defaultGetTextLines,\n        statsCalculator: BasicStatsCalculator,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): CircleROIAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          points: [[...worldPos], [...worldPos]] as [\n            Types.Point3, // center\n            Types.Point3 // end\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CircleROIAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const radius = getCanvasCircleRadius(canvasCoordinates);\n    const radiusPoint = getCanvasCircleRadius([\n      canvasCoordinates[0],\n      canvasCoords,\n    ]);\n\n    if (Math.abs(radiusPoint - radius) < proximity / 2) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: CircleROIAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      const { points } = data.handles;\n\n      handleIndex = points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    // Circle ROI tool should reset its highlight to false on mouse up (as opposed\n    // to other tools that keep it highlighted until the user moves. The reason\n    // is that we use top-left and bottom-right handles to define the circle,\n    // and they are by definition not in the circle on mouse up.\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { data } = annotation;\n\n    data.handles.points = [\n      data.handles.points[0], // center stays\n      canvasToWorld(currentCanvasPoints), // end point moves (changing radius)\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { canvasToWorld, worldToCanvas } = enabledElement.viewport;\n\n    const { annotation, handleIndex } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => worldToCanvas(p));\n\n    // Move current point in that direction.\n    // Move other points in opposite direction.\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    if (handleIndex === 0) {\n      // Dragging center, move the circle ROI\n      const dXCanvas = currentCanvasPoints[0] - canvasCoordinates[0][0];\n      const dYCanvas = currentCanvasPoints[1] - canvasCoordinates[0][1];\n\n      const canvasCenter = currentCanvasPoints as Types.Point2;\n      const canvasEnd = <Types.Point2>[\n        canvasCoordinates[1][0] + dXCanvas,\n        canvasCoordinates[1][1] + dYCanvas,\n      ];\n\n      points[0] = canvasToWorld(canvasCenter);\n      points[1] = canvasToWorld(canvasEnd);\n    } else {\n      // Dragging end point, center stays\n      points[1] = canvasToWorld(currentCanvasPoints);\n    }\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CircleROIAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2, Types.Point2];\n      const center = canvasCoordinates[0];\n      const radius = getCanvasCircleRadius(canvasCoordinates);\n      const canvasCorners = getCanvasCircleCorners(canvasCoordinates);\n\n      const { centerPointRadius } = this.configuration;\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].areaUnit == null\n      ) {\n        data.cachedStats[targetId] = {\n          Modality: null,\n          area: null,\n          max: null,\n          mean: null,\n          stdDev: null,\n          areaUnit: null,\n          radius: null,\n          radiusUnit: null,\n          perimeter: null,\n        };\n\n        this._calculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          viewport,\n          renderingEngine,\n          enabledElement\n        );\n        // If the invalidated data is as a result of volumeViewport manipulation\n        // of the tools, we need to invalidate the related viewports data, so that\n        // when scrolling to the related slice in which the tool were manipulated\n        // we re-render the correct tool position. This is due to stackViewport\n        // which doesn't have the full volume at each time, and we are only working\n        // on one slice at a time.\n        if (viewport instanceof VolumeViewport) {\n          const { referencedImageId } = annotation.metadata;\n\n          // invalidate all the relevant stackViewports if they are not\n          // at the referencedImageId\n          for (const targetId in data.cachedStats) {\n            if (targetId.startsWith('imageId')) {\n              const viewports = renderingEngine.getStackViewports();\n\n              const invalidatedStack = viewports.find((vp) => {\n                // The stack viewport that contains the imageId but is not\n                // showing it currently\n                const referencedImageURI =\n                  csUtils.imageIdToURI(referencedImageId);\n                const hasImageURI = vp.hasImageURI(referencedImageURI);\n                const currentImageURI = csUtils.imageIdToURI(\n                  vp.getCurrentImageId()\n                );\n                return hasImageURI && currentImageURI !== referencedImageURI;\n              });\n\n              if (invalidatedStack) {\n                delete data.cachedStats[targetId];\n              }\n            }\n          }\n        }\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-circle`;\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      // draw center point, if \"centerPointRadius\" configuration is valid.\n      if (centerPointRadius > 0) {\n        if (radius > 3 * centerPointRadius) {\n          drawCircleSvg(\n            svgDrawingHelper,\n            annotationUID,\n            `${circleUID}-center`,\n            center,\n            centerPointRadius,\n            {\n              color,\n              lineDash,\n              lineWidth,\n            }\n          );\n        }\n      }\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      // Poor man's cached?\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCorners);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats = (\n    annotation,\n    viewport,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const { viewPlaneNormal, viewUp } = viewport.getCamera();\n\n    const [topLeftCanvas, bottomRightCanvas] = <Array<Types.Point2>>(\n      getCanvasCircleCorners(canvasCoordinates)\n    );\n\n    const topLeftWorld = viewport.canvasToWorld(topLeftCanvas);\n    const bottomRightWorld = viewport.canvasToWorld(bottomRightCanvas);\n    const { cachedStats } = data;\n\n    const targetIds = Object.keys(cachedStats);\n    const worldPos1 = topLeftWorld;\n    const worldPos2 = bottomRightWorld;\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { dimensions, imageData, metadata, hasPixelSpacing } = image;\n\n      const worldPos1Index = transformWorldToIndex(imageData, worldPos1);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      const worldPos2Index = transformWorldToIndex(imageData, worldPos2);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const boundsIJK = [\n          [iMin, iMax],\n          [jMin, jMax],\n          [kMin, kMax],\n        ] as [Types.Point2, Types.Point2, Types.Point2];\n\n        const center = [\n          (topLeftWorld[0] + bottomRightWorld[0]) / 2,\n          (topLeftWorld[1] + bottomRightWorld[1]) / 2,\n          (topLeftWorld[2] + bottomRightWorld[2]) / 2,\n        ] as Types.Point3;\n\n        const ellipseObj = {\n          center,\n          xRadius: Math.abs(topLeftWorld[0] - bottomRightWorld[0]) / 2,\n          yRadius: Math.abs(topLeftWorld[1] - bottomRightWorld[1]) / 2,\n          zRadius: Math.abs(topLeftWorld[2] - bottomRightWorld[2]) / 2,\n        };\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n        const isEmptyArea = worldWidth === 0 && worldHeight === 0;\n        const scale = getCalibratedScale(image);\n        const aspect = getCalibratedAspect(image);\n        const area = Math.abs(\n          Math.PI *\n            (worldWidth / scale / 2) *\n            (worldHeight / aspect / scale / 2)\n        );\n\n        const modalityUnitOptions = {\n          isPreScaled: isViewportPreScaled(viewport, targetId),\n          isSuvScaled: this.isSuvScaled(\n            viewport,\n            targetId,\n            annotation.metadata.referencedImageId\n          ),\n        };\n\n        const modalityUnit = getModalityUnit(\n          metadata.Modality,\n          annotation.metadata.referencedImageId,\n          modalityUnitOptions\n        );\n\n        const pointsInShape = pointInShapeCallback(\n          imageData,\n          (pointLPS, pointIJK) => pointInEllipse(ellipseObj, pointLPS),\n          this.configuration.statsCalculator.statsCallback,\n          boundsIJK\n        );\n\n        const stats = this.configuration.statsCalculator.getStatistics();\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n          area,\n          mean: stats[1]?.value,\n          max: stats[0]?.value,\n          stdDev: stats[2]?.value,\n          statsArray: stats,\n          pointsInShape: pointsInShape,\n          isEmptyArea,\n          areaUnit: getCalibratedAreaUnits(null, image),\n          radius: worldWidth / 2 / scale,\n          radiusUnit: getCalibratedLengthUnits(null, image),\n          perimeter: (2 * Math.PI * (worldWidth / 2)) / scale,\n          modalityUnit,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n\n        cachedStats[targetId] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const {\n    radius,\n    radiusUnit,\n    area,\n    mean,\n    stdDev,\n    max,\n    isEmptyArea,\n    Modality,\n    areaUnit,\n    modalityUnit,\n  } = cachedVolumeStats;\n\n  const textLines: string[] = [];\n\n  if (radius) {\n    const radiusLine = isEmptyArea\n      ? `Radius: Oblique not supported`\n      : `Radius: ${roundNumber(radius)} ${radiusUnit}`;\n    textLines.push(radiusLine);\n  }\n\n  if (area) {\n    const areaLine = isEmptyArea\n      ? `Area: Oblique not supported`\n      : `Area: ${roundNumber(area)} ${areaUnit}`;\n    textLines.push(areaLine);\n  }\n\n  if (mean) {\n    textLines.push(`Mean: ${roundNumber(mean)} ${modalityUnit}`);\n  }\n\n  if (max) {\n    textLines.push(`Max: ${roundNumber(max)} ${modalityUnit}`);\n  }\n\n  if (stdDev) {\n    textLines.push(`Std Dev: ${roundNumber(stdDev)} ${modalityUnit}`);\n  }\n\n  return textLines;\n}\n\nCircleROITool.toolName = 'CircleROI';\nexport default CircleROITool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  getCalibratedLengthUnits,\n  getCalibratedScale,\n} from '../../utilities/getCalibratedUnits';\nimport roundNumber from '../../utilities/roundNumber';\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../../stateManagement/annotation/annotationVisibility';\nimport {\n  drawLine as drawLineSvg,\n  drawHandles as drawHandlesSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as lineSegment from '../../utilities/math/line';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { BidirectionalAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n  MouseDragEventType,\n  MouseMoveEventType,\n} from '../../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nconst { transformWorldToIndex } = csUtils;\n\n/**\n * BidirectionalTool let you draw annotations that measures the length and\n * width at the same time in `mm` unit. It is consisted of two perpendicular lines and\n * a text box. You can use the BidirectionalTool in all planes even in oblique\n * reconstructed planes. Note: annotation tools in cornerstone3DTools exists in the exact location\n * in the physical 3d space, as a result, by default, all annotations that are\n * drawing in the same frameOfReference will get shared between viewports that\n * are in the same frameOfReference.\n *\n * The resulting annotation's data (statistics) and metadata (the\n * state of the viewport while drawing was happening) will get added to the\n * ToolState manager and can be accessed from the ToolState by calling getAnnotations\n * or similar methods.\n *\n * ```js\n * cornerstoneTools.addTool(BidirectionalTool)\n *\n * const toolGroup = ToolGroupManager.createToolGroup('toolGroupId')\n *\n * toolGroup.addTool(BidirectionalTool.toolName)\n *\n * toolGroup.addViewport('viewportId', 'renderingEngineId')\n *\n * toolGroup.setToolActive(BidirectionalTool.toolName, {\n *   bindings: [\n *    {\n *       mouseButton: MouseBindings.Primary, // Left Click\n *     },\n *   ],\n * })\n * ```\n *\n * Read more in the Docs section of the website.\n */\n\nclass BidirectionalTool extends AnnotationTool {\n  static toolName;\n\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n  preventHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Bidirectional Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation(\n    evt: EventTypes.InteractionEventType\n  ): BidirectionalAnnotation {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: BidirectionalAnnotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [\n            // long\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            // short\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n          activeHandleIndex: null,\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  }\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: BidirectionalAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // Check long axis\n    let canvasPoint1 = viewport.worldToCanvas(points[0]);\n    let canvasPoint2 = viewport.worldToCanvas(points[1]);\n\n    let line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    let distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    // Check short axis\n    canvasPoint1 = viewport.worldToCanvas(points[2]);\n    canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  /**\n   * Handles the toolSelected callback for bidirectional tool\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Executes the callback for when mouse has selected a handle (anchor point) of\n   * the bidirectional tool or when the text box has been selected.\n   *\n   * @param evt - EventTypes.MouseDownEventType\n   * @param annotation - Bidirectional annotation\n   * @param handle - Handle index or selected textBox information\n   * @param interactionType - interaction type (mouse, touch)\n   */\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: BidirectionalAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const data = annotation.data;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    hideElementCursor(element);\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  /**\n   * Handles the mouse up action for the bidirectional tool. It can be at the end\n   * of the annotation drawing (MouseUpEventType) or when the user clicks and release\n   * the mouse button instantly which let to the annotation to draw without holding\n   * the mouse button (MouseClickEventType).\n   *\n   * @param evt - mouse up or mouse click event types\n   */\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (this.editData.handleIndex !== undefined) {\n      const { points } = data.handles;\n      const firstLineSegmentLength = vec3.distance(points[0], points[1]);\n      const secondLineSegmentLength = vec3.distance(points[2], points[3]);\n\n      if (secondLineSegmentLength > firstLineSegmentLength) {\n        // Switch points so [0,1] is the long axis and [2,3] is the short axis.\n\n        const longAxis = [[...points[2]], [...points[3]]];\n\n        const shortAxisPoint0 = [...points[0]];\n        const shortAxisPoint1 = [...points[1]];\n\n        // shortAxis[0->1] should be perpendicular (counter-clockwise) to longAxis[0->1]\n        const longAxisVector = vec2.create();\n\n        vec2.set(\n          longAxisVector,\n          longAxis[1][0] - longAxis[0][0],\n          longAxis[1][1] - longAxis[1][0]\n        );\n\n        const counterClockWisePerpendicularToLongAxis = vec2.create();\n\n        vec2.set(\n          counterClockWisePerpendicularToLongAxis,\n          -longAxisVector[1],\n          longAxisVector[0]\n        );\n\n        const currentShortAxisVector = vec2.create();\n\n        vec2.set(\n          currentShortAxisVector,\n          shortAxisPoint1[0] - shortAxisPoint0[0],\n          shortAxisPoint1[1] - shortAxisPoint0[0]\n        );\n\n        let shortAxis;\n\n        if (\n          vec2.dot(\n            currentShortAxisVector,\n            counterClockWisePerpendicularToLongAxis\n          ) > 0\n        ) {\n          shortAxis = [shortAxisPoint0, shortAxisPoint1];\n        } else {\n          shortAxis = [shortAxisPoint1, shortAxisPoint0];\n        }\n\n        data.handles.points = [\n          longAxis[0],\n          longAxis[1],\n          shortAxis[0],\n          shortAxis[1],\n        ];\n      }\n    }\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * @param evt - mouse move event type or mouse drag\n   */\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    const worldPos = currentPoints.world;\n\n    // Update first move handle\n    data.handles.points[handleIndex] = [...worldPos];\n\n    const canvasCoordPoints = data.handles.points.map(worldToCanvas);\n\n    const canvasCoords = {\n      longLineSegment: {\n        start: {\n          x: canvasCoordPoints[0][0],\n          y: canvasCoordPoints[0][1],\n        },\n        end: {\n          x: canvasCoordPoints[1][0],\n          y: canvasCoordPoints[1][1],\n        },\n      },\n      shortLineSegment: {\n        start: {\n          x: canvasCoordPoints[2][0],\n          y: canvasCoordPoints[2][1],\n        },\n        end: {\n          x: canvasCoordPoints[3][0],\n          y: canvasCoordPoints[3][1],\n        },\n      },\n    };\n\n    // ~~ calculate worldPos of our short axis handles\n    // short axis is perpendicular to long axis, and we set its length to be 2/3 of long axis\n    // (meaning each)\n    const dist = vec2.distance(canvasCoordPoints[0], canvasCoordPoints[1]);\n\n    const shortAxisDistFromCenter = dist / 3;\n    // Calculate long line's incline\n    const dx =\n      canvasCoords.longLineSegment.start.x - canvasCoords.longLineSegment.end.x;\n    const dy =\n      canvasCoords.longLineSegment.start.y - canvasCoords.longLineSegment.end.y;\n    const length = Math.sqrt(dx * dx + dy * dy);\n    const vectorX = dx / length;\n    const vectorY = dy / length;\n    // middle point between long line segment's points\n    const xMid =\n      (canvasCoords.longLineSegment.start.x +\n        canvasCoords.longLineSegment.end.x) /\n      2;\n    const yMid =\n      (canvasCoords.longLineSegment.start.y +\n        canvasCoords.longLineSegment.end.y) /\n      2;\n    // short points 1/3 distance from center of long points\n    const startX = xMid + shortAxisDistFromCenter * vectorY;\n    const startY = yMid - shortAxisDistFromCenter * vectorX;\n    const endX = xMid - shortAxisDistFromCenter * vectorY;\n    const endY = yMid + shortAxisDistFromCenter * vectorX;\n\n    // Update perpendicular line segment's points\n    data.handles.points[2] = viewport.canvasToWorld([startX, startY]);\n    data.handles.points[3] = viewport.canvasToWorld([endX, endY]);\n\n    annotation.invalidated = true;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.editData.hasMoved = true;\n  };\n\n  /**\n   * Mouse drag to edit annotation callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n    if (movingTextBox) {\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragModifyHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  /**\n   * Mouse dragging a handle callback\n   * @param evt - mouse drag event\n   */\n  _dragModifyHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { annotation, handleIndex: movingHandleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle\n    const worldPos = currentPoints.world;\n    const canvasCoordHandlesCurrent = [\n      viewport.worldToCanvas(data.handles.points[0]),\n      viewport.worldToCanvas(data.handles.points[1]),\n      viewport.worldToCanvas(data.handles.points[2]),\n      viewport.worldToCanvas(data.handles.points[3]),\n    ];\n\n    const firstLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[0][0],\n        y: canvasCoordHandlesCurrent[0][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[1][0],\n        y: canvasCoordHandlesCurrent[1][1],\n      },\n    };\n    const secondLineSegment = {\n      start: {\n        x: canvasCoordHandlesCurrent[2][0],\n        y: canvasCoordHandlesCurrent[2][1],\n      },\n      end: {\n        x: canvasCoordHandlesCurrent[3][0],\n        y: canvasCoordHandlesCurrent[3][1],\n      },\n    };\n\n    // Handle we've selected's proposed point\n    const proposedPoint = <Types.Point3>[...worldPos];\n    const proposedCanvasCoord = viewport.worldToCanvas(proposedPoint);\n\n    if (movingHandleIndex === 0 || movingHandleIndex === 1) {\n      const fixedHandleIndex = movingHandleIndex === 0 ? 1 : 0;\n\n      const fixedHandleCanvasCoord =\n        canvasCoordHandlesCurrent[fixedHandleIndex];\n\n      const fixedHandleToProposedCoordVec = vec2.set(\n        vec2.create(),\n        proposedCanvasCoord[0] - fixedHandleCanvasCoord[0],\n        proposedCanvasCoord[1] - fixedHandleCanvasCoord[1]\n      );\n\n      const fixedHandleToOldCoordVec = vec2.set(\n        vec2.create(),\n        canvasCoordHandlesCurrent[movingHandleIndex][0] -\n          fixedHandleCanvasCoord[0],\n        canvasCoordHandlesCurrent[movingHandleIndex][1] -\n          fixedHandleCanvasCoord[1]\n      );\n\n      // normalize vector\n      vec2.normalize(\n        fixedHandleToProposedCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n      vec2.normalize(fixedHandleToOldCoordVec, fixedHandleToOldCoordVec);\n\n      // Check whether this\n      const proposedFirstLineSegment = {\n        start: {\n          x: fixedHandleCanvasCoord[0],\n          y: fixedHandleCanvasCoord[1],\n        },\n        end: {\n          x: proposedCanvasCoord[0],\n          y: proposedCanvasCoord[1],\n        },\n      };\n\n      // Note: this is the case when we are modifying the long axis line segment\n      // and we make it shorter and shorter until its second half size becomes zero\n      // which basically means that any more modification would make the long axis\n      // second half disappear. In this case, we just bail out and do not update\n      // since we don't want to disrupt the bidirectional shape.\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          proposedFirstLineSegment,\n          secondLineSegment\n        )\n      ) {\n        return;\n      }\n\n      const centerOfRotation = fixedHandleCanvasCoord;\n\n      const angle = this._getSignedAngle(\n        fixedHandleToOldCoordVec,\n        fixedHandleToProposedCoordVec\n      );\n\n      // rotate handles around the center of rotation, first translate to origin,\n      // then rotate, then translate back\n      let firstPointX = canvasCoordHandlesCurrent[2][0];\n      let firstPointY = canvasCoordHandlesCurrent[2][1];\n\n      let secondPointX = canvasCoordHandlesCurrent[3][0];\n      let secondPointY = canvasCoordHandlesCurrent[3][1];\n\n      // translate to origin\n      firstPointX -= centerOfRotation[0];\n      firstPointY -= centerOfRotation[1];\n\n      secondPointX -= centerOfRotation[0];\n      secondPointY -= centerOfRotation[1];\n\n      // rotate\n      const rotatedFirstPoint =\n        firstPointX * Math.cos(angle) - firstPointY * Math.sin(angle);\n      const rotatedFirstPointY =\n        firstPointX * Math.sin(angle) + firstPointY * Math.cos(angle);\n\n      const rotatedSecondPoint =\n        secondPointX * Math.cos(angle) - secondPointY * Math.sin(angle);\n      const rotatedSecondPointY =\n        secondPointX * Math.sin(angle) + secondPointY * Math.cos(angle);\n\n      // translate back\n      firstPointX = rotatedFirstPoint + centerOfRotation[0];\n      firstPointY = rotatedFirstPointY + centerOfRotation[1];\n\n      secondPointX = rotatedSecondPoint + centerOfRotation[0];\n      secondPointY = rotatedSecondPointY + centerOfRotation[1];\n\n      // update handles\n      const newFirstPoint = viewport.canvasToWorld([firstPointX, firstPointY]);\n      const newSecondPoint = viewport.canvasToWorld([\n        secondPointX,\n        secondPointY,\n      ]);\n\n      // the fixed handle is the one that is not being moved so we\n      // don't need to update it\n      data.handles.points[movingHandleIndex] = proposedPoint;\n      data.handles.points[2] = newFirstPoint;\n      data.handles.points[3] = newSecondPoint;\n    } else {\n      // Translation manipulator\n      const translateHandleIndex = movingHandleIndex === 2 ? 3 : 2;\n\n      const canvasCoordsCurrent = {\n        longLineSegment: {\n          start: firstLineSegment.start,\n          end: firstLineSegment.end,\n        },\n        shortLineSegment: {\n          start: secondLineSegment.start,\n          end: secondLineSegment.end,\n        },\n      };\n\n      const longLineSegmentVec = vec2.subtract(\n        vec2.create(),\n        [\n          canvasCoordsCurrent.longLineSegment.end.x,\n          canvasCoordsCurrent.longLineSegment.end.y,\n        ],\n        [\n          canvasCoordsCurrent.longLineSegment.start.x,\n          canvasCoordsCurrent.longLineSegment.start.y,\n        ]\n      );\n\n      const longLineSegmentVecNormalized = vec2.normalize(\n        vec2.create(),\n        longLineSegmentVec\n      );\n\n      const proposedToCurrentVec = vec2.subtract(\n        vec2.create(),\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [\n          canvasCoordHandlesCurrent[movingHandleIndex][0],\n          canvasCoordHandlesCurrent[movingHandleIndex][1],\n        ]\n      );\n\n      const movementLength = vec2.length(proposedToCurrentVec);\n\n      const angle = this._getSignedAngle(\n        longLineSegmentVecNormalized,\n        proposedToCurrentVec\n      );\n\n      const movementAlongLineSegmentLength = Math.cos(angle) * movementLength;\n\n      const newTranslatedPoint = vec2.scaleAndAdd(\n        vec2.create(),\n        [\n          canvasCoordHandlesCurrent[translateHandleIndex][0],\n          canvasCoordHandlesCurrent[translateHandleIndex][1],\n        ],\n        longLineSegmentVecNormalized,\n        movementAlongLineSegmentLength\n      );\n\n      // don't update if it passes through the other line segment\n      if (\n        this._movingLongAxisWouldPutItThroughShortAxis(\n          {\n            start: {\n              x: proposedCanvasCoord[0],\n              y: proposedCanvasCoord[1],\n            },\n            end: {\n              x: newTranslatedPoint[0],\n              y: newTranslatedPoint[1],\n            },\n          },\n          {\n            start: {\n              x: canvasCoordsCurrent.longLineSegment.start.x,\n              y: canvasCoordsCurrent.longLineSegment.start.y,\n            },\n            end: {\n              x: canvasCoordsCurrent.longLineSegment.end.x,\n              y: canvasCoordsCurrent.longLineSegment.end.y,\n            },\n          }\n        )\n      ) {\n        return;\n      }\n\n      const intersectionPoint = lineSegment.intersectLine(\n        [proposedCanvasCoord[0], proposedCanvasCoord[1]],\n        [newTranslatedPoint[0], newTranslatedPoint[1]],\n        [firstLineSegment.start.x, firstLineSegment.start.y],\n        [firstLineSegment.end.x, firstLineSegment.end.y]\n      );\n\n      // don't update if it doesn't intersect\n      if (!intersectionPoint) {\n        return;\n      }\n\n      data.handles.points[translateHandleIndex] = viewport.canvasToWorld(\n        newTranslatedPoint as Types.Point2\n      );\n      data.handles.points[movingHandleIndex] = proposedPoint;\n    }\n  };\n\n  /**\n   * Cancels an ongoing drawing of a bidirectional annotation\n   * @param element - HTML Element\n   */\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._dragDrawCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragDrawCallback as EventListener\n    );\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragModifyCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the bidirectional annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = true;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as BidirectionalAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n      // If cachedStats does not exist, or the unit is missing (as part of import/hydration etc.),\n      // force to recalculate the stats from the points\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].unit == null\n      ) {\n        data.cachedStats[targetId] = {\n          length: null,\n          width: null,\n          unit: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId1 = `${annotationUID}-line-1`;\n      const dataId2 = `${annotationUID}-line-2`;\n\n      const lineUID = '0';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId1\n      );\n\n      const secondLineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        secondLineUID,\n        canvasCoordinates[2],\n        canvasCoordinates[3],\n        {\n          color,\n          lineDash,\n          lineWidth,\n          shadow,\n        },\n        dataId2\n      );\n\n      renderStatus = true;\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n      if (!textLines || textLines.length === 0) {\n        continue;\n      }\n\n      let canvasTextBoxCoords;\n\n      if (!data.handles.textBox.hasMoved) {\n        canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _movingLongAxisWouldPutItThroughShortAxis = (\n    firstLineSegment,\n    secondLineSegment\n  ) => {\n    const vectorInSecondLineDirection = vec2.create();\n\n    vec2.set(\n      vectorInSecondLineDirection,\n      secondLineSegment.end.x - secondLineSegment.start.x,\n      secondLineSegment.end.y - secondLineSegment.start.y\n    );\n\n    vec2.normalize(vectorInSecondLineDirection, vectorInSecondLineDirection);\n\n    const extendedSecondLineSegment = {\n      start: {\n        x: secondLineSegment.start.x - vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.start.y - vectorInSecondLineDirection[1] * 10,\n      },\n      end: {\n        x: secondLineSegment.end.x + vectorInSecondLineDirection[0] * 10,\n        y: secondLineSegment.end.y + vectorInSecondLineDirection[1] * 10,\n      },\n    };\n\n    // Add some buffer in the secondLineSegment when finding the proposedIntersectionPoint\n    // Of points to stop us getting stack when rotating quickly.\n\n    const proposedIntersectionPoint = lineSegment.intersectLine(\n      [extendedSecondLineSegment.start.x, extendedSecondLineSegment.start.y],\n      [extendedSecondLineSegment.end.x, extendedSecondLineSegment.end.y],\n      [firstLineSegment.start.x, firstLineSegment.start.y],\n      [firstLineSegment.end.x, firstLineSegment.end.y]\n    );\n\n    const wouldPutThroughShortAxis = !proposedIntersectionPoint;\n\n    return wouldPutThroughShortAxis;\n  };\n\n  _calculateLength(pos1, pos2) {\n    const dx = pos1[0] - pos2[0];\n    const dy = pos1[1] - pos2[1];\n    const dz = pos1[2] - pos2[2];\n\n    return Math.sqrt(dx * dx + dy * dy + dz * dz);\n  }\n\n  _calculateCachedStats = (annotation, renderingEngine, enabledElement) => {\n    const { data } = annotation;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n    const worldPos4 = data.handles.points[3];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      const image = this.getTargetIdImage(targetId, renderingEngine);\n\n      // If image does not exists for the targetId, skip. This can be due\n      // to various reasons such as if the target was a volumeViewport, and\n      // the volumeViewport has been decached in the meantime.\n      if (!image) {\n        continue;\n      }\n\n      const { imageData, dimensions } = image;\n      const scale = getCalibratedScale(image);\n      const dist1 = this._calculateLength(worldPos1, worldPos2) / scale;\n      const dist2 = this._calculateLength(worldPos3, worldPos4) / scale;\n      const length = dist1 > dist2 ? dist1 : dist2;\n      const width = dist1 > dist2 ? dist2 : dist1;\n\n      const index1 = transformWorldToIndex(imageData, worldPos1);\n      const index2 = transformWorldToIndex(imageData, worldPos2);\n      const index3 = transformWorldToIndex(imageData, worldPos3);\n      const index4 = transformWorldToIndex(imageData, worldPos4);\n\n      this._isInsideVolume(index1, index2, index3, index4, dimensions)\n        ? (this.isHandleOutsideImage = false)\n        : (this.isHandleOutsideImage = true);\n\n      cachedStats[targetId] = {\n        length,\n        width,\n        unit: getCalibratedLengthUnits(null, image),\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, index3, index4, dimensions): boolean => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions) &&\n      csUtils.indexWithinDimensions(index3, dimensions) &&\n      csUtils.indexWithinDimensions(index4, dimensions)\n    );\n  };\n\n  _getSignedAngle = (vector1, vector2) => {\n    return Math.atan2(\n      vector1[0] * vector2[1] - vector1[1] * vector2[0],\n      vector1[0] * vector2[0] + vector1[1] * vector2[1]\n    );\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const { cachedStats } = data;\n  const { length, width, unit } = cachedStats[targetId];\n\n  if (length === undefined) {\n    return;\n  }\n\n  // spaceBetweenSlices & pixelSpacing &\n  // magnitude in each direction? Otherwise, this is \"px\"?\n  const textLines = [\n    `L: ${roundNumber(length)} ${unit}`,\n    `W: ${roundNumber(width)} ${unit}`,\n  ];\n\n  return textLines;\n}\n\nBidirectionalTool.toolName = 'Bidirectional';\nexport default BidirectionalTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawArrow as drawArrowSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { ArrowAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass ArrowAnnotateTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        getTextCallback,\n        changeTextCallback,\n        preventHandleOutsideImage: false,\n        arrowFirst: true,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): ArrowAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const { arrowFirst } = this.configuration;\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        text: '',\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          arrowFirst,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: ArrowAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line.start.x, line.start.y],\n      [line.end.x, line.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: ArrowAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewportId, renderingEngineId, renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    if (newAnnotation) {\n      this.configuration.getTextCallback((text) => {\n        if (!text) {\n          removeAnnotation(annotation.annotationUID);\n          triggerAnnotationRenderForViewportIds(\n            renderingEngine,\n            viewportIdsToRender\n          );\n          this.editData = null;\n          this.isDrawing = false;\n          return;\n        }\n        annotation.data.text = text;\n\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n\n        triggerAnnotationRenderForViewportIds(\n          renderingEngine,\n          viewportIdsToRender\n        );\n      });\n    } else {\n      const eventType = Events.ANNOTATION_MODIFIED;\n\n      const eventDetail: AnnotationModifiedEventDetail = {\n        annotation,\n        viewportId,\n        renderingEngineId,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  touchTapCallback = (evt: EventTypes.TouchTapEventType) => {\n    if (evt.detail.taps == 2) {\n      this.doubleClickCallback(evt);\n    }\n  };\n\n  doubleClickCallback = (evt: EventTypes.TouchTapEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const clickedAnnotation = annotations.find((annotation) =>\n      this.isPointNearTool(\n        element,\n        annotation as ArrowAnnotation,\n        eventDetail.currentPoints.canvas,\n        6 // Todo: get from configuration\n      )\n    );\n\n    if (!clickedAnnotation) {\n      return;\n    }\n\n    const annotation = clickedAnnotation as ArrowAnnotation;\n\n    this.configuration.changeTextCallback(\n      clickedAnnotation,\n      evt.detail,\n      this._doneChangingTextCallback.bind(this, element, annotation)\n    );\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    // This double click was handled and the dialogue was displayed.\n    // No need for any other listener to handle it too - stopImmediatePropagation\n    // helps ensure this primarily so that no other listeners on the target element\n    // get called.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  };\n\n  _doneChangingTextCallback(element, annotation, updatedText): void {\n    annotation.data.text = updatedText;\n\n    const { renderingEngine, viewportId, renderingEngineId } =\n      getEnabledElement(element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    triggerEvent(eventTarget, eventType, {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    });\n  }\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ArrowAnnotation;\n      const { annotationUID, data } = annotation;\n      const { handles, text } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineWidth,\n          }\n        );\n      }\n\n      const arrowUID = '1';\n      if (this.configuration.arrowFirst) {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[1],\n          canvasCoordinates[0],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      } else {\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasCoordinates[0],\n          canvasCoordinates[1],\n          {\n            color,\n            width: lineWidth,\n            lineDash: lineDash,\n          }\n        );\n      }\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!text) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      // Need to update to sync w/ annotation while unlinked/not moved\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the point that doesn't have the arrowhead by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        [text],\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction getTextCallback(doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nArrowAnnotateTool.toolName = 'ArrowAnnotate';\nexport default ArrowAnnotateTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport roundNumber from '../../utilities/roundNumber';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { AngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass AngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.InteractionEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): AngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n    const [point1, point2, point3] = data.handles.points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n    if (!point3) {\n      return false;\n    }\n\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n\n    const line2 = {\n      start: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n      end: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n    };\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    if (distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: AngleAnnotation,\n    handle: ToolHandle\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length === 2) {\n      // adds the last point to the measurement\n      this.editData.handleIndex = 2;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex, movingTextBox } =\n      this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (handleIndex === undefined) {\n      // Drag mode - moving handle\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      // Move mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (this.isDrawing) {\n      this.isDrawing = false;\n      this._deactivateDraw(element);\n      this._deactivateModify(element);\n      resetElementCursor(element);\n\n      const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n      const { data } = annotation;\n\n      annotation.highlighted = false;\n      data.handles.activeHandleIndex = null;\n\n      const enabledElement = getEnabledElement(element);\n      const { renderingEngine } = enabledElement;\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n\n      if (newAnnotation) {\n        const eventType = Events.ANNOTATION_COMPLETED;\n\n        const eventDetail: AnnotationCompletedEventDetail = {\n          annotation,\n        };\n\n        triggerEvent(eventTarget, eventType, eventDetail);\n      }\n\n      this.editData = null;\n      this.angleStartedNotYetCompleted = false;\n      return annotation.annotationUID;\n    }\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].angle == null\n      ) {\n        data.cachedStats[targetId] = {\n          angle: null,\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      let lineUID = '1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[0],\n        canvasCoordinates[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add textBox until annotation has 3 anchor points (actually 4 because of the center point)\n      if (canvasCoordinates.length !== 3) {\n        return renderStatus;\n      }\n\n      lineUID = '2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        canvasCoordinates[1],\n        canvasCoordinates[2],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        // linked to the vertex by default\n        const canvasTextBoxCoords = canvasCoordinates[1];\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = '1';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all three anchors bail out\n    if (data.handles.points.length !== 3) {\n      return;\n    }\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[1];\n    const worldPos3 = data.handles.points[2];\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n      const angle = angleBetweenLines(\n        [worldPos1, worldPos2],\n        [worldPos2, worldPos3]\n      );\n\n      cachedStats[targetId] = {\n        angle: isNaN(angle) ? 'Incomplete Angle' : angle,\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { angle } = cachedVolumeStats;\n\n  if (angle === undefined) {\n    return;\n  }\n\n  const textLines = [`${roundNumber(angle)} ${String.fromCharCode(176)}`];\n\n  return textLines;\n}\n\nAngleTool.toolName = 'Angle';\nexport default AngleTool;\n","import { Types } from '@cornerstonejs/core';\n\n/**\n * Return the midpoint (think average) of all the provided points.\n */\nconst midPoint = (\n  ...args: (Types.Point2 | Types.Point3)[]\n): Types.Point2 | Types.Point3 => {\n  const ret =\n    args[0].length === 2 ? <Types.Point2>[0, 0] : <Types.Point3>[0, 0, 0];\n  const len = args.length;\n  for (const arg of args) {\n    ret[0] += arg[0] / len;\n    ret[1] += arg[1] / len;\n    if (ret.length === 3) {\n      ret[2] += arg[2] / len;\n    }\n  }\n  return ret;\n};\n\nconst midPoint2 = midPoint as (...args: Types.Point2[]) => Types.Point2;\n\nexport default midPoint;\n\nexport { midPoint2 };\n","import { vec3 } from 'gl-matrix';\nimport { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../../stateManagement/annotation/annotationLocking';\nimport * as lineSegment from '../../utilities/math/line';\nimport angleBetweenLines from '../../utilities/math/angle/angleBetweenLines';\nimport { midPoint2 } from '../../utilities/math/midPoint';\n\nimport {\n  drawHandles as drawHandlesSvg,\n  drawLine as drawLineSvg,\n  drawLinkedTextBox as drawLinkedTextBoxSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport { getTextBoxCoordsCanvas } from '../../utilities/drawing';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  AnnotationCompletedEventDetail,\n  AnnotationModifiedEventDetail,\n} from '../../types/EventTypes';\n\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  TextBoxHandle,\n  PublicToolProps,\n  ToolProps,\n  InteractionTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { CobbAngleAnnotation } from '../../types/ToolSpecificAnnotationTypes';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\n\nclass CobbAngleTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  angleStartedNotYetCompleted: boolean;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    isNearFirstLine?: boolean;\n    isNearSecondLine?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        getTextLines: defaultGetTextLines,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      25,\n      { trailing: true }\n    );\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.MouseDownActivateEventType\n  ): CobbAngleAnnotation => {\n    if (this.angleStartedNotYetCompleted) {\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = true;\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    hideElementCursor(element);\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        handles: {\n          points: [<Types.Point3>[...worldPos], <Types.Point3>[...worldPos]],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n        cachedStats: {},\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex: 1,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: CobbAngleAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n\n    const { distanceToPoint, distanceToPoint2 } = this.distanceToLines({\n      viewport,\n      points: data.handles.points,\n      canvasCoords,\n      proximity,\n    });\n\n    if (distanceToPoint <= proximity || distanceToPoint2 <= proximity) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.MouseDownEventType,\n    annotation: CobbAngleAnnotation,\n    interactionType: InteractionTypes,\n    canvasCoords: Types.Point2,\n    proximity = 6\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n\n    const { isNearFirstLine, isNearSecondLine } = this.distanceToLines({\n      viewport,\n      points: annotation.data.handles.points,\n      canvasCoords,\n      proximity,\n    });\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      movingTextBox: false,\n      isNearFirstLine,\n      isNearSecondLine,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.MouseDownEventType,\n    annotation: CobbAngleAnnotation,\n    handle: ToolHandle,\n    interactionType = 'mouse'\n  ): void {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if ((handle as TextBoxHandle).worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  }\n\n  _mouseUpCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation, hasMoved } =\n      this.editData;\n\n    const { data } = annotation;\n    if (newAnnotation && !hasMoved) {\n      // when user starts the drawing by click, and moving the mouse, instead\n      // of click and drag\n      return;\n    }\n\n    // If preventing new measurement means we are in the middle of an existing measurement\n    // we shouldn't deactivate modify or draw\n    if (this.angleStartedNotYetCompleted && data.handles.points.length < 4) {\n      resetElementCursor(element);\n\n      // adds the first point of the second line\n      this.editData.handleIndex = data.handles.points.length;\n      return;\n    }\n\n    this.angleStartedNotYetCompleted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.isDrawing = false;\n  };\n\n  /**\n   * Handles the mouse down for all points that follow the very first mouse down.\n   * The very first mouse down is handled by addAnnotation.\n   * This method ensures that the state of the tool is correct for the drawing of the second line segment.\n   * In particular it ensures that the second segment can be created via a mouse down and drag.\n   */\n  _mouseDownCallback = (\n    evt: EventTypes.MouseUpEventType | EventTypes.MouseClickEventType\n  ) => {\n    const { annotation, handleIndex } = this.editData;\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const worldPos = currentPoints.world;\n    const { data } = annotation;\n\n    if (handleIndex === 1) {\n      // This is the mouse down for the second point of the first segment.\n      // The mouse up takes care of adding the first point of the second segment.\n      data.handles.points[1] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[1][0] !== data.handles.points[0][0] ||\n        data.handles.points[1][1] !== data.handles.points[0][0];\n      return;\n    }\n\n    if (handleIndex === 3) {\n      // This is the mouse down for the second point of the second segment (i.e. the last point)\n      data.handles.points[3] = worldPos;\n      this.editData.hasMoved =\n        data.handles.points[3][0] !== data.handles.points[2][0] ||\n        data.handles.points[3][1] !== data.handles.points[2][0];\n\n      this.angleStartedNotYetCompleted = false;\n      return;\n    }\n\n    // This is the first mouse down of the first point of the second line segment.\n    // It is as if we have not moved yet because Cobb Angle has two, disjoint sections, each with its own move.\n    this.editData.hasMoved = false;\n    hideElementCursor(element);\n\n    // Add the last segment points for the subsequent drag/mouse move.\n    data.handles.points[2] = data.handles.points[3] = worldPos;\n    this.editData.handleIndex = data.handles.points.length - 1;\n  };\n\n  _mouseDragCallback = (\n    evt: EventTypes.MouseDragEventType | EventTypes.MouseMoveEventType\n  ) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n      movingTextBox,\n      isNearFirstLine,\n      isNearSecondLine,\n    } = this.editData;\n    const { data } = annotation;\n\n    if (movingTextBox) {\n      // Drag mode - moving text box\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const { textBox } = data.handles;\n      const { worldPosition } = textBox;\n\n      worldPosition[0] += worldPosDelta[0];\n      worldPosition[1] += worldPosDelta[1];\n      worldPosition[2] += worldPosDelta[2];\n\n      textBox.hasMoved = true;\n    } else if (\n      handleIndex === undefined &&\n      (isNearFirstLine || isNearSecondLine)\n    ) {\n      // select tool mode - moving annotation\n      const { deltaPoints } = eventDetail as EventTypes.MouseDragEventDetail;\n      const worldPosDelta = deltaPoints.world;\n      const points = data.handles.points;\n\n      // separate the logic for moving handles to move them separately\n      if (isNearFirstLine) {\n        const firstLinePoints = [points[0], points[1]];\n        firstLinePoints.forEach((point) => {\n          point[0] += worldPosDelta[0];\n          point[1] += worldPosDelta[1];\n          point[2] += worldPosDelta[2];\n        });\n      } else if (isNearSecondLine) {\n        const secondLinePoints = [points[2], points[3]];\n        secondLinePoints.forEach((point) => {\n          point[0] += worldPosDelta[0];\n          point[1] += worldPosDelta[1];\n          point[2] += worldPosDelta[2];\n        });\n      }\n\n      annotation.invalidated = true;\n    } else {\n      // Drag handle mode - after double click, and mouse move to draw\n      const { currentPoints } = eventDetail;\n      const worldPos = currentPoints.world;\n\n      data.handles.points[handleIndex] = [...worldPos];\n      annotation.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    if (data.handles.points.length < 4) {\n      // If it is mid-draw\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    this.angleStartedNotYetCompleted = false;\n    return annotation.annotationUID;\n  };\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.addEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._mouseUpCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DOWN,\n      this._mouseDownCallback as EventListener\n    );\n\n    // element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback)\n    // element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback)\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as CobbAngleAnnotation;\n      const { annotationUID, data } = annotation;\n      const { points, activeHandleIndex } = data.handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      // WE HAVE TO CACHE STATS BEFORE FETCHING TEXT\n      if (\n        !data.cachedStats[targetId] ||\n        data.cachedStats[targetId].angle == null\n      ) {\n        data.cachedStats[targetId] = {\n          angle: null,\n          arc1Angle: null,\n          arc2Angle: null,\n          points: {\n            world: {\n              arc1Start: null,\n              arc1End: null,\n              arc2Start: null,\n              arc2End: null,\n              arc1Angle: null,\n              arc2Angle: null,\n            },\n            canvas: {\n              arc1Start: null,\n              arc1End: null,\n              arc2Start: null,\n              arc2End: null,\n              arc1Angle: null,\n              arc2Angle: null,\n            },\n          },\n        };\n\n        this._calculateCachedStats(annotation, renderingEngine, enabledElement);\n      } else if (annotation.invalidated) {\n        this._throttledCalculateCachedStats(\n          annotation,\n          renderingEngine,\n          enabledElement\n        );\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          canvasCoordinates,\n          {\n            color,\n            lineDash,\n            lineWidth,\n          }\n        );\n      }\n\n      const firstLine = [canvasCoordinates[0], canvasCoordinates[1]] as [\n        Types.Point2,\n        Types.Point2\n      ];\n      const secondLine = [canvasCoordinates[2], canvasCoordinates[3]] as [\n        Types.Point2,\n        Types.Point2\n      ];\n\n      let lineUID = 'line1';\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        firstLine[0],\n        firstLine[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      renderStatus = true;\n\n      // Don't add the stats until annotation has 4 anchor points\n      if (canvasCoordinates.length < 4) {\n        return renderStatus;\n      }\n\n      lineUID = 'line2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        secondLine[0],\n        secondLine[1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n        }\n      );\n\n      lineUID = 'linkLine';\n      const mid1 = midPoint2(firstLine[0], firstLine[1]);\n      const mid2 = midPoint2(secondLine[0], secondLine[1]);\n      drawLineSvg(svgDrawingHelper, annotationUID, lineUID, mid1, mid2, {\n        color,\n        lineWidth: '1',\n        lineDash: '1,4',\n      });\n\n      // Calculating the arcs\n\n      const { arc1Start, arc1End, arc2End, arc2Start } =\n        data.cachedStats[targetId].points.canvas;\n      const { arc1Angle, arc2Angle } = data.cachedStats[targetId];\n\n      lineUID = 'arc1';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        arc1Start as Types.Point2,\n        arc1End as Types.Point2,\n        {\n          color,\n          lineWidth: '1',\n        }\n      );\n\n      lineUID = 'arc2';\n\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        lineUID,\n        arc2Start as Types.Point2,\n        arc2End as Types.Point2,\n        {\n          color,\n          lineWidth: '1',\n        }\n      );\n\n      if (!data.cachedStats[targetId]?.angle) {\n        continue;\n      }\n\n      const options = this.getLinkedTextBoxStyle(styleSpecifier, annotation);\n      if (!options.visibility) {\n        data.handles.textBox = {\n          hasMoved: false,\n          worldPosition: <Types.Point3>[0, 0, 0],\n          worldBoundingBox: {\n            topLeft: <Types.Point3>[0, 0, 0],\n            topRight: <Types.Point3>[0, 0, 0],\n            bottomLeft: <Types.Point3>[0, 0, 0],\n            bottomRight: <Types.Point3>[0, 0, 0],\n          },\n        };\n        continue;\n      }\n\n      const textLines = this.configuration.getTextLines(data, targetId);\n\n      if (!data.handles.textBox.hasMoved) {\n        const canvasTextBoxCoords = getTextBoxCoordsCanvas(canvasCoordinates);\n\n        data.handles.textBox.worldPosition =\n          viewport.canvasToWorld(canvasTextBoxCoords);\n      }\n\n      const textBoxPosition = viewport.worldToCanvas(\n        data.handles.textBox.worldPosition\n      );\n\n      const textBoxUID = 'cobbAngleText';\n      const boundingBox = drawLinkedTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        textBoxUID,\n        textLines,\n        textBoxPosition,\n        canvasCoordinates,\n        {},\n        options\n      );\n\n      const { x: left, y: top, width, height } = boundingBox;\n\n      data.handles.textBox.worldBoundingBox = {\n        topLeft: viewport.canvasToWorld([left, top]),\n        topRight: viewport.canvasToWorld([left + width, top]),\n        bottomLeft: viewport.canvasToWorld([left, top + height]),\n        bottomRight: viewport.canvasToWorld([left + width, top + height]),\n      };\n\n      const arc1TextBoxUID = 'arcAngle1';\n\n      const arc1TextLine = [\n        `${arc1Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n      ];\n\n      const arch1TextPosCanvas = midPoint2(arc1Start, arc1End);\n\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        arc1TextBoxUID,\n        arc1TextLine,\n        arch1TextPosCanvas,\n        {\n          ...options,\n          padding: 3,\n        }\n      );\n\n      const arc2TextBoxUID = 'arcAngle2';\n\n      const arc2TextLine = [\n        `${arc2Angle.toFixed(2)} ${String.fromCharCode(176)}`,\n      ];\n\n      const arch2TextPosCanvas = midPoint2(arc2Start, arc2End);\n\n      drawTextBoxSvg(\n        svgDrawingHelper,\n        annotationUID,\n        arc2TextBoxUID,\n        arc2TextLine,\n        arch2TextPosCanvas,\n        {\n          ...options,\n          padding: 3,\n        }\n      );\n    }\n\n    return renderStatus;\n  };\n\n  _calculateCachedStats(annotation, renderingEngine, enabledElement) {\n    const data = annotation.data;\n    const { viewportId, renderingEngineId } = enabledElement;\n\n    // Until we have all four anchors bail out\n    if (data.handles.points.length !== 4) {\n      return;\n    }\n\n    const seg1: [Types.Point3, Types.Point3] = [null, null];\n    const seg2: [Types.Point3, Types.Point3] = [null, null];\n    let minDist = Number.MAX_VALUE;\n\n    // Order the endpoints of each line segment such that seg1[1] and seg2[0]\n    // are the closest (Euclidean distance-wise) to each other. Thus\n    // the angle formed between the vectors seg1[1]->seg1[0] and seg2[0]->seg[1]\n    // is calculated.\n    // The assumption here is that the Cobb angle line segments are drawn\n    // such that the segments intersect nearest the segment endpoints\n    // that are closest AND those closest endpoints are the tails of the\n    // vectors used to calculate the angle between the vectors/line segments.\n    for (let i = 0; i < 2; i += 1) {\n      for (let j = 2; j < 4; j += 1) {\n        const dist = vec3.distance(\n          data.handles.points[i],\n          data.handles.points[j]\n        );\n        if (dist < minDist) {\n          minDist = dist;\n          seg1[1] = data.handles.points[i];\n          seg1[0] = data.handles.points[(i + 1) % 2];\n          seg2[0] = data.handles.points[j];\n          seg2[1] = data.handles.points[2 + ((j - 1) % 2)];\n        }\n      }\n    }\n    const { viewport } = enabledElement;\n\n    const canvasPoints = data.handles.points.map((p) =>\n      viewport.worldToCanvas(p)\n    );\n\n    const firstLine = [canvasPoints[0], canvasPoints[1]] as [\n      Types.Point2,\n      Types.Point2\n    ];\n    const secondLine = [canvasPoints[2], canvasPoints[3]] as [\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const mid1 = midPoint2(firstLine[0], firstLine[1]);\n    const mid2 = midPoint2(secondLine[0], secondLine[1]);\n\n    const { arc1Start, arc1End, arc2End, arc2Start, arc1Angle, arc2Angle } =\n      this.getArcsStartEndPoints({\n        firstLine,\n        secondLine,\n        mid1,\n        mid2,\n      });\n\n    const { cachedStats } = data;\n    const targetIds = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetIds.length; i++) {\n      const targetId = targetIds[i];\n\n      cachedStats[targetId] = {\n        angle: angleBetweenLines(seg1, seg2),\n        arc1Angle,\n        arc2Angle,\n        points: {\n          canvas: {\n            arc1Start,\n            arc1End,\n            arc2End,\n            arc2Start,\n          },\n          world: {\n            arc1Start: viewport.canvasToWorld(arc1Start),\n            arc1End: viewport.canvasToWorld(arc1End),\n            arc2End: viewport.canvasToWorld(arc2End),\n            arc2Start: viewport.canvasToWorld(arc2Start),\n          },\n        },\n      };\n    }\n\n    annotation.invalidated = false;\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail: AnnotationModifiedEventDetail = {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  }\n\n  distanceToLines = ({ viewport, points, canvasCoords, proximity }) => {\n    const [point1, point2, point3, point4] = points;\n    const canvasPoint1 = viewport.worldToCanvas(point1);\n    const canvasPoint2 = viewport.worldToCanvas(point2);\n    const canvasPoint3 = viewport.worldToCanvas(point3);\n    const canvasPoint4 = viewport.worldToCanvas(point4);\n\n    const line1 = {\n      start: {\n        x: canvasPoint1[0],\n        y: canvasPoint1[1],\n      },\n      end: {\n        x: canvasPoint2[0],\n        y: canvasPoint2[1],\n      },\n    };\n\n    const line2 = {\n      start: {\n        x: canvasPoint3[0],\n        y: canvasPoint3[1],\n      },\n      end: {\n        x: canvasPoint4[0],\n        y: canvasPoint4[1],\n      },\n    };\n\n    const distanceToPoint = lineSegment.distanceToPoint(\n      [line1.start.x, line1.start.y],\n      [line1.end.x, line1.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    const distanceToPoint2 = lineSegment.distanceToPoint(\n      [line2.start.x, line2.start.y],\n      [line2.end.x, line2.end.y],\n      [canvasCoords[0], canvasCoords[1]]\n    );\n\n    let isNearFirstLine = false;\n    let isNearSecondLine = false;\n\n    if (distanceToPoint <= proximity) {\n      isNearFirstLine = true;\n    } else if (distanceToPoint2 <= proximity) {\n      isNearSecondLine = true;\n    }\n    return {\n      distanceToPoint,\n      distanceToPoint2,\n      isNearFirstLine,\n      isNearSecondLine,\n    };\n  };\n\n  getArcsStartEndPoints = ({\n    firstLine,\n    secondLine,\n    mid1,\n    mid2,\n  }): {\n    arc1Start: Types.Point2;\n    arc1End: Types.Point2;\n    arc2Start: Types.Point2;\n    arc2End: Types.Point2;\n    arc1Angle: number;\n    arc2Angle: number;\n  } => {\n    const linkLine = [mid1, mid2] as [Types.Point2, Types.Point2];\n\n    const arc1Angle = angleBetweenLines(firstLine, linkLine);\n    const arc2Angle = angleBetweenLines(secondLine, linkLine);\n\n    const arc1Side = arc1Angle > 90 ? 1 : 0;\n    const arc2Side = arc2Angle > 90 ? 0 : 1;\n\n    const midLinkLine = midPoint2(linkLine[0], linkLine[1]);\n\n    const linkLineLength = Math.sqrt(\n      (linkLine[1][0] - linkLine[0][0]) ** 2 +\n        (linkLine[1][1] - linkLine[0][1]) ** 2\n    );\n    const ratio = 0.1; // 10% of the line length\n\n    const midFirstLine = midPoint2(firstLine[0], firstLine[1]);\n    const midSecondLine = midPoint2(secondLine[0], secondLine[1]);\n\n    // For arc1Start\n    const directionVectorStartArc1 = [\n      firstLine[arc1Side][0] - midFirstLine[0],\n      firstLine[arc1Side][1] - midFirstLine[1],\n    ];\n    const magnitudeStartArc1 = Math.sqrt(\n      directionVectorStartArc1[0] ** 2 + directionVectorStartArc1[1] ** 2\n    );\n    const normalizedDirectionStartArc1 = [\n      directionVectorStartArc1[0] / magnitudeStartArc1,\n      directionVectorStartArc1[1] / magnitudeStartArc1,\n    ];\n    const arc1Start = [\n      midFirstLine[0] +\n        normalizedDirectionStartArc1[0] * linkLineLength * ratio,\n      midFirstLine[1] +\n        normalizedDirectionStartArc1[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Existing logic for arc1End\n    const directionVectorEndArc1 = [\n      midLinkLine[0] - mid1[0],\n      midLinkLine[1] - mid1[1],\n    ];\n    const magnitudeEndArc1 = Math.sqrt(\n      directionVectorEndArc1[0] ** 2 + directionVectorEndArc1[1] ** 2\n    );\n    const normalizedDirectionEndArc1 = [\n      directionVectorEndArc1[0] / magnitudeEndArc1,\n      directionVectorEndArc1[1] / magnitudeEndArc1,\n    ];\n    const arc1End = [\n      mid1[0] + normalizedDirectionEndArc1[0] * linkLineLength * ratio,\n      mid1[1] + normalizedDirectionEndArc1[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Similar logic for arc2Start\n    const directionVectorStartArc2 = [\n      secondLine[arc2Side][0] - midSecondLine[0],\n      secondLine[arc2Side][1] - midSecondLine[1],\n    ];\n    const magnitudeStartArc2 = Math.sqrt(\n      directionVectorStartArc2[0] ** 2 + directionVectorStartArc2[1] ** 2\n    );\n    const normalizedDirectionStartArc2 = [\n      directionVectorStartArc2[0] / magnitudeStartArc2,\n      directionVectorStartArc2[1] / magnitudeStartArc2,\n    ];\n    const arc2Start = [\n      midSecondLine[0] +\n        normalizedDirectionStartArc2[0] * linkLineLength * ratio,\n      midSecondLine[1] +\n        normalizedDirectionStartArc2[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    // Similar logic for arc2End\n    const directionVectorEndArc2 = [\n      midLinkLine[0] - mid2[0],\n      midLinkLine[1] - mid2[1],\n    ];\n    const magnitudeEndArc2 = Math.sqrt(\n      directionVectorEndArc2[0] ** 2 + directionVectorEndArc2[1] ** 2\n    );\n    const normalizedDirectionEndArc2 = [\n      directionVectorEndArc2[0] / magnitudeEndArc2,\n      directionVectorEndArc2[1] / magnitudeEndArc2,\n    ];\n    const arc2End = [\n      mid2[0] + normalizedDirectionEndArc2[0] * linkLineLength * ratio,\n      mid2[1] + normalizedDirectionEndArc2[1] * linkLineLength * ratio,\n    ] as Types.Point2;\n\n    return {\n      arc1Start,\n      arc1End,\n      arc2Start,\n      arc2End,\n      arc1Angle: arc1Angle > 90 ? 180 - arc1Angle : arc1Angle,\n      arc2Angle: arc2Angle > 90 ? 180 - arc2Angle : arc2Angle,\n    };\n  };\n}\n\nfunction defaultGetTextLines(data, targetId): string[] {\n  const cachedVolumeStats = data.cachedStats[targetId];\n  const { angle } = cachedVolumeStats;\n\n  if (angle === undefined) {\n    return;\n  }\n\n  const textLines = [`${angle.toFixed(2)} ${String.fromCharCode(176)}`];\n\n  return textLines;\n}\n\nCobbAngleTool.toolName = 'CobbAngle';\nexport default CobbAngleTool;\n","import { Events } from '../../enums';\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { AnnotationTool } from '../base';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement/annotation/annotationState';\n\nimport { drawArrow as drawArrowSvg } from '../../drawingSvg';\nimport { state } from '../../store';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport { AnnotationCompletedEventDetail } from '../../types/EventTypes';\n\nimport { resetElementCursor } from '../../cursors/elementCursor';\n\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport { Annotation } from '../../types';\n\ntype Point2 = Types.Point2;\n\nclass KeyImageTool extends AnnotationTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox?: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        getTextCallback,\n        changeTextCallback,\n        canvasPosition: [10, 10],\n        canvasSize: 10,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a Length Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      annotationUID: null as string,\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        text: '',\n        handles: {\n          points: new Array<Types.Point3>(),\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n        label: '',\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    this.configuration.getTextCallback((text) => {\n      if (!text) {\n        removeAnnotation(annotation.annotationUID);\n        triggerAnnotationRenderForViewportIds(\n          renderingEngine,\n          viewportIdsToRender\n        );\n        this.isDrawing = false;\n        return;\n      }\n      annotation.data.text = text;\n\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n\n      triggerAnnotationRenderForViewportIds(\n        renderingEngine,\n        viewportIdsToRender\n      );\n    });\n\n    return annotation;\n  };\n\n  public cancel() {\n    // No op - the annotation can't be in a partial state\n  }\n\n  /**\n   * It returns if the canvas point is near the provided length annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: Annotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { data } = annotation;\n\n    const { canvasPosition, canvasSize } = this.configuration;\n    if (!canvasPosition?.length) {\n      return false;\n    }\n    if (\n      Math.abs(canvasCoords[0] - canvasPosition[0] + canvasSize / 2) <=\n        canvasSize / 2 &&\n      Math.abs(canvasCoords[1] - canvasPosition[1] + canvasSize / 2) <=\n        canvasSize / 2\n    ) {\n      return true;\n    }\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation\n  ): void => {\n    annotation.highlighted = true;\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback(\n    evt: EventTypes.InteractionEventType,\n    annotation: Annotation,\n    handle: ToolHandle\n  ): void {\n    // Nothing special to do here.\n  }\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    this._deactivateModify(element);\n    resetElementCursor(element);\n  };\n\n  doubleClickCallback = (evt: EventTypes.TouchTapEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return;\n    }\n\n    const clickedAnnotation = annotations.find((annotation) =>\n      this.isPointNearTool(\n        element,\n        annotation as Annotation,\n        eventDetail.currentPoints.canvas,\n        6 // Todo: get from configuration\n      )\n    );\n\n    if (!clickedAnnotation) {\n      return;\n    }\n\n    const annotation = clickedAnnotation as Annotation;\n\n    this.configuration.changeTextCallback(\n      clickedAnnotation,\n      evt.detail,\n      this._doneChangingTextCallback.bind(this, element, annotation)\n    );\n\n    this.isDrawing = false;\n\n    // This double click was handled and the dialogue was displayed.\n    // No need for any other listener to handle it too - stopImmediatePropagation\n    // helps ensure this primarily so that no other listeners on the target element\n    // get called.\n    evt.stopImmediatePropagation();\n    evt.preventDefault();\n  };\n\n  _doneChangingTextCallback(element, annotation, updatedText): void {\n    annotation.data.text = updatedText;\n\n    const { renderingEngine, viewportId, renderingEngineId } =\n      getEnabledElement(element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    // Dispatching annotation modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    triggerEvent(eventTarget, eventType, {\n      annotation,\n      viewportId,\n      renderingEngineId,\n    });\n  }\n\n  _activateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  _deactivateModify = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._endCallback as EventListener\n    );\n\n    element.removeEventListener(\n      Events.TOUCH_TAP,\n      this._endCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._endCallback as EventListener\n    );\n  };\n\n  /**\n   * it is used to draw the length annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    // Todo: We don't need this anymore, filtering happens in triggerAnnotationRender\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    // Draw SVG\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i];\n      const { annotationUID } = annotation;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const { canvasPosition, canvasSize } = this.configuration;\n      if (canvasPosition?.length) {\n        const arrowUID = '1';\n        drawArrowSvg(\n          svgDrawingHelper,\n          annotationUID,\n          arrowUID,\n          canvasPosition.map((it) => it + canvasSize) as Point2,\n          canvasPosition as Point2,\n          {\n            color,\n            width: 1,\n          }\n        );\n      }\n\n      renderStatus = true;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n    }\n\n    return renderStatus;\n  };\n\n  _isInsideVolume(index1, index2, dimensions) {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  }\n}\n\nfunction getTextCallback(doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nfunction changeTextCallback(data, eventData, doneChangingTextCallback) {\n  return doneChangingTextCallback(prompt('Enter your annotation:'));\n}\n\nKeyImageTool.toolName = 'KeyImage';\n\nexport default KeyImageTool;\n","import { BaseTool } from './base';\nimport { Events } from '../enums';\n\nimport { getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { EventTypes, PublicToolProps, ToolProps } from '../types';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { state } from '../store';\nimport { Enums } from '@cornerstonejs/core';\n\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { IPoints } from '../types';\n\nconst MAGNIFY_VIEWPORT_ID = 'magnify-viewport';\n\nclass MagnifyTool extends BaseTool {\n  static toolName;\n  _bounds: any;\n  editData: {\n    referencedImageId: string;\n    viewportIdsToRender: string[];\n    enabledElement: Types.IEnabledElement;\n    renderingEngine: Types.IRenderingEngine;\n    currentPoints: IPoints;\n  } | null;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        magnifySize: 10, // parallel scale , higher more zoom\n        magnifyWidth: 250, //px\n        magnifyHeight: 250, //px\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _getReferencedImageId(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): string {\n    const targetId = this.getTargetId(viewport);\n\n    let referencedImageId;\n\n    if (viewport instanceof StackViewport) {\n      referencedImageId = targetId.split('imageId:')[1];\n    }\n\n    return referencedImageId;\n  }\n\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element, currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    if (!(viewport instanceof StackViewport)) {\n      throw new Error('MagnifyTool only works on StackViewports');\n    }\n\n    const referencedImageId = this._getReferencedImageId(viewport);\n\n    if (!referencedImageId) {\n      throw new Error(\n        'MagnifyTool: No referenced image id found, reconstructed planes not supported yet'\n      );\n    }\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      referencedImageId,\n      viewportIdsToRender,\n      enabledElement,\n      renderingEngine,\n      currentPoints,\n    };\n\n    this._createMagnificationViewport();\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  preTouchStartCallback = (evt: EventTypes.InteractionEventType) => {\n    this.preMouseDownCallback(evt);\n  };\n\n  _createMagnificationViewport = () => {\n    const {\n      enabledElement,\n      referencedImageId,\n      viewportIdsToRender,\n      renderingEngine,\n      currentPoints,\n    } = this.editData;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n    const viewportProperties = viewport.getProperties();\n\n    const { canvas: canvasPos, world: worldPos } = currentPoints;\n\n    let magnifyToolElement: HTMLDivElement;\n\n    magnifyToolElement = element.querySelector('.magnifyTool');\n    if (magnifyToolElement === null) {\n      const magnifyElement = document.createElement('div');\n\n      magnifyElement.classList.add('magnifyTool');\n\n      magnifyElement.style.display = 'block';\n      magnifyElement.style.width = `${this.configuration.magnifyWidth}px`;\n      magnifyElement.style.height = `${this.configuration.magnifyHeight}px`;\n      magnifyElement.style.position = 'absolute';\n\n      magnifyToolElement = magnifyElement;\n\n      const viewportElement = element.querySelector('.viewport-element');\n      viewportElement.appendChild(magnifyElement);\n\n      const viewportInput = {\n        viewportId: MAGNIFY_VIEWPORT_ID,\n        type: Enums.ViewportType.STACK,\n        element: magnifyToolElement as HTMLDivElement,\n      };\n\n      renderingEngine.enableElement(viewportInput);\n    }\n\n    // Todo: use CSS transform instead of setting top and left for better performance\n    magnifyToolElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyToolElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const magnifyViewport = renderingEngine.getViewport(\n      MAGNIFY_VIEWPORT_ID\n    ) as Types.IStackViewport;\n\n    magnifyViewport.setStack([referencedImageId]).then(() => {\n      // match the original viewport voi range\n      magnifyViewport.setProperties(viewportProperties);\n\n      // Use the original viewport for the base for parallelScale\n      const { parallelScale } = viewport.getCamera();\n\n      const { focalPoint, position, viewPlaneNormal } =\n        magnifyViewport.getCamera();\n\n      const distance = Math.sqrt(\n        Math.pow(focalPoint[0] - position[0], 2) +\n          Math.pow(focalPoint[1] - position[1], 2) +\n          Math.pow(focalPoint[2] - position[2], 2)\n      );\n\n      const updatedFocalPoint = <Types.Point3>[\n        worldPos[0],\n        worldPos[1],\n        worldPos[2],\n      ];\n\n      const updatedPosition = <Types.Point3>[\n        updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n        updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n        updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n      ];\n\n      magnifyViewport.setCamera({\n        parallelScale: parallelScale * (1 / this.configuration.magnifySize),\n        focalPoint: updatedFocalPoint,\n        position: updatedPosition,\n      });\n      magnifyViewport.render();\n    });\n\n    magnifyToolElement.style.display = 'block';\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n\n    const { deltaPoints, element, currentPoints } = eventDetail;\n    const deltaPointsWorld = deltaPoints.world;\n    const canvasPos = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const magnifyViewport = renderingEngine.getViewport(MAGNIFY_VIEWPORT_ID);\n\n    const magnifyElement = element.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    if (!magnifyElement) {\n      return;\n    }\n\n    magnifyElement.style.top = `${\n      canvasPos[1] - this.configuration.magnifyHeight / 2\n    }px`;\n    magnifyElement.style.left = `${\n      canvasPos[0] - this.configuration.magnifyWidth / 2\n    }px`;\n\n    const { focalPoint, position } = magnifyViewport.getCamera();\n\n    const updatedPosition = <Types.Point3>[\n      position[0] + deltaPointsWorld[0],\n      position[1] + deltaPointsWorld[1],\n      position[2] + deltaPointsWorld[2],\n    ];\n\n    const updatedFocalPoint = <Types.Point3>[\n      focalPoint[0] + deltaPointsWorld[0],\n      focalPoint[1] + deltaPointsWorld[1],\n      focalPoint[2] + deltaPointsWorld[2],\n    ];\n\n    magnifyViewport.setCamera({\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n\n    magnifyViewport.render();\n  };\n\n  _dragEndCallback = (evt: EventTypes.InteractionEventType) => {\n    const { element } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    renderingEngine.disableElement(MAGNIFY_VIEWPORT_ID);\n\n    const viewportElement = element.querySelector('.viewport-element');\n\n    const magnifyToolElement = viewportElement.querySelector(\n      '.magnifyTool'\n    ) as HTMLDivElement;\n\n    viewportElement.removeChild(magnifyToolElement);\n\n    this._deactivateDraw(element);\n    resetElementCursor(element);\n  };\n\n  _activateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.addEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n\n    element.addEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.addEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n\n  _deactivateDraw = (element: HTMLDivElement) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(\n      Events.MOUSE_UP,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_DRAG,\n      this._dragCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.MOUSE_CLICK,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_END,\n      this._dragEndCallback as EventListener\n    );\n    element.removeEventListener(\n      Events.TOUCH_DRAG,\n      this._dragCallback as EventListener\n    );\n  };\n}\n\nMagnifyTool.toolName = 'Magnify';\nexport default MagnifyTool;\n","import { vec2, vec3 } from 'gl-matrix';\nimport {\n  getEnabledElement,\n  eventTarget,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  SegmentationRepresentations,\n  ToolModes,\n  Events as cstEvents,\n} from '../enums';\nimport { ToolGroupManager, state } from '../store';\nimport { debounce } from '../utilities';\nimport { ToolModeChangedEventType } from '../types/EventTypes';\nimport { segmentation } from '..';\nimport { EventTypes, IToolGroup } from '../types';\nimport {\n  AnnotationTool,\n  AdvancedMagnifyTool,\n  SegmentationDisplayTool,\n} from './';\nimport { distanceToPoint } from '../utilities/math/point';\n\nconst MAGNIFY_CLASSNAME = 'advancedMagnifyTool';\nconst MAGNIFY_VIEWPORT_INITIAL_RADIUS = 125;\n\n// TODO: find a better to identify segmentation actors\nconst isSegmentation = (actor) => actor.uid !== actor.referenceId;\n\nexport type AutoPanCallbackData = {\n  points: {\n    currentPosition: {\n      canvas: Types.Point2;\n      world: Types.Point3;\n    };\n    newPosition: {\n      canvas: Types.Point2;\n      world: Types.Point3;\n    };\n  };\n  delta: {\n    canvas: Types.Point2;\n    world: Types.Point3;\n  };\n};\n\nexport type AutoPanCallback = (data: AutoPanCallbackData) => void;\n\nclass AdvancedMagnifyViewport {\n  private _viewportId: string;\n  private _sourceEnabledElement: Types.IEnabledElement;\n  private _enabledElement: Types.IEnabledElement = null;\n  private _sourceToolGroup: IToolGroup = null;\n  private _magnifyToolGroup: IToolGroup = null;\n  private _isViewportReady = false;\n  private _radius = 0;\n  private _resized = false;\n  private _resizeViewportAsync: () => void;\n  private _canAutoPan = false;\n  private _autoPan: {\n    enabled: boolean;\n    padding: number;\n    callback: AutoPanCallback;\n  };\n  public position: Types.Point2;\n  public zoomFactor: number;\n  public visible: boolean;\n\n  constructor({\n    magnifyViewportId,\n    sourceEnabledElement,\n    radius = MAGNIFY_VIEWPORT_INITIAL_RADIUS,\n    position = [0, 0],\n    zoomFactor,\n    autoPan,\n  }: {\n    magnifyViewportId?: string;\n    sourceEnabledElement: Types.IEnabledElement;\n    radius?: number;\n    position?: Types.Point2;\n    zoomFactor: number;\n    autoPan: {\n      enabled: boolean;\n      padding: number;\n      callback: AutoPanCallback;\n    };\n  }) {\n    // Private properties\n    this._viewportId = magnifyViewportId ?? csUtils.uuidv4();\n    this._sourceEnabledElement = sourceEnabledElement;\n    this._autoPan = autoPan;\n\n    // Pulic properties\n    this.radius = radius;\n    this.position = position;\n    this.zoomFactor = zoomFactor;\n    this.visible = true;\n\n    this._browserMouseDownCallback = this._browserMouseDownCallback.bind(this);\n    this._browserMouseUpCallback = this._browserMouseUpCallback.bind(this);\n    this._handleToolModeChanged = this._handleToolModeChanged.bind(this);\n    this._mouseDragCallback = this._mouseDragCallback.bind(this);\n    this._resizeViewportAsync = <() => void>(\n      debounce(this._resizeViewport.bind(this), 1)\n    );\n\n    this._initialize();\n  }\n\n  public get sourceEnabledElement() {\n    return this._sourceEnabledElement;\n  }\n\n  public get viewportId() {\n    return this._viewportId;\n  }\n\n  public get radius() {\n    return this._radius;\n  }\n\n  public set radius(radius: number) {\n    // Just moving the magnifying glass around may change its radius\n    // by very small amount due to floating number precision\n    if (Math.abs(this._radius - radius) > 0.00001) {\n      this._radius = radius;\n      this._resized = true;\n    }\n  }\n\n  public update() {\n    const { radius, position, visible } = this;\n    const { viewport } = this._enabledElement;\n    const { element } = viewport;\n    const size = 2 * radius;\n    const [x, y] = position;\n\n    if (this._resized) {\n      this._resizeViewportAsync();\n      this._resized = false;\n    }\n\n    Object.assign(element.style, {\n      display: visible ? 'block' : 'hidden',\n      width: `${size}px`,\n      height: `${size}px`,\n      left: `${-radius}px`,\n      top: `${-radius}px`,\n      transform: `translate(${x}px, ${y}px)`,\n    });\n\n    if (this._isViewportReady) {\n      this._syncViewports();\n      viewport.render();\n    }\n  }\n\n  public dispose() {\n    const { viewport } = this._enabledElement;\n    const { element } = viewport;\n    const renderingEngine = viewport.getRenderingEngine();\n\n    this._removeEventListeners(element);\n    renderingEngine.disableElement(viewport.id);\n\n    if (element.parentNode) {\n      element.parentNode.removeChild(element);\n    }\n  }\n\n  private _handleToolModeChanged(evt: ToolModeChangedEventType) {\n    const { _magnifyToolGroup: magnifyToolGroup } = this;\n    const { toolGroupId, toolName, mode, toolBindingsOptions } = evt.detail;\n\n    if (this._sourceToolGroup?.id !== toolGroupId) {\n      return;\n    }\n\n    switch (mode) {\n      case ToolModes.Active:\n        magnifyToolGroup.setToolActive(toolName, toolBindingsOptions);\n        break;\n      case ToolModes.Passive:\n        magnifyToolGroup.setToolPassive(toolName);\n        break;\n      case ToolModes.Enabled:\n        magnifyToolGroup.setToolEnabled(toolName);\n        break;\n      case ToolModes.Disabled:\n        magnifyToolGroup.setToolDisabled(toolName);\n        break;\n      default:\n        throw new Error(`Unknow tool mode (${mode})`);\n    }\n  }\n\n  // Children elements need to inherit border-radius otherwise the canvas will\n  // trigger events when moving/dragging/clicking on the corners outside of the\n  // border (circle) region.\n  private _inheritBorderRadius(magnifyElement) {\n    const viewport = magnifyElement.querySelector('.viewport-element');\n    const canvas = magnifyElement.querySelector('.cornerstone-canvas');\n\n    viewport.style.borderRadius = 'inherit';\n    canvas.style.borderRadius = 'inherit';\n  }\n\n  private _createViewportNode(): HTMLDivElement {\n    const magnifyElement = document.createElement('div');\n    const { radius } = this;\n    const size = radius * 2;\n\n    magnifyElement.classList.add(MAGNIFY_CLASSNAME);\n\n    // Update the style and move the element out of the screen with \"transforms\"\n    // to make it \"invisible\" and preserving its size because when \"display\" is\n    // set to \"none\" both \"offsetWidth\" and \"offsetHeight\" returns zero. Another\n    // way would be setting \"visibility\" to \"hidden\" but \"transforms\" is used\n    // because it is already being updated when update() is called\n    Object.assign(magnifyElement.style, {\n      display: 'block',\n      width: `${size}px`,\n      height: `${size}px`,\n      position: 'absolute',\n      overflow: 'hidden',\n      borderRadius: '50%',\n      boxSizing: 'border-box',\n      left: `${-radius}px`,\n      top: `${-radius}px`,\n      transform: `translate(-1000px, -1000px)`,\n    });\n\n    return magnifyElement;\n  }\n\n  private _convertZoomFactorToParalellScale(\n    viewport,\n    magnifyViewport,\n    zoomFactor\n  ) {\n    const { parallelScale } = viewport.getCamera();\n    const canvasRatio =\n      magnifyViewport.canvas.offsetWidth / viewport.canvas.offsetWidth;\n\n    return parallelScale * (1 / zoomFactor) * canvasRatio;\n  }\n\n  private _isStackViewport(\n    viewport: Types.IViewport\n  ): viewport is Types.IStackViewport {\n    return 'setStack' in viewport;\n  }\n\n  private _isVolumeViewport(\n    viewport: Types.IViewport\n  ): viewport is Types.IVolumeViewport {\n    return 'addVolumes' in viewport;\n  }\n\n  private _cloneToolGroups(\n    sourceViewport: Types.IViewport,\n    magnifyViewport: Types.IViewport\n  ) {\n    const sourceActors = sourceViewport.getActors();\n    const magnifyToolGroupId = `${magnifyViewport.id}-toolGroup`;\n    const sourceToolGroup = ToolGroupManager.getToolGroupForViewport(\n      sourceViewport.id,\n      sourceViewport.renderingEngineId\n    );\n\n    const magnifyToolGroup = sourceToolGroup.clone(\n      magnifyToolGroupId,\n      (toolName) => {\n        const toolInstance = sourceToolGroup.getToolInstance(toolName);\n        const isAnnotationTool =\n          toolInstance instanceof AnnotationTool &&\n          !(toolInstance instanceof AdvancedMagnifyTool);\n\n        return (\n          isAnnotationTool || toolName === SegmentationDisplayTool.toolName\n        );\n      }\n    );\n\n    magnifyToolGroup.addViewport(\n      magnifyViewport.id,\n      magnifyViewport.renderingEngineId\n    );\n\n    sourceActors.filter(isSegmentation).forEach((actor) => {\n      segmentation.addSegmentationRepresentations(magnifyToolGroupId, [\n        {\n          segmentationId: actor.referenceId,\n          type: SegmentationRepresentations.Labelmap,\n        },\n      ]);\n    });\n\n    return { sourceToolGroup, magnifyToolGroup };\n  }\n\n  private _cloneStack(\n    sourceViewport: Types.IStackViewport,\n    magnifyViewport: Types.IStackViewport\n  ): void {\n    const imageIds = sourceViewport.getImageIds();\n\n    magnifyViewport.setStack(imageIds).then(() => {\n      this._isViewportReady = true;\n      this.update();\n    });\n  }\n\n  private _cloneVolumes(\n    sourceViewport: Types.IVolumeViewport,\n    magnifyViewport: Types.IVolumeViewport\n  ): Types.IVolumeViewport {\n    const actors = sourceViewport.getActors();\n    const volumeInputArray: Types.IVolumeInput[] = actors\n      .filter((actor) => !isSegmentation(actor))\n      .map((actor) => ({ volumeId: actor.uid }));\n\n    magnifyViewport.setVolumes(volumeInputArray).then(() => {\n      this._isViewportReady = true;\n      this.update();\n    });\n\n    return magnifyViewport;\n  }\n\n  private _cloneViewport(sourceViewport, magnifyElement) {\n    const { viewportId: magnifyViewportId } = this;\n    const renderingEngine =\n      sourceViewport.getRenderingEngine() as Types.IRenderingEngine;\n\n    const { options: sourceViewportOptions } = sourceViewport;\n    const viewportInput = {\n      element: magnifyElement,\n      viewportId: magnifyViewportId,\n      type: sourceViewport.type,\n      defaultOptions: { ...sourceViewportOptions },\n    };\n\n    renderingEngine.enableElement(viewportInput);\n\n    const magnifyViewport = <Types.IViewport>(\n      renderingEngine.getViewport(magnifyViewportId)\n    );\n\n    if (this._isStackViewport(sourceViewport)) {\n      this._cloneStack(sourceViewport, magnifyViewport as Types.IStackViewport);\n    } else if (this._isVolumeViewport(sourceViewport)) {\n      this._cloneVolumes(\n        sourceViewport,\n        magnifyViewport as Types.IVolumeViewport\n      );\n    }\n\n    // Prevent handling events outside of the magnifying glass because it has rounded border\n    this._inheritBorderRadius(magnifyElement);\n\n    const toolGroups = this._cloneToolGroups(sourceViewport, magnifyViewport);\n\n    this._sourceToolGroup = toolGroups.sourceToolGroup;\n    this._magnifyToolGroup = toolGroups.magnifyToolGroup;\n  }\n\n  private _cancelMouseEventCallback(evt): void {\n    evt.stopPropagation();\n    evt.preventDefault();\n  }\n\n  private _browserMouseUpCallback(evt) {\n    const { element } = this._enabledElement.viewport;\n\n    document.removeEventListener('mouseup', this._browserMouseUpCallback);\n\n    // Restrict the scope of magnifying glass events again\n    element.addEventListener('mouseup', this._cancelMouseEventCallback);\n    element.addEventListener('mousemove', this._cancelMouseEventCallback);\n  }\n\n  private _browserMouseDownCallback(evt) {\n    const { element } = this._enabledElement.viewport;\n\n    // Enable auto pan only when user clicks inside of the magnifying glass\n    // viewport otherwise it can move when interacting with annotations outside\n    // of the magnifying glass or when trying to move/resize it.\n    this._canAutoPan = !!evt.target?.closest('.advancedMagnifyTool');\n\n    // Wait for the mouseup event to restrict the scope of magnifying glass events again\n    document.addEventListener('mouseup', this._browserMouseUpCallback);\n\n    // Allow mouseup and mousemove events to make it possible to manipulate the\n    // tool when passing the mouse over the magnifying glass (dragging a handle).\n    // Just relying on state.isInteractingWithTool does not work because there\n    // is a 400ms delay to handle double click (see mouseDownListener) which\n    // makes the magnifying glass unresponsive for that amount of time.\n    element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n    element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n  }\n\n  private _mouseDragCallback(evt: EventTypes.InteractionEventType) {\n    if (!state.isInteractingWithTool) {\n      return;\n    }\n\n    const { _autoPan: autoPan } = this;\n\n    if (!autoPan.enabled || !this._canAutoPan) {\n      return;\n    }\n\n    const { currentPoints } = evt.detail;\n    const { viewport } = this._enabledElement;\n    const { canvasToWorld } = viewport;\n    const { canvas: canvasCurrent } = currentPoints;\n    const { radius: magnifyRadius } = this;\n    const canvasCenter: Types.Point2 = [magnifyRadius, magnifyRadius];\n    const dist = distanceToPoint(canvasCenter, canvasCurrent);\n    const maxDist = magnifyRadius - autoPan.padding;\n\n    // No need to pan if it is not close to the border\n    if (dist <= maxDist) {\n      return;\n    }\n\n    const panDist = dist - maxDist;\n    const canvasDeltaPos = vec2.sub(\n      vec2.create(),\n      canvasCurrent,\n      canvasCenter\n    ) as Types.Point2;\n\n    vec2.normalize(canvasDeltaPos, canvasDeltaPos);\n    vec2.scale(canvasDeltaPos, canvasDeltaPos, panDist);\n\n    const newCanvasPosition = vec2.add(\n      vec2.create(),\n      this.position,\n      canvasDeltaPos\n    ) as Types.Point2;\n    const currentWorldPos = canvasToWorld(this.position);\n    const newWorldPos = canvasToWorld(newCanvasPosition);\n    const worldDeltaPos = vec3.sub(\n      vec3.create(),\n      newWorldPos,\n      currentWorldPos\n    ) as Types.Point3;\n\n    const autoPanCallbackData: AutoPanCallbackData = {\n      points: {\n        currentPosition: {\n          canvas: this.position,\n          world: currentWorldPos,\n        },\n        newPosition: {\n          canvas: newCanvasPosition,\n          world: newWorldPos,\n        },\n      },\n      delta: {\n        canvas: canvasDeltaPos,\n        world: worldDeltaPos,\n      },\n    };\n\n    autoPan.callback(autoPanCallbackData);\n  }\n\n  private _addBrowserEventListeners(element) {\n    // mousedown on document is handled in the capture phase because the other\n    // mousedown event listener added to the magnifying glass element does not\n    // allow the event to buble up and reach the document.\n    document.addEventListener(\n      'mousedown',\n      this._browserMouseDownCallback,\n      true\n    );\n\n    // All mouse events should not buble up avoiding the source viewport from\n    // handling those events resulting in unexpected behaviors.\n    element.addEventListener('mousedown', this._cancelMouseEventCallback);\n    element.addEventListener('mouseup', this._cancelMouseEventCallback);\n    element.addEventListener('mousemove', this._cancelMouseEventCallback);\n    element.addEventListener('dblclick', this._cancelMouseEventCallback);\n  }\n\n  private _removeBrowserEventListeners(element) {\n    document.removeEventListener(\n      'mousedown',\n      this._browserMouseDownCallback,\n      true\n    );\n    document.removeEventListener('mouseup', this._browserMouseUpCallback);\n\n    element.removeEventListener('mousedown', this._cancelMouseEventCallback);\n    element.removeEventListener('mouseup', this._cancelMouseEventCallback);\n    element.removeEventListener('mousemove', this._cancelMouseEventCallback);\n    element.removeEventListener('dblclick', this._cancelMouseEventCallback);\n  }\n\n  private _addEventListeners(element) {\n    eventTarget.addEventListener(\n      cstEvents.TOOL_MODE_CHANGED,\n      this._handleToolModeChanged\n    );\n\n    element.addEventListener(\n      cstEvents.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n\n    element.addEventListener(\n      cstEvents.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n\n    this._addBrowserEventListeners(element);\n  }\n\n  private _removeEventListeners(element) {\n    eventTarget.removeEventListener(\n      cstEvents.TOOL_MODE_CHANGED,\n      this._handleToolModeChanged\n    );\n\n    element.addEventListener(\n      cstEvents.MOUSE_MOVE,\n      this._mouseDragCallback as EventListener\n    );\n\n    element.addEventListener(\n      cstEvents.MOUSE_DRAG,\n      this._mouseDragCallback as EventListener\n    );\n\n    this._removeBrowserEventListeners(element);\n  }\n\n  private _initialize() {\n    const { _sourceEnabledElement: sourceEnabledElement } = this;\n    const { viewport: sourceViewport } = sourceEnabledElement;\n    const { canvas: sourceCanvas } = sourceViewport;\n    const magnifyElement = this._createViewportNode();\n\n    sourceCanvas.parentNode.appendChild(magnifyElement);\n\n    this._addEventListeners(magnifyElement);\n    this._cloneViewport(sourceViewport, magnifyElement);\n    this._enabledElement = getEnabledElement(magnifyElement);\n  }\n\n  private _syncViewportsCameras(sourceViewport, magnifyViewport) {\n    const worldPos = sourceViewport.canvasToWorld(this.position);\n\n    // Use the original viewport for the base for parallelScale\n    const parallelScale = this._convertZoomFactorToParalellScale(\n      sourceViewport,\n      magnifyViewport,\n      this.zoomFactor\n    );\n\n    const { focalPoint, position, viewPlaneNormal } =\n      magnifyViewport.getCamera();\n\n    const distance = Math.sqrt(\n      Math.pow(focalPoint[0] - position[0], 2) +\n        Math.pow(focalPoint[1] - position[1], 2) +\n        Math.pow(focalPoint[2] - position[2], 2)\n    );\n\n    const updatedFocalPoint = <Types.Point3>[\n      worldPos[0],\n      worldPos[1],\n      worldPos[2],\n    ];\n\n    const updatedPosition = <Types.Point3>[\n      updatedFocalPoint[0] + distance * viewPlaneNormal[0],\n      updatedFocalPoint[1] + distance * viewPlaneNormal[1],\n      updatedFocalPoint[2] + distance * viewPlaneNormal[2],\n    ];\n\n    magnifyViewport.setCamera({\n      parallelScale,\n      focalPoint: updatedFocalPoint,\n      position: updatedPosition,\n    });\n  }\n\n  private _syncStackViewports(\n    sourceViewport: Types.IStackViewport,\n    magnifyViewport: Types.IStackViewport\n  ) {\n    magnifyViewport.setImageIdIndex(sourceViewport.getCurrentImageIdIndex());\n  }\n\n  private _syncViewports() {\n    const { viewport: sourceViewport } = this._sourceEnabledElement;\n    const { viewport: magnifyViewport } = this._enabledElement;\n    const sourceProperties = sourceViewport.getProperties();\n\n    magnifyViewport.setProperties(sourceProperties);\n    this._syncViewportsCameras(sourceViewport, magnifyViewport);\n\n    if (this._isStackViewport(sourceViewport)) {\n      this._syncStackViewports(\n        sourceViewport as Types.IStackViewport,\n        magnifyViewport as Types.IStackViewport\n      );\n    }\n  }\n\n  private _resizeViewport() {\n    const { viewport } = this._enabledElement;\n    const renderingEngine = viewport.getRenderingEngine();\n\n    renderingEngine.resize();\n  }\n}\n\nexport { AdvancedMagnifyViewport as default, AdvancedMagnifyViewport };\n","import { vec3 } from 'gl-matrix';\nimport {\n  eventTarget,\n  Enums,\n  getRenderingEngine,\n  CONSTANTS,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { AnnotationRemovedEventType } from '../types/EventTypes';\nimport { Events as cstEvents } from '../enums';\nimport {\n  AdvancedMagnifyViewport,\n  AutoPanCallback,\n} from './AdvancedMagnifyViewport';\nimport { AdvancedMagnifyAnnotation } from '../types/ToolSpecificAnnotationTypes';\n\n// Defined the tool name internally instead of importing\n// AdvangedMagnifyTool due to cyclic dependency\nconst ADVANCED_MAGNIFY_TOOL_NAME = 'AdvancedMagnify';\n\nconst PARALLEL_THRESHOLD = 1 - CONSTANTS.EPSILON;\nconst { Events } = Enums;\n\nexport type MagnifyViewportInfo = {\n  // Viewport id to be used or new v4 compliant GUID is used instead\n  magnifyViewportId?: string;\n  // Enabled element where the magnifying glass shall be added to\n  sourceEnabledElement: Types.IEnabledElement;\n  // Magnifying glass position (center)\n  position: Types.Point2;\n  // Magnifying glass radius (pixels)\n  radius: number;\n  // Amount of magnification applied to the magnifying glass image compared to the source viewport.\n  zoomFactor: number;\n  // Allow panning the viewport when moving an annotation point close to the border of the magnifying glass\n  autoPan: {\n    // Enable or disable auto pan\n    enabled: boolean;\n    // Minimum distance to the border before start auto panning\n    padding: number;\n    // Callback function responsible for updating the annotation (circle)\n    // that contains the magnifying viewport\n    callback: AutoPanCallback;\n  };\n};\n\ntype MagnifyViewportsMapEntry = {\n  annotation: AdvancedMagnifyAnnotation;\n  magnifyViewport: AdvancedMagnifyViewport;\n};\n\n/**\n * Manager responsible for creating, storing and destroying magnifying glass\n * viewports. There are no restrictions to create a new instance of it but it\n * should be accessed through getInstance() method.\n */\nclass AdvancedMagnifyViewportManager {\n  private static _singleton: AdvancedMagnifyViewportManager;\n  private _magnifyViewportsMap: Map<string, MagnifyViewportsMapEntry>;\n\n  constructor() {\n    this._magnifyViewportsMap = new Map();\n    this._initialize();\n  }\n\n  /**\n   * Creates a new magnifying glass viewport manager instance when this method is\n   * called for the first time or return the instance previously created for\n   * any subsequent call (singleton pattern).\n   * @returns A magnifying viewport manager instance\n   */\n  public static getInstance(): AdvancedMagnifyViewportManager {\n    AdvancedMagnifyViewportManager._singleton =\n      AdvancedMagnifyViewportManager._singleton ??\n      new AdvancedMagnifyViewportManager();\n\n    return AdvancedMagnifyViewportManager._singleton;\n  }\n\n  /**\n   * Creates a new magnifying glass viewport instance\n   * @param viewportInfo - Viewport data used when creating a new magnifying glass viewport\n   * @returns A magnifying glass viewport instance\n   */\n  public createViewport = (\n    annotation: AdvancedMagnifyAnnotation,\n    viewportInfo: MagnifyViewportInfo\n  ): AdvancedMagnifyViewport => {\n    const {\n      magnifyViewportId,\n      sourceEnabledElement,\n      position,\n      radius,\n      zoomFactor,\n      autoPan,\n    } = viewportInfo;\n    const { viewport: sourceViewport } = sourceEnabledElement;\n    const { element: sourceElement } = sourceViewport;\n\n    const magnifyViewport = new AdvancedMagnifyViewport({\n      magnifyViewportId,\n      sourceEnabledElement,\n      radius,\n      position,\n      zoomFactor,\n      autoPan,\n    });\n\n    this._addSourceElementEventListener(sourceElement);\n    this._magnifyViewportsMap.set(magnifyViewport.viewportId, {\n      annotation,\n      magnifyViewport,\n    });\n\n    return magnifyViewport;\n  };\n\n  /**\n   * Find and return a magnifying glass viewport based on its id\n   * @param magnifyViewportId - Magnifying glass viewport id\n   * @returns A magnifying glass viewport instance\n   */\n  public getViewport(magnifyViewportId: string): AdvancedMagnifyViewport {\n    return this._magnifyViewportsMap.get(magnifyViewportId)?.magnifyViewport;\n  }\n\n  /**\n   * Release all magnifying glass viewport instances and remove all event\n   * listeners making all objects available to be garbage collected.\n   */\n  public dispose() {\n    this._removeEventListeners();\n    this._destroyViewports();\n  }\n\n  private _destroyViewport(magnifyViewportId: string) {\n    const magnifyViewportMapEntry =\n      this._magnifyViewportsMap.get(magnifyViewportId);\n\n    if (magnifyViewportMapEntry) {\n      const { magnifyViewport } = magnifyViewportMapEntry;\n      const { viewport: sourceViewport } = magnifyViewport.sourceEnabledElement;\n      const { element: sourceElement } = sourceViewport;\n\n      this._removeSourceElementEventListener(sourceElement);\n\n      magnifyViewport.dispose();\n      this._magnifyViewportsMap.delete(magnifyViewportId);\n    }\n  }\n\n  private _destroyViewports() {\n    const magnifyViewportIds = Array.from(this._magnifyViewportsMap.keys());\n\n    magnifyViewportIds.forEach((magnifyViewportId) =>\n      this._destroyViewport(magnifyViewportId)\n    );\n  }\n\n  private _annotationRemovedCallback = (evt: AnnotationRemovedEventType) => {\n    const { annotation } = evt.detail;\n\n    if (annotation.metadata.toolName !== ADVANCED_MAGNIFY_TOOL_NAME) {\n      return;\n    }\n\n    this._destroyViewport(annotation.data.magnifyViewportId);\n  };\n\n  private _getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId) {\n    const magnifyViewportsMapEntries = Array.from(\n      this._magnifyViewportsMap.values()\n    );\n\n    return magnifyViewportsMapEntries.filter(({ magnifyViewport }) => {\n      const { viewport } = magnifyViewport.sourceEnabledElement;\n      return viewport.id === sourceViewportId;\n    });\n  }\n\n  private _newStackImageCallback = (\n    evt: Types.EventTypes.StackNewImageEvent\n  ) => {\n    const { viewportId: sourceViewportId, imageId } = evt.detail;\n    const magnifyViewportsMapEntries =\n      this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n\n    magnifyViewportsMapEntries.forEach(({ annotation }) => {\n      annotation.metadata.referencedImageId = imageId;\n      annotation.invalidated = true;\n    });\n  };\n\n  private _newVolumeImageCallback = (\n    evt: Types.EventTypes.VolumeNewImageEvent\n  ) => {\n    const { renderingEngineId, viewportId: sourceViewportId } = evt.detail;\n    const renderingEngine = getRenderingEngine(renderingEngineId);\n    const sourceViewport = renderingEngine.getViewport(sourceViewportId);\n    const { viewPlaneNormal: currentViewPlaneNormal } =\n      sourceViewport.getCamera();\n\n    const magnifyViewportsMapEntries =\n      this._getMagnifyViewportsMapEntriesBySourceViewportId(sourceViewportId);\n\n    magnifyViewportsMapEntries.forEach(({ annotation }) => {\n      const { viewPlaneNormal } = annotation.metadata;\n\n      // Compare the normal to make sure the volume is not rotate in 3D space\n      const isParallel =\n        Math.abs(vec3.dot(viewPlaneNormal, currentViewPlaneNormal)) >\n        PARALLEL_THRESHOLD;\n\n      if (!isParallel) {\n        return;\n      }\n\n      const { handles } = annotation.data;\n      const worldImagePlanePoint = sourceViewport.canvasToWorld([0, 0]);\n      const vecHandleToImagePlane = vec3.sub(\n        vec3.create(),\n        worldImagePlanePoint,\n        handles.points[0]\n      );\n      const worldDist = vec3.dot(vecHandleToImagePlane, currentViewPlaneNormal);\n      const worldDelta = vec3.scale(\n        vec3.create(),\n        currentViewPlaneNormal,\n        worldDist\n      );\n\n      // Move all handle points to the image plane to make the annotation visible\n      for (let i = 0, len = handles.points.length; i < len; i++) {\n        const point = handles.points[i];\n\n        point[0] += worldDelta[0];\n        point[1] += worldDelta[1];\n        point[2] += worldDelta[2];\n      }\n\n      annotation.invalidated = true;\n    });\n  };\n\n  private _addEventListeners() {\n    eventTarget.addEventListener(\n      cstEvents.ANNOTATION_REMOVED,\n      this._annotationRemovedCallback\n    );\n  }\n\n  private _removeEventListeners() {\n    eventTarget.removeEventListener(\n      cstEvents.ANNOTATION_REMOVED,\n      this._annotationRemovedCallback\n    );\n  }\n\n  private _addSourceElementEventListener(element) {\n    element.addEventListener(\n      Events.STACK_NEW_IMAGE,\n      this._newStackImageCallback\n    );\n\n    element.addEventListener(\n      Events.VOLUME_NEW_IMAGE,\n      this._newVolumeImageCallback\n    );\n  }\n\n  private _removeSourceElementEventListener(element) {\n    element.removeEventListener(\n      Events.STACK_NEW_IMAGE,\n      this._newStackImageCallback\n    );\n\n    element.removeEventListener(\n      Events.VOLUME_NEW_IMAGE,\n      this._newVolumeImageCallback\n    );\n  }\n\n  private _initialize() {\n    this._addEventListeners();\n  }\n}\n\nexport {\n  AdvancedMagnifyViewportManager as default,\n  AdvancedMagnifyViewportManager,\n};\n","import { AnnotationTool } from './base';\n\nimport {\n  getEnabledElement,\n  eventTarget,\n  triggerEvent,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { isAnnotationLocked } from '../stateManagement/annotation/annotationLocking';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport {\n  drawCircle as drawCircleSvg,\n  drawHandles as drawHandlesSvg,\n} from '../drawingSvg';\nimport { state } from '../store';\nimport { Events, MouseBindings, KeyboardBindings } from '../enums';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../cursors/elementCursor';\nimport {\n  EventTypes,\n  ToolHandle,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../types';\nimport { AdvancedMagnifyAnnotation } from '../types/ToolSpecificAnnotationTypes';\n\nimport { AnnotationCompletedEventDetail } from '../types/EventTypes';\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { getCanvasCircleRadius } from '../utilities/math/circle';\nimport AdvancedMagnifyViewportManager from './AdvancedMagnifyViewportManager';\nimport type { AutoPanCallbackData } from './AdvancedMagnifyViewport';\n\nclass AdvancedMagnifyTool extends AnnotationTool {\n  static toolName;\n\n  magnifyViewportManager: AdvancedMagnifyViewportManager;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  editData: {\n    annotation: any;\n    viewportIdsToRender: Array<string>;\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        magnifyingGlass: {\n          radius: 125, // px\n          zoomFactor: 2.5,\n          zoomFactorList: [2.5, 3, 3.5, 4, 4.5, 5],\n          autoPan: {\n            enabled: true,\n            padding: 10, // px\n          },\n        },\n        actions: [\n          {\n            method: 'showZoomFactorsList',\n            bindings: [\n              {\n                mouseButton: MouseBindings.Secondary,\n                modifierKey: KeyboardBindings.Shift,\n              },\n            ],\n          },\n        ],\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.magnifyViewportManager = AdvancedMagnifyViewportManager.getInstance();\n  }\n\n  /**\n   * Based on the current position of the mouse and the current imageId to create\n   * a CircleROI Annotation and stores it in the annotationManager\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): AdvancedMagnifyAnnotation => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n    const { magnifyingGlass: config } = this.configuration;\n    const { radius, zoomFactor, autoPan } = config;\n\n    const worldHandlesPoints = this._getWorldHandlesPoints(\n      viewport,\n      canvasPos,\n      radius\n    );\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotationUID = csUtils.uuidv4();\n    const magnifyViewportId = csUtils.uuidv4();\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation: AdvancedMagnifyAnnotation = {\n      annotationUID,\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        sourceViewportId: viewport.id,\n        magnifyViewportId,\n        zoomFactor,\n        handles: {\n          points: worldHandlesPoints,\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    this.magnifyViewportManager.createViewport(annotation, {\n      magnifyViewportId,\n      sourceEnabledElement: enabledElement,\n      position: canvasPos,\n      radius,\n      zoomFactor,\n      autoPan: {\n        enabled: autoPan.enabled,\n        padding: autoPan.padding,\n        callback: (data: AutoPanCallbackData) => {\n          const annotationPoints = annotation.data.handles.points;\n          const { world: worldDelta } = data.delta;\n\n          for (let i = 0, len = annotationPoints.length; i < len; i++) {\n            annotationPoints[i][0] += worldDelta[0];\n            annotationPoints[i][1] += worldDelta[1];\n            annotationPoints[i][2] += worldDelta[2];\n          }\n        },\n      },\n    });\n\n    addAnnotation(annotation, element);\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    evt.preventDefault();\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return annotation;\n  };\n\n  /**\n   * It returns if the canvas point is near the provided annotation in the provided\n   * element or not. A proximity is passed to the function to determine the\n   * proximity of the point to the annotation in number of pixels.\n   *\n   * @param element - HTML Element\n   * @param annotation - Annotation\n   * @param canvasCoords - Canvas coordinates\n   * @param proximity - Proximity to tool to consider\n   * @returns Boolean, whether the canvas point is near tool\n   */\n  public isPointNearTool = (\n    element: HTMLDivElement,\n    annotation: AdvancedMagnifyAnnotation,\n    canvasCoords: Types.Point2,\n    proximity: number\n  ): boolean => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    // For some reason Typescript doesn't understand this, so we need to be\n    // more specific about the type\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p)) as [\n      Types.Point2,\n      Types.Point2,\n      Types.Point2,\n      Types.Point2\n    ];\n\n    const canvasTop = canvasCoordinates[0];\n    const canvasBottom = canvasCoordinates[2];\n    const canvasLeft = canvasCoordinates[3];\n    const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n    const center = [\n      canvasLeft[0] + radius,\n      canvasTop[1] + radius,\n    ] as Types.Point2;\n    const radiusPoint = getCanvasCircleRadius([center, canvasCoords]);\n\n    if (Math.abs(radiusPoint - radius) < proximity * 1.5) {\n      return true;\n    }\n\n    return false;\n  };\n\n  toolSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    annotation.highlighted = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n    };\n\n    hideElementCursor(element);\n\n    this._activateModify(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation,\n    handle: ToolHandle\n  ): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { data } = annotation;\n\n    annotation.highlighted = true;\n\n    const { points } = data.handles;\n    const handleIndex = points.findIndex((p) => p === handle);\n\n    // Find viewports to render on drag.\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      viewportIdsToRender,\n      handleIndex,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    evt.preventDefault();\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n  };\n\n  _dragDrawCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element, deltaPoints } = eventDetail;\n    const worldPosDelta = deltaPoints?.world ?? [0, 0, 0];\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    const { annotation, viewportIdsToRender } = this.editData;\n    const { points } = annotation.data.handles;\n\n    points.forEach((point) => {\n      point[0] += worldPosDelta[0];\n      point[1] += worldPosDelta[1];\n      point[2] += worldPosDelta[2];\n    });\n\n    annotation.invalidated = true;\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragModifyCallback = (evt: EventTypes.InteractionEventType): void => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    if (handleIndex === undefined) {\n      // Moving tool\n      const { deltaPoints } = eventDetail;\n      const worldPosDelta = deltaPoints.world;\n\n      const points = data.handles.points;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      annotation.invalidated = true;\n    } else {\n      this._dragHandle(evt);\n      annotation.invalidated = true;\n    }\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _dragHandle = (evt: EventTypes.InteractionEventType): void => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { worldToCanvas } = viewport;\n\n    const { annotation } = this.editData;\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasCoordinates = points.map((p) => worldToCanvas(p));\n    const canvasTop = canvasCoordinates[0];\n    const canvasBottom = canvasCoordinates[2];\n    const canvasLeft = canvasCoordinates[3];\n    const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n    const canvasCenter: Types.Point2 = [\n      canvasLeft[0] + radius,\n      canvasTop[1] + radius,\n    ];\n\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n\n    const newRadius = getCanvasCircleRadius([\n      canvasCenter,\n      currentCanvasPoints,\n    ]);\n    const newWorldHandlesPoints = this._getWorldHandlesPoints(\n      viewport,\n      canvasCenter,\n      newRadius\n    );\n\n    points[0] = newWorldHandlesPoints[0];\n    points[1] = newWorldHandlesPoints[1];\n    points[2] = newWorldHandlesPoints[2];\n    points[3] = newWorldHandlesPoints[3];\n  };\n\n  cancel = (element: HTMLDivElement) => {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n\n    this.isDrawing = false;\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportIdsToRender, newAnnotation } = this.editData;\n    const { data } = annotation;\n\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    if (newAnnotation) {\n      const eventType = Events.ANNOTATION_COMPLETED;\n\n      const eventDetail: AnnotationCompletedEventDetail = {\n        annotation,\n      };\n\n      triggerEvent(eventTarget, eventType, eventDetail);\n    }\n\n    this.editData = null;\n    return annotation.annotationUID;\n  };\n\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragModifyCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleROI annotation in each\n   * request animation frame. It calculates the updated cached statistics if\n   * data is invalidated and cache it.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    annotations = annotations?.filter(\n      (annotation) =>\n        (<AdvancedMagnifyAnnotation>annotation).data.sourceViewportId ===\n        viewport.id\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as AdvancedMagnifyAnnotation;\n      const { annotationUID, data } = annotation;\n      const { magnifyViewportId, zoomFactor, handles } = data;\n      const { points, activeHandleIndex } = handles;\n\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as Types.Point2[];\n      const canvasTop = canvasCoordinates[0];\n      const canvasBottom = canvasCoordinates[2];\n      const canvasLeft = canvasCoordinates[3];\n      const radius = Math.abs(canvasBottom[1] - canvasTop[1]) * 0.5;\n      const center = [\n        canvasLeft[0] + radius,\n        canvasTop[1] + radius,\n      ] as Types.Point2;\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      if (\n        !isAnnotationLocked(annotation) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const dataId = `${annotationUID}-advancedMagnify`;\n      const circleUID = '0';\n      drawCircleSvg(\n        svgDrawingHelper,\n        annotationUID,\n        circleUID,\n        center,\n        radius,\n        {\n          color,\n          lineDash,\n          lineWidth,\n        },\n        dataId\n      );\n\n      const magnifyViewport =\n        this.magnifyViewportManager.getViewport(magnifyViewportId);\n\n      magnifyViewport.position = center;\n      magnifyViewport.radius = radius;\n      magnifyViewport.zoomFactor = zoomFactor;\n      magnifyViewport.update();\n\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  // Basic dropdown component that allows the user to select a different zoom factor.\n  // configurations.actions may be changed to use a customized dropdown.\n  public showZoomFactorsList(\n    evt: EventTypes.InteractionEventType,\n    annotation: AdvancedMagnifyAnnotation\n  ) {\n    const { element, currentPoints } = evt.detail;\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n    const { canvas: canvasPoint } = currentPoints;\n    const viewportElement = element.querySelector(':scope .viewport-element');\n    const currentZoomFactor = annotation.data.zoomFactor;\n    const remove = () => dropdown.parentElement.removeChild(dropdown);\n\n    const dropdown = this._getZoomFactorsListDropdown(\n      currentZoomFactor,\n      (newZoomFactor) => {\n        if (newZoomFactor !== undefined) {\n          annotation.data.zoomFactor = Number.parseFloat(newZoomFactor);\n          annotation.invalidated = true;\n        }\n\n        remove();\n        viewport.render();\n      }\n    );\n\n    Object.assign(dropdown.style, {\n      left: `${canvasPoint[0]}px`,\n      top: `${canvasPoint[1]}px`,\n    });\n\n    viewportElement.appendChild(dropdown);\n    dropdown.focus();\n  }\n\n  private _getZoomFactorsListDropdown(currentZoomFactor, onChangeCallback) {\n    const { zoomFactorList } = this.configuration.magnifyingGlass;\n    const dropdown = document.createElement('select');\n\n    dropdown.size = 5;\n    Object.assign(dropdown.style, {\n      width: '50px',\n      position: 'absolute',\n    });\n\n    ['mousedown', 'mouseup', 'mousemove', 'click'].forEach((eventName) => {\n      dropdown.addEventListener(eventName, (evt) => evt.stopPropagation());\n    });\n\n    dropdown.addEventListener('change', (evt) => {\n      evt.stopPropagation();\n      onChangeCallback(dropdown.value);\n    });\n\n    dropdown.addEventListener('keydown', (evt) => {\n      const shouldCancel =\n        (evt.keyCode ?? evt.which === 27) ||\n        evt.key?.toLowerCase() === 'escape';\n\n      if (shouldCancel) {\n        evt.stopPropagation();\n        onChangeCallback();\n      }\n    });\n\n    zoomFactorList.forEach((zoomFactor) => {\n      const option = document.createElement('option');\n\n      option.label = zoomFactor;\n      option.title = `Zoom factor ${zoomFactor.toFixed(1)}`;\n      option.value = zoomFactor;\n      option.defaultSelected = zoomFactor === currentZoomFactor;\n\n      dropdown.add(option);\n    });\n\n    return dropdown;\n  }\n\n  private _getWorldHandlesPoints = (\n    viewport,\n    canvasCenterPos,\n    canvasRadius\n  ): Types.Point3[] => {\n    const canvasHandlesPoints = [\n      [canvasCenterPos[0], canvasCenterPos[1] - canvasRadius], // top\n      [canvasCenterPos[0] + canvasRadius, canvasCenterPos[1]], // right\n      [canvasCenterPos[0], canvasCenterPos[1] + canvasRadius], // bottom\n      [canvasCenterPos[0] - canvasRadius, canvasCenterPos[1]], // left\n    ];\n\n    const worldHandlesPoints = canvasHandlesPoints.map((p) =>\n      viewport.canvasToWorld(p)\n    ) as Types.Point3[];\n\n    return worldHandlesPoints;\n  };\n}\n\nAdvancedMagnifyTool.toolName = 'AdvancedMagnify';\n\nexport { AdvancedMagnifyTool as default };\n","import {\n  getEnabledElement,\n  StackViewport,\n  VolumeViewport,\n  utilities,\n  getEnabledElementByIds,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport { isAnnotationVisible } from '../stateManagement/annotation/annotationVisibility';\nimport { drawLine } from '../drawingSvg';\nimport { getViewportIdsWithToolToRender } from '../utilities/viewportFilters';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n  Annotation,\n  Annotations,\n} from '../types';\nimport { ReferenceCursor } from '../types/ToolSpecificAnnotationTypes';\n\nimport triggerAnnotationRenderForViewportIds from '../utilities/triggerAnnotationRenderForViewportIds';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { vec3 } from 'gl-matrix';\nimport AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport vtkMath from '@kitware/vtk.js/Common/Core/Math';\nimport {\n  hideElementCursor,\n  resetElementCursor,\n} from '../cursors/elementCursor';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\n/**\n * ReferenceCursors is a tool that will show your cursors position in all other elements in the toolGroup if they have a matching FrameOfReference relative to its position in world space.\n * Also when positionSync is enabled, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n *\n * Configuration:\n * - positionSync: boolean, if true, it will try to sync viewports so that the cursor can be displayed in the correct position in all viewports.\n * - disableCursor: boolean, if true, it will hide the cursor in all viewports. You need to disable and reactivate the tool for this to apply.\n * - displayThreshold: number, if the distance of the cursor in a viewport is bigger than this threshold the cursor will not be displayed.\n *\n * Only uses Active and Disabled state\n */\nclass ReferenceCursors extends AnnotationDisplayTool {\n  static toolName;\n  touchDragCallback: any;\n  mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  isDrawing = false;\n  isHandleOutsideImage = false;\n  _elementWithCursor: null | HTMLDivElement = null;\n  _currentCursorWorldPosition: null | Types.Point3 = null;\n  _currentCanvasPosition: null | Types.Point2 = null;\n  //need to keep track if this was enabled when tool was enabled because we need to know if we should reset cursors\n  _disableCursorEnabled = false;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        shadow: true,\n        preventHandleOutsideImage: false,\n        displayThreshold: 5,\n        positionSync: true,\n        disableCursor: false,\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this._disableCursorEnabled = this.configuration.disableCursor;\n  }\n\n  /**\n   * Overwritten mouseMoveCallback since we want to keep track of the current mouse position and redraw on mouseMove\n   * @virtual Event handler for Cornerstone MOUSE_MOVE event.\n   *\n   *\n   * @param evt - The normalized mouse event\n   * @param filteredAnnotations - The annotations to check for hover interactions\n   * @returns True if the annotation needs to be re-drawn by the annotationRenderingEngine.\n   */\n  mouseMoveCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const { detail } = evt;\n    const { element, currentPoints } = detail;\n\n    //save current positions and current element the curser is hovering over\n    this._currentCursorWorldPosition = currentPoints.world;\n    this._currentCanvasPosition = currentPoints.canvas;\n    this._elementWithCursor = element;\n\n    const annotation = this.getActiveAnnotation(element);\n    if (annotation === null) {\n      this.createInitialAnnotation(currentPoints.world, element);\n      return false;\n    }\n    this.updateAnnotationPosition(element, annotation);\n    return false;\n  };\n\n  onSetToolActive(): void {\n    this._disableCursorEnabled = this.configuration.disableCursor;\n    if (!this._disableCursorEnabled) {\n      return;\n    }\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) {\n      return;\n    }\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    enabledElements.forEach((element) => {\n      if (element) {\n        hideElementCursor(element.viewport.element);\n      }\n    });\n  }\n  onSetToolDisabled(): void {\n    if (!this._disableCursorEnabled) {\n      return;\n    }\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n    if (!viewportIds) {\n      return;\n    }\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n    enabledElements.forEach((element) => {\n      if (element) {\n        resetElementCursor(element.viewport.element);\n      }\n    });\n  }\n\n  createInitialAnnotation = (\n    worldPos: Types.Point3,\n    element: HTMLDivElement\n  ): void => {\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n      throw new Error('No enabled element found');\n    }\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    if (!viewPlaneNormal || !viewUp) {\n      throw new Error('Camera not found');\n    }\n\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const FrameOfReferenceUID = viewport.getFrameOfReferenceUID();\n\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        toolName: this.getToolName(),\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID,\n        referencedImageId,\n      },\n      data: {\n        label: '',\n        handles: {\n          points: [[...worldPos]] as [Types.Point3],\n          activeHandleIndex: null,\n          textBox: {\n            hasMoved: false,\n            worldPosition: <Types.Point3>[0, 0, 0],\n            worldBoundingBox: {\n              topLeft: <Types.Point3>[0, 0, 0],\n              topRight: <Types.Point3>[0, 0, 0],\n              bottomLeft: <Types.Point3>[0, 0, 0],\n              bottomRight: <Types.Point3>[0, 0, 0],\n            },\n          },\n        },\n      },\n    };\n\n    const annotations = getAnnotations(this.getToolName(), element);\n\n    if (annotations.length > 0) {\n      return null;\n    }\n    const annotationId = addAnnotation(annotation, element);\n\n    if (annotationId === null) {\n      return;\n    }\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  getActiveAnnotation(element: HTMLDivElement): null | Annotation {\n    const annotations = getAnnotations(this.getToolName(), element);\n    if (!annotations.length) {\n      return null;\n    }\n    const targetAnnotation = annotations[0];\n    return targetAnnotation;\n  }\n\n  /**\n   * updates the position of the annotation to match the currently set world position\n   */\n  updateAnnotationPosition(\n    element: HTMLDivElement,\n    annotation: Annotation\n  ): void {\n    const worldPos = this._currentCursorWorldPosition;\n    if (!worldPos) {\n      return;\n    }\n    if (!annotation.data?.handles?.points) {\n      return;\n    }\n    annotation.data.handles.points = [[...worldPos]];\n    annotation.invalidated = true;\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n    const enabledElement = getEnabledElement(element);\n    if (!enabledElement) {\n      return;\n    }\n    const { renderingEngine } = enabledElement;\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  }\n\n  //checks if we need to update the annotation position due to camera changes\n  onCameraModified = (evt: any): void => {\n    const eventDetail = evt.detail;\n    const { element, previousCamera, camera } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const viewport = enabledElement.viewport as\n      | Types.IVolumeViewport\n      | Types.IStackViewport;\n\n    //only react to changes for element with cursor, otherwise would cause infinite loop\n    if (element !== this._elementWithCursor) {\n      return;\n    }\n    //check if camera moved along its normal\n    const oldFocalPoint = previousCamera.focalPoint;\n    const cameraNormal = camera.viewPlaneNormal;\n    const newFocalPoint = camera.focalPoint;\n\n    const deltaCameraFocalPoint: Types.Point3 = [0, 0, 0];\n    vtkMath.subtract(newFocalPoint, oldFocalPoint, deltaCameraFocalPoint);\n    //check if focal point changed\n    if (deltaCameraFocalPoint.reduce((a, b) => a + b, 0) === 0) {\n      return;\n    }\n    //if nomrmal is perpendicular to focal point change, then we are not moving along the normal\n    const dotProduct = vtkMath.dot(deltaCameraFocalPoint, cameraNormal);\n    //dot product is 0 -> perpendicular\n    if (Math.abs(dotProduct) < 1e-2) {\n      return;\n    }\n\n    //need to update the position of the annotation since camera changed\n    if (!this._currentCanvasPosition) {\n      return;\n    }\n\n    const newWorldPos = viewport.canvasToWorld(this._currentCanvasPosition);\n    this._currentCursorWorldPosition = newWorldPos;\n    this.updateAnnotationPosition(element, this.getActiveAnnotation(element));\n  };\n\n  //display annotation if current viewing plane has a max distance of \"displayThreshold\" from the annotation\n  filterInteractableAnnotationsForElement(\n    element: HTMLDivElement,\n    annotations: Annotations\n  ): Annotations {\n    //calculate distance of current viewport to annotation\n    if (!(annotations instanceof Array) || annotations.length === 0) {\n      return [];\n    }\n    const annotation = annotations[0];\n    const viewport = getEnabledElement(element)?.viewport;\n    if (!viewport) {\n      return [];\n    }\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, focalPoint } = camera;\n    if (!viewPlaneNormal || !focalPoint) {\n      return [];\n    }\n    const points = annotation.data?.handles?.points;\n    if (!(points instanceof Array) || points.length !== 1) {\n      return [];\n    }\n    const worldPos = points[0];\n    const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n    const distance = utilities.planar.planeDistanceToPoint(plane, worldPos);\n    return distance < this.configuration.displayThreshold ? [annotation] : [];\n  }\n\n  /**\n   * Draws the cursor representation on the enabledElement\n   * Checks if a stack change has happened and updates annotation in that case\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    const { viewport, FrameOfReferenceUID } = enabledElement;\n\n    const isElementWithCursor = this._elementWithCursor === viewport.element;\n\n    //update stack position if position sync is enabled\n    if (this.configuration.positionSync && !isElementWithCursor) {\n      this.updateViewportImage(viewport);\n    }\n\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    //the viewport change from updateStackPosition might not be applied yet, so sometimes the annotation might not be immediately visible\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    ) as Annotations;\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i] as ReferenceCursor;\n      const { annotationUID, data } = annotation;\n      const { handles } = data;\n      const { points } = handles;\n\n      if (!annotationUID) {\n        return renderStatus;\n      }\n      styleSpecifier.annotationUID = annotationUID;\n\n      const lineWidthBase = parseFloat(\n        this.getStyle('lineWidth', styleSpecifier, annotation) as string\n      );\n\n      const lineWidth =\n        typeof lineWidthBase === 'number' && isElementWithCursor\n          ? lineWidthBase\n          : lineWidthBase;\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n\n      if (points[0].some((e) => isNaN(e))) {\n        return renderStatus;\n      }\n      const canvasCoordinates = points.map((p) =>\n        viewport.worldToCanvas(p)\n      ) as [Types.Point2];\n\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return renderStatus;\n      }\n\n      if (!isAnnotationVisible(annotationUID)) {\n        continue;\n      }\n\n      const crosshairUIDs = {\n        upper: 'upper',\n        right: 'right',\n        lower: 'lower',\n        left: 'left',\n      };\n      const [x, y] = canvasCoordinates[0];\n      const centerSpace = isElementWithCursor ? 20 : 7;\n      const lineLength = isElementWithCursor ? 5 : 7;\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.upper,\n        [x, y - (centerSpace / 2 + lineLength)],\n        [x, y - centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.lower,\n        [x, y + (centerSpace / 2 + lineLength)],\n        [x, y + centerSpace / 2],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.right,\n        [x + (centerSpace / 2 + lineLength), y],\n        [x + centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      drawLine(\n        svgDrawingHelper,\n        annotationUID,\n        crosshairUIDs.left,\n        [x - (centerSpace / 2 + lineLength), y],\n        [x - centerSpace / 2, y],\n        { color, lineDash, lineWidth }\n      );\n      renderStatus = true;\n    }\n\n    return renderStatus;\n  };\n\n  updateViewportImage(\n    viewport: Types.IStackViewport | Types.IVolumeViewport\n  ): void {\n    const currentMousePosition = this._currentCursorWorldPosition;\n\n    if (!currentMousePosition || currentMousePosition.some((e) => isNaN(e))) {\n      return;\n    }\n\n    if (viewport instanceof StackViewport) {\n      const closestIndex = utilities.getClosestStackImageIndexForPoint(\n        currentMousePosition,\n        viewport\n      );\n\n      if (closestIndex === null) {\n        return;\n      }\n      if (closestIndex !== viewport.getCurrentImageIdIndex()) {\n        viewport.setImageIdIndex(closestIndex);\n      }\n    } else if (viewport instanceof VolumeViewport) {\n      const { focalPoint, viewPlaneNormal } = viewport.getCamera();\n      if (!focalPoint || !viewPlaneNormal) {\n        return;\n      }\n      const plane = utilities.planar.planeEquation(viewPlaneNormal, focalPoint);\n      const currentDistance = utilities.planar.planeDistanceToPoint(\n        plane,\n        currentMousePosition,\n        true\n      );\n\n      if (Math.abs(currentDistance) < 0.5) {\n        return;\n      }\n      const normalizedViewPlane = vec3.normalize(\n        vec3.create(),\n        vec3.fromValues(...viewPlaneNormal)\n      );\n      const scaledPlaneNormal = vec3.scale(\n        vec3.create(),\n        normalizedViewPlane,\n        currentDistance\n      );\n      const newFocalPoint = vec3.add(\n        vec3.create(),\n        vec3.fromValues(...focalPoint),\n        scaledPlaneNormal\n      ) as Types.Point3;\n      //TODO: make check if new focal point is within bounds of volume\n      const isInBounds = true;\n      if (isInBounds) {\n        viewport.setCamera({ focalPoint: newFocalPoint });\n        const renderingEngine = viewport.getRenderingEngine();\n        if (renderingEngine) {\n          renderingEngine.renderViewport(viewport.id);\n        }\n      }\n    }\n  }\n}\n\nReferenceCursors.toolName = 'ReferenceCursors';\nexport default ReferenceCursors;\n","import AnnotationDisplayTool from './base/AnnotationDisplayTool';\nimport { vec3 } from 'gl-matrix';\nimport {\n  getEnabledElementByIds,\n  getRenderingEngines,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport { ScaleOverlayAnnotation } from '../types/ToolSpecificAnnotationTypes';\nimport type { Types } from '@cornerstonejs/core';\nimport {\n  addAnnotation,\n  getAnnotations,\n} from '../stateManagement/annotation/annotationState';\nimport {\n  drawLine as drawLineSvg,\n  drawTextBox as drawTextBoxSvg,\n} from '../drawingSvg';\nimport {\n  EventTypes,\n  PublicToolProps,\n  ToolProps,\n  SVGDrawingHelper,\n} from '../types';\nimport { StyleSpecifier } from '../types/AnnotationStyle';\nimport { getToolGroup } from '../store/ToolGroupManager';\n\nconst SCALEOVERLAYTOOL_ID = 'scaleoverlay-viewport';\nconst viewportsWithAnnotations = [];\n\n/**\n * @public\n * @class ScaleOverlayTool\n * @memberof Tools\n *\n * @classdesc Tool for displaying a scale overlay on the image.\n * @extends Tools.Base.BaseTool\n */\nclass ScaleOverlayTool extends AnnotationDisplayTool {\n  static toolName;\n\n  public touchDragCallback: any;\n  public mouseDragCallback: any;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    renderingEngine: any;\n    viewport: any;\n    annotation: ScaleOverlayAnnotation;\n  } | null = {} as any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      configuration: {\n        viewportId: '',\n        scaleLocation: 'bottom',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  _init = (): void => {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    if (!renderingEngine) {\n      return;\n    }\n\n    // get viewports with tool enabled\n    const viewportIds = getToolGroup(this.toolGroupId).viewportsInfo;\n\n    if (!viewportIds) {\n      return;\n    }\n\n    // get enabled elements\n    const enabledElements = viewportIds.map((e) =>\n      getEnabledElementByIds(e.viewportId, e.renderingEngineId)\n    );\n\n    let { viewport } = enabledElements[0];\n    const { FrameOfReferenceUID } = enabledElements[0];\n\n    // onCameraModified, configuration.viewportId is set to the active\n    // viewport Id, here we are setting the viewport variable to the\n    // viewport with the matching Id\n    if (this.configuration.viewportId) {\n      enabledElements.forEach((element) => {\n        if (element.viewport.id == this.configuration.viewportId) {\n          viewport = element.viewport;\n        }\n      });\n    }\n\n    if (!viewport) {\n      return;\n    }\n\n    const { viewUp, viewPlaneNormal } = viewport.getCamera();\n\n    const viewportCanvasCornersInWorld =\n      csUtils.getViewportImageCornersInWorld(viewport);\n\n    let annotation = this.editData.annotation;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n\n    // if annotations have been created, get the annotation for the\n    // current viewport Id\n    if (annotations.length) {\n      annotation = annotations.filter(\n        (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n      )[0] as ScaleOverlayAnnotation;\n    }\n\n    // viewportsWithAnnotations stores which viewports have an annotation,\n    // if the viewport does not have an annotation, create a new one\n    if (!viewportsWithAnnotations.includes(viewport.id)) {\n      const newAnnotation: ScaleOverlayAnnotation = {\n        metadata: {\n          toolName: this.getToolName(),\n          viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n          viewUp: <Types.Point3>[...viewUp],\n          FrameOfReferenceUID,\n          referencedImageId: null,\n        },\n        data: {\n          handles: {\n            points: viewportCanvasCornersInWorld,\n          },\n          viewportId: viewport.id,\n        },\n      };\n\n      viewportsWithAnnotations.push(viewport.id);\n\n      addAnnotation(newAnnotation, viewport.element);\n      annotation = newAnnotation;\n    } else if (this.editData.annotation.data.viewportId == viewport.id) {\n      this.editData.annotation.data.handles.points =\n        viewportCanvasCornersInWorld;\n      this.editData.annotation.data.viewportId = viewport.id;\n    }\n\n    this.editData = {\n      viewport,\n      renderingEngine,\n      annotation,\n    };\n  };\n\n  onSetToolEnabled = (): void => {\n    this._init();\n  };\n\n  onCameraModified = (evt: Types.EventTypes.CameraModifiedEvent): void => {\n    // If the camera is modified, we need to update the viewport\n    // that the camera was modified on\n    this.configuration.viewportId = evt.detail.viewportId;\n    this._init();\n  };\n\n  /**\n   * Used to draw the scale annotation in each request animation\n   * frame.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   * @returns\n   */\n\n  renderAnnotation(\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ) {\n    if (!this.editData.viewport) {\n      return;\n    }\n    const location = this.configuration.scaleLocation;\n    const { viewport } = enabledElement;\n\n    const annotations = getAnnotations(this.getToolName(), viewport.element);\n    const annotation = annotations.filter(\n      (thisAnnotation) => thisAnnotation.data.viewportId == viewport.id\n    )[0];\n    const canvas = enabledElement.viewport.canvas;\n\n    const renderStatus = false;\n\n    if (!viewport) {\n      return renderStatus;\n    }\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    const canvasSize = {\n      width: canvas.width,\n      height: canvas.height,\n    };\n\n    const topLeft = annotation.data.handles.points[0];\n    const topRight = annotation.data.handles.points[1];\n    const bottomLeft = annotation.data.handles.points[2];\n    const bottomRight = annotation.data.handles.points[3];\n\n    const pointSet1 = [topLeft, bottomLeft, topRight, bottomRight];\n\n    const worldWidthViewport = vec3.distance(bottomLeft, bottomRight);\n    const worldHeightViewport = vec3.distance(topLeft, bottomLeft);\n\n    // hscaleBounds and vscaleBounds compute the max bound for scales on the image\n    const hscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    const vscaleBounds = this.computeScaleBounds(\n      canvasSize,\n      0.05,\n      0.05,\n      location\n    );\n\n    // Computes which scale size to use, ex: 100mm, 50mm\n    const scaleSize = this.computeScaleSize(\n      worldWidthViewport,\n      worldHeightViewport,\n      location\n    );\n\n    // Applies the scale with the predetermined size to the image in\n    // world coordinates, then converts them to canvas coordinates\n    const canvasCoordinates = this.computeWorldScaleCoordinates(\n      scaleSize,\n      location,\n      pointSet1\n    ).map((world) => viewport.worldToCanvas(world));\n\n    // Uses the bounds and canvas size to center the scale\n    // based on the location\n    const scaleCanvasCoordinates = this.computeCanvasScaleCoordinates(\n      canvasSize,\n      canvasCoordinates,\n      vscaleBounds,\n      hscaleBounds,\n      location\n    );\n\n    // Computes the end scale ticks coordinates\n    const scaleTicks = this.computeEndScaleTicks(\n      scaleCanvasCoordinates,\n      location\n    );\n\n    const { annotationUID } = annotation;\n\n    styleSpecifier.annotationUID = annotationUID;\n    const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n    const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n    const color = this.getStyle('color', styleSpecifier, annotation);\n    const shadow = this.getStyle('shadow', styleSpecifier, annotation);\n\n    const scaleId = `${annotationUID}-scaleline`;\n    const scaleLineUID = '1';\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      scaleLineUID,\n      scaleCanvasCoordinates[0],\n      scaleCanvasCoordinates[1],\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      scaleId\n    );\n    const leftTickId = `${annotationUID}-left`;\n    const leftTickUID = '2';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      leftTickUID,\n      scaleTicks.endTick1[0] as Types.Point2,\n      scaleTicks.endTick1[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      leftTickId\n    );\n    const rightTickId = `${annotationUID}-right`;\n    const rightTickUID = '3';\n\n    drawLineSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rightTickUID,\n      scaleTicks.endTick2[0] as Types.Point2,\n      scaleTicks.endTick2[1] as Types.Point2,\n      {\n        color,\n        width: lineWidth,\n        lineDash,\n        shadow,\n      },\n      rightTickId\n    );\n\n    const locationTextOffest = {\n      bottom: [-10, -42],\n      top: [-12, -35],\n      left: [-40, -20],\n      right: [-50, -20],\n    };\n\n    const textCanvasCoordinates = [\n      scaleCanvasCoordinates[0][0] + locationTextOffest[location][0],\n      scaleCanvasCoordinates[0][1] + locationTextOffest[location][1],\n    ];\n    const textBoxLines = this._getTextLines(scaleSize);\n\n    const { tickIds, tickUIDs, tickCoordinates } = this.computeInnerScaleTicks(\n      scaleSize,\n      location,\n      annotationUID,\n      scaleTicks.endTick1,\n      scaleTicks.endTick2\n    );\n\n    // draws inner ticks for scale\n    for (let i = 0; i < tickUIDs.length; i++) {\n      drawLineSvg(\n        svgDrawingHelper,\n        annotationUID,\n        tickUIDs[i],\n        tickCoordinates[i][0],\n        tickCoordinates[i][1],\n        {\n          color,\n          width: lineWidth,\n          lineDash,\n          shadow,\n        },\n        tickIds[i]\n      );\n    }\n\n    const textUID = 'text0';\n    drawTextBoxSvg(\n      svgDrawingHelper,\n      annotationUID,\n      textUID,\n      textBoxLines,\n      [textCanvasCoordinates[0], textCanvasCoordinates[1]],\n      {\n        fontFamily: 'Helvetica Neue, Helvetica, Arial, sans-serif',\n        fontSize: '14px',\n        lineDash: '2,3',\n        lineWidth: '1',\n        shadow: true,\n        color: color,\n      }\n    );\n\n    return renderStatus;\n  }\n\n  _getTextLines(scaleSize: number): string[] | undefined {\n    let scaleSizeDisplayValue;\n    let scaleSizeUnits;\n    if (scaleSize >= 50) {\n      scaleSizeDisplayValue = scaleSize / 10; //convert to cm\n      scaleSizeUnits = ' cm';\n    } else {\n      scaleSizeDisplayValue = scaleSize; //convert to cm\n      scaleSizeUnits = ' mm';\n    }\n\n    const textLines = [scaleSizeDisplayValue.toString().concat(scaleSizeUnits)];\n\n    return textLines;\n  }\n\n  /**\n   *\n   * @param worldWidthViewport\n   * @returns currentScaleSize\n   */\n  computeScaleSize = (\n    worldWidthViewport: number,\n    worldHeightViewport: number,\n    location: any\n  ) => {\n    const scaleSizes = [\n      16000, 8000, 4000, 2000, 1000, 500, 250, 100, 50, 25, 10, 5, 2,\n    ];\n    let currentScaleSize;\n    if (location == 'top' || location == 'bottom') {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldWidthViewport * 0.6 &&\n          scaleSize > worldWidthViewport * 0.2\n      );\n    } else {\n      currentScaleSize = scaleSizes.filter(\n        (scaleSize) =>\n          scaleSize < worldHeightViewport * 0.6 &&\n          scaleSize > worldHeightViewport * 0.2\n      );\n    }\n\n    return currentScaleSize[0];\n  };\n\n  /**\n   *  calculates scale ticks for ends of the scale\n   * @param canvasCoordinates\n   * @returns leftTick, rightTick\n   */\n  computeEndScaleTicks = (canvasCoordinates, location) => {\n    const locationTickOffset = {\n      bottom: [\n        [0, -10],\n        [0, -10],\n      ],\n      top: [\n        [0, 10],\n        [0, 10],\n      ],\n      left: [\n        [0, 0],\n        [10, 0],\n      ],\n      right: [\n        [0, 0],\n        [-10, 0],\n      ],\n    };\n\n    const endTick1 = [\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[1][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[1][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n    const endTick2 = [\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][0][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][0][0],\n      ],\n      [\n        canvasCoordinates[0][0] + locationTickOffset[location][1][0],\n        canvasCoordinates[0][1] + locationTickOffset[location][1][1],\n      ],\n    ];\n\n    return {\n      endTick1: endTick1,\n      endTick2: endTick2,\n    };\n  };\n\n  computeInnerScaleTicks = (\n    scaleSize: number,\n    location: string,\n    annotationUID: string,\n    leftTick: any[][],\n    rightTick: any[][]\n  ) => {\n    let canvasScaleSize;\n    if (location == 'bottom' || location == 'top') {\n      canvasScaleSize = rightTick[0][0] - leftTick[0][0];\n    } else if (location == 'left' || location == 'right') {\n      canvasScaleSize = rightTick[0][1] - leftTick[0][1];\n    }\n    const tickIds = [];\n    const tickUIDs = [];\n    const tickCoordinates = [];\n    let numberSmallTicks = scaleSize;\n\n    if (scaleSize >= 50) {\n      numberSmallTicks = scaleSize / 10;\n    }\n\n    const tickSpacing = canvasScaleSize / numberSmallTicks;\n\n    for (let i = 0; i < numberSmallTicks - 1; i++) {\n      const locationOffset = {\n        bottom: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), 5],\n        ],\n        top: [\n          [tickSpacing * (i + 1), 0],\n          [tickSpacing * (i + 1), -5],\n        ],\n        left: [\n          [0, tickSpacing * (i + 1)],\n          [-5, tickSpacing * (i + 1)],\n        ],\n        right: [\n          [0, tickSpacing * (i + 1)],\n          [5, tickSpacing * (i + 1)],\n        ],\n      };\n      tickIds.push(`${annotationUID}-tick${i}`);\n      tickUIDs.push(`tick${i}`);\n      if ((i + 1) % 5 == 0) {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][0][0],\n            leftTick[1][1] + locationOffset[location][0][1],\n          ],\n        ]);\n      } else {\n        tickCoordinates.push([\n          [\n            leftTick[0][0] + locationOffset[location][0][0],\n            leftTick[0][1] + locationOffset[location][0][1],\n          ],\n          [\n            leftTick[1][0] + locationOffset[location][1][0],\n            leftTick[1][1] + locationOffset[location][1][1],\n          ],\n        ]);\n      }\n    }\n\n    return { tickIds, tickUIDs, tickCoordinates };\n  };\n\n  computeWorldScaleCoordinates = (scaleSize, location, pointSet) => {\n    let worldCoordinates;\n    let topBottomVec = vec3.subtract(vec3.create(), pointSet[0], pointSet[1]);\n    topBottomVec = vec3.normalize(vec3.create(), topBottomVec) as Types.Point3;\n\n    let topRightVec = vec3.subtract(vec3.create(), pointSet[2], pointSet[0]);\n    topRightVec = vec3.normalize(vec3.create(), topRightVec);\n\n    const midpointLocation = {\n      bottom: [pointSet[1], pointSet[2]],\n      top: [pointSet[0], pointSet[3]],\n      right: [pointSet[2], pointSet[3]],\n      left: [pointSet[0], pointSet[1]],\n    };\n\n    const midpoint = vec3\n      .add(\n        vec3.create(),\n        midpointLocation[location][0],\n        midpointLocation[location][0]\n      )\n      .map((i) => i / 2) as Types.Point3;\n\n    const offset =\n      scaleSize /\n      2 /\n      Math.sqrt(\n        Math.pow(topBottomVec[0], 2) +\n          Math.pow(topBottomVec[1], 2) +\n          Math.pow(topBottomVec[2], 2)\n      );\n\n    if (location == 'top' || location == 'bottom') {\n      worldCoordinates = [\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topRightVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    } else if (location == 'left' || location == 'right') {\n      worldCoordinates = [\n        vec3.add(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n        vec3.subtract(\n          vec3.create(),\n          midpoint,\n          topBottomVec.map((i) => i * offset) as Types.Point3\n        ),\n      ];\n    }\n\n    return worldCoordinates;\n  };\n\n  /**\n   * Computes the centered canvas coordinates for scale\n   * @param canvasSize\n   * @param canvasCoordinates\n   * @param vscaleBounds\n   * @returns scaleCanvasCoordinates\n   */\n  computeCanvasScaleCoordinates = (\n    canvasSize,\n    canvasCoordinates,\n    vscaleBounds,\n    hscaleBounds,\n    location\n  ) => {\n    let scaleCanvasCoordinates;\n    if (location == 'top' || location == 'bottom') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][0] - canvasCoordinates[1][0];\n      scaleCanvasCoordinates = [\n        [canvasSize.width / 2 - worldDistanceOnCanvas / 2, vscaleBounds.height],\n        [canvasSize.width / 2 + worldDistanceOnCanvas / 2, vscaleBounds.height],\n      ];\n    } else if (location == 'left' || location == 'right') {\n      const worldDistanceOnCanvas =\n        canvasCoordinates[0][1] - canvasCoordinates[1][1];\n      scaleCanvasCoordinates = [\n        [hscaleBounds.width, canvasSize.height / 2 - worldDistanceOnCanvas / 2],\n        [hscaleBounds.width, canvasSize.height / 2 + worldDistanceOnCanvas / 2],\n      ];\n    }\n\n    return scaleCanvasCoordinates;\n  };\n\n  /**\n   * Computes the max bound for scales on the image\n   * @param  {{width: number, height: number}} canvasSize\n   * @param  {number} horizontalReduction\n   * @param  {number} verticalReduction\n   * @returns {Object.<string, { x:number, y:number }>}\n   */\n  computeScaleBounds = (\n    canvasSize,\n    horizontalReduction,\n    verticalReduction,\n    location\n  ) => {\n    const hReduction = horizontalReduction * Math.min(1000, canvasSize.width);\n    const vReduction = verticalReduction * Math.min(1000, canvasSize.height);\n    const locationBounds = {\n      bottom: [-vReduction, -hReduction],\n      top: [vReduction, hReduction],\n      left: [vReduction, hReduction],\n      right: [-vReduction, -hReduction],\n    };\n    const canvasBounds = {\n      bottom: [canvasSize.height, canvasSize.width],\n      top: [0, canvasSize.width],\n      left: [canvasSize.height, 0],\n      right: [canvasSize.height, canvasSize.width],\n    };\n\n    return {\n      height: canvasBounds[location][0] + locationBounds[location][0],\n      width: canvasBounds[location][1] + locationBounds[location][1],\n    };\n  };\n}\n\nScaleOverlayTool.toolName = 'ScaleOverlay';\nexport default ScaleOverlayTool;\n","import { ImageVolume, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { pointInShapeCallback } from '../../../utilities';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype OperationData = {\n  segmentationId: string;\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: ImageVolume;\n  constraintFn: (x: [number, number, number]) => boolean;\n  segmentIndex: number;\n  segmentsLocked: number[];\n};\n\n/**\n * For each point in the bounding box around the rectangle, if the point is inside\n * the rectangle, set the scalar value to the segmentIndex\n * @param toolGroupId - string\n * @param operationData - OperationData\n * @param constraintFn - can be used to perform threshold segmentation\n * @param inside - boolean\n */\n// Todo: why we have another constraintFn? in addition to the one in the operationData?\nfunction fillRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData,\n  inside = true\n): void {\n  const {\n    volume: segmentation,\n    points,\n    segmentsLocked,\n    segmentIndex,\n    segmentationId,\n    constraintFn,\n  } = operationData;\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n\n  let rectangleCornersIJK = points.map((world) => {\n    return transformWorldToIndex(imageData, world);\n  });\n\n  // math round\n  rectangleCornersIJK = rectangleCornersIJK.map((point) => {\n    return point.map((coord) => {\n      return Math.round(coord);\n    });\n  });\n\n  const boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n  // Since always all points inside the boundsIJK is inside the rectangle...\n  const pointInRectangle = () => true;\n\n  const callback = ({ value, index, pointIJK }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n\n    if (!constraintFn) {\n      scalarData[index] = segmentIndex;\n      return;\n    }\n\n    if (constraintFn(pointIJK)) {\n      scalarData[index] = segmentIndex;\n    }\n  };\n\n  pointInShapeCallback(imageData, pointInRectangle, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationId);\n}\n\n/**\n * Fill the inside of a rectangle\n * @param toolGroupId - The unique identifier of the tool group.\n * @param operationData - The data that will be used to create the\n * new rectangle.\n * @param constraintFn - can be used to perform threshold segmentation\n */\nexport function fillInsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillRectangle(enabledElement, operationData, true);\n}\n\n/**\n * Fill the area outside of a rectangle for the toolGroupId and segmentationRepresentationUID.\n * @param toolGroupId - The unique identifier of the tool group.\n * @param operationData - The data that will be used to create the\n * new rectangle.\n * @param constraintFn - can be used to perform threshold segmentation\n */\nexport function fillOutsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: OperationData\n): void {\n  fillRectangle(enabledElement, operationData, false);\n}\n","import { ImageVolume, utilities as csUtils } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { getBoundingBoxAroundShape } from '../../../utilities/boundingBox';\nimport { triggerSegmentationDataModified } from '../../../stateManagement/segmentation/triggerSegmentationEvents';\nimport { pointInShapeCallback } from '../../../utilities';\n\nconst { transformWorldToIndex } = csUtils;\n\ntype EraseOperationData = {\n  segmentationId: string;\n  points: [Types.Point3, Types.Point3, Types.Point3, Types.Point3];\n  volume: ImageVolume;\n  constraintFn: (x: [number, number, number]) => boolean;\n  segmentsLocked: number[];\n};\n\nfunction eraseRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData,\n  inside = true\n): void {\n  const {\n    volume: segmentation,\n    points,\n    segmentsLocked,\n    segmentationId,\n  } = operationData;\n  const { imageData, dimensions } = segmentation;\n  const scalarData = segmentation.getScalarData();\n\n  const rectangleCornersIJK = points.map((world) => {\n    return transformWorldToIndex(imageData, world);\n  });\n\n  const boundsIJK = getBoundingBoxAroundShape(rectangleCornersIJK, dimensions);\n\n  // Since always all points inside the boundsIJK is inside the rectangle...\n  const pointInShape = () => true;\n\n  const callback = ({ value, index }) => {\n    if (segmentsLocked.includes(value)) {\n      return;\n    }\n    scalarData[index] = 0;\n  };\n\n  pointInShapeCallback(imageData, pointInShape, callback, boundsIJK);\n\n  triggerSegmentationDataModified(segmentationId);\n}\n\n/**\n * Erase the rectangle region segment inside the segmentation defined by the operationData.\n * It erases the segmentation pixels inside the defined rectangle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function eraseInsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData\n): void {\n  eraseRectangle(enabledElement, operationData, true);\n}\n\n/**\n * Erase the rectangle region segment inside the segmentation defined by the operationData.\n * It erases the segmentation pixels outside the defined rectangle.\n * @param enabledElement - The element for which the segment is being erased.\n * @param operationData - EraseOperationData\n */\nexport function eraseOutsideRectangle(\n  enabledElement: Types.IEnabledElement,\n  operationData: EraseOperationData\n): void {\n  eraseRectangle(enabledElement, operationData, false);\n}\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\nimport { fillInsideRectangle } from './strategies/fillRectangle';\nimport { eraseInsideRectangle } from './strategies/eraseRectangle';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\n\nimport { Events } from '../../enums';\nimport { drawRect as drawRectSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a rectangle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass RectangleScissorsTool extends BaseTool {\n  static toolName;\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    segmentationId: string;\n    segmentation: any;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideRectangle,\n          ERASE_INSIDE: eraseInsideRectangle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      highlighted: true,\n      invalidated: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n      },\n    };\n\n    const viewportIdsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName()\n    );\n\n    this.editData = {\n      annotation,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentColor,\n      segmentationId,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const { annotation, viewportIdsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    // Moving handle.\n    const { currentPoints } = eventDetail;\n    const enabledElement = getEnabledElement(element);\n    const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n    const worldPos = currentPoints.world;\n\n    const { points } = data.handles;\n\n    // Move this handle.\n    points[handleIndex] = [...worldPos];\n\n    let bottomLeftCanvas;\n    let bottomRightCanvas;\n    let topLeftCanvas;\n    let topRightCanvas;\n\n    let bottomLeftWorld;\n    let bottomRightWorld;\n    let topLeftWorld;\n    let topRightWorld;\n\n    switch (handleIndex) {\n      case 0:\n      case 3:\n        // Moving bottomLeft or topRight\n\n        bottomLeftCanvas = worldToCanvas(points[0]);\n        topRightCanvas = worldToCanvas(points[3]);\n\n        bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n        topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n        bottomRightWorld = canvasToWorld(bottomRightCanvas);\n        topLeftWorld = canvasToWorld(topLeftCanvas);\n\n        points[1] = bottomRightWorld;\n        points[2] = topLeftWorld;\n\n        break;\n      case 1:\n      case 2:\n        // Moving bottomRight or topLeft\n        bottomRightCanvas = worldToCanvas(points[1]);\n        topLeftCanvas = worldToCanvas(points[2]);\n\n        bottomLeftCanvas = <Types.Point2>[\n          topLeftCanvas[0],\n          bottomRightCanvas[1],\n        ];\n        topRightCanvas = <Types.Point2>[bottomRightCanvas[0], topLeftCanvas[1]];\n\n        bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n        topRightWorld = canvasToWorld(topRightCanvas);\n\n        points[0] = bottomLeftWorld;\n        points[3] = topRightWorld;\n\n        break;\n    }\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentationId,\n      segmentIndex,\n      segmentsLocked,\n    } = this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentationId,\n      segmentIndex,\n      segmentsLocked,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * it is used to draw the rectangleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const rectangleUID = '0';\n    drawRectSvg(\n      svgDrawingHelper,\n      annotationUID,\n      rectangleUID,\n      canvasCoordinates[0],\n      canvasCoordinates[3],\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nRectangleScissorsTool.toolName = 'RectangleScissor';\nexport default RectangleScissorsTool;\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideCircle } from './strategies/fillCircle';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n  config as segmentationConfig,\n} from '../../stateManagement/segmentation';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a circle. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex.\n */\nclass CircleScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentation: any;\n    segmentIndex: number;\n    segmentationId: string;\n    segmentsLocked: number[];\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideCircle,\n          // ERASE_INSIDE: eraseInsideCircle,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    // Todo: Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      invalidated: true,\n      highlighted: true,\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        isDrawing: true,\n        cachedStats: {},\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      segmentation,\n      centerCanvas: canvasPos,\n      segmentIndex,\n      segmentationId,\n      segmentsLocked,\n      segmentColor,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    // Center of circle in canvas Coordinates\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n    } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentIndex,\n      segmentsLocked,\n      viewPlaneNormal,\n      segmentationId,\n      viewUp,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the circleScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n    return renderStatus;\n  };\n}\n\nCircleScissorsTool.toolName = 'CircleScissor';\nexport default CircleScissorsTool;\n","import { cache, getEnabledElement, StackViewport } from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport {\n  PublicToolProps,\n  ToolProps,\n  EventTypes,\n  SVGDrawingHelper,\n} from '../../types';\n\nimport { fillInsideSphere } from './strategies/fillSphere';\nimport { Events } from '../../enums';\nimport { drawCircle as drawCircleSvg } from '../../drawingSvg';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\n\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\nimport {\n  config as segmentationConfig,\n  segmentLocking,\n  segmentIndex as segmentIndexController,\n  activeSegmentation,\n} from '../../stateManagement/segmentation';\n\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\n/**\n * Tool for manipulating segmentation data by drawing a sphere in 3d space. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will use the activeSegmentIndex\n * for the segmentation to modify. You can use SegmentationModule to set the active\n * segmentation and segmentIndex. Todo: sphere scissor has some memory problem which\n * lead to ui blocking behavior that needs to be fixed.\n */\nclass SphereScissorsTool extends BaseTool {\n  static toolName;\n  editData: {\n    annotation: any;\n    segmentation: any;\n    segmentIndex: number;\n    segmentsLocked: number[];\n    segmentationId: string;\n    toolGroupId: string;\n    segmentColor: [number, number, number, number];\n    viewportIdsToRender: string[];\n    handleIndex?: number;\n    movingTextBox: boolean;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n    centerCanvas?: Array<number>;\n  } | null;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: {\n        strategies: {\n          FILL_INSIDE: fillInsideSphere,\n        },\n        defaultStrategy: 'FILL_INSIDE',\n        activeStrategy: 'FILL_INSIDE',\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): true => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n    const canvasPos = currentPoints.canvas;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationRepresentationUID, segmentationId, type } =\n      activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked = segmentLocking.getLockedSegments(segmentationId);\n\n    const segmentColor = segmentationConfig.color.getColorForSegmentIndex(\n      toolGroupId,\n      segmentationRepresentationUID,\n      segmentIndex\n    );\n\n    const { representationData } = getSegmentation(segmentationId);\n\n    // Todo: are we going to support contour editing with rectangle scissors?\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n\n    this.isDrawing = true;\n\n    // Used for drawing the svg only, we might not need it at all\n    const annotation = {\n      metadata: {\n        viewPlaneNormal: <Types.Point3>[...viewPlaneNormal],\n        viewUp: <Types.Point3>[...viewUp],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId: '',\n        toolName: this.getToolName(),\n        segmentColor,\n      },\n      data: {\n        invalidated: true,\n        handles: {\n          points: [[...worldPos], [...worldPos], [...worldPos], [...worldPos]],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        highlighted: true,\n      },\n    };\n\n    const viewportIdsToRender = [viewport.id];\n\n    this.editData = {\n      annotation,\n      segmentation,\n      centerCanvas: canvasPos,\n      segmentIndex,\n      segmentsLocked,\n      segmentColor,\n      segmentationId,\n      toolGroupId,\n      viewportIdsToRender,\n      handleIndex: 3,\n      movingTextBox: false,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n\n    return true;\n  };\n\n  _dragCallback = (evt: EventTypes.InteractionEventType) => {\n    this.isDrawing = true;\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n    const { currentPoints } = eventDetail;\n    const currentCanvasPoints = currentPoints.canvas;\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine, viewport } = enabledElement;\n    const { canvasToWorld } = viewport;\n\n    //////\n    const { annotation, viewportIdsToRender, centerCanvas } = this.editData;\n    const { data } = annotation;\n\n    const dX = Math.abs(currentCanvasPoints[0] - centerCanvas[0]);\n    const dY = Math.abs(currentCanvasPoints[1] - centerCanvas[1]);\n    const radius = Math.sqrt(dX * dX + dY * dY);\n\n    const bottomCanvas: Types.Point2 = [\n      centerCanvas[0],\n      centerCanvas[1] + radius,\n    ];\n    const topCanvas: Types.Point2 = [centerCanvas[0], centerCanvas[1] - radius];\n    const leftCanvas: Types.Point2 = [\n      centerCanvas[0] - radius,\n      centerCanvas[1],\n    ];\n    const rightCanvas: Types.Point2 = [\n      centerCanvas[0] + radius,\n      centerCanvas[1],\n    ];\n\n    data.handles.points = [\n      canvasToWorld(bottomCanvas),\n      canvasToWorld(topCanvas),\n      canvasToWorld(leftCanvas),\n      canvasToWorld(rightCanvas),\n    ];\n\n    annotation.invalidated = true;\n\n    this.editData.hasMoved = true;\n\n    triggerAnnotationRenderForViewportIds(renderingEngine, viewportIdsToRender);\n  };\n\n  _endCallback = (evt: EventTypes.InteractionEventType) => {\n    const eventDetail = evt.detail;\n    const { element } = eventDetail;\n\n    const {\n      annotation,\n      newAnnotation,\n      hasMoved,\n      segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n    } = this.editData;\n    const { data } = annotation;\n    const { viewPlaneNormal, viewUp } = annotation.metadata;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n    annotation.highlighted = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (viewport instanceof StackViewport) {\n      throw new Error('Not implemented yet');\n    }\n\n    const operationData = {\n      points: data.handles.points,\n      volume: segmentation,\n      segmentIndex,\n      segmentsLocked,\n      segmentationId,\n      viewPlaneNormal,\n      viewUp,\n    };\n\n    this.applyActiveStrategy(enabledElement, operationData);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event propagation.\n   */\n  _activateDraw = (element) => {\n    element.addEventListener(Events.MOUSE_UP, this._endCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._endCallback);\n    element.addEventListener(Events.TOUCH_TAP, this._endCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._dragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    element.removeEventListener(Events.MOUSE_UP, this._endCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._dragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._endCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._endCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._dragCallback);\n    element.removeEventListener(Events.TOUCH_TAP, this._endCallback);\n  };\n\n  /**\n   * it is used to draw the sphereScissor annotation in each\n   * request animation frame. Note that the annotation are disappeared\n   * after the segmentation modification.\n   *\n   * @param enabledElement - The Cornerstone's enabledElement.\n   * @param svgDrawingHelper - The svgDrawingHelper providing the context for drawing.\n   */\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    let renderStatus = false;\n    if (!this.editData) {\n      return renderStatus;\n    }\n\n    const { viewport } = enabledElement;\n    const { viewportIdsToRender } = this.editData;\n\n    if (!viewportIdsToRender.includes(viewport.id)) {\n      return renderStatus;\n    }\n\n    const { annotation } = this.editData;\n\n    // Todo: rectangle color based on segment index\n    const toolMetadata = annotation.metadata;\n    const annotationUID = annotation.annotationUID;\n\n    const data = annotation.data;\n    const { points } = data.handles;\n    const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n    const bottom = canvasCoordinates[0];\n    const top = canvasCoordinates[1];\n\n    const center = [\n      Math.floor((bottom[0] + top[0]) / 2),\n      Math.floor((bottom[1] + top[1]) / 2),\n    ];\n\n    const radius = Math.abs(bottom[1] - Math.floor((bottom[1] + top[1]) / 2));\n\n    const color = `rgb(${toolMetadata.segmentColor.slice(0, 3)})`;\n\n    // If rendering engine has been destroyed while rendering\n    if (!viewport.getRenderingEngine()) {\n      console.warn('Rendering Engine has been destroyed');\n      return renderStatus;\n    }\n\n    const circleUID = '0';\n    drawCircleSvg(\n      svgDrawingHelper,\n      annotationUID,\n      circleUID,\n      center as Types.Point2,\n      radius,\n      {\n        color,\n      }\n    );\n\n    renderStatus = true;\n\n    return renderStatus;\n  };\n}\n\nSphereScissorsTool.toolName = 'SphereScissor';\nexport default SphereScissorsTool;\n","import vtkOrientationMarkerWidget from '@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget';\nimport vtkAnnotatedCubeActor from '@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor';\nimport vtkAxesActor from '@kitware/vtk.js/Rendering/Core/AxesActor';\nimport vtkActor from '@kitware/vtk.js/Rendering/Core/Actor';\nimport vtkMapper from '@kitware/vtk.js/Rendering/Core/Mapper';\nimport vtkXMLPolyDataReader from '@kitware/vtk.js/IO/XML/XMLPolyDataReader';\nimport vtkPolyData from '@kitware/vtk.js/Common/DataModel/PolyData';\n\nimport { BaseTool } from './base';\nimport { getRenderingEngines } from '@cornerstonejs/core';\nimport { filterViewportsWithToolEnabled } from '../utilities/viewportFilters';\n\nconst OverlayMarkerType = {\n  ANNOTATED_CUBE: 1,\n  AXES: 2,\n  CUSTOM: 3,\n};\n\n/**\n * The OrientationMarker is a tool that includes an orientation marker in viewports\n * when activated\n */\nclass OrientationMarkerTool extends BaseTool {\n  static toolName;\n  static CUBE = 1;\n  static AXIS = 2;\n  static VTPFILE = 3;\n  orientationMarkers;\n  polyDataURL;\n\n  static OVERLAY_MARKER_TYPES = OverlayMarkerType;\n\n  configuration_invalidated = true;\n\n  constructor(\n    toolProps = {},\n    defaultToolProps = {\n      configuration: {\n        orientationWidget: {\n          enabled: true,\n          viewportCorner: vtkOrientationMarkerWidget.Corners.BOTTOM_RIGHT,\n          viewportSize: 0.15,\n          minPixelSize: 100,\n          maxPixelSize: 300,\n        },\n        overlayMarkerType:\n          OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE,\n        overlayConfiguration: {\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.ANNOTATED_CUBE]: {\n            faceProperties: {\n              xPlus: { text: 'R', faceColor: '#ffff00', faceRotation: 90 },\n              xMinus: { text: 'L', faceColor: '#ffff00', faceRotation: 270 },\n              yPlus: {\n                text: 'P',\n                faceColor: '#00ffff',\n                fontColor: 'white',\n                faceRotation: 180,\n              },\n              yMinus: { text: 'A', faceColor: '#00ffff', fontColor: 'white' },\n              zPlus: { text: 'S' },\n              zMinus: { text: 'I' },\n            },\n            defaultStyle: {\n              fontStyle: 'bold',\n              fontFamily: 'Arial',\n              fontColor: 'black',\n              fontSizeScale: (res) => res / 2,\n              faceColor: '#0000ff',\n              edgeThickness: 0.1,\n              edgeColor: 'black',\n              resolution: 400,\n            },\n          },\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.AXES]: {},\n          [OrientationMarkerTool.OVERLAY_MARKER_TYPES.CUSTOM]: {\n            polyDataURL:\n              'https://raw.githubusercontent.com/Slicer/Slicer/80ad0a04dacf134754459557bf2638c63f3d1d1b/Base/Logic/Resources/OrientationMarkers/Human.vtp',\n          },\n        },\n      },\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n    this.orientationMarkers = {};\n    this.configuration_invalidated = true;\n  }\n\n  onSetToolEnabled = (): void => {\n    this.initViewports();\n    this.configuration_invalidated = true;\n  };\n\n  onSetToolActive = (): void => {\n    this.initViewports();\n  };\n\n  onSetToolDisabled = (): void => {\n    this.cleanUpData();\n  };\n\n  private cleanUpData() {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n    const viewports = renderingEngine.getViewports();\n\n    viewports.forEach((viewport) => {\n      const orientationMarker = this.orientationMarkers[viewport.id];\n      if (!orientationMarker) {\n        return;\n      }\n\n      const { actor, orientationWidget } = orientationMarker;\n      orientationWidget?.setEnabled(false);\n      orientationWidget?.delete();\n      actor?.delete();\n\n      const renderWindow = viewport\n        .getRenderingEngine()\n        .offscreenMultiRenderWindow.getRenderWindow();\n      renderWindow.render();\n      viewport.getRenderingEngine().render();\n\n      delete this.orientationMarkers[viewport.id];\n    });\n  }\n\n  private initViewports() {\n    const renderingEngines = getRenderingEngines();\n    const renderingEngine = renderingEngines[0];\n\n    if (!renderingEngine) {\n      return;\n    }\n\n    let viewports = renderingEngine.getViewports();\n    viewports = filterViewportsWithToolEnabled(viewports, this.getToolName());\n    viewports.forEach((viewport) => this.addAxisActorInViewport(viewport));\n  }\n\n  async addAxisActorInViewport(viewport) {\n    const viewportId = viewport.id;\n    const type = this.configuration.overlayMarkerType;\n\n    const overlayConfiguration = this.configuration.overlayConfiguration[type];\n\n    if (this.orientationMarkers[viewportId]) {\n      const { actor, orientationWidget } = this.orientationMarkers[viewportId];\n      // remove the previous one\n      viewport.getRenderer().removeActor(actor);\n      orientationWidget.setEnabled(false);\n    }\n\n    let actor;\n    if (type === 1) {\n      actor = this.createAnnotationCube(overlayConfiguration);\n    } else if (type === 2) {\n      actor = vtkAxesActor.newInstance();\n    } else if (type === 3) {\n      actor = await this.createCustomActor();\n    }\n\n    const renderer = viewport.getRenderer();\n    const renderWindow = viewport\n      .getRenderingEngine()\n      .offscreenMultiRenderWindow.getRenderWindow();\n\n    const {\n      enabled,\n      viewportCorner,\n      viewportSize,\n      minPixelSize,\n      maxPixelSize,\n    } = this.configuration.orientationWidget;\n\n    const orientationWidget = vtkOrientationMarkerWidget.newInstance({\n      actor,\n      interactor: renderWindow.getInteractor(),\n      parentRenderer: renderer,\n    });\n\n    orientationWidget.setEnabled(enabled);\n    orientationWidget.setViewportCorner(viewportCorner);\n    orientationWidget.setViewportSize(viewportSize);\n    orientationWidget.setMinPixelSize(minPixelSize);\n    orientationWidget.setMaxPixelSize(maxPixelSize);\n\n    orientationWidget.updateMarkerOrientation();\n    this.orientationMarkers[viewportId] = {\n      orientationWidget,\n      actor,\n    };\n    renderWindow.render();\n    viewport.getRenderingEngine().render();\n\n    this.configuration_invalidated = false;\n  }\n\n  private async createCustomActor() {\n    const url =\n      this.configuration.overlayConfiguration[OverlayMarkerType.CUSTOM]\n        .polyDataURL;\n\n    const response = await fetch(url);\n    const arrayBuffer = await response.arrayBuffer();\n    const vtpReader = vtkXMLPolyDataReader.newInstance();\n    vtpReader.parseAsArrayBuffer(arrayBuffer);\n    vtpReader.update();\n\n    const polyData = vtkPolyData.newInstance();\n    polyData.shallowCopy(vtpReader.getOutputData());\n    polyData.getPointData().setActiveScalars('Color');\n    const mapper = vtkMapper.newInstance();\n    mapper.setInputData(polyData);\n    mapper.setColorModeToDirectScalars();\n\n    const actor = vtkActor.newInstance();\n    actor.setMapper(mapper);\n    actor.rotateZ(180);\n    return actor;\n  }\n\n  private createAnnotationCube(overlayConfiguration: any) {\n    const actor = vtkAnnotatedCubeActor.newInstance();\n    actor.setDefaultStyle({ ...overlayConfiguration.defaultStyle });\n    actor.setXPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.xPlus,\n    });\n    actor.setXMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.xMinus,\n    });\n    actor.setYPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.yPlus,\n    });\n    actor.setYMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.yMinus,\n    });\n    actor.setZPlusFaceProperty({\n      ...overlayConfiguration.faceProperties.zPlus,\n    });\n    actor.setZMinusFaceProperty({\n      ...overlayConfiguration.faceProperties.zMinus,\n    });\n    return actor;\n  }\n\n  async createAnnotatedCubeActor() {\n    const axes = vtkAnnotatedCubeActor.newInstance();\n    const { faceProperties, defaultStyle } = this.configuration.annotatedCube;\n\n    axes.setDefaultStyle(defaultStyle);\n\n    Object.keys(faceProperties).forEach((key) => {\n      const methodName = `set${\n        key.charAt(0).toUpperCase() + key.slice(1)\n      }FaceProperty`;\n      axes[methodName](faceProperties[key]);\n    });\n\n    return axes;\n  }\n}\n\nOrientationMarkerTool.toolName = 'OrientationMarker';\nexport default OrientationMarkerTool;\n","import {\n  cache,\n  getEnabledElement,\n  utilities as csUtils,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\n\nimport { BaseTool } from '../base';\nimport { PublicToolProps, ToolProps, EventTypes } from '../../types';\n\nimport { triggerSegmentationDataModified } from '../../stateManagement/segmentation/triggerSegmentationEvents';\nimport {\n  segmentLocking,\n  activeSegmentation,\n  segmentIndex as segmentIndexController,\n} from '../../stateManagement/segmentation';\nimport floodFill from '../../utilities/segmentation/floodFill';\nimport { getSegmentation } from '../../stateManagement/segmentation/segmentationState';\nimport { FloodFillResult, FloodFillGetter } from '../../types';\nimport { LabelmapSegmentationData } from '../../types/LabelmapTypes';\n\nconst { transformWorldToIndex, isEqual } = csUtils;\n\ntype PaintFillToolHelpers = {\n  getScalarDataPositionFromPlane: (x: number, y: number) => number;\n  getLabelValue: (x: number, y: number, z: number) => number;\n  floodFillGetter: FloodFillGetter;\n  inPlaneSeedPoint: Types.Point2;\n  fixedDimensionValue: number;\n};\n\n/**\n * Tool for manipulating segmentation data by filling in regions. It acts on the\n * active Segmentation on the viewport (enabled element) and requires an active\n * segmentation to be already present. By default it will fill a given labelled\n * or empty region with the the activeSegmentIndex label. You can use the\n * SegmentationModule to set the active segmentation and segmentIndex.\n */\nclass PaintFillTool extends BaseTool {\n  static toolName;\n\n  constructor(\n    toolProps: PublicToolProps = {},\n    defaultToolProps: ToolProps = {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n    }\n  ) {\n    super(toolProps, defaultToolProps);\n  }\n\n  /**\n   * Based on the current position of the mouse and the enabledElement, it\n   * finds the active segmentation info and use it for the current tool.\n   *\n   * @param evt -  EventTypes.NormalizedMouseEventType\n   * @returns The annotation object.\n   *\n   */\n  preMouseDownCallback = (evt: EventTypes.InteractionEventType): boolean => {\n    const eventDetail = evt.detail;\n    const { currentPoints, element } = eventDetail;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal } = camera;\n    const toolGroupId = this.toolGroupId;\n\n    const activeSegmentationRepresentation =\n      activeSegmentation.getActiveSegmentationRepresentation(toolGroupId);\n    if (!activeSegmentationRepresentation) {\n      throw new Error(\n        'No active segmentation detected, create one before using scissors tool'\n      );\n    }\n\n    const { segmentationId, type } = activeSegmentationRepresentation;\n    const segmentIndex =\n      segmentIndexController.getActiveSegmentIndex(segmentationId);\n    const segmentsLocked: number[] =\n      segmentLocking.getLockedSegments(segmentationId);\n    const { representationData } = getSegmentation(segmentationId);\n\n    const { volumeId } = representationData[type] as LabelmapSegmentationData;\n    const segmentation = cache.getVolume(volumeId);\n    const { dimensions, direction } = segmentation;\n    const scalarData = segmentation.getScalarData();\n\n    const index = transformWorldToIndex(segmentation.imageData, worldPos);\n\n    const fixedDimension = this.getFixedDimension(\n      viewPlaneNormal,\n      direction as number[]\n    );\n\n    if (fixedDimension === undefined) {\n      console.warn('Oblique paint fill not yet supported');\n      return;\n    }\n\n    const {\n      floodFillGetter,\n      getLabelValue,\n      getScalarDataPositionFromPlane,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    } = this.generateHelpers(scalarData, dimensions, index, fixedDimension);\n\n    // Check if within volume\n    if (\n      index[0] < 0 ||\n      index[0] >= dimensions[0] ||\n      index[1] < 0 ||\n      index[1] >= dimensions[1] ||\n      index[2] < 0 ||\n      index[2] >= dimensions[2]\n    ) {\n      // Clicked outside segmentation volume, no good way to fill.\n      return;\n    }\n    //@ts-ignore // todo type\n    const clickedLabelValue = getLabelValue(index[0], index[1], index[2]);\n\n    if (segmentsLocked.includes(clickedLabelValue)) {\n      // Label is locked, cannot fill.\n      return;\n    }\n\n    const floodFillResult = floodFill(floodFillGetter, inPlaneSeedPoint);\n\n    const { flooded } = floodFillResult;\n\n    flooded.forEach((index) => {\n      const scalarDataPosition = getScalarDataPositionFromPlane(\n        index[0],\n        index[1]\n      );\n\n      scalarData[scalarDataPosition] = segmentIndex;\n    });\n\n    const framesModified = this.getFramesModified(\n      fixedDimension,\n      fixedDimensionValue,\n      floodFillResult\n    );\n\n    triggerSegmentationDataModified(segmentationId, framesModified);\n\n    return true;\n  };\n\n  private getFramesModified = (\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    floodFillResult: FloodFillResult\n  ): number[] => {\n    const { boundaries } = floodFillResult;\n\n    if (fixedDimension === 2) {\n      return [fixedDimensionValue];\n    }\n\n    // For both the fixedDimensions being 0 and 1, the Z (stack) direction is j,\n    // so we don't need to find min/max i.\n\n    let minJ = Infinity;\n    let maxJ = -Infinity;\n\n    for (let b = 0; b < boundaries.length; b++) {\n      const j = boundaries[b][1];\n\n      if (j < minJ) {\n        minJ = j;\n      }\n      if (j > maxJ) {\n        maxJ = j;\n      }\n    }\n\n    const framesModified = [];\n\n    for (let frame = minJ; frame <= maxJ; frame++) {\n      framesModified.push(frame);\n    }\n\n    return framesModified;\n  };\n\n  private generateHelpers = (\n    scalarData: Float32Array | Uint8Array | Uint16Array | Int16Array,\n    dimensions: Types.Point3,\n    seedIndex3D: Types.Point3,\n    fixedDimension = 2\n  ): PaintFillToolHelpers => {\n    let fixedDimensionValue: number;\n    let inPlaneSeedPoint: Types.Point2;\n\n    switch (fixedDimension) {\n      case 0:\n        fixedDimensionValue = seedIndex3D[0]; // X\n        inPlaneSeedPoint = [seedIndex3D[1], seedIndex3D[2]]; // Y,Z\n        break;\n      case 1:\n        fixedDimensionValue = seedIndex3D[1]; // Y\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[2]]; // X,Z\n        break;\n      case 2:\n        fixedDimensionValue = seedIndex3D[2]; // Z\n        inPlaneSeedPoint = [seedIndex3D[0], seedIndex3D[1]]; // X, Y\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    const getScalarDataPosition = (x: number, y: number, z: number): number => {\n      return z * dimensions[1] * dimensions[0] + y * dimensions[0] + x;\n    };\n\n    const getLabelValue = (x: number, y: number, z: number): number => {\n      return scalarData[getScalarDataPosition(x, y, z)];\n    };\n\n    const floodFillGetter = this.generateFloodFillGetter(\n      dimensions,\n      fixedDimension,\n      fixedDimensionValue,\n      getLabelValue\n    );\n\n    const getScalarDataPositionFromPlane =\n      this.generateGetScalarDataPositionFromPlane(\n        getScalarDataPosition,\n        fixedDimension,\n        fixedDimensionValue\n      );\n\n    return {\n      getScalarDataPositionFromPlane,\n      getLabelValue,\n      floodFillGetter,\n      inPlaneSeedPoint,\n      fixedDimensionValue,\n    };\n  };\n\n  private getFixedDimension(\n    viewPlaneNormal: Types.Point3,\n    direction: number[]\n  ): number | undefined {\n    const xDirection = direction.slice(0, 3);\n    const yDirection = direction.slice(3, 6);\n    const zDirection = direction.slice(6, 9);\n\n    const absoluteOfViewPlaneNormal = [\n      Math.abs(viewPlaneNormal[0]),\n      Math.abs(viewPlaneNormal[1]),\n      Math.abs(viewPlaneNormal[2]),\n    ];\n\n    const absoluteOfXDirection = [\n      Math.abs(xDirection[0]),\n      Math.abs(xDirection[1]),\n      Math.abs(xDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfXDirection)) {\n      return 0;\n    }\n\n    const absoluteOfYDirection = [\n      Math.abs(yDirection[0]),\n      Math.abs(yDirection[1]),\n      Math.abs(yDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfYDirection)) {\n      return 1;\n    }\n\n    const absoluteOfZDirection = [\n      Math.abs(zDirection[0]),\n      Math.abs(zDirection[1]),\n      Math.abs(zDirection[2]),\n    ];\n\n    if (isEqual(absoluteOfViewPlaneNormal, absoluteOfZDirection)) {\n      return 2;\n    }\n  }\n\n  // Define a getter for the fill routine to access the working label map.\n  private generateFloodFillGetter = (\n    dimensions: Types.Point3,\n    fixedDimension: number,\n    fixedDimensionValue: number,\n    getLabelValue: PaintFillToolHelpers['getLabelValue']\n  ): FloodFillGetter => {\n    let floodFillGetter;\n\n    // In each helper we first check if out of bounds, as the flood filler\n    // doesn't know about the dimensions of the data structure that sits on top\n    // of the scalarData. E.g. if cols is 10, (0,1) and (10, 0) would point to\n    // the same position in these getters.\n\n    switch (fixedDimension) {\n      case 0:\n        floodFillGetter = (y, z) => {\n          if (y >= dimensions[1] || y < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(fixedDimensionValue, y, z);\n        };\n        break;\n\n      case 1:\n        floodFillGetter = (x, z) => {\n          if (x >= dimensions[0] || x < 0 || z >= dimensions[2] || z < 0) {\n            return;\n          }\n\n          return getLabelValue(x, fixedDimensionValue, z);\n        };\n        break;\n\n      case 2:\n        floodFillGetter = (x, y) => {\n          if (x >= dimensions[0] || x < 0 || y >= dimensions[1] || y < 0) {\n            return;\n          }\n\n          return getLabelValue(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return floodFillGetter;\n  };\n\n  private generateGetScalarDataPositionFromPlane = (\n    getScalarDataPosition: (x: number, y: number, z: number) => number,\n    fixedDimension: number,\n    fixedDimensionValue: number\n  ): PaintFillToolHelpers['getScalarDataPositionFromPlane'] => {\n    let getScalarDataPositionFromPlane;\n\n    switch (fixedDimension) {\n      case 0:\n        getScalarDataPositionFromPlane = (y, z) => {\n          return getScalarDataPosition(fixedDimensionValue, y, z);\n        };\n        break;\n      case 1:\n        getScalarDataPositionFromPlane = (x, z) => {\n          return getScalarDataPosition(x, fixedDimensionValue, z);\n        };\n        break;\n      case 2:\n        getScalarDataPositionFromPlane = (x, y) => {\n          return getScalarDataPosition(x, y, fixedDimensionValue);\n        };\n        break;\n      default:\n        throw new Error(`Invalid fixedDimension: ${fixedDimension}`);\n    }\n\n    return getScalarDataPositionFromPlane;\n  };\n}\n\nPaintFillTool.toolName = 'PaintFill';\nexport default PaintFillTool;\n","import { vec3, vec2 } from 'gl-matrix';\n\nimport {\n  getEnabledElement,\n  triggerEvent,\n  eventTarget,\n  utilities as csUtils,\n  cache,\n} from '@cornerstonejs/core';\nimport type { Types } from '@cornerstonejs/core';\nimport { AnnotationTool } from '../base';\n\nimport throttle from '../../utilities/throttle';\nimport {\n  addAnnotation,\n  getAnnotations,\n  removeAnnotation,\n} from '../../stateManagement';\nimport {\n  drawHandles as drawHandlesSvg,\n  drawRedactionRect as drawRedactionRectSvg,\n} from '../../drawingSvg';\nimport { state } from '../../store';\nimport { Events } from '../../enums';\nimport { getViewportIdsWithToolToRender } from '../../utilities/viewportFilters';\nimport * as rectangle from '../../utilities/math/rectangle';\nimport {\n  resetElementCursor,\n  hideElementCursor,\n} from '../../cursors/elementCursor';\nimport triggerAnnotationRenderForViewportIds from '../../utilities/triggerAnnotationRenderForViewportIds';\n\nimport { EventTypes, SVGDrawingHelper } from '../../types';\nimport { StyleSpecifier } from '../../types/AnnotationStyle';\nimport getWorldWidthAndHeightFromTwoPoints from '../../utilities/planar/getWorldWidthAndHeightFromTwoPoints';\nimport { VideoRedactionAnnotation } from '../../types/ToolSpecificAnnotationTypes';\n\nclass VideoRedactionTool extends AnnotationTool {\n  _throttledCalculateCachedStats: any;\n  editData: {\n    annotation: any;\n    viewportUIDsToRender: string[];\n    handleIndex?: number;\n    newAnnotation?: boolean;\n    hasMoved?: boolean;\n  } | null;\n  _configuration: any;\n  isDrawing: boolean;\n  isHandleOutsideImage: boolean;\n\n  constructor(toolConfiguration = {}) {\n    super(toolConfiguration, {\n      supportedInteractionTypes: ['Mouse', 'Touch'],\n      configuration: { shadow: true, preventHandleOutsideImage: false },\n    });\n\n    this._throttledCalculateCachedStats = throttle(\n      this._calculateCachedStats,\n      100,\n      { trailing: true }\n    );\n  }\n\n  addNewAnnotation = (\n    evt: EventTypes.InteractionEventType\n  ): VideoRedactionAnnotation => {\n    const eventData = evt.detail;\n    const { currentPoints, element } = eventData;\n    const worldPos = currentPoints.world;\n\n    const enabledElement = getEnabledElement(element);\n    const { viewport, renderingEngine } = enabledElement;\n\n    this.isDrawing = true;\n\n    const camera = viewport.getCamera();\n    const { viewPlaneNormal, viewUp } = camera;\n    const referencedImageId = this.getReferencedImageId(\n      viewport,\n      worldPos,\n      viewPlaneNormal,\n      viewUp\n    );\n\n    const annotation = {\n      metadata: {\n        // We probably just want a different type of data here, hacking this\n        // together for now.\n        viewPlaneNormal: <Types.Point3>[0, 0, 1],\n        viewUp: <Types.Point3>[0, 1, 0],\n        FrameOfReferenceUID: viewport.getFrameOfReferenceUID(),\n        referencedImageId,\n        toolName: this.getToolName(),\n      },\n      data: {\n        invalidated: true,\n        handles: {\n          points: [\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n            <Types.Point3>[...worldPos],\n          ],\n          activeHandleIndex: null,\n        },\n        cachedStats: {},\n        active: true,\n      },\n    };\n\n    addAnnotation(annotation, element);\n\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n      handleIndex: 3,\n      newAnnotation: true,\n      hasMoved: false,\n    };\n    this._activateDraw(element);\n\n    hideElementCursor(element);\n\n    evt.preventDefault();\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    return annotation;\n  };\n\n  getHandleNearImagePoint = (element, annotation, canvasCoords, proximity) => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    for (let i = 0; i < points.length; i++) {\n      const point = points[i];\n      const toolDataCanvasCoordinate = viewport.worldToCanvas(point);\n\n      const near =\n        vec2.distance(canvasCoords, <vec2>toolDataCanvasCoordinate) < proximity;\n\n      if (near === true) {\n        data.handles.activeHandleIndex = i;\n        return point;\n      }\n    }\n\n    data.handles.activeHandleIndex = null;\n  };\n\n  isPointNearTool = (element, annotation, canvasCoords, proximity) => {\n    const enabledElement = getEnabledElement(element);\n    const { viewport } = enabledElement;\n\n    const { data } = annotation;\n    const { points } = data.handles;\n\n    const canvasPoint1 = viewport.worldToCanvas(points[0]);\n    const canvasPoint2 = viewport.worldToCanvas(points[3]);\n\n    const rect = this._getRectangleImageCoordinates([\n      canvasPoint1,\n      canvasPoint2,\n    ]);\n\n    const point = [canvasCoords[0], canvasCoords[1]] as Types.Point2;\n    const { left, top, width, height } = rect;\n\n    const distanceToPoint = rectangle.distanceToPoint(\n      [left, top, width, height],\n      point\n    );\n\n    if (distanceToPoint <= proximity) {\n      return true;\n    }\n  };\n\n  toolSelectedCallback = (evt, annotation, interactionType = 'mouse') => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { data } = annotation;\n\n    data.active = true;\n\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n    };\n\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    evt.preventDefault();\n  };\n\n  handleSelectedCallback = (\n    evt,\n    annotation,\n    handle,\n    interactionType = 'mouse'\n  ) => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n    const { data } = annotation;\n\n    data.active = true;\n\n    let movingTextBox = false;\n    let handleIndex;\n\n    if (handle.worldPosition) {\n      movingTextBox = true;\n    } else {\n      handleIndex = data.handles.points.findIndex((p) => p === handle);\n    }\n\n    // Find viewports to render on drag.\n    const viewportUIDsToRender = getViewportIdsWithToolToRender(\n      element,\n      this.getToolName(),\n      false\n    );\n\n    this.editData = {\n      annotation,\n      viewportUIDsToRender,\n      handleIndex,\n    };\n    this._activateModify(element);\n\n    hideElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    evt.preventDefault();\n  };\n\n  _mouseUpCallback = (evt) => {\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { annotation, viewportUIDsToRender, newAnnotation, hasMoved } =\n      this.editData;\n    const { data } = annotation;\n\n    if (newAnnotation && !hasMoved) {\n      return;\n    }\n\n    data.active = false;\n    data.handles.activeHandleIndex = null;\n\n    this._deactivateModify(element);\n    this._deactivateDraw(element);\n\n    resetElementCursor(element);\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    this.editData = null;\n    this.isDrawing = false;\n\n    if (\n      this.isHandleOutsideImage &&\n      this.configuration.preventHandleOutsideImage\n    ) {\n      removeAnnotation(annotation.annotationUID);\n    }\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n  };\n\n  _mouseDragCallback = (evt) => {\n    this.isDrawing = true;\n\n    const eventData = evt.detail;\n    const { element } = eventData;\n\n    const { annotation, viewportUIDsToRender, handleIndex } = this.editData;\n    const { data } = annotation;\n\n    if (handleIndex === undefined) {\n      // Moving tool, so move all points by the world points delta\n      const { deltaPoints } = eventData;\n      const worldPosDelta = deltaPoints.world;\n\n      const { points } = data.handles;\n\n      points.forEach((point) => {\n        point[0] += worldPosDelta[0];\n        point[1] += worldPosDelta[1];\n        point[2] += worldPosDelta[2];\n      });\n      data.invalidated = true;\n    } else {\n      // Moving handle.\n      const { currentPoints } = eventData;\n      const enabledElement = getEnabledElement(element);\n      const { worldToCanvas, canvasToWorld } = enabledElement.viewport;\n      const worldPos = currentPoints.world;\n\n      const { points } = data.handles;\n\n      // Move this handle.\n      points[handleIndex] = [...worldPos];\n\n      let bottomLeftCanvas;\n      let bottomRightCanvas;\n      let topLeftCanvas;\n      let topRightCanvas;\n\n      let bottomLeftWorld;\n      let bottomRightWorld;\n      let topLeftWorld;\n      let topRightWorld;\n\n      switch (handleIndex) {\n        case 0:\n        case 3:\n          // Moving bottomLeft or topRight\n\n          bottomLeftCanvas = worldToCanvas(points[0]);\n          topRightCanvas = worldToCanvas(points[3]);\n\n          bottomRightCanvas = [topRightCanvas[0], bottomLeftCanvas[1]];\n          topLeftCanvas = [bottomLeftCanvas[0], topRightCanvas[1]];\n\n          bottomRightWorld = canvasToWorld(bottomRightCanvas);\n          topLeftWorld = canvasToWorld(topLeftCanvas);\n\n          points[1] = bottomRightWorld;\n          points[2] = topLeftWorld;\n\n          break;\n        case 1:\n        case 2:\n          // Moving bottomRight or topLeft\n          bottomRightCanvas = worldToCanvas(points[1]);\n          topLeftCanvas = worldToCanvas(points[2]);\n\n          bottomLeftCanvas = <Types.Point2>[\n            topLeftCanvas[0],\n            bottomRightCanvas[1],\n          ];\n          topRightCanvas = <Types.Point2>[\n            bottomRightCanvas[0],\n            topLeftCanvas[1],\n          ];\n\n          bottomLeftWorld = canvasToWorld(bottomLeftCanvas);\n          topRightWorld = canvasToWorld(topRightCanvas);\n\n          points[0] = bottomLeftWorld;\n          points[3] = topRightWorld;\n\n          break;\n      }\n      data.invalidated = true;\n    }\n\n    this.editData.hasMoved = true;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n  };\n\n  cancel(element) {\n    // If it is mid-draw or mid-modify\n    if (!this.isDrawing) {\n      return;\n    }\n    this.isDrawing = false;\n    this._deactivateDraw(element);\n    this._deactivateModify(element);\n    resetElementCursor(element);\n\n    const { annotation, viewportUIDsToRender } = this.editData;\n\n    const { data } = annotation;\n\n    data.active = false;\n    data.handles.activeHandleIndex = null;\n\n    const enabledElement = getEnabledElement(element);\n    const { renderingEngine } = enabledElement;\n\n    triggerAnnotationRenderForViewportIds(\n      renderingEngine,\n      viewportUIDsToRender\n    );\n\n    this.editData = null;\n    return annotation.metadata.annotationUID;\n  }\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateDraw = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _deactivateDraw = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_MOVE, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Add event handlers for the modify event loop, and prevent default event prapogation.\n   */\n  _activateModify = (element) => {\n    state.isInteractingWithTool = true;\n\n    element.addEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.addEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.addEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.addEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.addEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  /**\n   * Remove event handlers for the modify event loop, and enable default event propagation.\n   */\n  _deactivateModify = (element) => {\n    state.isInteractingWithTool = false;\n\n    element.removeEventListener(Events.MOUSE_UP, this._mouseUpCallback);\n    element.removeEventListener(Events.MOUSE_DRAG, this._mouseDragCallback);\n    element.removeEventListener(Events.MOUSE_CLICK, this._mouseUpCallback);\n\n    element.removeEventListener(Events.TOUCH_END, this._mouseUpCallback);\n    element.removeEventListener(Events.TOUCH_DRAG, this._mouseDragCallback);\n  };\n\n  renderAnnotation = (\n    enabledElement: Types.IEnabledElement,\n    svgDrawingHelper: SVGDrawingHelper\n  ): boolean => {\n    const renderStatus = false;\n    const { viewport } = enabledElement;\n    const { element } = viewport;\n\n    let annotations = getAnnotations(this.getToolName(), element);\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    annotations = this.filterInteractableAnnotationsForElement(\n      element,\n      annotations\n    );\n\n    if (!annotations?.length) {\n      return renderStatus;\n    }\n\n    const targetId = this.getTargetId(viewport);\n    const renderingEngine = viewport.getRenderingEngine();\n\n    const styleSpecifier: StyleSpecifier = {\n      toolGroupId: this.toolGroupId,\n      toolName: this.getToolName(),\n      viewportId: enabledElement.viewport.id,\n    };\n\n    for (let i = 0; i < annotations.length; i++) {\n      const annotation = annotations[i];\n      const { annotationUID } = annotation;\n      const toolMetadata = annotation.metadata;\n\n      const data = annotation.data;\n      const { points, activeHandleIndex } = data.handles;\n      const canvasCoordinates = points.map((p) => viewport.worldToCanvas(p));\n\n      const lineWidth = this.getStyle('lineWidth', styleSpecifier, annotation);\n      const lineDash = this.getStyle('lineDash', styleSpecifier, annotation);\n      const color = this.getStyle('color', styleSpecifier, annotation);\n      // If rendering engine has been destroyed while rendering\n      if (!viewport.getRenderingEngine()) {\n        console.warn('Rendering Engine has been destroyed');\n        return;\n      }\n\n      let activeHandleCanvasCoords;\n\n      if (\n        // !isToolDataLocked(toolData) &&\n        !this.editData &&\n        activeHandleIndex !== null\n      ) {\n        // Not locked or creating and hovering over handle, so render handle.\n        activeHandleCanvasCoords = [canvasCoordinates[activeHandleIndex]];\n      }\n\n      if (activeHandleCanvasCoords) {\n        const handleGroupUID = '0';\n\n        drawHandlesSvg(\n          svgDrawingHelper,\n          annotationUID,\n          handleGroupUID,\n          activeHandleCanvasCoords,\n          {\n            color,\n          }\n        );\n      }\n\n      const rectangleUID = '0';\n      drawRedactionRectSvg(\n        svgDrawingHelper,\n        annotationUID,\n        rectangleUID,\n        canvasCoordinates[0],\n        canvasCoordinates[3],\n        {\n          color: 'black',\n          lineDash,\n          lineWidth,\n        }\n      );\n    }\n  };\n\n  _getRectangleImageCoordinates = (\n    points: Array<Types.Point2>\n  ): {\n    left: number;\n    top: number;\n    width: number;\n    height: number;\n  } => {\n    const [point0, point1] = points;\n\n    return {\n      left: Math.min(point0[0], point1[0]),\n      top: Math.min(point0[1], point1[1]),\n      width: Math.abs(point0[0] - point1[0]),\n      height: Math.abs(point0[1] - point1[1]),\n    };\n  };\n\n  _getImageVolumeFromTargetUID(targetUID, renderingEngine) {\n    let imageVolume, viewport;\n    if (targetUID.startsWith('stackTarget')) {\n      const coloneIndex = targetUID.indexOf(':');\n      const viewportUID = targetUID.substring(coloneIndex + 1);\n      const viewport = renderingEngine.getViewport(viewportUID);\n      imageVolume = viewport.getImageData();\n    } else {\n      imageVolume = cache.getVolume(targetUID);\n    }\n\n    return { imageVolume, viewport };\n  }\n\n  /**\n   * _calculateCachedStats - For each volume in the frame of reference that a\n   * tool instance in particular viewport defines as its target volume, find the\n   * volume coordinates (i,j,k) being probed by the two corners. One of i,j or k\n   * will be constant across the two points. In the other two directions iterate\n   * over the voxels and calculate the first and second-order statistics.\n   *\n   * @param {object} data - The toolData tool-specific data.\n   * @param {Array<number>} viewPlaneNormal The normal vector of the camera.\n   * @param {Array<number>} viewUp The viewUp vector of the camera.\n   */\n  _calculateCachedStats = (\n    annotation,\n    viewPlaneNormal,\n    viewUp,\n    renderingEngine,\n    enabledElement\n  ) => {\n    const { data } = annotation;\n    const { viewportUID, renderingEngineUID, sceneUID } = enabledElement;\n\n    const worldPos1 = data.handles.points[0];\n    const worldPos2 = data.handles.points[3];\n    const { cachedStats } = data;\n\n    const targetUIDs = Object.keys(cachedStats);\n\n    for (let i = 0; i < targetUIDs.length; i++) {\n      const targetUID = targetUIDs[i];\n\n      const { imageVolume } = this._getImageVolumeFromTargetUID(\n        targetUID,\n        renderingEngine\n      );\n\n      const {\n        dimensions,\n        scalarData,\n        vtkImageData: imageData,\n        metadata,\n      } = imageVolume;\n      const worldPos1Index = vec3.fromValues(0, 0, 0);\n      const worldPos2Index = vec3.fromValues(0, 0, 0);\n\n      imageData.worldToIndexVec3(worldPos1, worldPos1Index);\n\n      worldPos1Index[0] = Math.floor(worldPos1Index[0]);\n      worldPos1Index[1] = Math.floor(worldPos1Index[1]);\n      worldPos1Index[2] = Math.floor(worldPos1Index[2]);\n\n      imageData.worldToIndexVec3(worldPos2, worldPos2Index);\n\n      worldPos2Index[0] = Math.floor(worldPos2Index[0]);\n      worldPos2Index[1] = Math.floor(worldPos2Index[1]);\n      worldPos2Index[2] = Math.floor(worldPos2Index[2]);\n\n      // Check if one of the indexes are inside the volume, this then gives us\n      // Some area to do stats over.\n\n      if (this._isInsideVolume(worldPos1Index, worldPos2Index, dimensions)) {\n        this.isHandleOutsideImage = false;\n\n        // Calculate index bounds to iterate over\n\n        const iMin = Math.min(worldPos1Index[0], worldPos2Index[0]);\n        const iMax = Math.max(worldPos1Index[0], worldPos2Index[0]);\n\n        const jMin = Math.min(worldPos1Index[1], worldPos2Index[1]);\n        const jMax = Math.max(worldPos1Index[1], worldPos2Index[1]);\n\n        const kMin = Math.min(worldPos1Index[2], worldPos2Index[2]);\n        const kMax = Math.max(worldPos1Index[2], worldPos2Index[2]);\n\n        const { worldWidth, worldHeight } = getWorldWidthAndHeightFromTwoPoints(\n          viewPlaneNormal,\n          viewUp,\n          worldPos1,\n          worldPos2\n        );\n\n        const area = worldWidth * worldHeight;\n\n        let count = 0;\n        let mean = 0;\n        let stdDev = 0;\n\n        const yMultiple = dimensions[0];\n        const zMultiple = dimensions[0] * dimensions[1];\n\n        // This is a triple loop, but one of these 3 values will be constant\n        // In the planar view.\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              count++;\n              mean += value;\n            }\n          }\n        }\n\n        mean /= count;\n\n        for (let k = kMin; k <= kMax; k++) {\n          for (let j = jMin; j <= jMax; j++) {\n            for (let i = iMin; i <= iMax; i++) {\n              const value = scalarData[k * zMultiple + j * yMultiple + i];\n\n              const valueMinusMean = value - mean;\n\n              stdDev += valueMinusMean * valueMinusMean;\n            }\n          }\n        }\n\n        stdDev /= count;\n        stdDev = Math.sqrt(stdDev);\n\n        cachedStats[targetUID] = {\n          Modality: metadata.Modality,\n          area,\n          mean,\n          stdDev,\n        };\n      } else {\n        this.isHandleOutsideImage = true;\n        cachedStats[targetUID] = {\n          Modality: metadata.Modality,\n        };\n      }\n    }\n\n    data.invalidated = false;\n\n    // Dispatching measurement modified\n    const eventType = Events.ANNOTATION_MODIFIED;\n\n    const eventDetail = {\n      annotation,\n      viewportUID,\n      renderingEngineUID,\n      sceneUID: sceneUID,\n    };\n    triggerEvent(eventTarget, eventType, eventDetail);\n\n    return cachedStats;\n  };\n\n  _isInsideVolume = (index1, index2, dimensions) => {\n    return (\n      csUtils.indexWithinDimensions(index1, dimensions) &&\n      csUtils.indexWithinDimensions(index2, dimensions)\n    );\n  };\n\n  _getTargetStackUID(viewport) {\n    return `stackTarget:${viewport.uid}`;\n  }\n\n  _getTargetVolumeUID = (scene) => {\n    if (this.configuration.volumeUID) {\n      return this.configuration.volumeUID;\n    }\n\n    const volumeActors = scene.getVolumeActors();\n\n    if (!volumeActors && !volumeActors.length) {\n      // No stack to scroll through\n      return;\n    }\n\n    return volumeActors[0].uid;\n  };\n}\n\nVideoRedactionTool.toolName = 'VideoRedaction';\nexport default VideoRedactionTool;\n"],"names":["root","factory","exports","module","require","define","amd","self","__WEBPACK_EXTERNAL_MODULE__976__","__WEBPACK_EXTERNAL_MODULE__953__","__WEBPACK_EXTERNAL_MODULE__441__","__WEBPACK_EXTERNAL_MODULE__795__","__WEBPACK_EXTERNAL_MODULE__396__","__WEBPACK_EXTERNAL_MODULE__348__","__WEBPACK_EXTERNAL_MODULE__70__","__WEBPACK_EXTERNAL_MODULE__785__","__WEBPACK_EXTERNAL_MODULE__127__","__WEBPACK_EXTERNAL_MODULE__474__","__WEBPACK_EXTERNAL_MODULE__610__","__WEBPACK_EXTERNAL_MODULE__448__","__WEBPACK_EXTERNAL_MODULE__807__","__WEBPACK_EXTERNAL_MODULE__847__","__WEBPACK_EXTERNAL_MODULE__518__","__WEBPACK_EXTERNAL_MODULE__744__","__WEBPACK_EXTERNAL_MODULE__424__","__WEBPACK_EXTERNAL_MODULE__614__","HASH_UNDEFINED","MAX_SAFE_INTEGER","argsTag","boolTag","dateTag","funcTag","genTag","mapTag","numberTag","objectTag","promiseTag","regexpTag","setTag","stringTag","symbolTag","weakMapTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","reFlags","reIsHostCtor","reIsUint","cloneableTags","freeGlobal","g","Object","freeSelf","Function","freeExports","nodeType","freeModule","moduleExports","addMapEntry","map","pair","set","addSetEntry","value","add","arrayReduce","array","iteratee","accumulator","initAccum","index","length","isHostObject","result","toString","e","mapToArray","Array","size","forEach","key","overArg","func","transform","arg","setToArray","uid","arrayProto","prototype","funcProto","objectProto","coreJsData","maskSrcKey","exec","keys","IE_PROTO","funcToString","hasOwnProperty","objectToString","reIsNative","RegExp","call","replace","Buffer","undefined","Symbol","Uint8Array","getPrototype","getPrototypeOf","objectCreate","create","propertyIsEnumerable","splice","nativeGetSymbols","getOwnPropertySymbols","nativeIsBuffer","isBuffer","nativeKeys","DataView","getNative","Map","Promise","Set","WeakMap","nativeCreate","dataViewCtorString","toSource","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","symbolProto","symbolValueOf","valueOf","Hash","entries","this","clear","entry","ListCache","MapCache","Stack","__data__","assignValue","object","objValue","eq","assocIndexOf","baseClone","isDeep","isFull","customizer","stack","isObject","isArr","isArray","constructor","input","initCloneArray","source","copyArray","tag","getTag","isFunc","buffer","slice","copy","cloneBuffer","isPrototype","proto","initCloneObject","copyObject","getSymbols","copySymbols","baseAssign","cloneFunc","symbol","Ctor","cloneArrayBuffer","dataView","byteOffset","byteLength","cloneDataView","typedArray","cloneTypedArray","cloneMap","regexp","lastIndex","cloneRegExp","cloneSet","initCloneByTag","stacked","get","props","keysFunc","symbolsFunc","values","offset","arrayPush","baseGetAllKeys","getAllKeys","arrayEach","subValue","arrayBuffer","newValue","getMapData","type","data","getValue","isFunction","test","baseIsNative","has","pop","push","cache","pairs","LARGE_ARRAY_SIZE","isIndex","other","ArrayBuffer","resolve","ctorString","isArrayLike","isLength","inherited","isObjectLike","isArrayLikeObject","isArguments","n","baseTimes","String","skipIndexes","arrayLikeKeys","baseKeys","INFINITY","reIsDeepProp","reIsPlainProp","reLeadingDot","rePropName","reEscapeChar","symbolToString","pattern","stringToPath","memoize","string","isSymbol","baseToString","match","number","quote","toKey","resolver","TypeError","memoized","args","arguments","apply","Cache","path","defaultValue","isKey","baseGet","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","id","loaded","__webpack_modules__","getter","__esModule","d","a","definition","o","defineProperty","enumerable","globalThis","window","obj","prop","r","toStringTag","nmd","paths","children","Events","_typeof","iterator","_defineProperty","hint","prim","toPrimitive","res","configurable","writable","globalLockedAnnotationsSet","setAnnotationLocked","annotation","locked","detail","makeEventDetail","lockedAnnotationsSet","added","lock","unlock","publish","unlockAllAnnotations","clearLockedAnnotationsSet","getAnnotationsLocked","from","isAnnotationLocked","getAnnotationsLockedCount","checkAndDefineIsLockedProperty","isLocked","descriptor","getOwnPropertyDescriptor","setIsLocked","getIsLocked","isExtensible","shouldDefineIsLockedProperty","freeze","removed","delete","item","triggerEvent","eventTarget","selectedAnnotationUIDs","setAnnotationSelected","annotationUID","deselectAnnotation","preserveSelected","clearSelectionSet","selectAnnotation","getAnnotationsSelected","getAnnotationsSelectedByToolName","toolName","filter","getAnnotation","metadata","isAnnotationSelected","getAnnotationsSelectedCount","selection","selectionSet","globalHiddenAnnotationUIDsSet","setAnnotationVisibility","visible","show","annotationUIDsSet","lastHidden","hide","showAllAnnotations","isAnnotationVisible","checkAndDefineIsVisibleProperty","_annotation$isVisible","isVisible","setIsVisible","getIsVisible","shouldDefineIsVisibleProperty","lastVisible","hidden","FrameOfReferenceSpecificAnnotationManager","annotationGroupSelector","element","enabledElement","getEnabledElement","Error","FrameOfReferenceUID","evt","eventDetail","frameOfReferenceSpecificAnnotations","annotations","invalidated","groupKey","frameOfReferenceUID","frameOfReferenceAnnotations","toolSpecificAnnotations","getAnnotations","total","groupAnnotations","toolAnnotations","findIndex","cloneDeep","state","count","utilities","Enums","_imageVolumeModifiedHandler","defaultFrameOfReferenceSpecificAnnotationManager","svgNodeCache","defaultState","isInteractingWithTool","isMultiPartToolActive","tools","toolGroups","synchronizers","enabledElements","handleRadius","ToolModes","MODES","_ref","toolOptions","toolGroupToolNames","i","includes","mode","defaultManager","getAnnotationManager","setAnnotationManager","annotationManager","resetAnnotationManager","manager","getGroupKey","addAnnotation","csUtils","HTMLDivElement","renderingEngine","viewportId","eventType","renderingEngineId","triggerAnnotationAddedForElement","getToolGroupsWithToolName","viewportsToRender","toolGroup","viewportsInfo","viewportInfo","getEnabledElementByIds","triggerAnnotationAddedForFOR","getNumberOfAnnotations","removeAnnotation","annotationManagerUID","removeAllAnnotations","SegmentationRepresentations","defaultContourConfig","renderOutline","outlineWidthActive","outlineWidthInactive","outlineOpacity","outlineOpacityInactive","renderFill","fillAlpha","fillAlphaInactive","defaultLabelmapConfig","renderFillInactive","getDefaultLabelmapConfig","initialDefaultState","colorLUT","segmentations","globalConfig","renderInactiveSegmentations","representations","defaultSegmentationStateManager","getState","getToolGroups","getColorLUT","lutIndex","resetState","getSegmentation","segmentationId","find","segmentation","addSegmentation","_initDefaultColorLUTIfNecessary","concat","getSegmentationRepresentations","toolGroupId","toolGroupSegRepresentationsWithConfig","segmentationRepresentations","getAllSegmentationRepresentations","toolGroupSegReps","addSegmentationRepresentation","segmentationRepresentation","config","_handleActiveSegmentation","getGlobalConfig","setGlobalConfig","getSegmentationRepresentationByUID","segmentationRepresentationUID","representation","removeSegmentation","removeSegmentationRepresentation","toolGroupSegmentationRepresentations","segData","console","warn","removedSegmentationRepresentation","setActiveSegmentationRepresentation","toolGroupSegmentations","segmentationData","active","getToolGroupSpecificConfig","toolGroupStateWithConfig","getSegmentationRepresentationSpecificConfig","segmentationRepresentationSpecificConfig","setSegmentationRepresentationSpecificConfig","getSegmentSpecificConfig","segmentIndex","segmentSpecificConfig","setSegmentSpecificConfig","setSegmentationRepresentationConfig","addColorLUT","log","removeColorLUT","colorLUTIndex","recentlyAddedOrRemovedSegmentationRepresentation","CORNERSTONE_COLOR_LUT","triggerSegmentationRemoved","triggerSegmentationRepresentationRemoved","triggerSegmentationRepresentationModified","triggerSegmentationModified","segmentationIds","getSegmentations","triggerSegmentationDataModified","modifiedSlicesToUse","segmentationInput","cachedStats","segmentLabels","label","segmentsLocked","activeSegmentIndex","representationData","getDefaultSegmentationStateManager","suppressEvents","segmentationStateManager","normalizeSegmentationInput","getToolGroupIdsWithSegmentation","toolGroupIds","foundToolGroupIds","setToolGroupSpecificConfig","getSegmentSpecificRepresentationConfig","setSegmentSpecificRepresentationConfig","getMouseEventPoints","elementToUse","currentTarget","viewport","clientPoint","clientX","clientY","_clientToPoint","pagePoint","pageX","pageY","_pageToPoint","canvasPoint","rect","getBoundingClientRect","left","pageXOffset","top","pageYOffset","_pagePointsToCanvasPoints","page","client","canvas","world","canvasToWorld","startPoints","event","eventName","camera","lastPoints","currentPoints","deltaPoints","stopImmediatePropagation","preventDefault","MOUSE_DOWN","MOUSE_DOWN_ACTIVATE","MOUSE_CLICK","MOUSE_UP","MOUSE_DRAG","DOUBLE_CLICK_DRAG_TOLERANCE","mouseButton","isClickEvent","clickDelay","preventClickTimeout","doubleClickState","doubleClickTimeout","mouseDownEvent","mouseUpEvent","ignoreDoubleClick","_onMouseDrag","_updateMouseEventsLastPoints","_getDeltaPoints","_isDragPastDoubleClickTolerance","_doStateMouseDownAndUp","_copyPoints","_onMouseUp","clearTimeout","_cleanUp","addEventListener","_onMouseMove","document","removeEventListener","mouseMoveListener","delta","Math","abs","_preventClickHandler","_clearDoubleClickTimeoutAndEvents","_doMouseDown","_state$element","_state$element2","JSON","parse","stringify","points","_subtractPoints2D","point0","point1","mouseDoubleClickIgnoreListener","buttons","setTimeout","disable","mouseDoubleClickListener","mouseDownListener","capture","enable","deltaY","spinX","spinY","pixelX","pixelY","wheelDelta","wheelDeltaY","wheelDeltaX","deltaX","deltaMode","normalizeWheel","direction","wheel","wheelListener","passive","pointerType","lastInteractionType","lastInteractionTime","handleTap","now","Date","stopPropagation","handleTapMouse","bind","handleTapTouch","attachEvents","eventList","interactionType","tapHandler","removeEvents","mouseEvents","touchEvents","Swipe","getTouchEventPoints","touches","changedTouches","touch","identifier","radiusX","radiusY","force","rotationAngle","getDeltaPoints","curr","getMeanPoints","last","getDeltaDistance","_getDistance2D","_getDistance3D","getDeltaRotation","getDeltaDistanceBetweenIPoints","currentDistance","_getMeanDistanceBetweenAllIPoints","lastDistance","copyPointsList","copyPoints","reduce","prev","getMeanTouchPoints","pairedDistance","j","sqrt","pow","Settings","TOUCH_START","TOUCH_START_ACTIVATE","TOUCH_PRESS","TOUCH_DRAG","TOUCH_END","TOUCH_TAP","TOUCH_SWIPE","zeroIPoint","zeroIDistance","startPointsList","lastPointsList","isTouchStart","startTime","pressTimeout","pressDelay","pressMaxDistance","accumulatedDistance","swipeDistanceThreshold","swiped","swipeToleranceMs","defaultTapState","taps","tapTimeout","tapMaxDistance","tapToleranceMs","tapState","triggerEventCallback","ele","name","_onTouchDrag","currentPointsList","_updateTouchEventsLastPoints","deltaDistance","totalDistance","currentTime","getTime","x","y","swipe","RIGHT","LEFT","DOWN","UP","_checkTouchSwipe","_onTouchEnd","_checkTouchTap","lp","_onTouchPress","_onTouchStart","preventGhostClick","touchStartListener","keyCode","keyListener","_onKeyUp","_onVisibilityChange","visibilityState","resetModifierKey","_cloneDeep","keyDownListener","getModifierKey","getSvgNode","canvasHash","cacheKey","domRef","appendNode","svgLayerElement","svgNode","touched","appendChild","setNodeTouched","clearUntouched","cacheEntry","removeChild","fn","svgDrawingHelper","viewportElement","querySelector","_getSvgLayer","svgNodeCacheForCanvas","getSvgDrawingHelper","toolGroupFilteredByIds","tg","some","vp","getToolsWithModesForElement","modesFilter","ToolGroupManager","enabledTools","toolInstance","getToolInstance","Active","Passive","Enabled","annotationRenderingEngine","_throwIfDestroyed","elements","_viewportElements","_needsRender","_triggerRender","_animationFrameSet","_animationFrameHandle","addViewportElement","removeViewportElement","_reset","renderViewport","_setViewportsToBeRenderedNextFrame","hasBeenDestroyed","_setAllViewportsToBeRenderedNextFrame","_renderFlaggedViewports","elementsEnabled","indexOf","_render","requestAnimationFrame","getRenderingEngine","drawSvg","anyRendered","tool","renderAnnotation","rendered","cancelAnimationFrame","onImageRendered","triggerAnnotationRender","getToolsWithModesForMouseEvent","evtButton","correctBinding","bindings","binding","onCameraModified","onImageSpacingCalibrated","customCallbackHandler","handlerType","customFunction","activeTool","filterToolsWithMoveableHandles","ToolAndAnnotations","canvasCoords","proximity","toolsWithMoveableHandles","handle","getHandleNearImagePoint","filterToolsWithAnnotationsForElement","_annotations","filterInteractableAnnotationsForElement","filterMoveableAnnotationTools","moveableAnnotationTools","isPointNearTool","MouseBindings","KeyboardBindings","shiftKey","ctrlKey","kb","altKey","metaKey","getActiveToolForMouseEvent","mouseEvent","modifierKey","getMouseModifier","keyEventListener","defaultMousePrimary","getDefaultMousePrimary","mouseDown","preMouseDownCallback","isPrimaryClick","applicableTools","annotationToolsWithAnnotations","annotationToolsWithMoveableHandles","isMultiSelect","getAnnotationForSelection","toggleAnnotationSelection","handleSelectedCallback","toolSelectedCallback","postMouseDownCallback","toolsWithActions","toolModes","_mouseEvent$buttons","_tool$configuration","actions","configuration","action","getToolsWithActionsForMouseEvent","method","mouseDownAnnotationAction","toolsWithMovableHandles","mouseDownActivate","addNewAnnotation","mouseDrag","mouseDragCallback","mouseMove","activeAndPassiveTools","toolsWithAnnotations","toolsWithoutAnnotations","toolAndAnnotation","getToolName","annotationsNeedToBeRedrawn","mouseMoveCallback","mouseClick","mouseDoubleClick","mouseUp","mouseWheel","getActiveToolForKeyboardEvent","keyDown","setViewportsCursorByToolName","keyUp","getActiveToolForTouchEvent","touchEvent","numTouchPoints","getToolsWithModesForTouchEvent","touchStart","preTouchStartCallback","postTouchStartCallback","touchStartActivate","touchDrag","touchDragCallback","touchEnd","touchTap","touchPress","addEnabledElement","svgLayer","svgns","createElementNS","svgLayerId","classList","setAttribute","style","width","height","pointerEvents","position","defs","feOffset","feColorMatrix","feBlend","_createSvgAnnotationLayer","newNode","viewportUid","renderingEngineUid","dataset","elementHash","_setSvgNodeCache","mouseEventListeners","wheelEventListener","touchEventListeners","imageRenderedEventDispatcher","cameraModifiedEventDispatcher","imageSpacingCalibratedEventDispatcher","mouseToolEventDispatcher","keyboardToolEventDispatcher","touchToolEventDispatcher","synchronizersFilteredByIds","synchronizer","notDisabled","isDisabled","hasSourceViewport","hasTargetViewport","elementDisabledEvt","_resetSvgNodeCache","internalViewportNode","_removeSvgNode","getSynchronizersForViewport","sync","remove","_removeViewportFromSynchronizers","getToolGroupForViewport","removeViewports","_removeViewportFromToolGroup","foundElementIndex","el","_removeEnabledElement","viewportIdsToRender","getViewport","triggerAnnotationRenderForViewportIds","getRenderingEngines","viewportIds","getViewports","s","SegmentationState","segmentationConfig","getGlobalRepresentationConfig","representationType","setGlobalRepresentationConfig","segmentationRepresentationConfig","setSegmentationVisibility","visibility","segmentsHidden","indices","scalarData","getScalarData","keySet","it","parseInt","_segmentation$represe","geometryIds","CONTOUR","geometryId","getSegmentIndex","getSegmentationIndices","getSegmentationVisibility","setSegmentsVisibility","segmentIndices","segRepresentation","setSegmentVisibility","BaseTool","toolProps","defaultToolProps","initialProps","supportedInteractionTypes","strategies","defaultStrategy","activeStrategy","strategyOptions","assign","applyActiveStrategy","operationData","setConfiguration","newConfiguration","setActiveStrategy","strategyName","getTargetVolumeId","_actorEntries$find","volumeId","actorEntries","getActors","actorEntry","actor","getClassName","getTargetIdImage","targetId","startsWith","imageId","split","imageURI","viewports","getCurrentImageId","getImageData","getTargetId","StackViewport","BaseVolumeViewport","VideoViewport","actorUIDsToRemove","Boolean","removeActors","pointToString","point","decimals","parseFloat","toFixed","polyDataCache","updateSurfacePlanes","vtkPlanes","clippingFilter","mapper","getMapper","viewPlaneNormal","getCamera","imageIndex","getCurrentImageIdIndex","cacheId","actorCache","polyData","setClippingPlanes","update","getOutputData","error","setInputData","render","async","toolGroupConfig","SurfaceData","Representations","geometry","surface","surfaceUID","actorUID","getActor","getPoints","polys","getPolys","color","getColor","vtkPolyData","setData","triangles","vtkCellArray","Float32Array","setPolys","vtkMapper","VolumeViewport3D","vtkClipClosedSurface","clippingPlanes","activePlaneId","passPointData","setGenerateOutline","setGenerateFaces","filteredData","vtkActor","setMapper","getProperty","setColor","addActor","addSurfaceToElement","_renderSurface","resetCamera","representationInput","toolGroupSpecificConfig","toolGroupSpecificRepresentation","currentToolGroupConfig","SegmentationConfig","mergedConfig","renderImmediate","getToolGroup","removeSurfaceFromElement","_removeSurfaceFromToolGroupViewports","getViewportsInfo","contourRepresentation","segmentId","_contourRepresentatio","_contourRepresentatio2","configCachePerSegmentationRepresentationUID","getConfigCache","setConfigCache","addContourSetsToElement","contourRepresentationConfig","contourActorUID","appendPolyData","vtkAppendPolyData","scalarToColorMap","segmentSpecificMap","validateGeometry","contourSet","pointArray","vtkPoints","lines","pointIndex","getContours","contour","pointList","flatPoints","getFlatPointsArray","getType","pointIndexes","_","pointListIndex","linePoints","insertNextCell","polygon","setPoints","setLines","getPolyData","getNumberOfPoints","scalars","vtkDataArray","numberOfComponents","dataType","setTuple","getPointData","setScalars","addInputData","polyDataOutput","setLineWidth","setForceOpaque","updateContourSets","newContourConfig","cachedConfig","contourSetsActor","newOutlineWithActive","lut","getLookupTable","segmentsToSetToInvisible","segmentsToSetToVisible","mergedInvisibleSegments","contourSets","segmentSpecificConfigs","acc","affectedSegments","hasCustomSegmentSpecificConfig","polyDataModified","getInputData","appendScalarsData","getScalars","getData","_segmentSpecificConfi","getTotalNumberOfPoints","segmentConfig","modified","setLookupTable","representationConfig","contourData","addOrUpdateContourSets","removeContourFromElement","_removeContourFromToolGroupViewports","deleteConfigCache","removeVolumeActors","labelMapConfigCache","_getLabelmapConfig","toolGroupLabelmapConfig","segmentationRepresentationLabelmapConfig","isActiveLabelmap","segmentsLabelmapConfig","configToUse","outlineWidth","_needsTransferFunctionUpdate","_ref2","segmentColor","cacheUID","oldConfig","forceOpacityUpdate","forceColorUpdate","oldFillAlpha","oldRenderFill","oldRenderOutline","oldOutlineWidth","oldSegmentColor","oldSegmentsHidden","renderingConfig","labelmapData","labelmapUID","referencedVolumeId","defaultActor","getDefaultActor","defaultActorUID","volume","referencedVolume","isSameFrameOfReference","volumeInputs","blendMode","addVolumesToViewports","addLabelmapToElement","_addLabelmapToViewport","cfun","ofun","numColors","min","volumeActor","segmentSpecificLabelmapConfig","addRGBPoint","segmentOpacity","removePoint","addPointLong","setRGBTransferFunction","setClamping","setScalarOpacity","setInterpolationTypeToNearest","setUseLabelOutline","setLabelOutlineOpacity","setLabelOutlineThickness","setVisibility","_setLabelmapColorAndOpacity","vtkColorTransferFunction","vtkPiecewiseFunction","addPoint","removeLabelmapFromElement","_removeLabelmapFromToolGroupViewports","SegmentationDisplayTool","super","toolGroupViewports","segmentationRenderList","_getMergedRepresentationsConfig","viewportsRenderList","display","labelmapDisplay","contourDisplay","surfaceDisplay","renderedViewport","allSettled","then","onSetToolEnabled","onSetToolDisabled","segmentationRenderingEngine","removeToolGroup","renderToolGroupSegmentations","_setToolGroupSegmentationToBeRenderedNextFrame","_renderFlaggedToolGroups","segmentationDisplayToolInstance","onSegmentationRender","csToolsEvents","renderSegmentation","triggerSegmentationRender","segmentationVolume","imageData","vtkOpenGLTexture","slicesToUpdate","numSlices","getDimensions","setUpdatedFrame","segmentationRepresentationUIDs","immediate","toolGroupSegRepresentations","toolGroupSegRepresentationUIDs","segRepresentationUIDsToRemove","invalidSegRepresentationUIDs","segRepresentationUID","segmentationDataUID","_removeSegmentation","toolGroupIndex","removeSegmentationsFromToolGroup","csToolsState","destroyToolGroup","csToolsInitialized","init","_removeCornerstoneEventListeners","elementEnabledEvent","elementDisabledEvent","removeEnabledElement","_addCornerstoneEventListeners","_removeCornerstoneToolsEventListeners","TOOLS_EVENTS","annotationModifiedListener","annotationSelectionListener","segmentationModifiedListener","segmentationDataModifiedEventListener","segmentationRepresentationModifiedEventListener","segmentationRepresentationRemovedEventListener","destroy","restoreAnnotations","addTool","ToolClass","toolAlreadyAdded","toolClass","removeTool","cancelActiveManipulations","toolsWithData","cancel","_getViewportIndex","arr","ar","_containsViewport","synchronizerId","eventHandler","options","_ignoreFiredEvents","_targetViewports","_sourceViewports","fireEvent","_enabled","_eventName","_eventHandler","_options","_hasSourceElements","setOptions","_viewportOptions","getOptions","addTarget","addSource","_onEvent","_updateDisableHandlers","getSourceViewports","getTargetViewports","removeSource","t","removeTarget","_getViewportElement","sourceViewport","sourceEvent","promises","targetViewport","ex","vp1","vp2","unique","vps","u","_getUniqueViewports","_remove","disableHandler","vUid","Synchronizer","synchronizerIndex","DEFINED_CURSORS","STANDARD_CURSORS","MouseCursor","fallback","getName","addFallbackStyleProperty","getStyleProperty","getDefinedCursor","definedCursors","getDefinedCursors","mouseCursor","setDefinedCursor","cursor","context","standardCursorNames","AnnotationStyleStates","ImageMouseCursor","url","getUniqueInstanceName","Number","prefix","BASE","iconContent","iconSize","viewBox","mousePoint","mousePointerGroupString","SEGMENTATION_CURSOR_BOUNDARIES","MINUS_RECT","PLUS_RECT","SCISSOR_ICON","RECTANGLE_ICON","CIRCLE_ICON","CursorSVG","Angle","extend","ArrowAnnotate","Bidirectional","CobbAngle","CircleROI","EllipticalROI","FreehandROI","FreehandROISculptor","Length","Probe","RectangleROI","TextMarker","Crosshairs","Eraser","Magnify","Pan","Rotate","StackScroll","WindowLevelRegion","WindowLevel","Zoom","SegmentationFreeHandEraseInside","SegmentationFreeHandFillInside","SegmentationFreeHandEraseOutside","SegmentationFreeHandFillOutside","SegmentationRectangleEraseInside","RectangleScissor","CircleScissor","base","registerCursor","svgCursorNames","_initializeConfig","colorHighlighted","colorSelected","colorLocked","lineWidth","lineDash","shadow","textBoxVisibility","textBoxFontFamily","textBoxFontSize","textBoxColor","textBoxColorHighlighted","textBoxColorSelected","textBoxColorLocked","textBoxBackground","textBoxLinkLineWidth","textBoxLinkLineDash","textBoxShadow","getAnnotationToolStyles","getViewportToolStyles","getToolGroupToolStyles","getDefaultToolStyles","default","setAnnotationStyles","styles","annotationSpecificStyles","setViewportToolStyles","viewportSpecificStyles","setToolGroupToolStyles","toolGroupSpecificStyles","setDefaultToolStyles","toolStyle","specifications","_getToolStyle","property","annotationToolStyles","viewportToolStyles","global","toolGroupToolStyles","globalStyles","toolStyles","styleSpecifier","alternatives","list","getHierarchalPropertyStyles","STATE","MODE","SVGMouseCursor","pointer","urn","getCursorURN","getDefinedSVGCursorDescriptor","URL","createObjectURL","svgString","createSVGIconWithPointer","createSVGIcon","Blob","createSVGIconBlob","createSVGIconUrl","createSVGMouseCursor","format","template","dictionary","dict","defined","scale","max","svgSize","ELEMENT_CURSORS_MAP","initElementCursor","_getElementCursors","_setElementCursor","cursors","resetElementCursor","hideElementCursor","Disabled","ToolGroup","getViewportIds","toolInstanceName","_toolInstances","toolDefinition","hasToolName","localToolInstance","instantiatedTool","addToolInstance","parentClassName","_state$tools$toolName","ToolClassToUse","ParentClass","ToolInstance","addViewport","renderingEngines","renderingEngineUIDToUse","vpId","getActivePrimaryMouseButtonTool","vpInfo","setToolMode","setToolDisabled","setToolEnabled","setToolPassive","setToolActive","restoreToolOptions","toolBindingsOptions","TouchBinding","MouseBinding","hasSameBinding","binding2","binding1","useCursor","_hasMousePrimaryButtonBinding","_setCursorForViewports","onSetToolActive","_renderViewports","_triggerToolModeChangedEvent","prevToolOptions","getToolOptions","onSetToolPassive","toolOptionsForTool","_getCursor","cursorName","_ref3","setToolConfiguration","overwrite","_configuration","Primary","getToolConfiguration","configurationPath","clone","newToolGroupId","_fnToolFilter","fnToolFilter","_sourceToolOptions$bi","sourceToolInstance","sourceToolOptions","sourceToolMode","_toolOptions$bindings","_ref4","cameraSyncCallback","synchronizerInstance","cameraModifiedEvent","tViewport","setCamera","CAMERA_MODIFIED","createCameraPositionSynchronizer","synchronizerName","createSynchronizer","voiSyncCallback","voiModifiedEvent","range","invertStateChanged","invert","tProperties","voiRange","syncInvertState","setProperties","createVOISynchronizer","zoomPanSyncCallback","sViewport","syncZoom","srcZoom","getZoom","setZoom","syncPan","srcPan","getPan","setPan","createZoomPanSynchronizer","val","low","high","scroll","getImageIds","viewportType","debounceLoading","loop","VolumeViewport","numScrollSteps","currentStepIndex","sliceRangeInfo","sliceRange","spacingInNormalDirection","focalPoint","newFocalPoint","newPosition","desiredStepIndex","VolumeScrollEventDetail","currentImageId","EVENTS","scrollVolume","currentImageIndex","numberOfSlices","getTargetImageIdIndex","_getImageSliceData","imageIndexToJump","clip","_getImageIndexToJump","getSpatialRegistration","sourceId","stackImageSyncCallback","disabled","imageId1","sourceImagePositionPatient","metaData","imagePositionPatient","targetImageIds","viewport1","viewport2","viewPlaneNormal1","viewPlaneNormal2","dotProducts","vec3","areViewportsCoplanar","registrationMatrixMat4","getFrameOfReferenceUID","useInitialPosition","mat4","targetImagePositionPatientWithRegistrationMatrix","closestImageIdIndex2","targetPoint","closestImageIdIndex","distance","Infinity","jumpToSlice","STACK_NEW_IMAGE","createStackImageSynchronizer","drawingElementType","nodeUID","attributes","currentValue","getAttribute","removeAttribute","circleUID","center","radius","dataId","fill","fillOpacity","strokeOpacity","strokeWidth","svgNodeHash","_getHash","existingCircleElement","cx","cy","stroke","setAttributesIfNecessary","newCircleElement","setNewAttributesIfValid","ellipseUID","corner1","corner2","existingEllipse","w","h","rx","ry","svgEllipseElement","handleGroupUID","handlePoints","opacity","side","existingHandleElement","newHandleElement","drawLine","lineUID","start","end","isNaN","existingLine","dropShadowStyle","x1","y1","x2","y2","newLine","drawPolyline","polylineUID","fillColor","connectLastToFirst","existingPolyLine","pointsAttribute","firstPoint","newPolyLine","_createTextSpan","text","textSpanElement","textContent","_drawTextBackground","group","getBBox","insertBefore","firstChild","bBox","textUID","textLines","padding","fontFamily","fontSize","background","textGroupBoundingBox","existingTextGroup","textElement","textSpans","textSpan","textAttributes","textGroupAttributes","textGroup","combinedStyle","_createTextElement","_drawTextGroup","centerX","centerY","findClosestPoint","sourcePoints","minPoint","minDistance","sourcePoint","p1","p2","_distanceBetween","textBoxUID","textBoxPosition","annotationAnchorPoints","textBox","mergedOptions","centering","canvasBoundingBox","drawTextBox","linkUID","refPoint","boundingBox","halfWidth","halfHeight","_boundingBoxPoints","drawLink","drawRect","rectangleUID","_width","existingRect","tlhc","svgRectElement","drawArrow","arrowUID","angle","atan2","firstLine","cos","PI","sin","secondLine","drawRedactionRect","_setAttributesIfNecessary","_setNewAttributesIfValid","getAnnotationNearPoint","getAnnotationNearPointOnEnabledElement","found","findAnnotationNearPointByTool","_viewport$getCurrentI","currentId","_annotation$metadata","referencedImageId","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","useRAF","invokeFunc","time","thisArg","startTimer","pendingFunc","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","timeSinceLastInvoke","timeWaiting","remainingWait","debounced","isInvoking","_len","_key","leadingEdge","cancelTimer","flush","pending","debounce","calibratedPixelSpacingMetadataProvider","calibrateImageSpacing","calibrationOrScale","getStackViewports","calibrateSpacing","CalibrationTypes","PIXEL_UNITS","getCalibratedLengthUnits","handles","image","calibration","hasPixelSpacing","units","UNCALIBRATED","SequenceOfUltrasoundRegions","getCalibratedAreaUnits","getCalibratedScale","_image$calibration","getCalibratedAspect","_image$calibration2","aspect","pointInShapeCallback","pointInShapeFn","callback","boundsIJK","iMin","iMax","jMin","jMax","kMin","kMax","dimensions","getDirection","rowCosines","columnCosines","scanAxisNormal","spacing","getSpacing","rowSpacing","columnSpacing","scanAxisSpacing","worldPosStart","indexToWorld","rowStep","columnStep","scanAxisStep","xMultiple","yMultiple","zMultiple","pointsInShape","currentPos","k","startPosJ","startPosI","pointIJK","pointLPS","xMin","xMax","yMin","yMax","zMin","zMax","p","floor","depth","transformWorldToIndex","pointInSurroundingSphereCallback","circlePoints","centerWorld","radiusWorld","bottom","centerIJK","spacings","minSpacing","maxRadiusIJK","ceil","viewUp","viewRight","topLeftWorld","bottomRightWorld","sphereCornersIJK","getBoundingBoxAroundShape","_computeBoundsIJKWithCamera","_getBounds","sphereObj","sphere","pointInSphere","roundNumber","precision","v","join","fixedPrecision","AnnotationFrameRange","imageIdToFrames","frameRangeExtractor","framesToString","framesToImageId","newRangeString","setFrameRange","eventBase","getFrameRange","imageVolume","strategySpecificConfiguration","THRESHOLD_INSIDE_CIRCLE","voxelValue","threshold","fillSphere","scalarIndex","isWithinThreshold","minSlice","maxSlice","fillInsideSphere","thresholdInsideSphere","eraseInsideSphere","getCanvasEllipseCorners","ellipseCanvasPoints","right","pointInEllipse","ellipse","circleCenterWorld","xRadius","yRadius","zRadius","z","x0","y0","z0","inside","fillCircle","canvasCoordinates","worldToCanvas","topLeftCanvas","bottomRightCanvas","ellipsoidCornersIJK","ellipseObj","fillInsideCircle","thresholdInsideCircle","eraseInsideCircle","getActiveSegmentationRepresentation","isSegmentIndexLocked","setSegmentIndexLocked","getLockedSegments","setActiveSegmentIndex","getActiveSegmentIndex","unshift","setColorLUT","getColorForSegmentIndex","setColorForSegmentIndex","colorReference","BrushTool","FILL_INSIDE_CIRCLE","ERASE_INSIDE_CIRCLE","FILL_INSIDE_SPHERE","ERASE_INSIDE_SPHERE","THRESHOLD_INSIDE_SPHERE","brushSize","disableCursor","eventData","activeSegmentationRepresentation","activeSegmentation","segmentLocking","segmentationState","firstVolumeActorUID","_editData","_activateDraw","triggerAnnotationRenderForViewportUIDs","updateCursor","brushCursor","_hoverData","_deactivateDraw","_endCallback","_dragCallback","centerCanvas","segmentIndexController","_calculateCursor","centerCursorInWorld","bottomCursorInWorld","topCursorInWorld","leftCursorInWorld","rightCursorInWorld","invalidateBrushCursor","toolMetadata","brushCursorUID","drawCircleSvg","getBrushToolInstances","toolInstances","getVoxelOverlap","voxelSpacing","voxelCenter","voxelCornersWorld","voxelCornersIJK","processVolumes","thresholdVolumeInformation","segmentationSpacing","volumeInfoList","baseVolumeIdx","volumeSize","b","referenceValues","lower","upper","equalsCheck","segmentationImageData","overlapType","overlaps","testOverlapRange","volumeInfo","overlapBounds","overlapTest","testRange","computeOffsetIndex","insert","filterViewportsWithFrameOfReferenceUID","numViewports","viewportsWithFrameOfReferenceUID","filterViewportsWithToolEnabled","viewportsWithToolEnabled","_toolGroupHasActiveEnabledOrPassiveTool","toolMode","EPS","vpCamera","getViewportIdsWithToolToRender","requireParallelNormals","filterViewportsWithParallelNormals","EPSILON","CONSTANTS","PARALLEL_THRESHOLD","filterAnnotationsWithinSlice","annotationsWithParallelNormals","td","annotationViewPlaneNormal","imageOrientationPatient","rowCosineVec","colCosineVec","isParallel","halfSpacingInNormalDirection","annotationsWithinSlice","dir","dot","baseUrlExtractor","filterAnnotationsForDisplay","colonIndex","substring","testURI","hasImageURI","annotationFrameRange","frameNumber","getFrameNumber","highlighted","AnnotationDisplayTool","getFramesOfReference","frameOfReference","getReferencedImageId","worldPos","getStyle","AnnotationTool","_toolProps$configurat","_toolProps$configurat2","filteredAnnotations","activateHandleIndex","activeHandleIndex","near","_imagePointNearToolOrHandle","nearToolAndNotMarkedActive","notNearToolAndMarkedActive","getTextLines","statsCalculator","worldBoundingBox","topLeft","topRight","bottomLeft","bottomRight","annotationCanvasCoordinate","vec2","getLinkedTextBoxStyle","isSuvScaled","_volume$scaling","scaling","PT","scalingModule","suvbw","dist2","distanceToPointSquared","lineStart","lineEnd","d2","distanceToPoint","lineSegments","rectToLineSegments","segment","lineSegment","getTextBoxCoordsCanvas","annotationCanvasPoints","corners","canvasPoints","handlesLeftToRight","sort","handlesTopToBottom","_determineCorners","getWorldWidthAndHeightFromCorners","pos1","pos2","diagonal","diagonalLength","worldWidth","worldHeight","cosTheta","getModalityUnit","modality","isPreScaled","generalSeriesModule","petSeriesModule","_handlePTModality","isViewportPreScaled","targetIdTokens","preScale","scaled","Calculator","BasicStatsCalculator","singleArrayAsNumber","_class","sum","sumSquares","squaredDiffSum","newArray","idx","mean","stdDev","stdDevWithSumSquare","currentMax","unit","RectangleROITool","preventHandleOutsideImage","defaultGetTextLines","isDrawing","hasMoved","worldPosition","editData","handleIndex","movingTextBox","newAnnotation","canvasPoint1","canvasPoint2","_getRectangleImageCoordinates","rectangle","_activateModify","_deactivateModify","isHandleOutsideImage","worldPosDelta","bottomLeftCanvas","topRightCanvas","bottomLeftWorld","topRightWorld","_annotations2","renderStatus","areaUnit","_throttledCalculateCachedStats","referencedImageURI","currentImageURI","Modality","area","_calculateCachedStats","activeHandleCanvasCoords","drawHandlesSvg","drawRectSvg","canvasTextBoxCoords","drawLinkedTextBoxSvg","worldPos1","worldPos2","targetIds","worldPos1Index","worldPos2Index","_isInsideVolume","_stats$","_stats$2","_stats$3","modalityUnitOptions","modalityUnit","statsCallback","stats","getStatistics","statsArray","index1","index2","throttle","cachedVolumeStats","RectangleROIThresholdTool","RectangleROIStartEndThresholdTool","numSlicesToPropagate","startIndex","spacingInNormal","endIndex","_getEndSliceIndex","startSlice","endSlice","projectionPoints","projectionPointsImageIds","_computeProjectionPoints","sliceIndex","firstOrLastSlice","lineDashToUse","_calculateCachedStatsTool","startIJK","endIJK","startWorld","indexToWorldVec3","endWorld","newProjectionPoints","dist","newPoint","RectanglePoints","endPos","imageIds","imageIdIndex","numSlicesToProject","sliceNormalIndex","referenceVolume","AllBoundsIJK","_data$cachedStats","_data$cachedStats2","pointsToUse","rectangleCornersIJK","extend2DBoundingBoxInViewAxis","annotationUIDs","validToolNames","_validateAnnotations","getBoundsIJKFromRectangleAnnotations","thresholdVolumeByRange","labelmaps","origin","labelmap","outputData","arrayType","volumeLoader","isValidRepresentationConfig","SegmentationRepresentation","isValidLabelmapConfig","getDefaultRepresentationConfig","createLabelmapVolumeForViewport","_options$volumeId","properties","defaultEquals","lpad","character","seed","onFlood","onBoundary","equals","diagonals","startNode","permutations","perms","permutation","c","permute","perm","countNonZeroes","flooded","visits","bounds","currentArgs","flood","boundaries","job","getArgs","prevArgs","previousArgs","node","safely","member","markAsFlooded","nextArgs","pushAdjacent","markAsBoundary","f","setBrushSizeForToolGroup","viewportsInfoArray","getBrushSizeForToolGroup","brushToolInstance","setBrushThresholdForToolGroup","getBrushThresholdForToolGroup","segmentationIndex","_handleSameSizeVolume","getPoint","callbackOverlap","_handleDifferentSizeVolume","INSIDE","OUTSIDE","clipT","num","denom","tE","tL","box","da","db","dx","dy","sign","NaN","intersectLine","line1Start","line1End","line2Start","line2End","x3","y3","x4","y4","a1","b1","c1","r3","r4","a2","b2","c2","r1","r2","getIntersectionCoordinatesWithPolyline","q1","polylineIndexes","initialI","intersections","doesIntersect","getAllIntersectionsWithPolyline","intersection","getIntersection","getFirstIntersectionWithPolyline","getClosestIntersectionWithPolyline","q2","distances","intersectionPoints","midpoint","orient","orientation","onSegment","q","orientationValue","denominator","numerator1","numerator2","getSubPixelSpacingAndXYDirections","subPixelResolution","xDir","yDir","volumeSpacing","iVector","jVector","kVector","absViewRightDotI","absViewRightDotJ","absViewRightDotK","xSpacing","absViewUpDotI","absViewUpDotJ","absViewUpDotK","ySpacing","pointsAreWithinCloseContourProximity","closeContourProximity","addCanvasPointsToArray","newCanvasPoint","commonData","lastWorldPos","newWorldPos","worldPosDiff","xDist","yDist","numPointsToAdd","lastCanvasPoint","canvasDist","canvasDir","distPerPoint","pointCanProjectOnLine","p1p","p1p2","p1p2Mag","projectionVectorMag","p1p2UnitVector","projectionVector","projectionPoint","calculateAreaOfPoints","z1","z2","getPointInLineOfSightWithCriteria","targetVolumeId","criteriaFunction","stepSize","cameraPosition","step","getBounds","vector","pickedPoint","vtkMath","pointT","_inBounds","pointToPick","getIntensityFromWorld","getOrientationStringLPS","orientationX","orientationY","orientationZ","MIN","invertOrientationStringLPS","orientationString","inverted","toUpperCase","addToolState","getToolState","ViewportStatus","dynamicVolumesPlayingMap","playClip","playClipOptions","_playClipOptions$dyna","playClipTimeouts","playClipIsTimeVarying","dynamicCineEnabled","_getVolumeFromViewport","playClipContext","_playClipOptions$wait","waitForRendered","frameTimeVectorEnabled","waitForRenderedCount","viewportStatus","RENDERED","_createStackViewportCinePlayContext","isDynamicVolume","numTimePoints","timePointIndex","_createDynamicVolumeViewportCinePlayContext","cachedScrollInfo","scrollInfo","getScrollInfo","volumeViewPlaneNormal","glMatrix","_createVolumeViewportCinePlayContext","_createCinePlayContext","playClipData","isDynamicCinePlaying","_playClipOptions$fram","_playClipOptions$fram2","_playClipOptions$reve","_playClipOptions$loop","_stopDynamicVolumeCine","_stopClip","intervalId","framesPerSecond","lastFrameTimeStamp","ignoreFrameTimeVector","usingFrameTimeVector","frameTimeVector","speed","frameTimeVectorSpeedMultiplier","reverse","timeouts","isTimeVarying","sample","delay","limit","_getPlayClipTimeouts","playClipAction","newStepIndex","CINE_EVENTS","playClipTimeoutHandler","setInterval","stopClip","stopDynamicCine","cineToolData","clearInterval","_stopClipWithData","dynamicCineElement","volumes","_getVolumesFromViewport","dynamicVolume","v1","v2","v0","v3","t1","t2","t3","basis","interpolator","samples","zip","matrix","m","valueof","transpose","row","interpolateSegmentPoints","iniIndex","knotsRatioPercentage","_Math$floor","_Math$floor2","segmentSize","amountOfKnots","minKnotDistance","interpolationIniIndex","interpolationEndIndex","segmentPointsUnchangedBeg","segmentPointsUnchangedEnd","originalPoints","knotsIndexes","xInterpolator","d3InterpolateBasis","yInterpolator","zInterpolator","d3Zip","d3Quantize","interpolatePoints","minDistributionDistance","closedInterval","intervalIni","intervalEnd","intervalSize","intensity","continuosDistributionValue","round","getContinuousUniformDistributionValues","shouldInterpolate","_configuration$interp","_configuration$interp2","interpolation","interpolateOnAdd","interpolateOnEdit","followingIndex","circularFindNextIndexBy","listParams","otherListParams","criteria","indexDelimiter","otherIndexDelimiter","otherPoints","pointsLength","otherPointsLength","otherStartIndex","getInterpolatedPoints","pointsOfReference","knotsRatioPercentageOnAdd","knotsRatioPercentageOnEdit","changedIniIndex","changedEndIndex","previousPoints","firstMatchIndex","previousFirstMatchIndex","findMatchIndexes","toBeNotEqualCriteria","pointA","pointB","isEqualByProximity","lowDiffIndex","lowOtherDiffIndex","highIndex","findChangedSegment","findOpenUShapedContourVectorToPeak","first","firstToLastUnitVector","normalVector1","normalVector2","centerOfFirstToLast","furthest","polyline","activateDraw","canvasPos","drawData","polylineIndex","mouseUpDrawCallback","mouseDragDrawCallback","deactivateDraw","lastWorldPoint","crossingIndex","findCrossingIndexDuringCreate","applyCreateOnCross","numPointsAdded","allowOpenContours","lastPoint","completeDrawOpenContour","completeDrawClosedContour","removeCrossedLinesOnCompleteDraw","haltDrawing","worldPoints","isOpenContour","triggerAnnotationCompleted","numPoints","endToStart","canvasPointsMinusEnds","indexToRemoveUpTo","isOpenUShapeContour","openUShapeContourVectorToPeak","pointsLessLastOne","shift","activateClosedContourEdit","cancelDrawing","minPoints","shouldHaltDrawing","checkForFirstCrossing","isClosedContour","editCanvasPoints","prevCanvasPoints","crossedLineSegment","startCrossingIndex","removePointsUpUntilFirstCrossing","checkCanvasEditFallbackProximity","firstEditCanvasPoint","distanceIndexPairs","prevCanvasPoint","twoClosestDistanceIndexPairs","lowestIndex","extendedPoint","crossedLineSegmentFromExtendedPoint","pointsToPrepend","editIndex","numPointsToRemove","checkForSecondCrossing","removePointsAfterSecondCrossing","lastLine","didCrossLine","findSnapIndex","lastEditCanvasPoint","editCanvasPointsLessLastOne","snapCanvasPosition","checkAndRemoveCrossesOnEditLine","editIndexCrossed","isEditingClosed","mouseUpClosedContourEditCallback","mouseDragClosedContourEditCallback","deactivateClosedContourEdit","currentEditIndex","snapIndex","fusedCanvasPoints","fuseEditPointsWithClosedContour","finishEditAndStartNewEdit","triggerAnnotationModified","augmentedEditCanvasPoints","lowIndex","distanceBetweenLowAndFirstPoint","distanceBetweenLowAndLastPoint","distanceBetweenHighAndFirstPoint","distanceBetweenHighAndLastPoint","pointSet1","inPlaceDistance","reverseDistance","pointSet2","completeClosedContourEdit","cancelClosedContourEdit","activateOpenContourEdit","isEditingOpen","mouseUpOpenContourEditCallback","mouseDragOpenContourEditCallback","deactivateOpenContourEdit","fuseEditPointsWithOpenContour","finishEditOpenOnSecondCrossing","checkIfShouldOverwriteAnEnd","openContourEditOverwriteEnd","fuseEditPointsForOpenContourEndEdit","activateOpenContourEndEdit","lastCanvasPos","p3","aDotb","magA","magB","acos","newCanvasPoints","pointsToRender","completeOpenContourEdit","cancelOpenContourEdit","_getRenderingOptions","renderContour","_enabledElement$viewp","findOpenUShapedContourVectorToPeakOnRender","calculateUShapeContourVectorToPeakIfNotPresent","renderOpenUShapedContour","renderOpenContour","renderClosedContour","drawPolylineSvg","_this$configuration$a","alwaysRenderOpenContourHandles","enabled","handlePoint","firstCanvasPoint","openUShapeContourVectorToPeakCanvas","renderContourBeingDrawn","renderClosedContourBeingEdited","renderOpenContourBeingEdited","PlanarFreehandROITool","calculateStats","previousPoint","pStart","pEnd","activeAnnotationUID","_this$commonData","_this$commonData2","_this$commonData3","_renderStats","originalWorldPoint","deltaXPoint","deltaYPoint","deltaInX","deltaInY","worldPosIndex","iDelta","jDelta","kDelta","worldPosEnd","canvasPosEnd","curRow","intersectionCounter","_annotation$annotatio","drawLinkedTextBox","registerDrawLoop","registerEditLoopCommon","registerClosedContourEditLoop","registerOpenContourEditLoop","registerOpenContourEndEditLoop","registerRenderMethods","annotationsToDisplay","isEmptyArea","areaLine","interpolateAnnotation","_annotation$data","shouldPreventInterpolation","interpolatedCanvasPoints","requestType","priority","lowEnd","highEnd","getStackData","currentImageIdIndex","getPromiseRemovedHandler","stackData","stackPrefetchData","indicesToRequest","clearFromImageIds","imageIdSet","requestDetails","additionalDetails","resetPrefetchTimeout","maxImagesToPrefetch","preserveExistingPool","prefetch","_stack$imageIds","_stackPrefetch$indice","stackPrefetch","removeFromList","imageLoadPoolManager","nearest","nearestIndex","nextImageIdIndex","lowerIndex","higherIndex","imageIdsToPrefetch","currentIndex","shouldLoadLower","shouldLoadHigher","requestFn","imageLoader","useNorm16Texture","getCoreConfiguration","rendering","targetBuffer","onImageUpdated","target","indexOfCurrentImage","promiseRemovedHandler","getConfiguration","minBefore","maxAfter","directionExtraImages","indicesToRequestCopy","_image$image","decodeTimeInMS","_image$image2","loadTimeInMS","sizeInBytes","usage","cacheFill","fillTime","fillSize","initialTime","initialSize","updateToolState","doneCallback","stackCount","totalBytes","positionFraction","minIndex","maxIndex","jumpToWorld","jumpWorld","normal","dotProd","projectedDelta","_applyShift","frames","frameNumbers","maskVolumeId","imageCoordinate","dataInTime","ijkCoords","maskImageData","segScalarData","len","nonZeroVoxelIndices","actualLen","dynamicVolumeScalarDataArray","getScalarDataArrays","indexValues","frame","activeScalarData","segPointLPS","segValue","segPointIJK","overlapIJKMinMax","perFrameSum","averageValues","_getTimePointDataMask","coordinate","worldToIndex","allScalarData","_getTimePointDataCoordinate","operation","numFrames","typedArrays","arrayLength","finalArray","currentArray","getPolyDataPointIndexes","linesData","getLines","contours","findStartingPoint","startPoint","nextPoint","getPolyDataPoints","contoursIndexes","rawPointsData","contourIndexes","ColorbarRangeTextPosition","isRangeValid","areColorbarRangesEqual","isColorbarSizeValid","areColorbarSizesEqual","clamp","ColorbarCanvas","validateProps","colormap","imageRange","container","showFullPixelValueRange","_colormap","_imageRange","_voiRange","_showFullImageRange","_canvas","_createRootElement","appendTo","_setCanvasSize","showFullImageRange","dispose","parentElement","createElement","boxSizing","isConnected","RGBPoints","rgbPoints","colorsCount","getColorPoint","canvasContext","getContext","isHorizontal","maxValue","windowWidth","previousColorPoint","currentColorPoint","incRawPixelValue","rawPixelValue","tVoiRange","normColor","tColorRange","fillStyle","fillRect","interpolateVec3","DEFAULTS","FONT","COLOR","TICK_SIZE","TICK_WIDTH","TICK_LABEL_MARGIN","MAX_NUM_TICKS","TICKS_STEPS","ColorbarTicks","_ticksStyle$font","_ticksStyle$color","_ticksStyle$tickSize","_ticksStyle$tickWidth","_ticksStyle$labelMarg","_ticksStyle$maxNumTic","ticks","ticksProps","ticksStyle","rangeTextPosition","_font","font","_color","_tickSize","tickSize","_tickWidth","tickWidth","_labelMargin","labelMargin","_maxNumTicks","maxNumTicks","_rangeTextPosition","Right","_showFullPixelValueRange","_createCanvasElement","showFullRange","_getTicks","roughStep","stepPower","log10","roughtStepNormalized","scaleMax","scaleMin","ticksCount","_getLeftTickInfo","labelMeasure","labelPoint","tickPoints","_getRightTickInfo","_getTopTickInfo","_getBottomTickInfo","maxCanvasPixelValue","rangeWidth","clearRect","textBaseline","strokeStyle","tick","measureText","tickInfo","Top","Left","tickStart","tickEnd","beginPath","moveTo","lineTo","fillText","Widget","contentRect","contentBoxSize","inlineSize","blockSize","_containerSize","onContainerResize","_id","_rootElement","createRootElement","_containerResizeObserver","ResizeObserver","_containerResizeCallback","rootElement","resizeObserver","currentContainer","unobserve","observe","disconnect","containerSize","MULTIPLIER","RANGE_TEXT_POSITION","TICKS_BAR_SIZE","Colorbar","_props$ticks$position","_props$ticks","_isMouseOver","showTicks","hideTicks","_isInteracting","_addVOIEventListeners","initialState","multipliers","getVOIMultipliers","_getPointsFromMouseEvent","startVOIRange","canvasDelta","local","wwDelta","wcDelta","voiLower","voiUpper","windowCenter","newVoiRange","_removeVOIEventListeners","_eventListenersManager","_colormaps","getColormapsMap","_activeColormapName","getInitialColormapName","_createCanvas","_ticksBar","_createTicksBar","_addRootElementEventListeners","activeColormapName","colormapName","currentVoiRange","onVoiChange","reset","updateTicksBar","colormaps","items","Name","cm","containerWidth","containerHeight","ticksBar","colorbarWidth","colorbarHeight","Bottom","isRangeTextPositionValid","ticksBarTop","ticksBarLeft","_mouseOverCallback","_mouseOutCallback","_mouseDownCallback","initialDragState","_mouseUpCallback","_mouseDragCallback","defaultImageRange","ViewportColorbar","_getImageRange","_getVOIRange","_hideTicksTimeoutId","timeLeft","_hideTicksTime","autoHideTicks","_element","_volumeId","showAndAutoHideTicks","_addCornerstoneEventListener","clientWidth","clientHeight","ptMultiplier","fixedPTWindowWidth","xMultiplier","viewportsContainingVolumeUID","getRange","getRGBTransferFunction","interval","IMAGE_VOLUME_MODIFIED","_imageVolumeModifiedCallback","_stackNewImageCallback","VOI_MODIFIED","_viewportVOIModifiedCallback","setElementCursor","CursorNames","AnnotationGroup","visibleFilter","unboundVisibleFilter","_isVisible","setVisible","baseEvent","findNearby","uids","_len2","_key2","segmentationInputArray","validateLabelmap","validateSegmentationInput","segInput","addSegmentationToState","representationInputArray","toolGroupSpecificRepresentationConfig","_addSegmentationRepresentation","all","PanTool","deltaPointsWorld","updatedPosition","updatedFocalPoint","TrackballRotateTool","rotateIncrementDegrees","axis","vtkCamera","getVtkActiveCamera","getViewUp","getFocalPoint","getPosition","newViewUp","currentPointsCanvas","lastPointsCanvas","normalizedPosition","normalizedPreviousPosition","radsq","op","oe","opsq","oesq","lop","loe","nop","noe","angleX","upVec","atV","rightV","forwardV","rotateCamera","angleY","ProbeTool","eventDispatchDetail","textCanvasCoordinates","drawTextBoxSvg","samplesPerPixel","baseIndex","DragProbeTool","WindowLevelTool","middleSliceIndex","frameLength","bytesPerVoxel","TypedArrayConstructor","Uint16Array","Int16Array","_getMinMax","newRange","getProperties","_viewport$getImageDat","_preScale$scalingPara","scalingParameters","getPTScaledNewRange","deltaPointsCanvas","getNewRange","multiplier","_getMultiplierFromDynamicRange","imageDynamicRange","_imageVolume$metadata","calculatedDynamicRange","_getImageDynamicRangeFromMiddleSlice","BitsStored","metadataDynamicRange","_getImageDynamicRangeFromViewport","ratio","voxel","ZoomTool","_this","zoomToCenter","minZoomScale","maxZoomScale","pinchToZoom","pan","initialMousePosWorld","dirVec","pinch","parallelScale","parallelScaleToSet","focalPointToSet","positionToSet","distanceToCanvasCenter","cappedParallelScale","thresholdExceeded","zoomScale","directionOfProjection","tmp","_pinchCallback","parallelProjection","_dragParallelProjection","_dragPerspectiveProjection","_panCallback","StackScrollTool","debounceIfNotLoaded","deltaPointY","pixelsPerImage","_getPixelPerImage","imageIdIndexOffset","getNumberOfSlices","offsetHeight","angleBetweenLines","line1","line2","p4","angleBetween3DLines","angleBetween2DLines","PlanarRotateTool","currentPointWorld","startPointWorld","cross","rotAngle","rotMat","rotatedViewUp","rotation","StackScrollMouseWheelTool","mouseWheelCallback","DIRECTIONS","X","Y","Z","CUSTOM","VolumeRotateMouseWheelTool","cz","ax","ay","az","MIPJumpToClickTool","targetViewportIds","mouseClickCallback","maxIntensity","brightestPoint","maxFn","foundToolGroup","LengthTool","point2","line","drawLineSvg","_calculateLength","dz","RENDERING_DEFAULTS","defaultReferenceLineColor","defaultReferenceLineControllable","defaultReferenceLineDraggableRotatable","defaultReferenceLineSlabThicknessControlsOn","CrosshairsTool","_toolProps$configurat3","_toolProps$configurat4","viewportIndicators","autoPan","panSize","referenceLinesCenterGapRadius","filterActorUIDsToSetSlabThickness","slabThicknessBlendMode","mobile","_getAnnotations","cameraFocalPoint","rotationPoints","slabThicknessPoints","toolCenter","activeOperation","activeViewportIds","firstViewport","secondViewport","thirdViewport","normal1","initializeViewport","normal2","normal3","point3","firstPlane","secondPlane","thirdPlane","_jump","viewportIdArray","otherViewport","viewportControllable","_getReferenceLineControllable","viewportDraggableRotatable","_getReferenceLineDraggableRotatable","_pointNearTool","viewportAnnotation","currentCamera","oldCameraPosition","deltaCameraPosition","oldCameraFocalPoint","deltaCameraFocalPoint","isRotation","cameraModifiedInPlane","_autoPanViewportIfNecessary","filteredToolAnnotations","imageNeedsUpdate","previousActiveOperation","previousActiveViewportIds","_areViewportIdArraysEqual","canvasDiagonalLength","canvasMinDimensionLength","crosshairCenterCanvas","otherViewportAnnotations","_filterAnnotationsByUniqueViewportOrientations","referenceLines","canvasBox","otherCamera","otherViewportControllable","otherViewportDraggableRotatable","otherViewportSlabThicknessControlsOn","_getReferenceLineSlabThicknessControlsOn","otherCanvasDiagonalLength","otherCanvasCenter","otherViewportCenterWorld","pointWorld0","pointWorld1","pointCanvas0","otherViewportCenterCanvas","canvasUnitVectorFromCenter","canvasVectorFromCenterLong","canvasVectorFromCenterMid","canvasVectorFromCenterShort","canvasVectorFromCenterStart","centerGap","refLinePointOne","refLinePointTwo","refLinePointThree","refLinePointFour","refLinesCenter","liangBarksyClip","rotHandleOne","rotHandleTwo","stHandlesCenterCanvas","stHandlesCenterWorld","worldUnitVectorFromCenter","vtkMatrixBuilder","rotate","worldUnitOrthoVectorFromCenter","slabThicknessValue","getSlabThickness","worldOrthoVectorFromCenter","worldVerticalRefPoint","canvasVerticalRefPoint","canvasOrthoVectorFromCenter","stLinePointOne","stLinePointTwo","stLinePointThree","stLinePointFour","stHandleOne","stHandleTwo","stHandleThree","stHandleFour","newRtpoints","newStpoints","viewportColor","_getReferenceLineColor","lineIndex","_this$configuration$m","_this$configuration$m2","viewportSlabThicknessControlsOn","selectedViewportId","lineActive","_this$configuration$m3","rotHandlesActive","rotationHandles","rotHandleWorldOne","rotHandleWorldTwo","slabThicknessHandlesActive","slabThicknessHandles","slabThicknessHandleWorldOne","slabThicknessHandleWorldTwo","slabThicknessHandleWorldThree","slabThicknessHandleWorldFour","_this$configuration$m4","_this$configuration$m5","_this$configuration$m6","_this$configuration$m7","_this$configuration$m8","_this$configuration$m9","_this$configuration$m10","_this$configuration$m11","handleUID","_this$configuration$m12","_this$configuration$m13","_this$configuration$m14","_this$configuration$m15","_this$configuration$m16","_this$configuration$m17","_this$configuration$m18","_this$configuration$m19","_getViewportsInfo","computeToolCenter","viewportIdArrayOne","viewportIdArrayTwo","itemFound","viewportsWithDifferentCameras","cameraOfTarget","referenceAnnotation","linkedViewportAnnotations","otherViewPlaneNormal","otherLinkedViewportAnnotationsFromSameScene","otherViewportsAnnotationsWithUniqueCameras","cameraFound","jj","cameraOfStocked","otherNonLinkedViewportAnnotationsFromSameScene","_getAnnotationsForViewportsWithDifferentCameras","actors","otherViewportActors","sameScene","viewportsAnnotationsToUpdate","_checkIfViewportsRenderingSameScene","_applyDeltaShiftToSelectedViewportCameras","_this$configuration$m20","dir1","dir2","finalPointCanvas","originalPointCanvas","_isClockWise","rotationAxis","translate","otherViewportsIds","renderViewports","referenceAnnotations","_filterViewportWithSameOrientation","viewportsIds","mod","currentPoint","currentCenter","otherViewportRotationPoints","dotProdDirection","projectedDirection","normalizedProjectedDirection","normalizedProjectedDelta","MINIMUM_SLAB_THICKNESS","_pointNearReferenceLine","setSlabThickness","lineViewport","lineSegment1","distanceToPoint1","lineSegment2","distanceToPoint2","getReferenceLineColor","getReferenceLineControllable","getReferenceLineDraggableRotatable","getReferenceLineSlabThicknessControlsOn","_unsubscribeToViewportNewVolumeSet","_subscribeToViewportNewVolumeSet","_ref5","_getRotationHandleNearImagePoint","_getSlabThicknessHandleNearImagePoint","_ref6","_onNewVolume","_ref7","toolCenterCanvas","visiblePointCanvas","visiblePointWorld","slabThickness","actorUIDs","blendModeToUse","setBlendMode","_applyDeltaShiftToViewportCamera","stPointLineCanvas1","stPointLineCanvas2","stPointLineCanvas1Start","stPointLineCanvas2Start","ReferenceLines","sourceViewportId","showFullDimension","sourceViewportCanvasCornersInWorld","_init","sourceViewPlaneNormal","targetViewportPlane","pointSetToUse","topBottomVec","topRightVec","newNormal","isPerpendicular","lineStartWorld","lineEndWorld","handleFullDimension","vec1","targetImage","topLeftImageCoord","topRightImageCoord","bottomRightImageCoord","bottomLeftImageCoord","lineStartImageCoord","lineEndImageCoord","intersectInfiniteLines","isInBound","err","OverlayGridTool","sourceImageIds","imagePlaneModule","pointSets","calculateImageIdPointSets","viewportData","rows","columns","rowPixelSpacing","columnPixelSpacing","imageIdNormal","getImageIdNormal","targetData","initializeViewportData","pointSetsToUse","lineStartsWorld","lineEndsWorld","SegmentationIntersectionTool","_getRenderingEngine","actorsWorldPointsMap","_getRenderingEngine2","calculateSurfaceSegmentationIntersectionsForViewport","calculateSurfaceSegmentationIntersections","getCacheId","actorWorldPointMap","polyLineIdx","worldPointsSet","polyLineUID","actorWorldPointsMap","polyDataUtils","colorArray","colorComponentToString","component","componentString","colorToString","getWorldWidthAndHeightFromTwoPoints","EllipticalROITool","centerPointRadius","initialRotation","getRotation","canvasCorners","minorEllipse","majorEllipse","pointInMinorEllipse","_pointInEllipseCanvas","canvasWidth","canvasHeight","originalHandleCanvas","pointsCanvas","currentCanvasPoints","dX","dY","bottomCanvas","topCanvas","leftCanvas","rightCanvas","_dragHandle","dYCanvas","canvasBottom","canvasTop","newHalfCanvasWidth","canvasLeft","canvasRight","dXCanvas","newHalfCanvasHeight","_dragModifyCallback","_dragDrawCallback","drawEllipseSvg","centerPoint","_getCanvasEllipseCenter","location","normalized","getCanvasCircleRadius","circleCanvasPoints","getCanvasCircleCorners","CircleROITool","radiusPoint","canvasCenter","canvasEnd","radiusUnit","perimeter","radiusLine","BidirectionalTool","firstLineSegmentLength","longAxis","shortAxisPoint0","shortAxisPoint1","longAxisVector","counterClockWisePerpendicularToLongAxis","currentShortAxisVector","shortAxis","canvasCoordPoints","shortAxisDistFromCenter","vectorX","vectorY","xMid","yMid","startX","startY","endX","endY","_dragModifyHandle","movingHandleIndex","canvasCoordHandlesCurrent","firstLineSegment","secondLineSegment","proposedPoint","proposedCanvasCoord","fixedHandleCanvasCoord","fixedHandleToProposedCoordVec","fixedHandleToOldCoordVec","proposedFirstLineSegment","_movingLongAxisWouldPutItThroughShortAxis","centerOfRotation","_getSignedAngle","firstPointX","firstPointY","secondPointX","secondPointY","rotatedFirstPoint","rotatedFirstPointY","rotatedSecondPoint","rotatedSecondPointY","newFirstPoint","newSecondPoint","translateHandleIndex","canvasCoordsCurrent","longLineSegment","shortLineSegment","longLineSegmentVec","longLineSegmentVecNormalized","proposedToCurrentVec","movementLength","movementAlongLineSegmentLength","newTranslatedPoint","dataId1","dataId2","vectorInSecondLineDirection","extendedSecondLineSegment","worldPos3","worldPos4","dist1","index3","index4","vector1","vector2","ArrowAnnotateTool","getTextCallback","changeTextCallback","arrowFirst","doubleClickCallback","clickedAnnotation","_doneChangingTextCallback","_annotations3","drawArrowSvg","updatedText","doneChangingTextCallback","prompt","AngleTool","angleStartedNotYetCompleted","canvasPoint3","_data$cachedStats$tar","fromCharCode","midPoint2","ret","CobbAngleTool","distanceToLines","isNearFirstLine","isNearSecondLine","arc1Angle","arc2Angle","arc1Start","arc1End","arc2Start","arc2End","arc1TextBoxUID","arc1TextLine","arch1TextPosCanvas","arc2TextBoxUID","arc2TextLine","arch2TextPosCanvas","point4","canvasPoint4","mid1","mid2","linkLine","arc1Side","arc2Side","midLinkLine","linkLineLength","midFirstLine","midSecondLine","directionVectorStartArc1","magnitudeStartArc1","normalizedDirectionStartArc1","directionVectorEndArc1","magnitudeEndArc1","normalizedDirectionEndArc1","directionVectorStartArc2","magnitudeStartArc2","normalizedDirectionStartArc2","directionVectorEndArc2","magnitudeEndArc2","normalizedDirectionEndArc2","seg1","seg2","minDist","MAX_VALUE","getArcsStartEndPoints","KeyImageTool","canvasPosition","canvasSize","MAGNIFY_VIEWPORT_ID","MagnifyTool","magnifySize","magnifyWidth","magnifyHeight","_getReferencedImageId","_createMagnificationViewport","viewportProperties","magnifyToolElement","magnifyElement","viewportInput","enableElement","magnifyViewport","setStack","disableElement","_dragEndCallback","MAGNIFY_VIEWPORT_INITIAL_RADIUS","isSegmentation","referenceId","AdvancedMagnifyViewport","magnifyViewportId","sourceEnabledElement","zoomFactor","_viewportId","_sourceEnabledElement","_autoPan","_browserMouseDownCallback","_browserMouseUpCallback","_handleToolModeChanged","_resizeViewportAsync","_resizeViewport","_initialize","_radius","_resized","_enabledElement","_isViewportReady","_syncViewports","_removeEventListeners","parentNode","_this$_sourceToolGrou","_magnifyToolGroup","magnifyToolGroup","_sourceToolGroup","_inheritBorderRadius","borderRadius","_createViewportNode","overflow","_convertZoomFactorToParalellScale","offsetWidth","_isStackViewport","_isVolumeViewport","_cloneToolGroups","sourceActors","magnifyToolGroupId","sourceToolGroup","AdvancedMagnifyTool","_cloneStack","_cloneVolumes","volumeInputArray","setVolumes","_cloneViewport","sourceViewportOptions","defaultOptions","_cancelMouseEventCallback","_evt$target","_canAutoPan","closest","canvasCurrent","magnifyRadius","maxDist","panDist","canvasDeltaPos","newCanvasPosition","currentWorldPos","worldDeltaPos","autoPanCallbackData","currentPosition","_addBrowserEventListeners","_removeBrowserEventListeners","_addEventListeners","cstEvents","sourceCanvas","_syncViewportsCameras","_syncStackViewports","setImageIdIndex","sourceProperties","resize","AdvancedMagnifyViewportManager","sourceElement","_addSourceElementEventListener","_magnifyViewportsMap","_destroyViewport","_getMagnifyViewportsMapEntriesBySourceViewportId","currentViewPlaneNormal","worldImagePlanePoint","vecHandleToImagePlane","worldDist","worldDelta","getInstance","_AdvancedMagnifyViewp","_singleton","_this$_magnifyViewpor","_destroyViewports","magnifyViewportMapEntry","_removeSourceElementEventListener","_annotationRemovedCallback","_newStackImageCallback","VOLUME_NEW_IMAGE","_newVolumeImageCallback","magnifyingGlass","zoomFactorList","Secondary","Shift","worldHandlesPoints","_getWorldHandlesPoints","magnifyViewportManager","createViewport","annotationPoints","_deltaPoints$world","newRadius","newWorldHandlesPoints","canvasCenterPos","canvasRadius","showZoomFactorsList","currentZoomFactor","dropdown","_getZoomFactorsListDropdown","newZoomFactor","focus","onChangeCallback","_evt$keyCode","_evt$key","which","toLowerCase","option","title","defaultSelected","ReferenceCursors","displayThreshold","positionSync","_currentCursorWorldPosition","_currentCanvasPosition","_elementWithCursor","getActiveAnnotation","createInitialAnnotation","updateAnnotationPosition","previousCamera","oldFocalPoint","cameraNormal","dotProduct","isElementWithCursor","updateViewportImage","crosshairUIDs","centerSpace","lineLength","_disableCursorEnabled","_getEnabledElement","_annotation$data2","plane","currentMousePosition","closestIndex","normalizedViewPlane","scaledPlaneNormal","viewportsWithAnnotations","ScaleOverlayTool","scaleLocation","viewportCanvasCornersInWorld","thisAnnotation","worldWidthViewport","worldHeightViewport","scaleSizes","currentScaleSize","scaleSize","locationTickOffset","endTick1","endTick2","leftTick","rightTick","canvasScaleSize","tickIds","tickUIDs","tickCoordinates","numberSmallTicks","tickSpacing","locationOffset","pointSet","worldCoordinates","midpointLocation","vscaleBounds","hscaleBounds","scaleCanvasCoordinates","worldDistanceOnCanvas","horizontalReduction","verticalReduction","hReduction","vReduction","locationBounds","canvasBounds","computeScaleBounds","computeScaleSize","computeWorldScaleCoordinates","computeCanvasScaleCoordinates","scaleTicks","computeEndScaleTicks","scaleId","leftTickId","rightTickId","locationTextOffest","textBoxLines","_getTextLines","computeInnerScaleTicks","scaleSizeDisplayValue","scaleSizeUnits","fillInsideRectangle","constraintFn","coord","pointInRectangle","fillRectangle","eraseInsideRectangle","pointInShape","eraseRectangle","RectangleScissorsTool","FILL_INSIDE","ERASE_INSIDE","CircleScissorsTool","SphereScissorsTool","OverlayMarkerType","ANNOTATED_CUBE","AXES","OrientationMarkerTool","orientationWidget","viewportCorner","vtkOrientationMarkerWidget","viewportSize","minPixelSize","maxPixelSize","overlayMarkerType","OVERLAY_MARKER_TYPES","overlayConfiguration","faceProperties","xPlus","faceColor","faceRotation","xMinus","yPlus","fontColor","yMinus","zPlus","zMinus","defaultStyle","fontStyle","fontSizeScale","edgeThickness","edgeColor","resolution","polyDataURL","initViewports","configuration_invalidated","cleanUpData","orientationMarkers","orientationMarker","setEnabled","offscreenMultiRenderWindow","getRenderWindow","addAxisActorInViewport","getRenderer","removeActor","createAnnotationCube","vtkAxesActor","createCustomActor","renderer","renderWindow","interactor","getInteractor","parentRenderer","setViewportCorner","setViewportSize","setMinPixelSize","setMaxPixelSize","updateMarkerOrientation","response","fetch","vtpReader","vtkXMLPolyDataReader","parseAsArrayBuffer","shallowCopy","setActiveScalars","setColorModeToDirectScalars","rotateZ","vtkAnnotatedCubeActor","setDefaultStyle","setXPlusFaceProperty","setXMinusFaceProperty","setYPlusFaceProperty","setYMinusFaceProperty","setZPlusFaceProperty","setZMinusFaceProperty","createAnnotatedCubeActor","axes","annotatedCube","methodName","charAt","isEqual","PaintFillTool","fixedDimension","getFixedDimension","floodFillGetter","getLabelValue","getScalarDataPositionFromPlane","inPlaneSeedPoint","fixedDimensionValue","generateHelpers","clickedLabelValue","floodFillResult","floodFill","scalarDataPosition","getFramesModified","minJ","maxJ","framesModified","seedIndex3D","getScalarDataPosition","generateFloodFillGetter","generateGetScalarDataPositionFromPlane","xDirection","yDirection","zDirection","absoluteOfViewPlaneNormal","absoluteOfXDirection","absoluteOfYDirection","absoluteOfZDirection","VideoRedactionTool","viewportUIDsToRender","toolDataCanvasCoordinate","drawRedactionRectSvg","viewportUID","renderingEngineUID","sceneUID","targetUIDs","targetUID","_getImageVolumeFromTargetUID","vtkImageData","worldToIndexVec3","valueMinusMean","scene","volumeUID","volumeActors","getVolumeActors","coloneIndex","_getTargetStackUID"],"sourceRoot":""}