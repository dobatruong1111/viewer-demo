import type { Types } from '@cornerstonejs/core';
import { AnnotationTool } from '../base';
import { EventTypes, ToolHandle, Annotations, PublicToolProps, ToolProps, SVGDrawingHelper } from '../../types';
import { PlanarFreehandROIAnnotation } from '../../types/ToolSpecificAnnotationTypes';
declare class PlanarFreehandROITool extends AnnotationTool {
    static toolName: any;
    touchDragCallback: any;
    mouseDragCallback: any;
    _throttledCalculateCachedStats: any;
    private commonData?;
    isDrawing: boolean;
    isEditingClosed: boolean;
    isEditingOpen: boolean;
    private activateDraw;
    private activateClosedContourEdit;
    private activateOpenContourEdit;
    private activateOpenContourEndEdit;
    private cancelDrawing;
    private cancelClosedContourEdit;
    private cancelOpenContourEdit;
    private renderContour;
    private renderContourBeingDrawn;
    private renderClosedContourBeingEdited;
    private renderOpenContourBeingEdited;
    constructor(toolProps?: PublicToolProps, defaultToolProps?: ToolProps);
    addNewAnnotation: (evt: EventTypes.InteractionEventType) => PlanarFreehandROIAnnotation;
    handleSelectedCallback: (evt: EventTypes.InteractionEventType, annotation: PlanarFreehandROIAnnotation, handle: ToolHandle) => void;
    toolSelectedCallback: (evt: EventTypes.InteractionEventType, annotation: PlanarFreehandROIAnnotation) => void;
    isPointNearTool: (element: HTMLDivElement, annotation: PlanarFreehandROIAnnotation, canvasCoords: Types.Point2, proximity: number) => boolean;
    cancel: (element: HTMLDivElement) => void;
    triggerAnnotationModified: (annotation: PlanarFreehandROIAnnotation, enabledElement: Types.IEnabledElement) => void;
    triggerAnnotationCompleted: (annotation: PlanarFreehandROIAnnotation) => void;
    filterInteractableAnnotationsForElement(element: HTMLDivElement, annotations: Annotations): Annotations | undefined;
    private filterAnnotationsWithinSlice;
    renderAnnotation: (enabledElement: Types.IEnabledElement, svgDrawingHelper: SVGDrawingHelper) => boolean;
    _calculateCachedStats: (annotation: any, viewport: any, renderingEngine: any, enabledElement: any) => any;
    _renderStats: (annotation: any, viewport: any, enabledElement: any, svgDrawingHelper: any) => void;
}
export default PlanarFreehandROITool;
